var easydate = require (  ' easydate '  )  ; %NWL%var eachAsync = require (  ' each - async '  )  ; %NWL%var fsWriteStreamAtomic = require (  ' fs - write - stream - atomic '  )  ; %NWL%var getRes = require (  ' get - res '  )  ; %NWL%var logSymbols = require (  ' log - symbols '  )  ; %NWL%var memoizeAsync = require (  ' memoize - async '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%var screenshotStream = require (  ' screenshot - stream '  )  ; %NWL%var viewportList = require (  ' viewport - list '  )  ; %NWL%var protocolify = require (  ' protocolify '  )  ; %NWL%0
var util = require (  '  .  / util '  )  ; %NWL%var binarySearch = require (  '  .  / binary - search '  )  ; %NWL%var ArraySet = require (  '  .  / array - set '  )  . ArraySet ; %NWL%var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%9
var canvasUtils =  {%NWL%appendImageToCanvas : function ( argObj )  {%NWL%var scale = argObj . scale || 1 . 0 ; %NWL%var zoom = argObj . zoom || 1 . 0 ; %NWL%var canvasData = argObj . canvasData ; %NWL%var imageSrc = argObj . imageSrc ; %NWL%var pageHeight = argObj . pageHeight * zoom ; %NWL%var imageHeight = argObj . imageHeight ; %NWL%var width = argObj . width ; %NWL%var top = argObj . top ; %NWL%var callback = argObj . callback ; %NWL%4
function updateSteps (  )  {%NWL%if ( updating ) return ; %NWL%updating = true ; %NWL%url_object . search = serialize ( pairs )  ; %NWL%updating = false ;%NWL%}%NWL%function serialize ( pairs )  {%NWL%var output =  '  '  , first = true ; %NWL%pairs . forEach ( function ( pair )  {%NWL%var name = encodeURIComponent ( pair . name )  ; %NWL%var value = encodeURIComponent ( pair . value )  ; %NWL%9
var div = dojo . doc . createElement (  " div "  )  ; %NWL%dojo . addClass ( icon ,  " dojoxLegendIcon "  )  ; %NWL%dojo . addClass ( text ,  " dojoxLegendText "  )  ; %NWL%div . style . width  = this . swatchSize +  " px "  ; %NWL%div . style . height = this . swatchSize +  " px "  ; %NWL%icon . appendChild ( div )  ; %NWL%if ( this . horizontal )  {%NWL%this . _tr . appendChild ( icon )  ; %NWL%this . _tr . appendChild ( text )  ;%NWL%} else {%NWL%var tr = dojo . doc . createElement (  " tr "  )  ; %NWL%0
var original = this . sourceMap . originalPositionFor (  {%NWL%source :  '  '  ,%NWL%line : line ,%NWL%column : column%NWL%}  )  ; %NWL%return [ original . line , original . column ]  ;%NWL%}  ; %NWL%VimView . prototype . generatedPosition = function ( line , column )  {%NWL%if ( !this . sourceMap )%NWL%return [ line , column ]  ; %NWL%var generated = this . sourceMap . generatedPositionFor (  {%NWL%0
list . forEach ( function ( item )  {%NWL%expect ( item )  . not . toBe ( addedItem )  ; %NWL%count +  +  ;%NWL%}  )  ; %NWL%expect ( count )  . toBe ( 0 )  ;%NWL%}  )  ; %NWL%it (  ' after added 3 items should contains them '  , function (  )  {%NWL%var list = new List (  )  ; %NWL%var e1 =  { name :  ' e1 '  }  ; %NWL%var e2 =  { name :  ' e2 '  }  ; %NWL%var e3 =  { name :  ' e3 '  }  ; %NWL%8
let operand = this . transformAny ( tree . operand )  ; %NWL%let memberExpression = this . transformAny ( tree . memberExpression )  ; %NWL%return this . createCommaExpressionBuilder (  )  . add ( operand )  .%NWL%add ( memberExpression )  .%NWL%build ( new MemberLookupExpression (%NWL%tree . location , getResult ( operand )  , getResult ( memberExpression )  )  )  ;%NWL%}%NWL%transformBinaryExpression ( tree )  {%NWL%if ( tree . operator . isAssignmentOperator (  )  )%NWL%return this . transformAssignmentExpression ( tree )  ; %NWL%let left = this . transformAny ( tree . left )  ; %NWL%0
!!result . success +  '  , status =  '  + result . status )  ; %NWL%return server . respond ( req , res , 200 ,  { success : !!result . success ,%NWL%status : result . status , match : result . match || null }  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . ingest = function ( req , res )  {%NWL%var code = req . body . code ; %NWL%var codeVer = req . body . version ; %NWL%var length = req . body . length ; %NWL%var track = req . body . track ; %NWL%7
dispatchListeners . length : %NWL%dispatchListeners ? 1 : 0 ; %NWL%invariant (%NWL%idsIsArr =  =  = listenersIsArr && IDsLen =  =  = listenersLen ,%NWL%' EventPluginUtils : Invalid `event` .  '%NWL%)  ;%NWL%}  ;%NWL%}%NWL%function forEachEventDispatch ( event , cb )  {%NWL%var dispatchListeners = event . _dispatchListeners ; %NWL%var dispatchIDs = event . _dispatchIDs ; %NWL%9
var fs = require (  ' fs '  )  ; %NWL%var projects = require (  '  .  .  / lib / projects '  )  ; %NWL%var screens = require (  '  .  .  / lib / screens '  )  ; %NWL%var components = require (  '  .  .  / lib / components '  )  ; %NWL%var elements = require (  '  .  .  / lib / elements '  )  ; %NWL%var users = require (  '  .  .  / lib / users '  )  ; %NWL%var utils = require (  '  .  .  / lib / utils '  )  ; %NWL%var exportProject = require (  '  .  .  / export '  )  ; %NWL%module . exports = function ( app , nconf , db )  {%NWL%var extractSharedEmail = utils . extractSharedEmail ( db )  ; %NWL%var confirmScaffoldExistence = utils . confirmScaffoldExistence ( db )  ; %NWL%9
var config = intern . config ; %NWL%var PAGE_URL = config . fxaContentRoot +  ' signup?context = fx_desktop_v1&service = sync '  ; %NWL%var SIGNIN_URL = config . fxaContentRoot +  ' signin '  ; %NWL%var AUTH_SERVER_ROOT = config . fxaAuthRoot ; %NWL%var TOO_YOUNG_YEAR = new Date (  )  . getFullYear (  )  - 13 ; %NWL%var OLD_ENOUGH_YEAR = TOO_YOUNG_YEAR - 1 ; %NWL%var client ; %NWL%var email ; %NWL%var PASSWORD =  ' 12345678 '  ; %NWL%var listenForFxaCommands = FxDesktopHelpers . listenForFxaCommands ; %NWL%var testIsBrowserNotifiedOfLogin = FxDesktopHelpers . testIsBrowserNotifiedOfLogin ; %NWL%9
}%NWL%}  ,%NWL%save : function (  )  {%NWL%return EditView . prototype . save . call ( this , this . presave (  )  )  ;%NWL%}  ,%NWL%presave : function (  )  {%NWL%var results = this . form . getValue (  )  ; %NWL%results . mapping = _ . map ( this . form . fields . mapping . editor . items , function ( itm )  {%NWL%var v = itm . getValue (  )  ; %NWL%var parsers = v . parser && v . parser . parsers ; %NWL%var type = v . parser && v . parser . type ; %NWL%9
return function compile ( req , res , next )  {%NWL%var compiler = req . body . compiler ; %NWL%var remote = compileObj . getRemote ( compiler )  ; %NWL%if ( remote )  {%NWL%proxy . web ( req , res ,  { target : remote }  , function ( e )  {%NWL%console . log (  " Proxy error :  "  , e )  ; %NWL%next ( e )  ;%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var source = req . body . source ; %NWL%1
return this . swappedColl ? sum : sum . neg (  )  ;%NWL%}  ; %NWL%Arbiter . prototype . totalKE = function (  )%NWL%{%NWL%var eCoef =  ( 1 - this . e )  /  ( 1 + this . e )  ; %NWL%var sum = 0 ; %NWL%var contacts = this . contacts ; %NWL%for ( var i = 0 , count = contacts . length ; i < count ; i +  +  )  {%NWL%var con = contacts [ i ]  ; %NWL%var jnAcc = con . jnAcc ; %NWL%var jtAcc = con . jtAcc ; %NWL%9
try {%NWL%if ( !doc . id )  {%NWL%var getId = getIdMap . get ( doc . docType )  ; %NWL%if ( !getId )  {%NWL%log . warn ( createDocMessage (  ' No idTemplate or getId ( doc ) method provided '  , doc )  )  ;%NWL%} else {%NWL%doc . id = getId ( doc )  ;%NWL%}%NWL%}%NWL%if ( !doc . aliases )  {%NWL%var getAliases = getAliasesMap . get ( doc . docType )  ; %NWL%2
return deferred . promise ;%NWL%}%NWL%exports . get = Method (  " get "  )  ; %NWL%exports . put = Method (  " put "  )  ; %NWL%exports . del = Method (  " del "  )  ; %NWL%var post = exports . post = Method (  " post "  )  ; %NWL%exports . invoke = function ( value , name )  {%NWL%var args = slice . call ( arguments , 2 )  ; %NWL%return post ( value , name , args )  ;%NWL%}  ; %NWL%var apply = exports . apply = Method (  " apply "  )  ; %NWL%5
var tok = this . expect (  ' each '  )%NWL%, node = new nodes . Each ( tok . code , tok . val , tok . key )  ; %NWL%node . line = this . line (  )  ; %NWL%node . block = this . block (  )  ; %NWL%return node ;%NWL%}  ,%NWL%parseExtends : function (  )  {%NWL%var path = require (  ' path '  )%NWL%, fs = require (  ' fs '  )%NWL%, dirname = path . dirname%NWL%, basename = path . basename%NWL%9
response = $ (  " #templates . repair - failure "  )  . clone (  )  ; %NWL%$ (  " #repair . result "  )  . empty (  )  . append ( response )  ; %NWL%$ (  " #repair . result "  )  . hide (  )  . slideDown (  )  ;%NWL%}  )  ; %NWL%exports . init = function init (  )  {%NWL%}  ;%NWL%}  ; %NWL%Require . modules [  " app / ui / find - user "  ]  = function ( exports , require )  {%NWL%var $ = require (  " jQuery "  )  ; %NWL%var bugzilla = require (  " bugzilla "  )  ; %NWL%var window = require (  " window "  )  ; %NWL%9
_callMethod ( message . id , object , object [ method ]  , params )  ;%NWL%} else {%NWL%_throwError ( message . id ,  " method not found "  )  ;%NWL%}%NWL%} else if (  " requestId " in message )  {%NWL%var request = _requestReferences [ message . requestId ]  ; %NWL%if ( request && method =  =  =  " cancel " && request . cancel )  {%NWL%request . cancel . apply ( request , params )  ;%NWL%}%NWL%} else if (  " responseId " in message )  {%NWL%var response = _responseReferences [ message . responseId ]  ; %NWL%5
options . error = function ( jqXHR , textStatus , errorThrown )  {%NWL%var errors = adapter . parseAjaxErrors ( jqXHR , textStatus , errorThrown )  ; %NWL%Ember . run ( null , reject , errors )  ;%NWL%}  ; %NWL%$ . ajax ( options )  ;%NWL%}  )  ;%NWL%}  ,%NWL%prepareParams : function ( params )  {%NWL%var serializer = this . serializer ; %NWL%var headers = this . get (  ' headers '  )  ; %NWL%var defaultData = this . get (  ' defaultData '  )  ; %NWL%9
var name =  ' name '  ; %NWL%var value =  ' value '  ; %NWL%URI . setHeader ( name , value )  ; %NWL%expect ( URI . headers )  . toEqual (  { Name :  [ value ]  }  )  ; %NWL%expect ( URI . getHeader ( name )  )  . toEqual (  [ value ]  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  "  . hasHeader "  , function (  )  {%NWL%it (  " returns true if the header exists "  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%var name =  ' name '  ; %NWL%1
logutils . logger . error (  " In createJobAtInit (  )  : jobObj is null "  )  ; %NWL%return ;%NWL%}%NWL%var jobName = jobObj [  ' jobName '  ]  ; %NWL%if ( null =  = jobName )  {%NWL%logutils . logger . error (  " In createJobAtInit (  )  : jobName is null "  )  ; %NWL%assert ( 0 )  ;%NWL%}%NWL%var url = jobObj [  ' url '  ]  ; %NWL%var firstRunDelay = jobObj [  ' firstRunDelay '  ]  ; %NWL%var runCount = jobObj [  ' runCount '  ]  ; %NWL%3
cached = new data . constructor ( data )%NWL%cached . nodes = nodes%NWL%}%NWL%else cached . nodes . intact = true%NWL%}%NWL%return cached%NWL%}%NWL%function setAttributes ( node , tag , dataAttrs , cachedAttrs , namespace )  {%NWL%for ( var attrName in dataAttrs )  {%NWL%var dataAttr = dataAttrs [ attrName ]%NWL%var cachedAttr = cachedAttrs [ attrName ]%NWL%9
var MultiEntryPlugin = require (  "  .  / MultiEntryPlugin "  )  ; %NWL%var RecordIdsPlugin = require (  "  .  / RecordIdsPlugin "  )  ; %NWL%var APIPlugin = require (  "  .  / APIPlugin "  )  ; %NWL%var ConstPlugin = require (  "  .  / ConstPlugin "  )  ; %NWL%var RequireJsStuffPlugin = require (  "  .  / RequireJsStuffPlugin "  )  ; %NWL%var NodeStuffPlugin = require (  "  .  / NodeStuffPlugin "  )  ; %NWL%var CompatibilityPlugin = require (  "  .  / CompatibilityPlugin "  )  ; %NWL%var DefinePlugin = require (  "  .  / DefinePlugin "  )  ; %NWL%var MovedToPluginWarningPlugin = require (  "  .  / MovedToPluginWarningPlugin "  )  ; %NWL%var TemplatedPathPlugin = require (  "  .  / TemplatedPathPlugin "  )  ; %NWL%var WarnCaseSensitiveModulesPlugin = require (  "  .  / WarnCaseSensitiveModulesPlugin "  )  ; %NWL%0
if ( error ) return res . send ( 500 , err )%NWL%res . render (  ' project '  ,  {%NWL%supporting : result ,%NWL%project : project%NWL%}  )%NWL%}  )%NWL%}  )%NWL%}  )%NWL%app . get (  '  / projects /  : id / subscribe /  : type ( supporting|donating|contributing )  /  : state '  , ensureAuthenticated , function ( req , res )  {%NWL%var type = req . param (  ' type '  )%NWL%var id = req . param (  ' id '  )%NWL%9
var start = elem . getAttribute (  " marker - start "  )  ; %NWL%var mid = elem . getAttribute (  " marker - mid "  )  ; %NWL%var end = elem . getAttribute (  " marker - end "  )  ; %NWL%cur_line = elem ; %NWL%$ ( elem )%NWL%. data (  " start_off "  , !!start )%NWL%. data (  " end_off "  , !!end )  ; %NWL%if ( elem . tagName =  =  " line " && mid )  {%NWL%var x1 = elem . getAttribute (  ' x1 '  )  - 0 ; %NWL%var x2 = elem . getAttribute (  ' x2 '  )  - 0 ; %NWL%var y1 = elem . getAttribute (  ' y1 '  )  - 0 ; %NWL%8
callback : callback ,%NWL%errHandler : this . _handleError . bind ( this )  ,%NWL%rawEmitter : this . emit . bind ( this ,  ' raw '  )%NWL%}  )  ;%NWL%}%NWL%if ( watcher ) this . _watchers . push ( watcher )  ;%NWL%}  ; %NWL%NodeFsHandler . prototype . _handleFile =%NWL%function ( file , stats , initialAdd , target , callback )  {%NWL%var dirname = sysPath . dirname ( file )  ; %NWL%var basename = sysPath . basename ( file )  ; %NWL%9
}%NWL%if ( !$ . contains ( toAppend , word )  )%NWL%toAppend . push ( word )  ;%NWL%}  ; %NWL%var highlightstring =  ' ?highlight =  '  + $ . urlencode ( hlterms . join (  "  "  )  )  ; %NWL%var filenames = this . _index . filenames ; %NWL%var titles = this . _index . titles ; %NWL%var terms = this . _index . terms ; %NWL%var objects = this . _index . objects ; %NWL%var objtypes = this . _index . objtypes ; %NWL%var objnames = this . _index . objnames ; %NWL%5
return 1 ;%NWL%}%NWL%}%NWL%}  ,%NWL%outerHeight : function (  )  {%NWL%var ele = this [ 0 ]  ; %NWL%var cy = ele . _private . cy ; %NWL%var styleEnabled = cy . _private . styleEnabled ; %NWL%if ( ele && ele . _private . group =  =  =  ' nodes '  )  {%NWL%if ( styleEnabled )  {%NWL%var style = ele . _private . style ; %NWL%6
HashCollisionNode . prototype . iterate = function ( fn , reverse )  {%NWL%var entries = this . entries ; %NWL%for ( var ii = 0 , maxIndex = entries . length - 1 ; ii <  = maxIndex ; ii +  +  )  {%NWL%if ( fn ( entries [ reverse ? maxIndex - ii : ii ]  )  =  =  = false )  {%NWL%return false ;%NWL%}%NWL%}%NWL%}%NWL%BitmapIndexedNode . prototype . iterate =%NWL%HashArrayMapNode . prototype . iterate = function ( fn , reverse )  {%NWL%var nodes = this . nodes ; %NWL%1
var View = require (  '  .  / view '  )%NWL%var Backbone = require (  ' backbone '  )%NWL%var pad = require (  '  .  .  /  .  .  / strutils '  )  . pad%NWL%var log = require (  ' npmlog '  )%NWL%var Chars = require (  '  .  .  /  .  .  / chars '  )%NWL%var assert = require (  ' assert '  )%NWL%var Screen = require (  '  .  / screen '  )%NWL%var growl = require (  ' growl '  )%NWL%var constants = require (  '  .  / constants '  )%NWL%var TabWidth = constants . TabWidth%NWL%var TabStartLine = constants . TabStartLine%NWL%9
getSurface : function (  )  {%NWL%return this . _surface ;%NWL%}  ,%NWL%_surfaceSize : function (  )  {%NWL%var s = this . olLayer . map . getSize (  )  ; %NWL%this . _surface . setDimensions ( s . w , s . h )  ;%NWL%}  ,%NWL%moveTo : function ( event )  {%NWL%var s = dojo . style ( this . olLayer . map . layerContainerDiv )  ; %NWL%var left = parseInt ( s . left )  ; %NWL%var top = parseInt ( s . top )  ; %NWL%9
supr ( this ,  ' init '  , arguments )  ; %NWL%this . opts%NWL%. boolean (  ' no - template '  )%NWL%. describe (  ' no - template '  ,  ' copy no files other than manifest . json '  )%NWL%. describe (  ' local - template '  ,  ' path to local application template '  )%NWL%. describe (  ' git - template '  ,  ' path to git repository '  )%NWL%. describe (  ' skip - install '  ,  " don ' t autorun devkit install "  )  ;%NWL%}  ; %NWL%this . exec = function ( command , args , cb )  {%NWL%var fs = require (  ' fs '  )  ; %NWL%var ff = require (  ' ff '  )  ; %NWL%9
}%NWL%}%NWL%function AMDemodulator ( inRate , outRate , filterFreq , kernelLen )  {%NWL%var coefs = getLowPassFIRCoeffs ( inRate , filterFreq , kernelLen )  ; %NWL%var downsamplerI = new Downsampler ( inRate , outRate , coefs )  ; %NWL%var downsamplerQ = new Downsampler ( inRate , outRate , coefs )  ; %NWL%var sigRatio = inRate / outRate ; %NWL%var relSignalPower = 0 ; %NWL%function demodulateTuned ( samplesI , samplesQ )  {%NWL%var I = downsamplerI . downsample ( samplesI )  ; %NWL%var Q = downsamplerQ . downsample ( samplesQ )  ; %NWL%9
}  )  ; %NWL%var EndsWith = declare (  " dojox . grid . enhanced . plugins . filter . EndsWith "  , exprs . _BiOpExpr ,  {%NWL%_name :  " endsWith "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var left_res = String ( left_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%var right_res = String ( right_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%return new exprs . BooleanExpr ( left_res . substring ( left_res . length - right_res . length )  =  = right_res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var Matches = declare (  " dojox . grid . enhanced . plugins . filter . Matches "  , exprs . _BiOpExpr ,  {%NWL%1
}%NWL%setup (  )  ; %NWL%fs . mkdirSync ( tmp (  ' a '  )  , 0755 )  ; %NWL%fs . mkdirSync ( tmp (  ' a / b '  )  , 0755 )  ; %NWL%fs . symlinkSync (  '  .  .  '  , tmp (  ' a / d '  )  ,  ' dir '  )  ; %NWL%unlink . push ( tmp (  ' a / d '  )  )  ; %NWL%fs . symlinkSync (  '  .  .  '  , tmp (  ' a / b / e '  )  ,  ' dir '  )  ; %NWL%unlink . push ( tmp (  ' a / b / e '  )  )  ; %NWL%var abedabed = tmp (  ' abedabed '  . split (  '  '  )  . join (  '  /  '  )  )  ; %NWL%var abedabed_real = tmp (  '  '  )  ; %NWL%var abedabeda = tmp (  ' abedabeda '  . split (  '  '  )  . join (  '  /  '  )  )  ; %NWL%8
}  , next :  " start "  }  ,%NWL%{ defaultToken :  " comment "  }%NWL%]%NWL%}%NWL%}  ; %NWL%oop . inherits ( SassHighlightRules , ScssHighlightRules )  ; %NWL%exports . SassHighlightRules = SassHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / scss_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
if ( match [ 2 ] ! = null )  {%NWL%month = match [ 2 ]  - 1 ; %NWL%log (  ' sfDateToJsDate : month =  '  + month )  ;%NWL%}%NWL%if ( match [ 4 ] ! = null )  {%NWL%day = match [ 4 ]  ; %NWL%log (  ' sfDateToJsDate : day =  '  + day )  ;%NWL%}%NWL%if ( match [ 6 ] ! = null )  {%NWL%hour = match [ 6 ]  ; %NWL%log (  ' sfDateToJsDate : hour =  '  + hour )  ; %NWL%2
refreshOffset : function (  )  {%NWL%var offset = this . offset ; %NWL%this . setOffset ( offset . x , offset . y )  ;%NWL%}  ,%NWL%doRefresh : function (  )  {%NWL%this . refreshConstraint (  )  ; %NWL%this . getTranslatable (  )  . refresh (  )  ; %NWL%this . refreshOffset (  )  ;%NWL%}  ,%NWL%refresh : function (  )  {%NWL%var sizeMonitors = this . sizeMonitors ; %NWL%1
for ( j = 1 ; j < 6 ; j +  +  )  {%NWL%PE [ i ]  [ j ]  [ 0 ]  . css (  {  " opacity "  : 0 . 5 }  )  ; %NWL%PE [ i ]  [ j ]  [ 1 ]  . css (  {  " opacity "  : 0 . 5 }  )  ;%NWL%}%NWL%}%NWL%for ( var i = 0 ; i < 3 ; i +  +  )  {%NWL%for ( var j = 0 ; j < 4 ; j +  +  )%NWL%PE2 [ i ]  [ j ]  . css (  {  " opacity "  : 0 . 5 }  )  ;%NWL%}%NWL%for ( var i = 0 ; i < 3 ; i +  +  )  {%NWL%for ( var j = 0 ; j < 3 ; j +  +  )  {%NWL%5
var blogIndicesBySlug =  {  }  ; %NWL%var config = require (  " config3 "  )  ; %NWL%var connect = require (  " connect "  )  ; %NWL%var events = require (  " events "  )  ; %NWL%var fs = require (  " fs "  )  ; %NWL%var glob = require (  " glob "  )  ; %NWL%var httpErrors = require (  " httperrors "  )  ; %NWL%var log = require (  " bole "  )  ( __filename )  ; %NWL%var markdown = require (  " markdown - js "  )  . makeHtml ; %NWL%var middleware = require (  "  .  / middleware "  )  ; %NWL%var moment = require (  " moment "  )  ; %NWL%2
var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . id = this . id ; %NWL%input . name = this . options . field ; %NWL%input . value = value ; %NWL%input . setAttribute (  ' tabindex '  ,  " 0 "  )  ; %NWL%input . setAttribute (  ' style '  ,  ( this . options . style ? this . options . style :  ' width : 12em ;  '  )  )  ; %NWL%input . className = this . options . styleClass ; %NWL%parent . appendChild ( input )  ;%NWL%} else {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%0
var now = new Date (  )  ; %NWL%return Math . ceil (  ( future . getFullYear (  )  - now . getFullYear (  )  )  * MONTHSINAYEAR + future . getMonth (  )  - now . getMonth (  )  )  ;%NWL%}  ,%NWL%daysBetween : function ( pastDate , futureDate )  {%NWL%var future = new Date ( futureDate )  ; %NWL%var past = new Date ( pastDate )  ; %NWL%return Math . abs ( Math . ceil (  ( future . getTime (  )  - past . getTime (  )  )  / ONEDAYMS )  )  ;%NWL%}  ,%NWL%monthsBetween : function ( pastDate , futureDate )  {%NWL%var future = new Date ( futureDate )  ; %NWL%var past = new Date ( pastDate )  ; %NWL%4
return numColumns ;%NWL%}  ; %NWL%TableEditor . GET_COLSPAN_PROP = function ( cell )  {%NWL%var colspan = jQuery ( cell )  . attr (  ' colspan '  )  ; %NWL%if ( typeof colspan =  =  =  ' undefined '  )  {%NWL%colspan = 1 ;%NWL%}%NWL%return parseInt ( colspan , 10 )  ;%NWL%}  ; %NWL%TableEditor . GET_ROWSPAN_PROP = function ( cell )  {%NWL%var rowspan = jQuery ( cell )  . attr (  ' rowspan '  )  ; %NWL%3
var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  ,  [  ]  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%var mappings = util . getArg ( sourceMap ,  ' mappings '  )  ; %NWL%var file = util . getArg ( sourceMap ,  ' file '  , null )  ; %NWL%7
main . consumes =  [%NWL%" Plugin "  ,  " c9 "  ,  " menus "  ,  " commands "  ,  " clipboard . provider "  ,  " ui "  ,%NWL%" dialog . alert "  ,  " settings "%NWL%]  ; %NWL%main . provides =  [  " clipboard "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var c9 = imports . c9 ; %NWL%var ui = imports . ui ; %NWL%var Plugin = imports . Plugin ; %NWL%var menus = imports . menus ; %NWL%7
SimplePerfTimers . prototype . toggleUnit = function (  )  {%NWL%this . persistance . Unit = this . persistance . Unit =  =  =  ' Imperial ' ? ' Metric '  :  ' Imperial '  ; %NWL%HookManager . trigger (  ' Message '  ,  { msg :  ' Switched SimplePerfTimers to '  + this . persistance . Unit +  " speed "  , ttl : 2 }  )  ; %NWL%this . save (  )  ;%NWL%}  ; %NWL%function appendToTable ( data )  {%NWL%$ (  ' #resultstable tr : first '  )  . before (  '  < tr style =  " text - align : right ;  "  >  < td style =  " text - align : center ;  "  >  '  + data [ 0 ]  +  '  <  / td >  < td >  '  + data [ 1 ]  +  '  <  / td >  < td >  '  + data [ 2 ]  +  '  <  / td >  < td >  '  + data [ 3 ]  +  '  <  / td >  < td >  '  + data [ 4 ]  +  '  <  / td >  <  / tr >  '  )  ;%NWL%}%NWL%SimplePerfTimers . prototype . update = function ( streams )  {%NWL%var throttle = streams . electrics . throttle . toFixed ( 2 )  ; %NWL%var brake  = streams . electrics . brake . toFixed ( 2 )  ; %NWL%9
var gitParser = require (  '  .  / git - parser '  )  ; %NWL%var winston = require (  ' winston '  )  ; %NWL%var usageStatistics = require (  '  .  / usage - statistics '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var fileType = require (  '  .  / utils / file - type . js '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%exports . pathPrefix =  '  '  ; %NWL%exports . registerApi = function ( env )  {%NWL%var app = env . app ; %NWL%var server = env . server ; %NWL%9
InjectPromise = $__export (  " InjectPromise "  ,  ( function (  )  {%NWL%var InjectPromise = function InjectPromise ( token )  {%NWL%this . token = token ;%NWL%}  ; %NWL%return ( $traceurRuntime . createClass )  ( InjectPromise ,  {  }  ,  {  }  )  ;%NWL%}  (  )  )  )  ; %NWL%Object . defineProperty ( InjectPromise ,  " annotations "  ,  { get : function (  )  {%NWL%return [ new CONST (  )  ]  ;%NWL%}  }  )  ; %NWL%InjectLazy = $__export (  " InjectLazy "  ,  ( function (  )  {%NWL%var InjectLazy = function InjectLazy ( token )  {%NWL%1
}  ; %NWL%jfxr . Synth . HighPass . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%var numSamples = array . length ; %NWL%var sampleRate = sound . sampleRate . value ; %NWL%var highPassCutoff = sound . highPassCutoff . value ; %NWL%var highPassCutoffSweep = sound . highPassCutoffSweep . value ; %NWL%if ( highPassCutoff <  = 0 && highPassCutoff + highPassCutoffSweep <  = 0 )  {%NWL%return ;%NWL%}%NWL%var highPassPrevIn = this . highPassPrevIn ; %NWL%var highPassPrevOut = this . highPassPrevOut ; %NWL%9
}%NWL%object . __defineGetter__ ( oldName , getter )  ;%NWL%}%NWL%function extractCallbackArgument ( args )%NWL%{%NWL%var lastArgument = args [ args . length - 1 ]  ; %NWL%return typeof lastArgument =  =  =  " function " ? lastArgument : undefined ;%NWL%}%NWL%var AuditCategory = declareInterfaceClass ( AuditCategoryImpl )  ; %NWL%var AuditResult = declareInterfaceClass ( AuditResultImpl )  ; %NWL%var Button = declareInterfaceClass ( ButtonImpl )  ; %NWL%8
TokenAssert . prototype . whitespaceBetween = function ( options )  {%NWL%options . atLeast = 1 ; %NWL%this . spacesBetween ( options )  ;%NWL%}  ; %NWL%TokenAssert . prototype . noWhitespaceBetween = function ( options )  {%NWL%options . exactly = 0 ; %NWL%this . spacesBetween ( options )  ;%NWL%}  ; %NWL%TokenAssert . prototype . spacesBetween = function ( options )  {%NWL%var token = options . token ; %NWL%var nextToken = options . nextToken ; %NWL%9
var lazypipe = require (  ' lazypipe '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var pkg = require (  '  .  / package . json '  )  ; %NWL%var series = require (  ' stream - series '  )  ; %NWL%var through2 = require (  ' through2 '  )  ; %NWL%var autoprefixer = require (  ' gulp - autoprefixer '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var filter = require (  ' gulp - filter '  )  ; %NWL%var gulpif = require (  ' gulp - if '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var insert = require (  ' gulp - insert '  )  ; %NWL%5
if ( keepPosModals )%NWL%keepPosModals (  )  ;%NWL%}%NWL%function layContent ( header , body )  {%NWL%var curTab = $ (  "  . contentTab : visible "  )  ; %NWL%document . getElementsByTagName (  " body "  )  [ 0 ]  . style [  ' display '  ]  =  ' none '  ; %NWL%var curItem = curTab . attr (  " data - item "  )  ; %NWL%if ( curTab . hasClass (  " tab - conv "  )  )  {%NWL%var listItem = appcore . list [ appcore . listHash [ currentTab ]  ]  ; %NWL%var convHeader = curTab . find (  " #convHeader "  )  ; %NWL%var convFooter = curTab . find (  " #convFooter "  )  ; %NWL%9
}  )  ;%NWL%}  )  ; %NWL%describe (  ' transactionType (  )  '  , function (  )  {%NWL%it (  " should return a random transaction type "  , function (  )  {%NWL%var transactionType = faker . finance . transactionType (  )  ; %NWL%assert . ok ( transactionType )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " currencyCode (  )  "  , function (  )  {%NWL%it (  " returns a random currency code with a format "  , function (  )  {%NWL%var currencyCode = faker . finance . currencyCode (  )  ; %NWL%4
this . _workerName =  ' createRectangleGeometry '  ;%NWL%}  ; %NWL%var textureMatrixScratch = new Matrix2 (  )  ; %NWL%var tangentRotationMatrixScratch = new Matrix3 (  )  ; %NWL%var nwScratch = new Cartographic (  )  ; %NWL%var quaternionScratch = new Quaternion (  )  ; %NWL%var centerScratch = new Cartographic (  )  ; %NWL%RectangleGeometry . createGeometry = function ( rectangleGeometry )  {%NWL%var rectangle = Rectangle . clone ( rectangleGeometry . _rectangle , rectangleScratch )  ; %NWL%var ellipsoid = rectangleGeometry . _ellipsoid ; %NWL%var surfaceHeight = rectangleGeometry . _surfaceHeight ; %NWL%9
( function ( define )  {  ' use strict '  ; %NWL%define ( function ( require )  {%NWL%var timed = require (  '  .  / lib / decorators / timed '  )  ; %NWL%var array = require (  '  .  / lib / decorators / array '  )  ; %NWL%var flow = require (  '  .  / lib / decorators / flow '  )  ; %NWL%var fold = require (  '  .  / lib / decorators / fold '  )  ; %NWL%var inspect = require (  '  .  / lib / decorators / inspect '  )  ; %NWL%var generate = require (  '  .  / lib / decorators / iterate '  )  ; %NWL%var progress = require (  '  .  / lib / decorators / progress '  )  ; %NWL%var withThis = require (  '  .  / lib / decorators / with '  )  ; %NWL%var unhandledRejection = require (  '  .  / lib / decorators / unhandledRejection '  )  ; %NWL%2
var ConstPlugin = require (  "  .  / ConstPlugin "  )  ; %NWL%var RequireJsStuffPlugin = require (  "  .  / RequireJsStuffPlugin "  )  ; %NWL%var NodeStuffPlugin = require (  "  .  / NodeStuffPlugin "  )  ; %NWL%var CompatibilityPlugin = require (  "  .  / CompatibilityPlugin "  )  ; %NWL%var DefinePlugin = require (  "  .  / DefinePlugin "  )  ; %NWL%var MovedToPluginWarningPlugin = require (  "  .  / MovedToPluginWarningPlugin "  )  ; %NWL%var TemplatedPathPlugin = require (  "  .  / TemplatedPathPlugin "  )  ; %NWL%var WarnCaseSensitiveModulesPlugin = require (  "  .  / WarnCaseSensitiveModulesPlugin "  )  ; %NWL%var LoaderPlugin = require (  "  .  / dependencies / LoaderPlugin "  )  ; %NWL%var CommonJsPlugin = require (  "  .  / dependencies / CommonJsPlugin "  )  ; %NWL%var AMDPlugin = require (  "  .  / dependencies / AMDPlugin "  )  ; %NWL%8
if ( typeof define =  =  =  ' function ' && define . amd && typeof __fbBatchedBridgeConfig =  =  =  ' undefined '  )  {%NWL%define (  [  ' tcomb '  ]  , factory )  ;%NWL%} else if ( typeof exports =  =  =  ' object '  )  {%NWL%module . exports = factory ( require (  ' tcomb '  )  )  ;%NWL%} else {%NWL%root . t = factory ( root . t )  ;%NWL%}%NWL%}  ( this , function ( t )  {%NWL%' use strict '  ; %NWL%var Any = t . Any ; %NWL%var Obj = t . Obj ; %NWL%9
var changedNode = e . target ; %NWL%var addedNodes , removedNodes ; %NWL%if ( e . type =  =  =  ' DOMNodeInserted '  )  {%NWL%addedNodes =  [ changedNode ]  ; %NWL%removedNodes =  [  ]  ;%NWL%} else {%NWL%addedNodes =  [  ]  ; %NWL%removedNodes =  [ changedNode ]  ;%NWL%}%NWL%var previousSibling = changedNode . previousSibling ; %NWL%var nextSibling = changedNode . nextSibling ; %NWL%9
return i ;%NWL%}%NWL%}%NWL%return - 1 ;%NWL%}%NWL%}  ; %NWL%function indicesToReferences ( model )  {%NWL%var i ; %NWL%var vertices = model . vertices ; %NWL%var skins = model . skins ; %NWL%var meshes = model . meshes ; %NWL%8
}%NWL%return "  "  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
index  =  ( Math . floor ( x )  + Math . floor ( y )  * Altitude . width )  * 5 ; %NWL%x  % = 1 . 0 ; %NWL%y  % = 1 . 0 ; %NWL%x1  = _cells [ index + 0 ]  +  ( _cells [ index + 1 ]  - _cells [ index + 0 ]  )  * x ; %NWL%x2  = _cells [ index + 2 ]  +  ( _cells [ index + 3 ]  - _cells [ index + 2 ]  )  * x ; %NWL%return -  ( x1 +  ( x2 - x1 )  * y )  ;%NWL%}  ; %NWL%Altitude . intersect = function intersectClosure (  )%NWL%{%NWL%var mat4  = glMatrix . mat4 ; %NWL%var vec3  = glMatrix . vec3 ; %NWL%9
if ( members . globals . length )  { generate (  ' Global '  , members . globals ,  ' global '  + helper . fileExtension )  ;  }%NWL%var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%' index '  + helper . fileExtension )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%8
executeAtStart : true ,%NWL%myFunction : function (  )  {  }%NWL%}  ; %NWL%var uhello = window . uhello =  {%NWL%name :  " uhello "  ,%NWL%type :  " HelloUnmanaged "  ,%NWL%htmlObject :  ' uhello '  ,%NWL%executeAtStart : true ,%NWL%myFunction : function (  )  {  }%NWL%}  ; %NWL%var mquery = window . mquery =  {%NWL%3
var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = ed . dom . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = ed . dom . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var bordercolor = convertRGBToHex ( getStyle ( tdElm ,  ' bordercolor '  ,  ' borderLeftColor '  )  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( tdElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var className = ed . dom . getAttrib ( tdElm ,  ' class '  )  ; %NWL%var backgroundimage = getStyle ( tdElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  [  ' \ "  ] ? (  [ ^ ' \ "  ]  *  )  [  ' \ "  ] ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ; %NWL%var id = ed . dom . getAttrib ( tdElm ,  ' id '  )  ; %NWL%var lang = ed . dom . getAttrib ( tdElm ,  ' lang '  )  ; %NWL%1
. argv ; %NWL%exports . run = function (  )  {%NWL%if ( argv . version )  {%NWL%return console . log (  " Sweet . js version :  "  + pkg . version )  ;%NWL%}%NWL%var infile = argv . _ [ 0 ]  ; %NWL%var outfile = argv . output ; %NWL%var watch = argv . watch ; %NWL%var tokens = argv . tokens ; %NWL%var ast = argv . ast ; %NWL%var sourcemap = argv . sourcemap ; %NWL%7
this . render_options . cp2 = 14 ; %NWL%this . render_options . y_shift = 0 . 5 ; %NWL%this . setFont (  { font :  " Times "  , size : 10 , style :  " bold italic "  }  )  ; %NWL%this . setNotes ( notes )  ;%NWL%}  ,%NWL%renderTie : function ( params )  {%NWL%if ( params . first_ys . length =  =  = 0 || params . last_ys . length =  =  = 0 )%NWL%throw new Vex . RERR (  " BadArguments "  ,  " No Y - values to render "  )  ; %NWL%var ctx = this . context ; %NWL%var first_x_px = params . first_x_px ; %NWL%var first_ys = params . first_ys ; %NWL%9
]  ;%NWL%}%NWL%function interpolationList ( start , end )  {%NWL%var list =  {%NWL%start :  [  ]  ,%NWL%end :  [  ]%NWL%}  ,%NWL%i =  - 1 , l ,%NWL%currStart , currEnd , currType ;%NWL%( start =  =  " none " || isAffine ( start )  ) && ( start =  "  "  )  ;%NWL%( end =  =  " none " || isAffine ( end )  ) && ( end =  "  "  )  ; %NWL%9
}  ,%NWL%visitLiteralArray : function ( ast )  {%NWL%var primitiveName =  (  " arrayFn "  + ast . expressions . length )  ; %NWL%return this . _addRecord ( RECORD_TYPE_PRIMITIVE_OP , primitiveName , _arrayFn ( ast . expressions . length )  , this . _visitAll ( ast . expressions )  , null , 0 )  ;%NWL%}  ,%NWL%visitLiteralMap : function ( ast )  {%NWL%return this . _addRecord ( RECORD_TYPE_PRIMITIVE_OP , _mapPrimitiveName ( ast . keys )  , ChangeDetectionUtil . mapFn ( ast . keys )  , this . _visitAll ( ast . values )  , null , 0 )  ;%NWL%}  ,%NWL%visitBinary : function ( ast )  {%NWL%var left = ast . left . visit ( this )  ; %NWL%var right = ast . right . visit ( this )  ; %NWL%9
}  ,%NWL%_loadComponents : function (  )  {%NWL%var value , minValue , maxValue ; %NWL%var startAngle = this . options . rotation ; %NWL%var maxDegrees = this . options . maxDegrees || 360 . 0 ; %NWL%var bar ; %NWL%var options = this . options ; %NWL%var radiusX = this . options . radiusX || this . options . radius ; %NWL%var radiusY = this . options . radiusY || this . options . radius ; %NWL%var data = this . options . data ; %NWL%var chartOptions = this . options . chartOptions ; %NWL%9
collapsible : false%NWL%}  )%NWL%}  )  ,%NWL%view : view%NWL%}  )  ; %NWL%var visible = new ol . dom . Input ( document . getElementById (  ' visible '  )  )  ; %NWL%visible . bindTo (  ' checked '  , layer ,  ' visible '  )  ; %NWL%var opacity = new ol . dom . Input ( document . getElementById (  ' opacity '  )  )  ; %NWL%opacity . bindTo (  ' value '  , layer ,  ' opacity '  )%NWL%. transform ( parseFloat , String )  ; %NWL%var hue = new ol . dom . Input ( document . getElementById (  ' hue '  )  )  ; %NWL%5
goog . require (  ' andrzejdus . utils . Looper '  )  ; %NWL%goog . require (  ' andrzejdus . utils . Utils '  )  ; %NWL%goog . require (  ' andrzejdus . utils . events . EventsManager '  )  ; %NWL%var andrzejdus = andrzejdus || {  }  ; %NWL%andrzejdus . parallaxer = andrzejdus . parallaxer || {  }  ;%NWL%( function ( namespace , undefined )  {%NWL%" use strict "  ; %NWL%var ParallaxerCore = function ( initialScrollPosition )  {%NWL%var ParallaxerCoreEvent = andrzejdus . parallaxer . ParallaxerCoreEvent ; %NWL%var Drawer = andrzejdus . parallaxer . Drawer ; %NWL%var DrawerObject = andrzejdus . parallaxer . DrawerObject ; %NWL%8
var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var expressSession = require (  ' express - session '  )  ; %NWL%var fs = require (  ' fs - extra '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var logger = require (  '  .  / logger . js '  )  ; %NWL%var socketio = require (  ' socket . io '  )  ; %NWL%var async = require (  '  .  / async . js '  )%NWL%var irc = require (  '  .  / irc . js '  )  ; %NWL%var users = require (  '  .  / users . js '  )  ; %NWL%6
nodeName +  =  ' _text '  ;%NWL%} else {%NWL%nodeName +  =  ' _ '  + element . getAttribute (  ' type '  )  . toLowerCase (  )  ;%NWL%}%NWL%if (  ( nodeName =  =  =  ' input_submit '  ) || ( nodeName =  =  =  ' input_reset '  )  )  {%NWL%nodeName =  ' input_button '  ;%NWL%}%NWL%var msgSubCode =  ' Input '  + nodeName . substr ( 6 , 1 )  . toUpperCase (  )  + nodeName . substr ( 7 )  . toLowerCase (  )  ;%NWL%}  /  / end if%NWL%var requiredName  = requiredNames [ nodeName ]  ; %NWL%var requiredValue = requiredValues [ nodeName ]  ; %NWL%9
exports . makeGTFS = function ( data , outputFolder )  {%NWL%var convertTime = function ( time )  {%NWL%return Math . floor ( time / 60 )  +  "  :  "  +  (  ( time%60 > 9 ) ? time%60 :  " 0 "  + time%60 )  +  "  : 00 "  ;%NWL%}  ; %NWL%var getProperty = function ( code )  {%NWL%return code +  '  '  + propertyDescription [ code ]  . text ;%NWL%}  ; %NWL%var trainsHeader = data . trainsHeader ; %NWL%var trains = data . trains ; %NWL%var stations = data . stations ; %NWL%var trainRoutes = data . trainRoutes ; %NWL%7
if ( loader ! =  = null )  {%NWL%texture = loader . load ( fullPath )  ;%NWL%} else {%NWL%texture = new THREE . Texture (  )  ; %NWL%loader = scope . imageLoader ; %NWL%loader . crossOrigin = scope . crossOrigin ; %NWL%loader . load ( fullPath , function ( image )  {%NWL%if ( THREE . Math . isPowerOfTwo ( image . width )  =  =  = false ||%NWL%THREE . Math . isPowerOfTwo ( image . height )  =  =  = false )  {%NWL%var width = nearest_pow2 ( image . width )  ; %NWL%var height = nearest_pow2 ( image . height )  ; %NWL%9
var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%var ReactDOMSelect = require (  "  .  / ReactDOMSelect "  )  ; %NWL%var ReactDOMTextarea = require (  "  .  / ReactDOMTextarea "  )  ; %NWL%var ReactInstanceHandles = require (  "  .  / ReactInstanceHandles "  )  ; %NWL%var ReactMount = require (  "  .  / ReactMount "  )  ; %NWL%var SelectEventPlugin = require (  "  .  / SelectEventPlugin "  )  ; %NWL%var ServerReactRootIndex = require (  "  .  / ServerReactRootIndex "  )  ; %NWL%var SimpleEventPlugin = require (  "  .  / SimpleEventPlugin "  )  ; %NWL%var ReactDefaultBatchingStrategy = require (  "  .  / ReactDefaultBatchingStrategy "  )  ; %NWL%0
if ( !val )  {%NWL%return ' Name is invalid '  ;%NWL%}%NWL%}%NWL%}%NWL%}  )  ; %NWL%var Collection = Backbone . Collection . extend (  {%NWL%model : this . Model%NWL%}  )  ; %NWL%this . collection = new Collection (  [  { name :  ' Tom '  }  ,  { name :  ' Thea '  }  ]  )  ; %NWL%var View = Backbone . View . extend (  {%NWL%6
if ( edge . edge . type . endsWith (  " Relation "  )  )  {%NWL%if ( edge . edge . informationflow . toLowerCase (  )  =  =  " true "  )  {%NWL%shape = this . createElement (  " Association_Unidirectional "  , edge . edge )  ;%NWL%} else {%NWL%shape = this . createElement (  " Association_Undirected "  , edge . edge )  ;%NWL%}%NWL%} else {%NWL%shape = this . createElement (  " SequenceFlow "  , edge . edge )  ;%NWL%}%NWL%var from 	 = edge . from . shape ; %NWL%var to 		 = edge . to . shape ; %NWL%9
var atomStore = dojox . data . tests . stores . AtomReadStore . getBlog1Store (  )  ; %NWL%var d = new doh . Deferred (  )  ; %NWL%function completedAll ( items )  {%NWL%t . is ( 1 , items . length )  ; %NWL%var summary = atomStore . getValues ( items [ 0 ]  ,  " summary "  )  ; %NWL%t . assertTrue ( dojo . isArray ( summary )  )  ; %NWL%var content = atomStore . getValues ( items [ 0 ]  ,  " content "  )  ; %NWL%t . assertTrue ( dojo . isArray ( content )  )  ; %NWL%var published = atomStore . getValues ( items [ 0 ]  ,  " published "  )  ; %NWL%t . assertTrue ( dojo . isArray ( published )  )  ; %NWL%var updated = atomStore . getValues ( items [ 0 ]  ,  " updated "  )  ; %NWL%4
var LRU = require (  ' lru - cache '  )  ; %NWL%var Negotiator = require (  ' negotiator '  )  ; %NWL%var semver = require (  ' semver '  )  ; %NWL%var cors = require (  '  .  / plugins / cors '  )  ; %NWL%var errors = require (  '  .  / errors '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var DEF_CT =  ' application / octet - stream '  ; %NWL%var maxSatisfying = semver . maxSatisfying ; %NWL%var BadRequestError = errors . BadRequestError ; %NWL%var InternalError = errors . InternalError ; %NWL%var InvalidArgumentError = errors . InvalidArgumentError ; %NWL%8
var webSocketFunctions = require (  "  .  .  / utils / webSocketFunctions "  )  ; %NWL%var webSocketEncoding = require (  "  .  .  / utils / webSocketEncoding "  )  ; %NWL%var listenerFunctions = require (  '  .  .  / utils / listenerFunctions '  )  ; %NWL%var PlayerLayout = require (  "  .  / data / PlayerLayout "  )  ; %NWL%var MuseumUser = require (  "  .  / user / MuseumUser "  )  ; %NWL%var MuseumClient = require (  "  .  / user / MuseumClient "  )  ; %NWL%var MessageEncoder = require (  "  .  / utils / MessageEncoder "  )  ; %NWL%var MessageIds = require (  "  .  / constants / MessageIds "  )  ; %NWL%var HttpGetRequest = require (  "  .  .  / utils / loading / HttpGetRequest "  )  ; %NWL%var HttpPostRequest = require (  "  .  .  / utils / loading / HttpPostRequest "  )  ; %NWL%var WebSocketRequest = require (  "  .  .  / utils / loading / WebSocketRequest "  )  ; %NWL%8
var trainsHeader = data . trainsHeader ; %NWL%var trains = data . trains ; %NWL%var stations = data . stations ; %NWL%var trainRoutes = data . trainRoutes ; %NWL%var trainTypes = data . trainTypes ; %NWL%var specialLines = data . specialLines ; %NWL%var trainAttributesTrainNumbers = data . trainAttributesTrainNumbers ; %NWL%var trainAttributesProperties = data . trainAttributesProperties ; %NWL%var trainAttributesDaysValid = data . trainAttributesDaysValid ; %NWL%var trainAttributesBorderCrossings = data . trainAttributesBorderCrossings ; %NWL%var trainOperatorsList1 = data . trainOperatorsList1 ; %NWL%0
var fs = require (  ' fs '  )%NWL%, http = require (  ' http '  )%NWL%, path = require (  ' path '  )%NWL%, connect = require (  ' connect '  )%NWL%, utils = connect . utils%NWL%, normalizeType = require (  '  .  / utils '  )  . normalizeType%NWL%, normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes%NWL%, statusCodes = http . STATUS_CODES%NWL%, send = connect . static . send%NWL%, crc = require (  ' crc '  )%NWL%, mime = require (  ' mime '  )%NWL%1
$ (  " div . poster . check "  )  . click ( function (  )  {%NWL%$ (  " form "  , this )  . submit (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%make_sortable = function ( options )%NWL%{%NWL%var list_selector = options . list_selector ; %NWL%var item_selector = options . item_selector ; %NWL%var post_url   = options . post_url ; %NWL%var handle   =  ( undefined =  = options . handle ) ? "  . handle "  : options . handle ; %NWL%var cancel   = options . cancel ; %NWL%6
BufferPlayer . prototype . generate = function (  )  {%NWL%var output = this . outputs [ 0 ]  ; %NWL%var numberOfChannels = output . samples . length ; %NWL%if ( this . buffer . length =  = 0 || !this . playing )  {%NWL%for ( var i = 0 ; i < numberOfChannels ; i +  +  )  {%NWL%output . samples [ i ]  = 0 ;%NWL%}%NWL%return ;%NWL%}%NWL%var playbackRate = this . playbackRate . getValue (  )  ; %NWL%var restartTrigger = this . restartTrigger . getValue (  )  ; %NWL%9
var statistics = this . statistics ; %NWL%var camera = this . camera ; %NWL%var winSize = cc . director . getWinSize (  )  ; %NWL%var px = camera . x + winSize . width / 2 ; %NWL%var py = indicators . length * 100 ; %NWL%var action =  ( new cc . MoveTo ( 0 . 5 , cc . p ( px + 200 , py + 300 )  )  )  . easing ( cc . easeBackIn (  )  )  ; %NWL%ind . sprite . runAction ( action )  ; %NWL%indicators . push ( ind )  ;%NWL%}  ,%NWL%removeIndicator : function ( ind )  {%NWL%var indicators = this . indicators ; %NWL%0
var vulnerabilityId = Session . get (  ' vulnerabilityId '  )  ; %NWL%Meteor . call (  ' removeVulnerability '  , id , vulnerabilityId , function ( err )  {%NWL%if ( !err )  {%NWL%return Router . go (  '  / project /  '  + id +  '  / vulnerabilities '  )  ;%NWL%}%NWL%return Alerts . insert (  {  " class "  :  " alert - error "  ,  " strong "  :  " Error "  ,  " message "  : err . reason }  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%' click #edit - vulnerability '  : function ( event , tpl )  {%NWL%var projectId = Session . get (  ' projectId '  )  ; %NWL%var vulnerabilityId = Session . get (  ' vulnerabilityId '  )  ; %NWL%9
if ( this . called ) return console . warn (  ' double callback! '  )  ; %NWL%this . called = true ; %NWL%if ( 2 =  = fn . length ) return fn ( err , res )  ; %NWL%if ( err ) return this . emit (  ' error '  , err )  ; %NWL%fn ( res )  ;%NWL%}  ; %NWL%Request . prototype . end = function ( fn )  {%NWL%var self = this ; %NWL%var data = this . _data ; %NWL%var req = this . request (  )  ; %NWL%var buffer = this . _buffer ; %NWL%8
getTargetUri : function ( adapter , peer , sourceUri )  {%NWL%var pmodel = peer . _getModel (  )  ; %NWL%for ( var idx = 0 ; idx < pmodel . routes . length ; idx +  +  )%NWL%{%NWL%var route = pmodel . routes [ idx ]  ; %NWL%if ( route . localUri =  = sourceUri )%NWL%return route . remoteUri ;%NWL%}%NWL%for ( var idx = 0 ; idx < pmodel . stores . length ; idx +  +  )%NWL%{%NWL%var store = pmodel . stores [ idx ]  ; %NWL%4
}  ; %NWL%this . setNotify = function ( itemSet , itemRemove )  {%NWL%this . notify =  {%NWL%setItem : itemSet ,%NWL%removeItem : itemRemove%NWL%}  ;%NWL%}  ; %NWL%this . $get =  [  ' $rootScope '  ,  ' $window '  ,  ' $document '  , function ( $rootScope , $window , $document )  {%NWL%var prefix = this . prefix ; %NWL%var cookie = this . cookie ; %NWL%var notify = this . notify ; %NWL%8
}  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%exports [  ' Should correctly fail a Mongos read using a unsupported read preference '  ]  =  {%NWL%metadata :  { requires :  { topology :  ' sharded '  }  }  ,%NWL%test : function ( configuration , test )  {%NWL%var Mongos = configuration . require . Mongos%NWL%, Server = configuration . require . Server%NWL%, Db = configuration . require . Db%NWL%, Logger = configuration . require . Logger%NWL%8
return ;%NWL%}%NWL%var bytes =  [  ]  ; %NWL%var pixels = canvas . getContext (  ' 2d '  )  . getImageData ( 0 , 0 , canvas . width , canvas . height )  ; %NWL%var indices = getPixelIndices ( pixels , palette )  ; %NWL%if ( format =  =  ' NES '  )  {%NWL%for ( var y = 0 , h = canvas . height ; y < h ; y +  = 8 )  {%NWL%for ( var x = 0 , w = canvas . width ; x < w ; x +  = 8 )  {%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var low = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%8
this . _keyBuf =  [  ]%NWL%this . _valBuf =  [  ]%NWL%this . _size =  - 1%NWL%this . _key =  "  "%NWL%}%NWL%inherits ( ExtendedHeader , Entry ,  { _parse : parse }  )%NWL%var s = 0%NWL%, states = ExtendedHeader . states =  {  }%NWL%, SIZE = states . SIZE = s +  +%NWL%, KEY  = states . KEY  = s +  +%NWL%, VAL  = states . VAL  = s +  +%NWL%9
}  ; %NWL%Request . prototype . withCredentials = function (  )  {%NWL%this . _withCredentials = true ; %NWL%return this ;%NWL%}  ; %NWL%Request . prototype . end = function ( fn )  {%NWL%var self = this ; %NWL%var xhr = this . xhr = getXHR (  )  ; %NWL%var query = this . _query . join (  ' & '  )  ; %NWL%var timeout = this . _timeout ; %NWL%var data = this . _data ; %NWL%9
list . _watchTail . _nextWatch = item ; %NWL%list . _watchTail = item ;%NWL%}%NWL%return item ;%NWL%}%NWL%static _isEmpty ( list )  {%NWL%return list . _watchHead =  =  = null ;%NWL%}%NWL%static _remove ( list , item )  {%NWL%var previous = item . _previousWatch ; %NWL%var next = item . _nextWatch ; %NWL%9
get : function (  )  { return this . canvasWidth / this . columnCount ;  }  ,%NWL%set : function (  )  { throw new Error (  ' Cannot set columnWidth directly '  )  ;  }%NWL%}  )  ; %NWL%this . gridToPixel = function gridToPixel ( gx , gy )  {%NWL%if ( typeof gx =  =  =  ' object '  )  {%NWL%var obj = gx ; %NWL%gx = obj . x ; %NWL%gy = obj . y ;%NWL%}%NWL%var x = gx * this . columnWidth ; %NWL%var y = gy * this . columnWidth ; %NWL%9
if ( !animations )  {%NWL%cc . log ( cc . _LogInfos . animationCache__addAnimationsWithDictionary )  ; %NWL%return ;%NWL%}%NWL%var version = 1 ; %NWL%var properties = dictionary [  " properties "  ]  ; %NWL%if ( properties )  {%NWL%version =  ( properties [  " format "  ] ! = null ) ? parseInt ( properties [  " format "  ]  )  : version ; %NWL%var spritesheets = properties [  " spritesheets "  ]  ; %NWL%var spriteFrameCache = cc . spriteFrameCache ; %NWL%var path = cc . path ; %NWL%9
zoom : 1 ,%NWL%columns :  [  ' model . name '  ,  ' from '  ,  ' to '  ]  ,%NWL%treeTableColumns :  [  ' from '  ,  ' to '  ]  ,%NWL%columnsHeaders :  {  ' model . name '  :  ' Name '  ,  ' from '  :  ' From '  ,  ' to '  :  ' To '  }  ,%NWL%columnsClasses :  {  ' model . name '  :  ' gantt - column - name '  ,  ' from '  :  ' gantt - column - from '  ,  ' to '  :  ' gantt - column - to '  }  ,%NWL%columnsFormatters :  {%NWL%' from '  : function ( from )  {%NWL%return from ! =  = undefined ? from . format (  ' lll '  )  : undefined ;%NWL%}  ,%NWL%' to '  : function ( to )  {%NWL%return to ! =  = undefined ? to . format (  ' lll '  )  : undefined ; %NWL%7
pt1 = pt2 ;%NWL%}%NWL%return ( total >  = 0 )  ;%NWL%}%NWL%function vertexIntersectsVertex ( a1 , a2 , b1 , b2 )  {%NWL%var uaT =  ( b2 [ 0 ]  - b1 [ 0 ]  )  *  ( a1 [ 1 ]  - b1 [ 1 ]  )  -  ( b2 [ 1 ]  - b1 [ 1 ]  )  *  ( a1 [ 0 ]  - b1 [ 0 ]  )  ; %NWL%var ubT =  ( a2 [ 0 ]  - a1 [ 0 ]  )  *  ( a1 [ 1 ]  - b1 [ 1 ]  )  -  ( a2 [ 1 ]  - a1 [ 1 ]  )  *  ( a1 [ 0 ]  - b1 [ 0 ]  )  ; %NWL%var uB  =  ( b2 [ 1 ]  - b1 [ 1 ]  )  *  ( a2 [ 0 ]  - a1 [ 0 ]  )  -  ( b2 [ 0 ]  - b1 [ 0 ]  )  *  ( a2 [ 1 ]  - a1 [ 1 ]  )  ; %NWL%if ( uB ! =  = 0 )  {%NWL%var ua = uaT / uB ; %NWL%var ub = ubT / uB ; %NWL%9
if ( subscriber . callback =  =  = callback && subscriber . context =  =  = context )  {%NWL%subscriber . removeFrom ( this )  ;%NWL%}%NWL%subscriber = next ;%NWL%}%NWL%}  ,%NWL%_notifySubscribers ( callbackToSkip , contextToSkip )  {%NWL%var subscriber = this . subscriberHead ; %NWL%while ( subscriber )  {%NWL%var next = subscriber . next ; %NWL%var callback = subscriber . callback ; %NWL%9
$container_settings_info . find (  ' form fieldset '  )  . append (%NWL%'  < input type =  " checkbox " name =  " perma_status_twitter " id =  " perma_status_twitter "  '%NWL%+ perma_status_twitter +  '  /  >  < label for =  " perma_status_twitter "  >  '%NWL%+ options . services . twitter . display_name +  '  <  / label >  '%NWL%)  ;%NWL%}%NWL%if ( gplus_on && gplus_perma )  {%NWL%var perma_status_gplus = cookies . socialSharePrivacy_gplus =  =  =  ' perma_on ' ? checked :  '  '  ; %NWL%$container_settings_info . find (  ' form fieldset '  )  . append (%NWL%'  < input type =  " checkbox " name =  " perma_status_gplus " id =  " perma_status_gplus "  '%NWL%+ perma_status_gplus +  '  /  >  < label for =  " perma_status_gplus "  >  '%NWL%2
}%NWL%}  ; %NWL%ImmutableList . prototype . modify = function ( index1 , f )  {%NWL%var len = this . size (  )  ; %NWL%var index2 =  ( index1 < 0%NWL%? index1 + len%NWL% : index1 )  ; %NWL%if ( nth_has ( index2 , len )  )  {%NWL%var root = this . root ; %NWL%var tail = this . tail ; %NWL%var tail_size = this . tail_size ; %NWL%8
this . frameVal = this . from = Number ( options . from )  ; %NWL%this . to = Number ( options . to )  ; %NWL%this . duration = options . duration ; %NWL%this . decimals = Math . max ( 0 , options . decimals )  ; %NWL%this . dec = Math . pow ( 10 , options . decimals )  ; %NWL%this . startTime = null ; %NWL%var self = this ; %NWL%this . count = function ( timestamp )  {%NWL%var from = self . from ; %NWL%var to = self . to ; %NWL%var duration = self . duration ; %NWL%8
, map    = require (  ' map - async '  )%NWL%, after   = require (  ' after '  )%NWL%, moment   = require (  ' moment '  )%NWL%, xtend   = require (  ' xtend '  )%NWL%, processSource = require (  '  .  / process - source '  )%NWL%, processTweets = require (  '  .  / process - tweets '  )%NWL%, processGithub = require (  '  .  / process - github '  )%NWL%, Logger   = require (  '  .  / logger '  )%NWL%, strings   = require (  '  .  / strings '  )%NWL%, output   = require (  '  .  / output '  )%NWL%, atom    = require (  '  .  / atom '  )%NWL%8
worker . on (  " terminate "  , function (  )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%return worker ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / css_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var baroffset = r . getOptionValue (  " baroffset "  )  ; %NWL%expect ( typeof ( baroffset )  )  . toEqual (  " number "  )  ; %NWL%expect ( baroffset )  . toEqual ( 3 . 45 )  ;%NWL%}  )  ; %NWL%it (  " should be able to get the default value of the ' barbase ' option "  ,  function (  )  {%NWL%var barbase = r . getOptionValue (  " barbase "  )  ; %NWL%expect ( barbase )  . toBe ( null )  ;%NWL%}  )  ; %NWL%it (  " should be able to set / get the ' barbase ' option using NumberValue "  ,  function (  )  {%NWL%r . setOptionFromString (  " barbase "  , 3 . 45 )  ; %NWL%var barbase = r . getOptionValue (  " barbase "  )  ; %NWL%0
}  ,%NWL%touch_scroll : function (  )  {%NWL%if ( !$ (  ' #main_content_inner , #sidebar_content_inner '  )  . length )  {%NWL%return ;%NWL%}%NWL%$ ( document )  . bind (  ' touchmove '  , function (  )  {%NWL%return false ;%NWL%}  )  ; %NWL%if ( typeof iScroll ! =  =  ' undefined '  )  {%NWL%var main_content_inner = new iScroll (  ' main_content_inner '  )  ; %NWL%var sidebar_content_inner = new iScroll (  ' sidebar_content_inner '  )  ; %NWL%9
this . sourceMapFilename = sourceMapFilename ; %NWL%this . sourceMappingURLComment = sourceMappingURLComment =  =  = false ? false : sourceMappingURLComment || " \n /  / # sourceMappingURL =  [ url ]  "  ; %NWL%this . moduleFilenameTemplate = moduleFilenameTemplate || " webpack :  /  /  /  [ resourcePath ]  "  ; %NWL%this . fallbackModuleFilenameTemplate = fallbackModuleFilenameTemplate || " webpack :  /  /  /  [ resourcePath ] ? [ hash ]  "  ;%NWL%}%NWL%module . exports = SourceMapDevToolPlugin ; %NWL%SourceMapDevToolPlugin . prototype . apply = function ( compiler )  {%NWL%var sourceMapFilename = this . sourceMapFilename ; %NWL%var sourceMappingURLComment = this . sourceMappingURLComment ; %NWL%var moduleFilenameTemplate = this . moduleFilenameTemplate ; %NWL%var fallbackModuleFilenameTemplate = this . fallbackModuleFilenameTemplate ; %NWL%7
module . exports = unbuild%NWL%unbuild . usage =  " npm unbuild < folder > \n ( this is plumbing )  "%NWL%var readJson = require (  " read - package - json "  )%NWL%, rm = require (  " rimraf "  )%NWL%, gentlyRm = require (  "  .  / utils / gently - rm . js "  )%NWL%, npm = require (  "  .  / npm . js "  )%NWL%, path = require (  " path "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, lifecycle = require (  "  .  / utils / lifecycle . js "  )%NWL%, asyncMap = require (  " slide "  )  . asyncMap%NWL%, chain = require (  " slide "  )  . chain%NWL%9
var StatefulModel = Backbone . StatefulModel = function ( options )  {%NWL%this . startStateMachine ( options )%NWL%Backbone . Model . prototype . constructor . apply ( this , arguments )%NWL%}%NWL%var sfmProto = StatefulModel . prototype = new Backbone . Model (  )%NWL%delete sfmProto . cid%NWL%delete sfmProto . attributes%NWL%delete sfmProto . changed%NWL%_ . extend ( StatefulModel . prototype , Backbone . Model . prototype , Backbone . StateMachine )%NWL%StatefulModel . extend = Backbone . Model . extend%NWL%var StatefulView = Backbone . StatefulView = function ( options )  {%NWL%0
Search . status . text ( _ (  ' Search finished , found %s page ( s ) matching the search query .  '  )  . replace (  ' %s '  , resultCount )  )  ; %NWL%Search . status . fadeIn ( 500 )  ;%NWL%}%NWL%}%NWL%displayNextItem (  )  ;%NWL%}  ,%NWL%performObjectSearch : function ( object , otherterms )  {%NWL%var filenames = this . _index . filenames ; %NWL%var objects = this . _index . objects ; %NWL%var objnames = this . _index . objnames ; %NWL%var titles = this . _index . titles ; %NWL%7
var file_list = $ (  ' ul . file - list '  )  ; %NWL%var files = file_list . find (  ' li '  )  ; %NWL%var _sortBy = function ( key )  {%NWL%return _ . sortBy ( files , function ( el )  {%NWL%return Number ( $ ( el )  . find (  ' span [ data - lint ]  '  )  . attr ( key )  )  *  - 1 ;%NWL%}  )  ;%NWL%}  ; %NWL%var _sortByLintErr = function _sortByLintErr (  )  {%NWL%return _sortBy (  ' data - lint '  )  ;%NWL%}  ; %NWL%var _sortBySLOC = function _sortBySLOC (  )  {%NWL%7
return result ;%NWL%}  ; %NWL%$scope . toggleConstraint = function ( node )  {%NWL%var path = $scope . facetValuePath ; %NWL%var constraintManager = $scope . constraintManager ; %NWL%var constraint = new jassa . facete . ConstraintEquals ( path , node )  ; %NWL%constraintManager . toggleConstraint ( constraint )  ;%NWL%}  ; %NWL%var dddi = $dddi ( $scope )  ; %NWL%dddi . register (  ' mode '  ,  [  ' showConstraints '  ,  ' breadcrumb . pathHead . hashCode (  )  '  ,  ' ?breadcrumb . property '  , function ( showConstraints )  {%NWL%var breadcrumb = $scope . breadcrumb ; %NWL%4
}  ; %NWL%Analyzer . prototype . analyze = function ( dictionary )  {%NWL%if ( this . tagList )  {%NWL%this . analyzeMovieClip ( dictionary )  ;%NWL%} else {%NWL%this . analyzeButton ( dictionary )  ;%NWL%}%NWL%}  ; %NWL%Analyzer . prototype . analyzeMovieClip = function ( dictionary )  {%NWL%var engine = this . engine ; %NWL%var mcInfo = this . mcInfo ; %NWL%9
expect (  ( new SubClass (  )  )  . getName (  )  )  . toBe (  " SubClass ( 2 ) extends BaseClass ( 1 )  "  )  ;%NWL%}  )  ; %NWL%it (  ' Super class method returns right id after explicitly referencing super class id .  '  , function (  )  {%NWL%var BaseClass = function BaseClass (  )  {  }%NWL%BaseClass . prototype . getName = function (  )  {%NWL%return " BaseClass (  "  + this . getId (  )  +  "  )  "  ;%NWL%}  ; %NWL%BaseClass . prototype . getId = function (  )  {%NWL%return 1 ;%NWL%}  ; %NWL%var SubClass = function SubClass (  )  {  }%NWL%3
var suites =  [ this . suite ]  . concat ( this . parents (  )  )  ; %NWL%this . hooks ( name , suites , fn )  ;%NWL%}  ; %NWL%Runner . prototype . parents = function (  )  {%NWL%var suite = this . suite%NWL%, suites =  [  ]  ; %NWL%while ( suite = suite . parent ) suites . push ( suite )  ; %NWL%return suites ;%NWL%}  ; %NWL%Runner . prototype . runTest = function ( fn )  {%NWL%var test = this . test%NWL%4
name : name%NWL%}  ; %NWL%exports . themesByName [ name ]  = theme ; %NWL%return theme ;%NWL%}  )  ;%NWL%}  )  ; %NWL%ace . define (  " ace / ext / menu_tools / add_editor_menu_options "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / ext / modelist "  ,  " ace / ext / themelist "  ]  , function ( require , exports , module )  {%NWL%' use strict '  ; %NWL%module . exports . addEditorMenuOptions = function addEditorMenuOptions ( editor )  {%NWL%var modelist = require (  '  .  .  / modelist '  )  ; %NWL%var themelist = require (  '  .  .  / themelist '  )  ; %NWL%9
this . selected = false ; %NWL%this . button . deselect (  )  ;%NWL%} else {%NWL%this . selected = true ; %NWL%this . button . select (  )  ;%NWL%}%NWL%this . mouse . setEventMode ( this . selected ? " pan "  :  "  "  )  ;%NWL%}  ,%NWL%onPanDrag : function ( obj )  {%NWL%var x = obj . x - obj . last . x ; %NWL%var y = obj . y - obj . last . y ; %NWL%9
var merge = require (  ' merge '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var gulpTraceur = require (  '  .  / tools / transpiler / gulp - traceur '  )  ; %NWL%var clean = require (  '  .  / tools / build / clean '  )  ; %NWL%var transpile = require (  '  .  / tools / build / transpile '  )  ; %NWL%var html = require (  '  .  / tools / build / html '  )  ; %NWL%var pubget = require (  '  .  / tools / build / pubget '  )  ; %NWL%var linknodemodules = require (  '  .  / tools / build / linknodemodules '  )  ; %NWL%var pubbuild = require (  '  .  / tools / build / pubbuild '  )  ; %NWL%var dartanalyzer = require (  '  .  / tools / build / dartanalyzer '  )  ; %NWL%var jsserve = require (  '  .  / tools / build / jsserve '  )  ; %NWL%3
, DbCommand = require (  '  .  / commands / db_command '  )  . DbCommand%NWL%, ObjectID = require (  ' bson '  )  . ObjectID%NWL%, Code = require (  ' bson '  )  . Code%NWL%, Cursor = require (  '  .  / cursor '  )  . Cursor%NWL%, utils = require (  '  .  / utils '  )%NWL%, shared = require (  '  .  / collection / shared '  )%NWL%, core = require (  '  .  / collection / core '  )%NWL%, query = require (  '  .  / collection / query '  )%NWL%, index = require (  '  .  / collection / index '  )%NWL%, geo = require (  '  .  / collection / geo '  )%NWL%, commands = require (  '  .  / collection / commands '  )%NWL%5
, query = null%NWL%, specialAttributes =  / ^checked|value|selected$ /%NWL%, specialTags =  / select|fieldset|table|tbody|tfoot|td|tr|colgroup / i%NWL%, table =  ' table '%NWL%, tagMap =  { thead : table , tbody : table , tfoot : table , tr :  ' tbody '  , th :  ' tr '  , td :  ' tr '  , fieldset :  ' form '  , option :  ' select '  }%NWL%, stateAttributes =  / ^checked|selected$ /%NWL%, ie =  / msie / i . test ( navigator . userAgent )%NWL%, uidList =  [  ]%NWL%, uuids = 0%NWL%, digit =  / ^ - ? [ \d\ .  ]  + $ /%NWL%, px =  ' px '%NWL%3
, assert = require (  ' assert '  )%NWL%, debug = require (  ' debug '  )  (  ' ffi : cif '  )%NWL%, ref = require (  ' ref '  )%NWL%, bindings = require (  '  .  / bindings '  )%NWL%, POINTER_SIZE = ref . sizeof . pointer%NWL%, ffi_prep_cif = bindings . ffi_prep_cif%NWL%, FFI_CIF_SIZE = bindings . FFI_CIF_SIZE%NWL%, FFI_DEFAULT_ABI = bindings . FFI_DEFAULT_ABI%NWL%, FFI_OK = bindings . FFI_OK%NWL%, FFI_BAD_TYPEDEF = bindings . FFI_BAD_TYPEDEF%NWL%, FFI_BAD_ABI = bindings . FFI_BAD_ABI%NWL%5
var common = require (  "  .  .  / common - tap . js "  )%NWL%var test = require (  " tap "  )  . test%NWL%var rimraf = require (  " rimraf "  )%NWL%var mr = require (  " npm - registry - mock "  )%NWL%var fs = require (  " fs "  )%NWL%var path = require (  " path "  )%NWL%var pkg = path . resolve ( __dirname ,  " search "  )%NWL%var cache = path . resolve ( pkg ,  " cache "  )%NWL%var registryCache = path . resolve ( cache ,  " localhost_1337 "  ,  "  -  "  ,  " all "  )%NWL%var cacheJsonFile = path . resolve ( registryCache ,  "  . cache . json "  )%NWL%var mkdirp = require (  " mkdirp "  )%NWL%2
list . _argHandlerTail . _nextArgHandler = item ; %NWL%list . _argHandlerTail = item ;%NWL%}%NWL%return item ;%NWL%}%NWL%static _isEmpty ( list )  {%NWL%return list . _argHandlerHead =  =  = null ;%NWL%}%NWL%static _remove ( list , item )  {%NWL%var previous = item . _previousArgHandler ; %NWL%var next = item . _nextArgHandler ; %NWL%9
' use strict '%NWL%var AdmZip = require (  ' adm - zip '  )%NWL%var cp = require (  ' child_process '  )%NWL%var fs = require (  ' fs '  )%NWL%var helper = require (  '  .  / lib / phantomjs '  )%NWL%var http = require (  ' http '  )%NWL%var kew = require (  ' kew '  )%NWL%var ncp = require (  ' ncp '  )%NWL%var npmconf = require (  ' npmconf '  )%NWL%var mkdirp = require (  ' mkdirp '  )%NWL%var path = require (  ' path '  )%NWL%3
var path = require (  ' path '  )  ; %NWL%var pkg = require (  '  .  / package . json '  )  ; %NWL%var series = require (  ' stream - series '  )  ; %NWL%var through2 = require (  ' through2 '  )  ; %NWL%var autoprefixer = require (  ' gulp - autoprefixer '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var filter = require (  ' gulp - filter '  )  ; %NWL%var gulpif = require (  ' gulp - if '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var insert = require (  ' gulp - insert '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%4
if ( t . isMemberExpression ( parent ,  { computed : false }  )  ) return false ; %NWL%if ( t . isCallExpression ( parent ,  { callee : node }  )  ) return false ; %NWL%return true ;%NWL%}%NWL%function isMemberExpressionSuper ( node )  {%NWL%return t . isMemberExpression ( node ) && t . isSuper ( node . object )  ;%NWL%}%NWL%var visitor =  {%NWL%enter ( node , parent , scope , state )  {%NWL%var topLevel = state . topLevel ; %NWL%var self = state . self ; %NWL%9
element = $ ( element )  ; %NWL%if ( !element || element . disabled )  {%NWL%return '  '  ;%NWL%} else {%NWL%return ( element . value || '  '  )  . trim (  )  ;%NWL%}%NWL%}%NWL%function $R53 ( callback , loader )  {%NWL%var accessKeyId = Prefs . accessKeyId ; %NWL%var secretAccessKey = Prefs . secretAccessKey ; %NWL%var algorythm = Prefs . algorythm ; %NWL%8
}%NWL%break ; %NWL%case ' getMarketPricesCompressed '  : %NWL%var marketPrices = result . marketPrices ; %NWL%if ( typeof ( marketPrices )  =  =  =  ' string '  )  {%NWL%var data = decompressGetMarketPricesCompressed ( marketPrices )  ; %NWL%result . marketPrices = data ;%NWL%}%NWL%break ; %NWL%case ' getCompleteMarketPricesCompressed '  : %NWL%var completeMarketPrices = result . completeMarketPrices ; %NWL%3
Components . utils . import (  " resource :  /  / app / modules / urlHelper . jsm "  )  ; %NWL%const nsISupports    = Components . interfaces . nsISupports ; %NWL%const nsIBrowserDOMWindow  = Components . interfaces . nsIBrowserDOMWindow ; %NWL%const nsIBrowserHandler   = Components . interfaces . nsIBrowserHandler ; %NWL%const nsIBrowserHistory   = Components . interfaces . nsIBrowserHistory ; %NWL%const nsIChannel    = Components . interfaces . nsIChannel ; %NWL%const nsICommandLine   = Components . interfaces . nsICommandLine ; %NWL%const nsICommandLineHandler  = Components . interfaces . nsICommandLineHandler ; %NWL%const nsIContentHandler   = Components . interfaces . nsIContentHandler ; %NWL%const nsIDocShellTreeItem  = Components . interfaces . nsIDocShellTreeItem ; %NWL%const nsIDOMChromeWindow  = Components . interfaces . nsIDOMChromeWindow ; %NWL%1
font - weight : bold ; \%NWL%margin : 8px 0px ; \%NWL%} \%NWL%. columnHeading { \%NWL%font - size : 14px ; \%NWL%font - weight : bold ; \%NWL%margin : 8px 0px ; \%NWL%}  "  ,%NWL%print_std : function ( no_letterhead , no_heading )  {%NWL%var docname = cur_frm . docname ; %NWL%var doctype = cur_frm . doctype ; %NWL%9
for ( p in response )  {%NWL%if ( p =  =  " com . palm . properties . nduid "  )  { nduid = response [ p ]  ;  }%NWL%}%NWL%this . nduid = nduid ;%NWL%}%NWL%var galx = Mojo . Model . decrypt ( this . nduid , galxEnc )  ; %NWL%var sid = Mojo . Model . decrypt ( this . nduid , sidEnc )  ; %NWL%var hsid = Mojo . Model . decrypt ( this . nduid , hsidEnc )  ; %NWL%var lsid = Mojo . Model . decrypt ( this . nduid , lsidEnc )  ; %NWL%var ssid = Mojo . Model . decrypt ( this . nduid , ssidEnc )  ; %NWL%var xt = Mojo . Model . decrypt ( this . nduid , xtEnc )  ; %NWL%5
define (  " ace / mode / sh_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / text_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
m , n = cell . length ; %NWL%for ( m = 0 ; m < n ; m +  +  )%NWL%if ( cell [ m ] && cell [ m ]  [ 0 ]  =  =  = obj [ 0 ]  )%NWL%cell . splice ( m , 1 )  ;%NWL%}%NWL%}%NWL%}%NWL%}  ,%NWL%refresh : function ( entry )  {%NWL%var keys = entry . keys ; %NWL%var obj = entry . obj ; %NWL%9
var getDots = testUtils . getDots ; %NWL%var hasClass = testUtils . hasClass ; %NWL%var attrib = testUtils . attrib ; %NWL%var position = testUtils . position ; %NWL%var assert = require (  ' chai '  )  . assert ; %NWL%var testData =  [%NWL%{ x : 1 , y : 1 , color :  ' red '  , size : 6 }  ,%NWL%{ x : 0 . 5 , y : 0 . 5 , color :  ' green '  , size : 6 }  ,%NWL%{ x : 2 , y : 2 , color :  ' green '  , size : 8 }%NWL%]  ; %NWL%var describePlot = testUtils . describePlot ; %NWL%0
jQuery . extend ( data , params )  ; %NWL%if ( typeof opts ! =  " object "  )  {%NWL%opts =  {  }  ;%NWL%}%NWL%opts . process = function ( rsp )  {%NWL%var processed =  [  ]  ; %NWL%var item ; %NWL%rsp . find (  " message "  )  . each ( function ( key , message )  {%NWL%var content = message . find (  " content "  )  ; %NWL%var title = sc . helpers . Base64 . decode ( content . find (  " title "  )  . text (  )  )  ; %NWL%var body = sc . helpers . Base64 . decode ( content . find (  " body "  )  . text (  )  )  ; %NWL%9
function handleData ( err , payload )  {%NWL%if ( err )  {%NWL%self . status . set (  { error : err }  )  ; %NWL%throw err ;%NWL%} else {%NWL%if ( payload instanceof Array )  {%NWL%var data = payload ; %NWL%var metadata =  {  }  ;%NWL%} else {%NWL%var data = payload . data ; %NWL%var metadata = payload . metadata ; %NWL%9
for ( r = 0 ; r < linenumbers . length ; r +  +  )  {%NWL%if ( !state )  {%NWL%linenumbers [ r ]  . style . visibility =  " hidden "  ;%NWL%} else {%NWL%linenumbers [ r ]  . style . visibility =  " visible "  ;%NWL%}%NWL%}%NWL%}%NWL%function presentInlineNotes (  )  {%NWL%var mssArea = document . getElementById (  " mssArea "  )  ; %NWL%var notesPanel = document . getElementById (  " notesPanel "  )  ; %NWL%9
options = reverseMerge ( options || {  }  ,  {%NWL%reconnect : oasis . configuration . reconnect%NWL%}  )  ; %NWL%var reconnect = options . reconnect ; %NWL%assert ( reconnect =  =  =  " none " || reconnect =  =  =  " verify " || reconnect =  =  =  " any "  ,%NWL%" `reconnect` must be one of ' none '  ,  ' verify ' or ' any '  .  '  "  + reconnect +  "  ' is invalid .  "  )  ; %NWL%this . connections =  {  }  ; %NWL%this . wiretaps =  [  ]  ; %NWL%this . oasis = oasis ; %NWL%var pkg = oasis . packages [ options . url ]  ; %NWL%var capabilities = options . capabilities ; %NWL%3
[ index ]  . concat ( names )  , depth + 1 )  ) ! =  = object [ index ]  )  {%NWL%if ( result =  =  = object )  {%NWL%result =  [  ]  . concat ( object )  ;  /  / shallow copy into a new Array%NWL%}%NWL%result [ index ]  = item ;%NWL%}%NWL%}%NWL%} else {%NWL%Object . keys ( object )  . forEach ( function ( key )  {%NWL%if (  ( item = this . transform ( object [ key ]  , transformation ,%NWL%[ key ]  . concat ( names )  , depth + 1 )  ) ! =  = object [ key ]  )  {%NWL%0
var mongoose = require (  ' mongoose '  )  ; %NWL%var db  = require (  '  .  / db '  )  ; %NWL%var post_model = mongoose . model (  ' post '  )  ; %NWL%var rss = require (  ' rss '  )  ; %NWL%var feedTime = null ; %NWL%admin = null ; %NWL%var error ; %NWL%var express = require (  ' express '  )%NWL%, home = require (  '  .  / routes / home '  )%NWL%, admin = require (  '  .  / routes / admin '  )%NWL%, post = require (  '  .  / routes / post '  )%NWL%8
require (  ' child - process - close '  )%NWL%var EventEmitter = require (  " events "  )  . EventEmitter%NWL%, npm = module . exports = new EventEmitter%NWL%, config = require (  "  .  / config . js "  )%NWL%, npmconf = require (  " npmconf "  )%NWL%, log = require (  " npmlog "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, path = require (  " path "  )%NWL%, abbrev = require (  " abbrev "  )%NWL%, which = require (  " which "  )%NWL%, semver = require (  " semver "  )%NWL%4
" float unpackFloatFromVec4i ( const vec4 value )  "  ,%NWL%"  {  "  ,%NWL%"  const vec4 bitSh = vec4 ( 1 . 0 /  ( 256 . 0 * 256 . 0 * 256 . 0 )  , 1 . 0 /  ( 256 . 0 * 256 . 0 )  , 1 . 0 / 256 . 0 , 1 . 0 )  ;  "  ,%NWL%"  return ( dot ( value , bitSh )  )  ;  "  ,  "  }  "  ,%NWL%" void main (  )  {  "  ,%NWL%" float z =  ( unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 )  )  )  * 100 . 0 ;  "  ,%NWL%" vec4 vert = vec4 ( Vertex . x , Vertex . y + z , Vertex . z , 1 . 0 )  ;  "  ,%NWL%" vec3 leftvert = vec3 ( Vertex . x + 1 . 0 *  ( 200 . 0 / 512 . 0 )  , unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 + vec2 ( 1 . 0 / 512 . 0 , 0 )  )  )  * 100 . 0 + Vertex . y , Vertex . z )  ;  "  ,%NWL%" vec3 frontvert = vec3 ( Vertex . x , unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 + vec2 ( 0 ,  - 1 . 0 / 512 . 0 )  )  )  * 100 . 0 + Vertex . y , Vertex . z + 1 . 0 *  ( 200 . 0 / 512 . 0 )  )  ;  "  ,%NWL%" vec3 left = normalize ( leftvert - vert . xyz )  ;  "  ,%NWL%" vec3 front = normalize ( frontvert - vert . xyz )  ;  "  ,%NWL%9
}%NWL%}  )  ; %NWL%var LargerThan = declare (  " dojox . grid . enhanced . plugins . filter . LargerThan "  , exprs . _BiOpExpr ,  {%NWL%_name :  " larger "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = compareFunc ( left_operand , right_operand , datarow , getter )  ; %NWL%return new exprs . BooleanExpr ( res > 0 )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LargerThanOrEqualTo = declare (  " dojox . grid . enhanced . plugins . filter . LargerThanOrEqualTo "  , exprs . _BiOpExpr ,  {%NWL%2
return ;%NWL%}%NWL%else if ( err )  {%NWL%sendError ( res , 500 )  ; %NWL%throw err ;%NWL%}%NWL%user = createUser ( doc )  ; %NWL%req . body = req . body || {  }  ; %NWL%var code = req . body . code ; %NWL%var uri = req . body . uri ; %NWL%var method = req . body . method ; %NWL%8
contextPrototype . translate = function ( aX , aY )  {%NWL%var m1 =  [%NWL%[ 1 ,  0 ,  0 ]  ,%NWL%[ 0 ,  1 ,  0 ]  ,%NWL%[ aX , aY , 1 ]%NWL%]  ; %NWL%this . m_ = matrixMultiply ( m1 , this . m_ )  ;%NWL%}  ; %NWL%contextPrototype . rotate = function ( aRot )  {%NWL%var c = mc ( aRot )  ; %NWL%var s = ms ( aRot )  ; %NWL%9
var _ = require (  "  .  / utils / mindash "  )  ; %NWL%var log = require (  "  .  / logger "  )  ; %NWL%var Store = require (  "  .  / store "  )  ; %NWL%var Queries = require (  "  .  / queries "  )  ; %NWL%var Context = require (  "  .  / context "  )  ; %NWL%var warnings = require (  "  .  / warnings "  )  ; %NWL%var classId = require (  "  .  / utils / classId "  )  ; %NWL%var Environment = require (  "  .  / environment "  )  ; %NWL%var StateSource = require (  "  .  / stateSource "  )  ; %NWL%var ActionCreators = require (  "  .  / actionCreators "  )  ; %NWL%var humanStrings = require (  "  .  / utils / humanStrings "  )  ; %NWL%6
assert ( opts . submission ,  ' @workshop / common :  . submission is missing '  )%NWL%document . title = opts . title%NWL%if ( opts . title )  {%NWL%ui . header . innerHTML = escape ( opts . title )%NWL%}%NWL%var glSub = getContext ( opts . canvas ,  { stencil : true }  , renderSub )%NWL%var glSol = getContext ( ui . solution ,  { stencil : true }  , renderSol )%NWL%var sol  = opts . solution%NWL%var sub  = opts . submission%NWL%var draw  = opts . draw || passthrough%NWL%var init  = opts . init || passthrough%NWL%9
} else if ( options . target ! =  = false )  {%NWL%options . target ( compiler )  ;%NWL%} else {%NWL%throw new Error (  " Unsupported target '  "  + options . target +  "  '  .  "  )  ;%NWL%}%NWL%if ( options . output . library || options . output . libraryTarget ! =  =  " var "  )  {%NWL%var LibraryTemplatePlugin = require (  "  .  / LibraryTemplatePlugin "  )  ; %NWL%compiler . apply ( new LibraryTemplatePlugin ( options . output . library , options . output . libraryTarget )  )  ;%NWL%}%NWL%if ( options . externals )  {%NWL%var ExternalsPlugin = require (  "  .  / ExternalsPlugin "  )  ; %NWL%6
}  , this )  ;%NWL%}%NWL%} else {%NWL%total = 1 ;%NWL%}%NWL%return total ;%NWL%}  ,%NWL%sum : function ( cell , level , item )  {%NWL%var total = 0 ; %NWL%var store = this . store ; %NWL%var childFields = this . childFields ; %NWL%9
this . angles   =  [  ]  ; %NWL%if ( this . Get (  ' chart . align '  )  =  =  ' left '  )  {%NWL%this . centerx = this . radius + this . Get (  ' chart . gutter '  )  ;%NWL%} else if ( this . Get (  ' chart . align '  )  =  =  ' right '  )  {%NWL%this . centerx = this . canvas . width -  ( this . radius + this . Get (  ' chart . gutter '  )  )  ;%NWL%} else {%NWL%this . centerx = this . canvas . width / 2 ;%NWL%}%NWL%if ( this . Get (  ' chart . shadow '  )  )  {%NWL%var offsetx = document . all ? this . Get (  ' chart . shadow . offsetx '  )  : 0 ; %NWL%var offsety = document . all ? this . Get (  ' chart . shadow . offsety '  )  : 0 ; %NWL%9
var each = require (  ' each '  )  ; %NWL%var Renderer = require (  '  .  / index '  )  ; %NWL%var DefaultRenderer = augment ( Renderer , function ( base )  {%NWL%this . constructor = function ( transitive )  {%NWL%base . constructor . call ( this , transitive )  ;%NWL%}  ; %NWL%this . render = function (  )  {%NWL%base . render . call ( this )  ; %NWL%var self = this ; %NWL%var display = this . transitive . display ; %NWL%var network = this . transitive . network ; %NWL%9
throw message || ' assertion failed '  ;%NWL%}%NWL%}  ; %NWL%var emptyFn = function (  )  {  }  ; %NWL%var extend = require (  ' extend '  )  ; %NWL%var Stats = require (  ' stats - js '  )  ; %NWL%var dat = require (  ' dat - gui '  )  ; %NWL%var THREE = window . THREE ; %NWL%var Coordinates = require (  '  .  .  / model / Coordinates '  )  ; %NWL%var Keyboard = require (  '  .  / Keyboard '  )  ; %NWL%var LoopManager = require (  '  .  / LoopManager '  )  ; %NWL%9
select . scrollToNode = function ( node )  {%NWL%if ( !node ) return ; %NWL%node . scrollIntoView (  )  ;%NWL%}  ; %NWL%select . selectionCoords = function ( win )  {%NWL%var selection = win . document . selection ; %NWL%if ( !selection ) return null ; %NWL%var start = selection . createRange (  )  , end = start . duplicate (  )  ; %NWL%start . collapse ( true )  ; %NWL%end . collapse ( false )  ; %NWL%var body = win . document . body ; %NWL%5
_initialConfig : null ,%NWL%_written : false ,%NWL%method : null ,%NWL%validator : null ,%NWL%getValue : function (  )  {%NWL%return this . value ;%NWL%}  ,%NWL%setValue : function ( value , silent )  {%NWL%var beforeRetVal ; %NWL%var owner = this . owner ; %NWL%var name = this . name ; %NWL%9
' use strict '  ; %NWL%var expect = require (  " chai "  )  . expect ; %NWL%var addHawk = require (  " superagent - hawk "  )  ; %NWL%var supertest = addHawk ( require (  " supertest "  )  )  ; %NWL%var sinon = require (  " sinon "  )  ; %NWL%var assert = sinon . assert ; %NWL%var Token = require (  " express - hawkauth "  )  . Token ; %NWL%var request = require (  " request "  )  ; %NWL%var loop = require (  "  .  .  / loop "  )  ; %NWL%var apiPrefix = loop . apiPrefix ; %NWL%var apiRouter = loop . apiRouter ; %NWL%9
return ;%NWL%}%NWL%var material = defaultValue ( corridor . material , defaultMaterial )  ; %NWL%var isColorMaterial = material instanceof ColorMaterialProperty ; %NWL%this . _materialProperty = material ; %NWL%this . _fillProperty = defaultValue ( fillProperty , defaultFill )  ; %NWL%this . _showProperty = defaultValue ( show , defaultShow )  ; %NWL%this . _showOutlineProperty = defaultValue ( corridor . outline , defaultOutline )  ; %NWL%this . _outlineColorProperty = outlineEnabled ? defaultValue ( corridor . outlineColor , defaultOutlineColor )  : undefined ; %NWL%var height = corridor . height ; %NWL%var extrudedHeight = corridor . extrudedHeight ; %NWL%9
return v . type =  =  =  ' point '  ;%NWL%}  )  ; %NWL%if ( points . length ! =  = 1 )  {%NWL%return ;%NWL%}%NWL%var faceMaterial = this . model . vertex . editing ?%NWL%this . materials . editing . face : %NWL%this . materials . normal . face ; %NWL%var center = calc . objToVector ( points [ 0 ]  . parameters . coordinate , geometryGraph , THREE . Vector3 )  ; %NWL%var radius = geometryGraph . evaluate ( this . model . vertex . parameters . radius )  ; %NWL%var height = geometryGraph . evaluate ( this . model . vertex . parameters . height )  ; %NWL%9
)  ;%NWL%}  )  ; %NWL%mrc . addCommandListener ( REMOTE_CONTROLS . PLAY_PAUSE , playpauseListener )  ; %NWL%mrc . _commandHandler ( IAC . PLAY_PAUSE_PRESS )  ; %NWL%assert . ok ( playpauseListener . calledOnce )  ;%NWL%}  )  ; %NWL%test (  ' IAC . PAUSE_PRESS '  , function (  )  {%NWL%var pauseListener = this . sinon . spy ( function ( event )  {%NWL%var command = event . detail . command ; %NWL%assert . equal ( command , REMOTE_CONTROLS . PAUSE )  ; %NWL%var isSCOConnected = event . detail . isSCOConnected ; %NWL%8
const nsIWindowMediator   = Components . interfaces . nsIWindowMediator ; %NWL%const nsIWindowWatcher   = Components . interfaces . nsIWindowWatcher ; %NWL%const nsICategoryManager  = Components . interfaces . nsICategoryManager ; %NWL%const nsIWebNavigationInfo  = Components . interfaces . nsIWebNavigationInfo ; %NWL%const nsIBrowserSearchService = Components . interfaces . nsIBrowserSearchService ; %NWL%const nsICommandLineValidator = Components . interfaces . nsICommandLineValidator ; %NWL%const nsIXULAppInfo    = Components . interfaces . nsIXULAppInfo ; %NWL%const nsIObserver    = Components . interfaces . nsIObserver ; %NWL%const NS_BINDING_ABORTED = Components . results . NS_BINDING_ABORTED ; %NWL%const NS_ERROR_WONT_HANDLE_CONTENT = 0x805d0001 ; %NWL%const NS_ERROR_ABORT = Components . results . NS_ERROR_ABORT ; %NWL%8
this [ family ]  [ column ]  = value ;%NWL%} else {%NWL%this [ family ]  [ column ]  +  = value ;%NWL%}%NWL%}%NWL%self . stats [ row . interval ]  [ row . time ]  = row ;%NWL%}  )  ; %NWL%incoming . forEach ( function ( row )  {%NWL%var time = moment . unix ( row . data . time )  . utc (  )  ; %NWL%var hour = moment . utc ( time )  . startOf (  ' hour '  )  . format (  )  ; %NWL%var day  = moment . utc ( time )  . startOf (  ' day '  )  . format (  )  ; %NWL%9
} else {%NWL%root . t = factory ( root . t )  ;%NWL%}%NWL%}  ( this , function ( t )  {%NWL%' use strict '  ; %NWL%var Any = t . Any ; %NWL%var Obj = t . Obj ; %NWL%var Str = t . Str ; %NWL%var Arr = t . Arr ; %NWL%var struct = t . struct ; %NWL%var list = t . list ; %NWL%5
var catharsis = require (  ' catharsis '  )  ; %NWL%var jsdoc =  {%NWL%name : require (  ' jsdoc / name '  )  ,%NWL%tag :  {%NWL%inline : require (  ' jsdoc / tag / inline '  )%NWL%}  ,%NWL%util :  {%NWL%cast : require (  ' jsdoc / util / cast '  )%NWL%}%NWL%}  ; %NWL%var util = require (  ' util '  )  ; %NWL%0
var helpers = require (  '  .  / helpers . js '  )  ; %NWL%var httpl = require (  '  .  / httpl . js '  )  ; %NWL%var BridgeServer = require (  '  .  / bridge - server . js '  )  ; %NWL%var peerConstraints =  {%NWL%optional :  [  { DtlsSrtpKeyAgreement : true }  ]%NWL%}  ; %NWL%var defaultIceServers =  { iceServers :  [  { url :  ' stun : stun . l . google . com : 19302 '  }  ]  }  ; %NWL%var __env =  ( typeof window ! =  ' undefined '  ) ? window :  (  ( typeof self ! =  ' undefined '  ) ? self : global )  ; %NWL%var RTCSessionDescription = __env . mozRTCSessionDescription || __env . RTCSessionDescription ; %NWL%var RTCPeerConnection = __env . mozRTCPeerConnection || __env . webkitRTCPeerConnection || __env . RTCPeerConnection ; %NWL%var RTCIceCandidate = __env . mozRTCIceCandidate || __env . RTCIceCandidate ; %NWL%8
var defaultAttributes = new dom . NamedNodeMap ( doc )  ; %NWL%var entElement = doc . createElement (  " entElement "  )  ; %NWL%entElement . setAttribute (  " attr1 "  ,  " Attr "  )  ; %NWL%entElement . setAttribute (  " domestic "  ,  " MALE "  )  ; %NWL%defaultAttributes . setNamedItem ( entElement )  ; %NWL%var defaultAddress = doc . createElement (  " address "  )  ; %NWL%defaultAddress . setAttribute (  " street "  ,  " Yes "  )  ; %NWL%defaultAttributes . setNamedItem ( defaultAddress )  ; %NWL%doc . doctype = new dom . DocumentType ( doc ,  " staff "  , entities , notations , defaultAttributes )  ; %NWL%doc . implementation = implementation ; %NWL%var staff  = doc . createElement (  " staff "  )  ; %NWL%1
var state = getTestState ( t , renderer )%NWL%var assertsBelow = 3%NWL%t . plan ( assertsBelow + renderer . expectedAssertions )%NWL%state . stateRouter . addState (  {%NWL%name :  ' rofl '  ,%NWL%route :  '  / routeButt '  ,%NWL%template : parentTemplate ,%NWL%activate : function ( context )  {%NWL%var data = context . data%NWL%var parameters = context . parameters%NWL%var content = context . content%NWL%8
it (  " should not parse filtered stuff "  , function (  )  {%NWL%if ( typeof require ! =  " function "  ) require (  " fail "  )  ; %NWL%if ( typeof require ! =  =  " function "  ) require (  " fail "  )  ; %NWL%if ( ! ( typeof require =  =  " function "  )  ) require (  " fail "  )  ; %NWL%if ( ! ( typeof require =  =  =  " function "  )  ) require (  " fail "  )  ; %NWL%if ( typeof require =  =  " undefined "  ) require = require (  " fail "  )  ; %NWL%if ( typeof require =  =  =  " undefined "  ) require = require (  " fail "  )  ; %NWL%if ( typeof module =  =  " undefined "  ) module = require (  " fail "  )  ; %NWL%if ( typeof module =  =  =  " undefined "  ) module = require (  " fail "  )  ; %NWL%if ( typeof module ! =  " object "  ) module = require (  " fail "  )  ; %NWL%if ( typeof exports =  =  " undefined "  ) exports = require (  " fail "  )  ; %NWL%7
Verb . call ( this , body , attrs )  ;%NWL%}  ; %NWL%var Play = module . exports . Play = function Play ( body , attrs )  {%NWL%if ( !body )  {%NWL%throw new Error (  ' Play requires a body ( uri to play )  '  )  ;%NWL%}%NWL%this . type =  ' Play '  ; %NWL%this . nestable =  {  }  ; %NWL%Verb . call ( this , body , attrs )  ;%NWL%}  ; %NWL%var Gather = module . exports . Gather = function Gather ( body , attrs )  {%NWL%2
var dline1 = this . _dline1 ; %NWL%var dline2 = this . _dline2 ; %NWL%var dline3 = this . _dline3 ; %NWL%var dline4 = this . _dline4 ; %NWL%var dline5 = this . _dline5 ; %NWL%var dline6 = this . _dline6 ; %NWL%var dline7 = this . _dline7 ; %NWL%var dline8 = this . _dline8 ; %NWL%var dline9 = this . _dline9 ; %NWL%var dline10 = this . _dline10 ; %NWL%var dline11 = this . _dline11 ; %NWL%0
if ( content ! = null )  {%NWL%generator . setSourceContent ( sourceFile , content )  ;%NWL%}%NWL%}  )  ; %NWL%return generator ;%NWL%}  ; %NWL%SourceMapGenerator . prototype . addMapping = function SourceMapGenerator_addMapping ( aArgs )  {%NWL%var generated = util . getArg ( aArgs ,  ' generated '  )  ; %NWL%var original = util . getArg ( aArgs ,  ' original '  , null )  ; %NWL%var source = util . getArg ( aArgs ,  ' source '  , null )  ; %NWL%var name = util . getArg ( aArgs ,  ' name '  , null )  ; %NWL%8
menuItem . setAttribute (  " label "  , filterTitles [ i ]  )  ; %NWL%else%NWL%menuItem . setAttribute (  " label "  , filterTitles [ i ]  +  "  (  "  + filterTypes [ i ]  +  "  )  "  )  ; %NWL%menuItem . setAttribute (  " filters "  , filterTypes [ i ]  )  ; %NWL%filterPopup . appendChild ( menuItem )  ;%NWL%}%NWL%var filterMenuList = document . getElementById (  " filterMenuList "  )  ; %NWL%filterMenuList . appendChild ( filterPopup )  ; %NWL%if ( numFilters > 0 )%NWL%filterMenuList . selectedIndex = 0 ; %NWL%var filterBox = document . getElementById (  " filterBox "  )  ; %NWL%6
}  ,%NWL%_addMatching : function ( doc )  {%NWL%var self = this ; %NWL%Meteor . _noYieldsAllowed ( function (  )  {%NWL%var id = doc . _id ; %NWL%if ( self . _published . has ( id )  )%NWL%throw Error (  " tried to add something already published "  + id )  ; %NWL%if ( self . _limit && self . _unpublishedBuffer . has ( id )  )%NWL%throw Error (  " tried to add something already existed in buffer "  + id )  ; %NWL%var limit = self . _limit ; %NWL%var comparator = self . _comparator ; %NWL%9
}%NWL%var w = x1 - x0 ; %NWL%var h = y1 - y0 ; %NWL%var xadd = this . _tileset . getTileWidth (  )  + this . _tileset . getOffsetX (  )  ; %NWL%var yadd = this . _tileset . getTileHeight (  )  + this . _tileset . getOffsetY (  )  ; %NWL%var xx = 0 . 5 * xadd ; %NWL%var yy = 0 . 5 * yadd ; %NWL%var i = 0 ; %NWL%for ( var y = y0 ; y <  = y1 ;  +  + y )  {%NWL%xx = 0 . 5 * xadd ; %NWL%for ( var x = x0 ; x <  = x1 ;  +  + x )  {%NWL%8
var url = require (  ' url '  )  ; %NWL%var mostActiveNs =  ' http :  /  / buddycloud . com / channel_directory / most_active '  ; %NWL%exports . setup = function ( app )  {%NWL%app . get (  '  / most_active '  ,%NWL%session . provider ,%NWL%getMostActive )  ;%NWL%}  ; %NWL%function getMostActive ( req , res )  {%NWL%var params = url . parse ( req . url , true )  . query%NWL%, max = params . max%NWL%, index = params . index%NWL%9
100%NWL%)  ; %NWL%scene . lights . push ( light )  ; %NWL%scene . lights . push ( light1 )  ; %NWL%var imageWidth = 100 ;  /  / $F (  ' imageWidth '  )  ; %NWL%var imageHeight = 100 ;  /  / $F (  ' imageHeight '  )  ; %NWL%var pixelSize =  " 5 , 5 "  . split (  '  ,  '  )  ;  /  /  $F (  ' pixelSize '  )  . split (  '  ,  '  )  ; %NWL%var renderDiffuse = true ;  /  / $F (  ' renderDiffuse '  )  ; %NWL%var renderShadows = true ;  /  / $F (  ' renderShadows '  )  ; %NWL%var renderHighlights = true ;  /  / $F (  ' renderHighlights '  )  ; %NWL%var renderReflections = true ;  /  / $F (  ' renderReflections '  )  ; %NWL%7
test . done (  )  ;%NWL%}  ,%NWL%' 15 . Zen should run two handler with 5 parameters '  : function ( test )  {%NWL%var hw1 = function ( v1 , v2 , v3 , v4 , v5 , next )  { test . ok ( true ,  ' The handler was executed '  )  ; next (  )  ;  }  ; %NWL%var hw2 = function ( v1 , v2 , v3 , v4 , v5 , next )  {%NWL%test . ok ( arguments . length =  =  = 6 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof v1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v2 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v2 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v3 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v3 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v4 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v4 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v5 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v5 +  ' ` .  '  )  ; %NWL%6
getInitialState : function getInitialState (  )  {%NWL%var state =  {%NWL%ownDraggedItemType : null ,%NWL%currentDropEffect : null%NWL%}  ; %NWL%return assign ( state , this . getStateFromDragDropStore (  )  )  ;%NWL%}  ,%NWL%getActiveDropTargetType : function getActiveDropTargetType (  )  {%NWL%var _state = this . state ; %NWL%var draggedItemType = _state . draggedItemType ; %NWL%var draggedItem = _state . draggedItem ; %NWL%9
if ( opr . id =  =  = name )  {%NWL%operator = opr ; %NWL%return false ;%NWL%}%NWL%return true ;%NWL%}  )  ; %NWL%return operator ;%NWL%}  ,%NWL%convertToOperator : function hs_convertToOperator ( el )  {%NWL%var operatorId = el . querySelector (  '  [ data - field =  " operatorId "  ]  '  )  . value ; %NWL%var mccmnc = el . querySelector (  '  [ data - field =  " mccmnc "  ]  '  )  . value ; %NWL%9
throw new ERROR . UnknownError (  " Orientation change did not take effect : expected "  +%NWL%orientation +  " but got "  + newOrientation )  ;%NWL%}%NWL%}%NWL%, getWindowSize : function (  )  {%NWL%var size = $ . target (  )  . rect (  )  . size ; %NWL%return size ;%NWL%}%NWL%, getWindowIndicators : function ( win )  {%NWL%var activityIndicators = win . activityIndicators (  )  ; %NWL%var pageIndicators = win . pageIndicators (  )  ; %NWL%9
this . _applyZoomLevelStyle (  )  ;%NWL%}  ,%NWL%_getRGBA : function ( color , opacity )  {%NWL%return ' rgba (  '  + parseInt ( color . slice (  - 6 ,  - 4 )  , 16 )%NWL%+  '  ,  '  + parseInt ( color . slice (  - 4 ,  - 2 )  , 16 )%NWL%+  '  ,  '  + parseInt ( color . slice (  - 2 )  , 16 )%NWL%+  '  ,  '  + opacity +  '  )  '  ;%NWL%}  ,%NWL%_applyZoomLevelStyle : function (  )  {%NWL%var boxColor  = this . style . get (  " boxColor "  )  ; %NWL%var boxOpacity = this . style . get (  " boxOpacity "  )  ; %NWL%9
myArray :  [  " just "  ,  " an "  ,  " array "  ]%NWL%}  ; %NWL%this . setTestEnv (  {%NWL%template : this . _templateClasspath ,%NWL%data : this . testData%NWL%}  )  ;%NWL%}  ,%NWL%$prototype :  {%NWL%runTemplateTest : function (  )  {%NWL%var myArray = this . testData . myArray ; %NWL%var items = this . testData . items ; %NWL%9
assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | = y )  "  , aExpr (  " | =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%2
callback ( err )  ;%NWL%} else {%NWL%async . eachSeries ( dirs . reverse (  )  , mkdir , callback )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%Client . prototype . write = function ( options , callback )  {%NWL%var destination = options . destination ; %NWL%destination = unixy ( destination )  ; %NWL%var attrs = options . attrs ; %NWL%8
}  ,%NWL%set : function ( element , map )%NWL%{%NWL%if ( !map )%NWL%{%NWL%element . style . clip =  " rect ( auto , auto , auto , auto )  "  ; %NWL%return ;%NWL%}%NWL%var left = map . left ; %NWL%var top = map . top ; %NWL%var width = map . width ; %NWL%8
it (  '  -  - host '  , function ( done )  {%NWL%cli . run (  [  '  '  ,  '  '  ,  '  -  - host '  ,  ' 0 . 0 . 0 . 0 '  ]  , function ( err )  {%NWL%var server = cli . get (  ' server '  )  ; %NWL%var host = cli . get (  ' host '  )  ; %NWL%expect ( server . address (  )  . address )  . to . equal (  ' 0 . 0 . 0 . 0 '  )  ; %NWL%server . close ( done )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  '  -  - hostname '  , function ( done )  {%NWL%cli . run (  [  '  '  ,  '  '  ,  '  -  - hostname '  ,  ' 0 . 0 . 0 . 0 '  ]  , function ( err )  {%NWL%var server = cli . get (  ' server '  )  ; %NWL%3
this . bytesTotal = bytesTotal | 0 ;%NWL%}  ; %NWL%this . clone = function (  )%NWL%{%NWL%return new ProgressEvent ( this . type , this . bubbles , this . cancelable , this . bytesLoaded , this . bytesTotal )  ;%NWL%}  ; %NWL%this . toString = function (  )%NWL%{%NWL%return '  [ ProgressEvent type =  '  + this . type +%NWL%' bubbles =  '  + this . bubbles +%NWL%' cancelable =  '  + this . cancelable +%NWL%9
}%NWL%}%NWL%function hasConstructor (  )  {%NWL%return methods . some ( function ( method )  {%NWL%return method . key . name =  =  =  ' constructor '  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%function processDestructuringAssignments ( modifier , options )  {%NWL%var ast = modifier . ast ; %NWL%var lines = modifier . lines ; %NWL%9
}  )  ; %NWL%$ (  " div . poster . check "  )  . css (  " cursor "  ,  " pointer "  )  ; %NWL%$ (  " div . poster . check "  )  . click ( function (  )  {%NWL%$ (  " form "  , this )  . submit (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%make_sortable = function ( options )%NWL%{%NWL%var list_selector = options . list_selector ; %NWL%var item_selector = options . item_selector ; %NWL%var post_url   = options . post_url ; %NWL%8
var ulRect = this . _ulEl . getBoundingClientRect (  )  ; %NWL%this . _swipeData . firstUlPos = ulRect [ this . _isY ? ' top '  :  ' left '  ]  ; %NWL%this . _swipeData . inUlX =  this . _swipeData . x - ulRect . left ; %NWL%this . _swipeData . inUlY =  this . _swipeData . y - ulRect . top ; %NWL%setTransitionProperty ( this . _ulEl ,  ' none '  )  ; %NWL%this . _touchMoveIsFirstTouchMove = true ;%NWL%}  ,%NWL%_onTouchMove : function ( event )  {%NWL%if ( event . touches . length > 1 )  { return ;  }%NWL%var pointerX = InkEvent . pointerX ( event )  ; %NWL%var pointerY = InkEvent . pointerY ( event )  ; %NWL%9
if ( p2Value =  =  = true )  {%NWL%return q ;%NWL%} else {%NWL%return applyNot ( q )  ;%NWL%}%NWL%}%NWL%throw new Error (  " Not yet implemented : Boolean operation :  "  + op +  " p1 :  "  + stringify ( p1 )  +  " p2 :  "  + stringify ( p2 )  )  ;%NWL%}%NWL%function makeUnaryFilter ( node , context )  {%NWL%var op = node . op ; %NWL%var p1 = node . p1 ; %NWL%9
exports . typeof =%NWL%exports [  ' type - of '  ]  = function type ( node )  {%NWL%utils . assertPresent ( node ,  ' expression '  )  ; %NWL%return node . nodeName ;%NWL%}  ; %NWL%exports . component = function component ( color , name )  {%NWL%utils . assertColor ( color ,  ' color '  )  ; %NWL%utils . assertString ( name ,  ' name '  )  ; %NWL%var name = name . string%NWL%, unit = unitMap [ name ]%NWL%, type = typeMap [ name ]%NWL%9
month :  " about a month "  ,%NWL%months :  " %d months "  ,%NWL%year :  " about a year "  ,%NWL%years :  " %d years "  ,%NWL%numbers :  [  ]%NWL%}%NWL%}  ,%NWL%inWords : function ( distanceMillis )  {%NWL%var $l = this . settings . strings ; %NWL%var prefix = $l . prefixAgo ; %NWL%var suffix = $l . suffixAgo ; %NWL%9
dataAnijJS =  ' if : customevent , on : $customEventProvider2 , do : hinge , to : body '  ; %NWL%targetNode = Y . one (  ' #testzone . test2 '  )  ; %NWL%targetNode . setAttribute (  ' data - anijs '  , dataAnijJS )  ; %NWL%AniJS . run (  )  ; %NWL%expect ( AniJS . getNotifier (  ' customEventProvider '  )  )  . not . toBeUndefined (  )  ; %NWL%expect ( AniJS . getNotifier (  ' customEventProvider2 '  )  )  . not . toBeUndefined (  )  ; %NWL%var customEventProvider = AniJS . getNotifier (  ' customEventProvider '  )  ; %NWL%customEventProvider . dispatchEvent (  ' customevent '  )  ; %NWL%jasmine . clock (  )  . tick ( 101 )  ; %NWL%expect ( Y . one (  ' body '  )  . hasClass (  ' bounce '  )  )  . toBeTruthy (  )  ; %NWL%var customEventProvider2 = AniJS . getNotifier (  ' customEventProvider2 '  )  ; %NWL%6
store . ready ( function (  )  {%NWL%var User = store . Model (  ' User '  )  ; %NWL%User . definition . attributes . id . notnull . should . be . true ; %NWL%User . definition . attributes . login . notnull . should . be . true ; %NWL%User . definition . attributes . first_name . notnull . should . be . false ; %NWL%next (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' second migrations was executed as well '  , function ( next )  {%NWL%store . ready ( function (  )  {%NWL%var Post = store . Model (  ' Post '  )  ; %NWL%1
}  )  ; %NWL%it (  ' When a function parameter has a standard JSDoc comment and an inline @type tag , the docs '  +%NWL%' reflect the standard JSDoc comment '  , function (  )  {%NWL%var Dispenser = docSet . getByLongname (  ' Dispenser '  )  [ 0 ]  ; %NWL%info [ 0 ]  =  { name :  ' candyId '  , typeName :  ' number '  , description :  ' The candy\ ' s identifier .  '  }  ; %NWL%checkParams ( Dispenser , info )  ;%NWL%}  )  ; %NWL%it (  ' When a function accepts multiple parameters , and only the first parameter is documented '  +%NWL%' with an inline @type tag , the function parameters are documented in the correct order '  ,%NWL%function (  )  {%NWL%var restock = docSet . getByLongname (  ' restock '  )  [ 0 ]  ; %NWL%3
if ( isValidPassword ( pass ) && pass =  =  = pass_repeat )  {%NWL%$form . find (  '  . submit '  )  . removeClass (  ' disabled '  )  ;%NWL%} else {%NWL%$form . find (  '  . submit '  )  . addClass (  ' disabled '  )  ;%NWL%}%NWL%}  ; %NWL%var testChangePasswordSubmitEnable = function (  )  {%NWL%var $form = $ (  ' #changepassword_form '  )  ; %NWL%var oldpass = $form . find (  '  . oldpass '  )  . val (  )  ; %NWL%var pass = $form . find (  '  . pass '  )  . val (  )  ; %NWL%var pass_repeat = $form . find (  '  . pass_repeat '  )  . val (  )  ; %NWL%8
h (  ' span . value '  , formatter . display ( value )  )  ,%NWL%h (  ' span . title '  , options . title )%NWL%]  )%NWL%return h (  ' RangeParam '  ,  {%NWL%className : classes . join (  '  '  )  ,%NWL%style : style%NWL%}  , slider )%NWL%}%NWL%function drag ( ev )  {%NWL%var param = this . data . param%NWL%var formatter = this . data . formatter%NWL%9
showForm : function (  )  {%NWL%var me = this ; %NWL%me . getView (  )  . getForm (  )  . loadRecord ( this . model )  ;%NWL%}  ,%NWL%onSaveClick : function ( button )  {%NWL%var me = this ; %NWL%var record , jsonData , url , selectedPersonId ; %NWL%url = me . url ; %NWL%var groupName = me . getView (  )  . getForm (  )  . findField (  ' groupName '  )  . getValue (  )  ; %NWL%var groupEmail = me . getView (  )  . getForm (  )  . findField (  ' groupEmail '  )  . getValue (  )  ; %NWL%var personCombo = me . getView (  )  . getForm (  )  . findField (  ' personCombo '  )  . getValue (  )  ; %NWL%8
Object . keys ( node )%NWL%. filter ( function ( key )  {%NWL%return isNonCircular ( key ) && node . hasOwnProperty ( key )  ;%NWL%}  )%NWL%. forEach ( function ( key )  {%NWL%var value = node [ key ]  ; %NWL%if ( isFunction ( value )  ) return ; %NWL%if ( isObject ( value )  )  {%NWL%if ( !value . _before && !value . _after ) return functionize ( value )  ; %NWL%var before = value . _before || '  '  ; %NWL%var after = value . _after || '  '  ; %NWL%9
var contentView = tree . contentView ; %NWL%var view = tree . view ; %NWL%var index = view . selection . currentIndex ; %NWL%gDialog . elementsTree . startEditing ( index , gDialog . elementsTree . columns [ 0 ]  )  ;%NWL%}%NWL%function onElementsTreeModified ( aEvent )%NWL%{%NWL%var target = aEvent . target ; %NWL%if ( target ! = gDialog . elementsTree )%NWL%return ; %NWL%var attrChange = aEvent . attrChange ; %NWL%7
var label2Id = this . getLabelIdValue ( label2Element )  ; %NWL%var input2Id = this . getInputIdValue ( input2Element )  ; %NWL%$A . test . assertEquals ( input2Id , label2Id ,  " Global Id for label1 and input created by iteration should be the same "  )  ;%NWL%}%NWL%}  ,%NWL%testLabelWithDefaultPosition :  {%NWL%attributes :  { whichPosition :  " left "  }  ,%NWL%test : function ( component )  {%NWL%var div = component . find (  " myInputCheckbox "  )  . getElement (  )  ; %NWL%var label = div . getElementsByTagName (  ' label '  )  [ 0 ]  ; %NWL%var input = div . getElementsByTagName (  ' input '  )  [ 0 ]  ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
if ( process . env . NEW_RELIC_HOME )  {%NWL%require (  " newrelic "  )  ;%NWL%}%NWL%var SAMPLE_STATS_INTERVAL = 60 * 1000 ;  /  / 1 minute%NWL%var SAMPLE_LOAD_INTERVAL = 5 * 60 * 1000 ;  /  / 5 minutes%NWL%var EMPTY_ROOM_LOG_TIMEOUT = 3 * 60 * 1000 ;  /  / 3 minutes%NWL%var WebSocketServer = require (  ' websocket '  )  . server ; %NWL%var WebSocketRouter = require (  ' websocket '  )  . router ; %NWL%var http = require (  ' http '  )  ; %NWL%var parseUrl = require (  ' url '  )  . parse ; %NWL%var fs = require (  ' fs '  )  ; %NWL%8
this . _canvasOriginalSize =  {%NWL%width : renderer . domElement . width ,%NWL%height : renderer . domElement . height%NWL%}  ; %NWL%renderer . setSize ( 1280 , 800 , false )  ; %NWL%this . startFullscreen (  )  ;%NWL%}  ; %NWL%this . startFullscreen = function (  )  {%NWL%var self = this ; %NWL%var renderer = this . _renderer ; %NWL%var vrHMD = this . _vrHMD ; %NWL%9
var namespace = this . path ; %NWL%var consts = require (  ' basis . template . const '  )  ; %NWL%var TYPE_ELEMENT = consts . TYPE_ELEMENT ; %NWL%var TYPE_ATTRIBUTE = consts . TYPE_ATTRIBUTE ; %NWL%var TYPE_ATTRIBUTE_CLASS = consts . TYPE_ATTRIBUTE_CLASS ; %NWL%var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%2
testAsyncStartTemplateTest : function (  )  {%NWL%var self = this ; %NWL%var OriginalInnerWidget = Aria . getClassRef ( this . innerWidgetClasspath )  ; %NWL%var MockInnerWidget = function ( cfg , context , lineNbr )  {%NWL%var innerSclasses = self . innerSclasses ; %NWL%if ( innerSclasses )  {%NWL%if ( innerSclasses . length =  =  = 0 || innerSclasses [ innerSclasses . length - 1 ] ! =  = cfg . sclass )  {%NWL%innerSclasses . push ( cfg . sclass )  ;%NWL%}%NWL%}%NWL%var callback = self . callback ; %NWL%4
var R10_0 = this . _R10_0 ; %NWL%var R11_0 = this . _R11_0 ; %NWL%var R12_0 = this . _R12_0 ; %NWL%var R13_0 = this . _R13_0 ; %NWL%var R14_0 = this . _R14_0 ; %NWL%var R15_0 = this . _R15_0 ; %NWL%var R16_0 = this . _R16_0 ; %NWL%var R17_0 = this . _R17_0 ; %NWL%var R18_0 = this . _R18_0 ; %NWL%var R19_0 = this . _R19_0 ; %NWL%var dline0 = this . _dline0 ; %NWL%0
var cancelFrame = frame . cancel ,%NWL%requestFrame = frame . request%NWL%var prime  = require (  " prime "  )%NWL%var camelCase   = require (  " mout / string / camelCase "  )  ,%NWL%trim    = require (  " mout / string / trim "  )  ,%NWL%properCase   = require (  " mout / string / properCase "  )  ,%NWL%hyphenateString = require (  " mout / string / hyphenate "  )%NWL%var map  = require (  " mout / array / map "  )  ,%NWL%forEach = require (  " mout / array / forEach "  )  ,%NWL%indexOf = require (  " mout / array / indexOf "  )%NWL%var elements = require (  " elements "  )%NWL%2
this . rate   = rate ; %NWL%this . phaseIncr =  ( 512 * this . rate / this . samplerate )  * this . phaseStep ;%NWL%}  ; %NWL%$ . process = function ( cellL , cellR )  {%NWL%var bufferL = this . bufferL ; %NWL%var bufferR = this . bufferR ; %NWL%var size = this . buffersize ; %NWL%var mask = size - 1 ; %NWL%var wave   = this . _wave ; %NWL%var phase   = this . phase ; %NWL%var phaseIncr  = this . phaseIncr ; %NWL%4
var worldWidth = this . _worldWidth ,%NWL%halfWidth = Math . round ( worldWidth / 2 )  ,%NWL%dx = this . _initialWorldOffset ,%NWL%x = this . _draggable . _newPos . x ,%NWL%newX1 =  ( x - halfWidth + dx ) % worldWidth + halfWidth - dx ,%NWL%newX2 =  ( x + halfWidth + dx ) % worldWidth - halfWidth - dx ,%NWL%newX = Math . abs ( newX1 + dx )  < Math . abs ( newX2 + dx ) ? newX1 : newX2 ; %NWL%this . _draggable . _newPos . x = newX ;%NWL%}  ,%NWL%_onDragEnd : function (  )  {%NWL%var map = this . _map ,%NWL%0
}%NWL%if ( !networkEntities [ player . index ]  )%NWL%continue ; %NWL%var entity = game . entities [ networkEntities [ player . index ]  ]  ; %NWL%if ( entity && entity . root )  {%NWL%var position = new THREE . Vector3 ( player . position . x , player . position . y , player . position . z )  ; %NWL%if ( Math . abs ( position . distanceTo ( entity . root . position )  )  > 10 )  {%NWL%entity . root . position = position ;%NWL%}%NWL%if ( player . walkTo )  {%NWL%var walkTo = new THREE . Vector3 ( player . walkTo . x , player . walkTo . y , player . walkTo . z )  ; %NWL%5
}%NWL%else {%NWL%dropNode . placeAfter ( placeholder )  ;%NWL%}%NWL%}%NWL%}%NWL%}  ,%NWL%_onDragAlign : function ( event )  {%NWL%var instance = this ; %NWL%var lastX = instance . lastX ; %NWL%var lastY = instance . lastY ; %NWL%9
' use strict '  ; %NWL%var utils = require (  '  .  .  /  .  .  / utils '  )  ; %NWL%var merge = require (  '  .  .  /  .  .  / merge '  )  ; %NWL%var errors = require (  '  .  .  /  .  .  / deps / errors '  )  ; %NWL%var idbUtils = require (  '  .  / idb - utils '  )  ; %NWL%var idbConstants = require (  '  .  / idb - constants '  )  ; %NWL%var idbBulkDocs = require (  '  .  / idb - bulk - docs '  )  ; %NWL%var idbAllDocs = require (  '  .  / idb - all - docs '  )  ; %NWL%var checkBlobSupport = require (  '  .  / idb - blob - support '  )  ; %NWL%var ADAPTER_VERSION = idbConstants . ADAPTER_VERSION ; %NWL%var ATTACH_AND_SEQ_STORE = idbConstants . ATTACH_AND_SEQ_STORE ; %NWL%9
deployToServer ( options . appDir , options . bundleOptions , deployOptions )  ;%NWL%}  )  ; %NWL%else%NWL%deployToServer ( options . appDir , options . bundleOptions , deployOptions )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var deployToServer = function ( app_dir , bundleOptions , deployOptions )  {%NWL%var site = parse_url ( deployOptions . site )  . hostname ; %NWL%var password = deployOptions . password ; %NWL%var set_password = deployOptions . setPassword ; %NWL%var settings = deployOptions . settings ; %NWL%8
exports . createSSLConnection = connection . createSSLConnection ; %NWL%exports . createStdIOClient = connection . createStdIOClient ; %NWL%exports . createStdIOConnection = connection . createStdIOConnection ; %NWL%var httpConnection = require (  '  .  / http_connection '  )  ; %NWL%exports . HttpConnection = httpConnection . HttpConnection ; %NWL%exports . createHttpConnection = httpConnection . createHttpConnection ; %NWL%exports . createHttpClient = httpConnection . createHttpClient ; %NWL%var server = require (  '  .  / server '  )  ; %NWL%exports . createServer = server . createServer ; %NWL%exports . createMultiplexServer = server . createMultiplexServer ; %NWL%var web_server = require (  '  .  / web_server '  )  ; %NWL%7
var item = items [ i ]  ; %NWL%if ( item . type =  =  ' divider '  ) continue ; %NWL%var li = new Element (  ' li '  )  . inject ( ul )  ; %NWL%if ( i > 0 && items [ i - 1 ]  . type =  =  ' divider '  ) li . addClass (  ' divider '  )  ; %NWL%var a = new Element (  ' a '  ,  { text : item . text }  )  . inject ( li )  ; %NWL%if ( item . type =  =  ' radio '  ) new Element (  ' div '  ,  {  ' class '  :  ( item . selected ? ' radio '  :  ' noradio '  )  }  )  . inject ( a )  ; %NWL%if ( item . type =  =  ' check '  ) new Element (  ' div '  ,  {  ' class '  :  ( item . selected ? ' check '  :  ' nocheck '  )  }  )  . inject ( a )  ; %NWL%if ( item . target ) a . setAttribute (  ' target '  , item . target )  ; %NWL%if ( !item . target ) a . addEvent (  ' click '  , MUI . getWrappedEvent ( this , this . onItemClick ,  [ item ]  )  )  ; %NWL%var partner = item . partner ? item . partner : this . options . partner ; %NWL%var partnerMethod = item . partnerMethod ? item . partnerMethod : this . options . partnerMethod ; %NWL%9
gDialog . visitWebsiteButton . setAttribute (  " url "  ,%NWL%doc . documentElement . getAttribute (  " info "  )  )  ; %NWL%var author = doc . documentElement . getAttribute (  " name "  )  ; %NWL%var template = doc . documentElement . firstElementChild ; %NWL%while ( template )  {%NWL%var name = template . getAttribute (  " shortName "  )  ; %NWL%var license = GetTemplateInfo ( template ,  " license "  )  ; %NWL%var download = GetTemplateInfo ( template ,  " package "  )  ; %NWL%var thumbnail = GetTemplateInfo ( template ,  " thumbnail "  )  ; %NWL%var description = GetTemplateInfo ( template ,  " description "  )  ; %NWL%var preview = GetTemplateInfo ( template ,  " preview "  )  ; %NWL%6
hlterms . push ( tmp [ i ]  . toLowerCase (  )  )  ;%NWL%}%NWL%if ( !$ . contains ( toAppend , word )  )%NWL%toAppend . push ( word )  ;%NWL%}  ; %NWL%var highlightstring =  ' ?highlight =  '  + $ . urlencode ( hlterms . join (  "  "  )  )  ; %NWL%var filenames = this . _index . filenames ; %NWL%var titles = this . _index . titles ; %NWL%var terms = this . _index . terms ; %NWL%var objects = this . _index . objects ; %NWL%var objtypes = this . _index . objtypes ; %NWL%6
Ray . prototype [ Shape . CIRCLE ]  = Ray . prototype . intersectCircle ; %NWL%Ray . prototype . getAABB = function ( result )  {%NWL%var to = this . to ; %NWL%var from = this . from ; %NWL%result . lowerBound [ 0 ]  = Math . min ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . lowerBound [ 1 ]  = Math . min ( to [ 1 ]  , from [ 1 ]  )  ; %NWL%result . upperBound [ 0 ]  = Math . max ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . upperBound [ 1 ]  = Math . max ( to [ 1 ]  , from [ 1 ]  )  ;%NWL%}  ; %NWL%Ray . prototype . reportIntersection = function ( normal , hitPointWorld , shape , body , hitFaceIndex )  {%NWL%var from = this . from ; %NWL%2
}  ,%NWL%jsonToFacets : function ( json )  {%NWL%if ( !json ) json =  {  }  ; %NWL%if ( _ . isArray ( json )  )  {%NWL%this . facets . reset ( json )  ; %NWL%return ;%NWL%}%NWL%var attrs , id , order ; %NWL%var models =  [  ]  ; %NWL%var columns = json . columns || [  ]  ; %NWL%var ordering = json . ordering || [  ]  ; %NWL%9
var RequireEnsurePlugin = require (  "  .  / dependencies / RequireEnsurePlugin "  )  ; %NWL%var RequireIncludePlugin = require (  "  .  / dependencies / RequireIncludePlugin "  )  ; %NWL%var RemoveParentModulesPlugin = require (  "  .  / optimize / RemoveParentModulesPlugin "  )  ; %NWL%var RemoveEmptyChunksPlugin = require (  "  .  / optimize / RemoveEmptyChunksPlugin "  )  ; %NWL%var MergeDuplicateChunksPlugin = require (  "  .  / optimize / MergeDuplicateChunksPlugin "  )  ; %NWL%var FlagIncludedChunksPlugin = require (  "  .  / optimize / FlagIncludedChunksPlugin "  )  ; %NWL%var UnsafeCachePlugin = require (  " enhanced - resolve / lib / UnsafeCachePlugin "  )  ; %NWL%var ModulesInDirectoriesPlugin = require (  " enhanced - resolve / lib / ModulesInDirectoriesPlugin "  )  ; %NWL%var ModulesInRootPlugin = require (  " enhanced - resolve / lib / ModulesInRootPlugin "  )  ; %NWL%var ModuleTemplatesPlugin = require (  " enhanced - resolve / lib / ModuleTemplatesPlugin "  )  ; %NWL%var ModuleAsFilePlugin = require (  " enhanced - resolve / lib / ModuleAsFilePlugin "  )  ; %NWL%6
var compass = require (  ' gulp - compass '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var autoprefixer = require (  ' gulp - autoprefixer '  )  ; %NWL%var foreach = require (  ' gulp - foreach '  )  ; %NWL%var del = require (  ' del '  )  ; %NWL%var i18n_replace = require (  '  .  / gulp_scripts / i18n_replace '  )  ; %NWL%var closureCompiler = require (  ' gulp - closure - compiler '  )  ; %NWL%var mergeStream = require (  ' merge - stream '  )  ; %NWL%var argv = require (  ' yargs '  )  . argv ; %NWL%var replace = require (  ' gulp - replace '  )  ; %NWL%var newer = require (  ' gulp - newer '  )  ; %NWL%0
this . assertEqual (  ' TEXTAREA '  , textar . _ . tagName )  ; %NWL%this . assertEqual (  ' SELECT '  ,  select . _ . tagName )  ;%NWL%}  ,%NWL%testInstanceWithoutTag : function (  )  {%NWL%var input  = new Input (  )  ; %NWL%var chck  = new Input (  { type :  ' checkbox '  }  )  ; %NWL%var radio  = new Input (  { type :  ' radio '  }  )  ; %NWL%var hidd  = new Input (  { type :  ' hidden '  }  )  ; %NWL%var butt  = new Input (  { type :  ' button '  }  )  ; %NWL%var texta  = new Input (  { type :  ' textarea '  }  )  ; %NWL%var select = new Input (  { type :  ' select '  }  )  ; %NWL%6
$scope . betterParseInt ( $scope . numLarge )  + $scope . betterParseInt ( $scope . numXLarge )  +%NWL%$scope . betterParseInt ( $scope . num2XLarge )  + $scope . betterParseInt ( $scope . num3XLarge )  +%NWL%$scope . betterParseInt ( $scope . num4XLarge )  + $scope . betterParseInt ( $scope . num5XLarge )  )  ;%NWL%}  ; %NWL%$scope . allCalculations = function (  )  {%NWL%var numFrontColors = parseInt ( $scope . numFrontImprintColors , 10 )  ; %NWL%var numBackColors = parseInt ( $scope . numBackImprintColors , 10 )  ; %NWL%var darkColor = $scope . color . dark ; %NWL%var shirtCharge = $scope . shirt . cost ; %NWL%var num2XL = $scope . betterParseInt ( $scope . num2XLarge )  ; %NWL%var num3XL = $scope . betterParseInt ( $scope . num3XLarge )  ; %NWL%9
assert . deepEqual ( doc . fans [ 2 ]  . toObject (  )  , user3 . toObject (  )  )  ; %NWL%var user4 = user (  ' user4 '  )  ; %NWL%doc . fans . nonAtomicPush ( user4 )  ; %NWL%assert . deepEqual ( doc . fans [ 3 ]  . toObject (  )  , user4 . toObject (  )  )  ; %NWL%var user5 = user (  ' user5 '  )  ; %NWL%doc . fans . splice ( 2 , 1 , user5 )  ; %NWL%assert . deepEqual ( doc . fans [ 2 ]  . toObject (  )  , user5 . toObject (  )  )  ; %NWL%var user6 = user (  ' user6 '  )  ; %NWL%doc . fans . unshift ( user6 )  ; %NWL%assert . deepEqual ( doc . fans [ 0 ]  . toObject (  )  , user6 . toObject (  )  )  ; %NWL%var user7 = user (  ' user7 '  )  ; %NWL%1
}%NWL%dojox . storage . put (  " justDebugged "  , dojo . config . isDebug , null ,%NWL%dojox . off . STORAGE_NAMESPACE )  ; %NWL%callback ( false ,  [  ]  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ,%NWL%_getVersionInfo : function ( callback )  {%NWL%var justDebugged = dojox . storage . get (  " justDebugged "  ,%NWL%dojox . off . STORAGE_NAMESPACE )  ; %NWL%var oldVersion = dojox . storage . get (  " oldVersion "  ,%NWL%8
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
area -  = a . y * b . x ;%NWL%}%NWL%area *  = 0 . 5 ; %NWL%return area ;%NWL%}  ,%NWL%getBoundingCircle : function (  )  {%NWL%var Circle = require (  '  .  / Circle '  )  ; %NWL%return Circle . newBoundingCircle ( this . vertices )  ;%NWL%}  ,%NWL%getBounds : function (  )  {%NWL%var Rect = require (  '  .  / Rect '  )  ; %NWL%6
}%NWL%}  ; %NWL%computeTotal (  [ this . get (  ' rootNode '  )  ]  )  ; %NWL%return total ;%NWL%}  )  . property (  ' rootNode '  )  ,%NWL%adjustXScaleRange : Ember . on (  ' init '  , Ember . observer ( function (  )  {%NWL%this . get (  ' xScale '  )  . range (  [ 0 , this . get (  ' barsWidth '  )  ]  )  ;%NWL%}  ,  ' barsWidth '  )  )  ,%NWL%adjustYScaleRange : Ember . on (  ' init '  , Ember . observer ( function (  )  {%NWL%let rowHeight = this . get (  ' rowHeight '  )  ; %NWL%let rowSpacing = this . get (  ' rowSpacing '  )  ; %NWL%9
var descriptions = this . model . get (  " tableDescription "  ) || [  ]  ; %NWL%_ . each ( descriptions , function ( description )  { description . subType =  ' table_description '  ;  }  )  ; %NWL%return descriptions ;%NWL%}  ,%NWL%getColumns : function (  )  {%NWL%var columns = this . model . get (  " columns "  ) || [  ]  ; %NWL%_ . each ( columns , function ( column )  { column . subType =  ' column '  ;  }  )  ; %NWL%return columns ;%NWL%}  ,%NWL%getColumnDescriptions : function (  )  {%NWL%var columnDescriptions = this . model . get (  " columnDescriptions "  ) || [  ]  ; %NWL%5
var url = require (  ' url '  )  ; %NWL%var cicada = require (  ' cicada '  )  ; %NWL%var normalizeBrowsers = require (  ' normalize - browser - names '  )  ; %NWL%var verify = function ( info , cb )  { cb (  )  }  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var through = require (  ' through '  )  ; %NWL%var createHandle = require (  '  .  / handle . js '  )  ; %NWL%var checkPackage = require (  '  .  / check_package . js '  )  ; %NWL%var prepare = require (  '  .  / prepare . js '  )  ; %NWL%var compile = require (  '  .  / compile . js '  )  ; %NWL%var visit = require (  '  .  / visit . js '  )  ; %NWL%8
}  ,%NWL%save : function ( store , commitDetails )  {%NWL%var relationships = commitDetails . relationships ; %NWL%relationships . forEach ( function ( relationship )  {%NWL%var child = relationship . getChild (  )  ,%NWL%oldParent = relationship . getOldParent (  )  ,%NWL%newParent = relationship . getNewParent (  )  ; %NWL%if ( child =  =  = undefined || !this . any ( child , commitDetails )  )  {%NWL%this . updateChildRelationship ( store , relationship )  ;%NWL%}%NWL%if ( oldParent =  =  = undefined || !this . any ( oldParent , commitDetails )  )  {%NWL%7
}  )  ;%NWL%}%NWL%INModelObject . prototype . update = function ( data )  {%NWL%if ( !data ) return ; %NWL%var mapping = this . resourceMapping ; %NWL%var updated = data [  ' __converted_from_raw__ '  ] || false ; %NWL%forEach ( mapping , function copyMappedProperties ( mappingInfo , propertyName )  {%NWL%var cast = mappingInfo . to ; %NWL%var merge = mappingInfo . merge ; %NWL%var jsonKey = mappingInfo . jsonKey ; %NWL%var cnst = mappingInfo . cnst ; %NWL%8
{ args :  ' user_42 , group_51 '  , expected :  ' user_42 , group_51 '  }  ,%NWL%{ args :  [  ' user_42 '  ,  ' group_51 '  ]  , expected :  ' user_42 , group_51 '  }  ,%NWL%{ args :  [  ' user_42 '  ,  [  ' group_50 '  ,  ' group_51 '  ]  ]  , expected :  ' user_42 ,  ( group_50 , group_51 )  '  }%NWL%]  ; %NWL%t . plan ( 1 + testCases . length )  ; %NWL%var fauxJax = require (  ' faux - jax '  )  ; %NWL%var parse = require (  ' url - parse '  )  ; %NWL%var createFixture = require (  '  .  .  /  .  .  /  .  .  / utils / create - fixture '  )  ; %NWL%var fixture = createFixture (  )  ; %NWL%var client = fixture . client ; %NWL%var index = fixture . index ; %NWL%9
}  )  ; %NWL%var LogicALL = declare (  " dojox . grid . enhanced . plugins . filter . LogicALL "  , exprs . _OperatorExpr ,  {%NWL%_name :  " all "  ,%NWL%applyRow : function ( datarow , getter )  {%NWL%for ( var i = 0 , res = true ; res && ( this . _operands [ i ] instanceof exprs . _ConditionExpr )  ;  +  + i )  {%NWL%res = this . _operands [ i ]  . applyRow ( datarow , getter )  . getValue (  )  ;%NWL%}%NWL%return new exprs . BooleanExpr ( res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LogicANY = declare (  " dojox . grid . enhanced . plugins . filter . LogicANY "  , exprs . _OperatorExpr ,  {%NWL%1
}  )  )  ; %NWL%it (  ' should create table header titles '  , function (  )  {%NWL%var thead = elm . find (  ' thead '  )  ; %NWL%var rows = thead . find (  ' tr '  )  ; %NWL%var titles = angular . element ( rows [ 0 ]  )  . find (  ' th '  )  ; %NWL%expect ( angular . element ( titles [ 0 ]  )  . attr (  ' title '  )  . trim (  )  )  . toBe (  ' Sort by Name '  )  ; %NWL%expect ( angular . element ( titles [ 1 ]  )  . attr (  ' title '  )  . trim (  )  )  . toBe (  ' Sort by Age '  )  ; %NWL%expect ( angular . element ( titles [ 2 ]  )  . attr (  ' title '  )  . trim (  )  )  . toBe (  ' Sort by Money '  )  ;%NWL%}  )  ; %NWL%it (  ' should show data - title - text '  , inject ( function ( NgTableParams )  {%NWL%var tbody = elm . find (  ' tbody '  )  ; %NWL%2
}%NWL%categories . sort (  )  ; %NWL%list . appendChild ( render (  ' Random Pony '  ,%NWL%' ponies / random%20pony / random - pony . gif '  , 0 , categories )  )  ; %NWL%for ( var i = 0 , n = names . length ; i < n ;  +  + i )  {%NWL%var pony = ponies [ names [ i ]  ]  ; %NWL%list . appendChild ( render ( pony . name , pony . all_behaviors [ 0 ]  . rightimage ,%NWL%pony . instances . length , pony . categories )  )  ;%NWL%}%NWL%var catselect = $ (  ' catselect '  )  ; %NWL%var catlist  = $ (  ' catlist '  )  ; %NWL%9
var inIn  = this . inputs [ 0 ]  ; %NWL%var next_srclo = this . inputs [ 1 ]  [ 0 ] || 0 . 001 ; %NWL%var next_srchi = this . inputs [ 2 ]  [ 0 ] || 0 . 001 ; %NWL%var next_dstlo = this . inputs [ 3 ]  [ 0 ] || 0 . 001 ; %NWL%var next_dsthi = this . inputs [ 4 ]  [ 0 ] || 0 . 001 ; %NWL%var srclo = this . _srclo ; %NWL%var srchi = this . _srchi ; %NWL%var dstlo = this . _dstlo ; %NWL%var dsthi = this . _dsthi ; %NWL%var x = this . _x ; %NWL%var y = this . _y ; %NWL%5
startButton . disabled = true ; %NWL%stopButton . disabled = false ; %NWL%video . lastSeekTime = video . currentTime ;%NWL%}%NWL%}%NWL%function computeWaitingTimeFromBuffer ( v )  {%NWL%var ms = v . ms ; %NWL%var sb ; %NWL%var startRange , endRange ; %NWL%var currentTime = v . currentTime ; %NWL%var playbackRate = v . playbackRate ; %NWL%6
var me = this ; %NWL%var destroyBeforeAppend = treeRequest . get (  ' destroyBeforeAppend '  )  ; %NWL%var url = treeRequest . get (  ' url '  )  ; %NWL%var isLeaf = treeRequest . get (  ' isLeaf '  )  ; %NWL%var enableCheckSelection = treeRequest . get (  ' enableCheckedItems '  )  ; %NWL%var nodeToAppendTo = treeRequest . get (  ' nodeToAppendTo '  )  ; %NWL%var nodeType = treeRequest . get (  ' nodeType '  )  ; %NWL%var expanded = treeRequest . get (  ' expanded '  )  ; %NWL%var expandable = treeRequest . get (  ' expandable '  )  ; %NWL%var callbackFunc = treeRequest . get (  ' callbackFunc '  )  ; %NWL%var callbackScope = treeRequest . get (  ' callbackScope '  )  ; %NWL%1
d3 . select ( planet . canvas )  . call ( zoom )  ;%NWL%}  )  ;%NWL%}  ;%NWL%}  ; %NWL%planetaryjs . plugins . drag = function ( options )  {%NWL%options = options || {  }  ; %NWL%var noop = function (  )  {  }  ; %NWL%var onDragStart = options . onDragStart || noop ; %NWL%var onDragEnd  = options . onDragEnd || noop ; %NWL%var onDrag   = options . onDrag  || noop ; %NWL%var afterDrag  = options . afterDrag || noop ; %NWL%8
}%NWL%function applyDepthTest ( gl , renderState )  {%NWL%var depthTest = renderState . depthTest ; %NWL%var enabled = depthTest . enabled ; %NWL%enableOrDisable ( gl , gl . DEPTH_TEST , enabled )  ; %NWL%if ( enabled )  {%NWL%gl . depthFunc ( depthTest . func )  ;%NWL%}%NWL%}%NWL%function applyColorMask ( gl , renderState )  {%NWL%var colorMask = renderState . colorMask ; %NWL%2
if ( window . getComputedStyle )  {%NWL%ret = document . defaultView . getComputedStyle ( elem , null )  . getPropertyValue ( prop )%NWL%} else if ( elem . currentStyle )  {%NWL%ret = elem . currentStyle [ prop ]%NWL%}%NWL%return ret%NWL%}%NWL%return {%NWL%ruby :  ( function (  )  {%NWL%var ruby = $ . create (  ' ruby '  )%NWL%var rt = $ . create (  ' rt '  )%NWL%9
if ( expired && !inst . _expiring )  {%NWL%inst . _expiring = true ; %NWL%if ( this . _hasTarget ( target ) || this . _get ( inst ,  ' alwaysExpire '  )  )  {%NWL%this . _removeTarget ( target )  ; %NWL%var onExpiry = this . _get ( inst ,  ' onExpiry '  )  ; %NWL%if ( onExpiry )  {%NWL%onExpiry . apply ( target ,  [  ]  )  ;%NWL%}%NWL%var expiryText = this . _get ( inst ,  ' expiryText '  )  ; %NWL%if ( expiryText )  {%NWL%var layout = this . _get ( inst ,  ' layout '  )  ; %NWL%4
var left = this . get (  ' left '  )  ; %NWL%return formatter ? formatter ( left )  : left ;%NWL%}  )  ,%NWL%rightDisplay : Ember . computed (  ' right '  ,  ' formatter '  , function (  )  {%NWL%var formatter = this . get (  ' formatter '  )  ; %NWL%var right = this . get (  ' right '  )  ; %NWL%return formatter ? formatter ( right )  : right ;%NWL%}  )  ,%NWL%isVisible : Ember . computed (  ' left '  ,  ' right '  , function (  )  {%NWL%var left =  + this . get (  ' left '  )  ; %NWL%var right =  + this . get (  ' right '  )  ; %NWL%9
}%NWL%$ (  "  . btn "  , this . el )  . removeClass (  " disabled "  )  ; %NWL%this . loader . hide (  )  ; %NWL%this . contentScrollApi . reinitialise (  )  ; %NWL%this . contentScrollApi . scrollToPercentX ( 0 . 5 )  ; %NWL%this . contentScrollApi . scrollToPercentY ( 0 . 5 )  ; %NWL%return this ;%NWL%}  ,%NWL%fetchFlows : function (  )  {%NWL%var interval = this . timelineModel . get (  " interval "  )  ; %NWL%var bucket_size = this . timelineModel . get (  " bucket_size "  )  ; %NWL%9
}%NWL%}%NWL%args . push ( callback )  ;  /  / Add the callback function as the last argument .%NWL%f . apply ( fs , args )  ;  /  / raw node doesn ' t need fs to be passed for ' this ' but%NWL%return d . promise ;%NWL%}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%9
return tldRE ;  /  / String%NWL%}%NWL%dojox . regexp . ipAddress = function ( flags )  {%NWL%flags =  ( typeof flags =  =  " object "  ) ? flags :  {  }  ; %NWL%if ( typeof flags . allowDottedDecimal ! =  " boolean "  )  { flags . allowDottedDecimal = true ;  }%NWL%if ( typeof flags . allowDottedHex ! =  " boolean "  )  { flags . allowDottedHex = true ;  }%NWL%if ( typeof flags . allowDottedOctal ! =  " boolean "  )  { flags . allowDottedOctal = true ;  }%NWL%if ( typeof flags . allowDecimal ! =  " boolean "  )  { flags . allowDecimal = true ;  }%NWL%if ( typeof flags . allowHex ! =  " boolean "  )  { flags . allowHex = true ;  }%NWL%if ( typeof flags . allowIPv6 ! =  " boolean "  )  { flags . allowIPv6 = true ;  }%NWL%if ( typeof flags . allowHybrid ! =  " boolean "  )  { flags . allowHybrid = true ;  }%NWL%4
var rpc_options = require (  '  .  / test_rpc_options . js '  )  ; %NWL%var rpc_progress = require (  '  .  / test_rpc_progress . js '  )  ; %NWL%var rpc_slowsquare = require (  '  .  / test_rpc_slowsquare . js '  )  ; %NWL%var rpc_routing = require (  '  .  / test_rpc_routing . js '  )  ; %NWL%var rpc_caller_disclose_me = require (  '  .  / test_rpc_caller_disclose_me . js '  )  ; %NWL%var pubsub_basic = require (  '  .  / test_pubsub_basic . js '  )  ; %NWL%var pubsub_complex = require (  '  .  / test_pubsub_complex . js '  )  ; %NWL%var pubsub_options = require (  '  .  / test_pubsub_options . js '  )  ; %NWL%var pubsub_excludme = require (  '  .  / test_pubsub_excludeme . js '  )  ; %NWL%var pubsub_exclude = require (  '  .  / test_pubsub_exclude . js '  )  ; %NWL%var pubsub_eligible = require (  '  .  / test_pubsub_eligible . js '  )  ; %NWL%0
var http  = require (  ' http '  )  ; %NWL%var config = CONF . server ; %NWL%function setup (  )  {%NWL%return {%NWL%port : process . env . PORT || config . port || 4000 ,%NWL%host : config . host || ' 127 . 0 . 0 . 1 '%NWL%}  ;%NWL%}%NWL%function server ( app , conf )  {%NWL%var host = conf . host ; %NWL%var port = conf . port ; %NWL%9
}  , 100 )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%exports . shouldFailToValidateServerSSLCertificate =  {%NWL%metadata :  { requires :  { topology :  ' ssl '  }  }  ,%NWL%test : function ( configuration , test )  {%NWL%var ReplSetManager = require (  ' mongodb - tools '  )  . ReplSetManager%NWL%, Db = configuration . require . Db%NWL%, Server = configuration . require . Server%NWL%9
var mCSB_dragger = mCSB_draggerContainer . children (  "  . mCSB_dragger "  )  ; %NWL%if ( $this . data (  " horizontalScroll "  )  )  {%NWL%var mCSB_buttonLeft = mCSB_scrollTools . children (  "  . mCSB_buttonLeft "  )  ; %NWL%var mCSB_buttonRight = mCSB_scrollTools . children (  "  . mCSB_buttonRight "  )  ; %NWL%var mCustomScrollBoxW = mCustomScrollBox . width (  )  ; %NWL%if ( $this . data (  " autoExpandHorizontalScroll "  )  )  {%NWL%mCSB_container . css (  {  " position "  :  " absolute "  ,  " width "  :  " auto "  }  )  . wrap (  "  < div class =  ' mCSB_h_wrapper ' style =  ' position : relative ; left : 0 ; width : 999999px ;  '  /  >  "  )  . css (  {  " width "  : mCSB_container . outerWidth (  )  ,  " position "  :  " relative "  }  )  . unwrap (  )  ;%NWL%}%NWL%var mCSB_containerW = mCSB_container . outerWidth (  )  ;%NWL%} else {%NWL%var mCSB_buttonUp = mCSB_scrollTools . children (  "  . mCSB_buttonUp "  )  ; %NWL%2
var spriteTable = null ; %NWL%var palettes =  [  ]  ; %NWL%var currentFile = null ; %NWL%self . init = function ( config )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Input '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%var wrap = document . createElement (  ' div '  )  ; %NWL%var span = document . createElement (  ' span '  )  ; %NWL%4
var  argv = require (  ' optimist '  )%NWL%. usage (  " Usage : $0 -  - host [ host ]  -  - port [ port ]  -  - username [ username ]  -  - password [ password ]  -  - debug [ on / off ]  -  - networkdebug [ on / off ]  -  - auth [ plain / cram - md5 ]  -  - tls [ on / off ]  -  - download [ on / off ]  "  )%NWL%. demand (  [  ' username '  ,  ' password '  ,  ' auth '  ]  )%NWL%. describe (  ' auth '  ,  ' Valid AUTH types : plain , cram - md5 '  )%NWL%. argv ; %NWL%var host = argv . host || " localhost "  ; %NWL%var port = argv . port || 110 ; %NWL%var debug = argv . debug =  =  =  " on " ? true : false ; %NWL%var tls = argv . tls =  =  =  " on " ? true : false ; %NWL%var auth = argv . auth ; %NWL%var download = argv . download =  =  =  " on " ? true : false ; %NWL%7
delete_tag = process . argv [ 3 ]  ;%NWL%}%NWL%else if ( process . argv [ 2 ]  =  =  "  -  - rename "  )  {%NWL%if ( process . argv . length < 5 ) throw (  " parameters missing "  )  ; %NWL%rename_tag_from = process . argv [ 3 ]  ; %NWL%rename_tag_to = process . argv [ 4 ]  ;%NWL%}%NWL%else throw (  " unknown parameter "  )  ;%NWL%}%NWL%var async = require (  ' async '  )  ; %NWL%var mysql = require (  ' mysql '  )  ; %NWL%9
}  )  )  ;%NWL%}  )  )  ; %NWL%var max = d3 . max ( data . map ( function ( series )  {%NWL%return d3 . max ( series . values . map ( function ( point )  {%NWL%return point . x ;%NWL%}  )  )  ;%NWL%}  )  )  ; %NWL%xExtent =  [ min , max ]  ;%NWL%}%NWL%var fetchYExtent = function (  )  {%NWL%var min = d3 . min ( data . map ( function ( series )  {%NWL%2
var granularity = defaultValue ( options . granularity , CesiumMath . RADIANS_PER_DEGREE )  ; %NWL%var height = defaultValue ( options . height , 0 . 0 )  ; %NWL%var perPositionHeight = defaultValue ( options . perPositionHeight , false )  ; %NWL%var extrudedHeight = options . extrudedHeight ; %NWL%var extrude =  ( defined ( extrudedHeight ) && ( !CesiumMath . equalsEpsilon ( height , extrudedHeight , CesiumMath . EPSILON6 ) || perPositionHeight )  )  ; %NWL%if ( extrude )  {%NWL%var h = extrudedHeight ; %NWL%extrudedHeight = Math . min ( h , height )  ; %NWL%height = Math . max ( h , height )  ;%NWL%}%NWL%var polygonHierarchy = options . polygonHierarchy ; %NWL%3
streamifyClassNameBinding%NWL%} from " ember - views / streams / class_name_binding "  ; %NWL%import mergeViewBindings from " ember - htmlbars / system / merge - view - bindings "  ; %NWL%export function collectionHelper ( params , hash , options , env )  {%NWL%var path = params [ 0 ]  ; %NWL%Ember . deprecate (  " Using the {  { collection }  } helper without specifying a class has been "  +%NWL%" deprecated as the {  { each }  } helper now supports the same functionality .  "  , path ! =  =  ' collection '  )  ; %NWL%Ember . assert (  " You cannot pass more than one argument to the collection helper "  , params . length <  = 1 )  ; %NWL%var data  = env . data ; %NWL%var template = options . template ; %NWL%var inverse  = options . inverse ; %NWL%9
return Rule ;%NWL%}  )  ( Lint . Rules . AbstractRule )  ; %NWL%exports . Rule = Rule ; %NWL%var NoTrailingWhitespaceWalker =  ( function ( _super )  {%NWL%__extends ( NoTrailingWhitespaceWalker , _super )  ; %NWL%function NoTrailingWhitespaceWalker (  )  {%NWL%_super . apply ( this , arguments )  ;%NWL%}%NWL%NoTrailingWhitespaceWalker . prototype . visitToken = function ( token )  {%NWL%var leadingTrivia = token . leadingTrivia (  )  ; %NWL%var trailingTrivia = token . trailingTrivia (  )  ; %NWL%9
deprecate (  ' res . json ( obj , status )  : Use res . status ( status )  . json ( obj ) instead '  )  ; %NWL%this . statusCode = arguments [ 1 ]  ;%NWL%} else {%NWL%deprecate (  ' res . json ( status , obj )  : Use res . status ( status )  . json ( obj ) instead '  )  ; %NWL%this . statusCode = arguments [ 0 ]  ; %NWL%val = arguments [ 1 ]  ;%NWL%}%NWL%}%NWL%var app = this . app ; %NWL%var replacer = app . get (  ' json replacer '  )  ; %NWL%var spaces = app . get (  ' json spaces '  )  ; %NWL%9
mat4 . multiply ( this . localTransform . _array , tmp , this . worldTransform . _array )  ;%NWL%} else {%NWL%mat4 . copy ( this . localTransform . _array , this . worldTransform . _array )  ;%NWL%}%NWL%var scale = !keepScale ? this . scale : null ; %NWL%this . localTransform . decomposeMatrix ( scale , this . rotation , this . position )  ;%NWL%}  ;%NWL%}  )  (  )  ,%NWL%updateLocalTransform : function (  )  {%NWL%var position = this . position ; %NWL%var rotation = this . rotation ; %NWL%9
var binarySearch = require (  '  .  / binary - search '  )  ; %NWL%var ArraySet = require (  '  .  / array - set '  )  . ArraySet ; %NWL%var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%8
binoper (  ' !~ '  )  ; %NWL%binoper (  ' is '  )  ; %NWL%binoper (  ' as '  )  ; %NWL%binoper (  '  .  .  '  )  ; %NWL%binoper (  '  .  .  .  '  )  ; %NWL%binoper (  ' MEMBER '  )  ; %NWL%schemata [ nt [  ' and '  ]  ]  = schemata [ nt [  ' && '  ]  ]  = function (  )  {%NWL%var left = pep ( this . left )  ; %NWL%var lElse = makeT (  )  ; %NWL%flow . pushStatement ( BN ( left , lElse )  )  ; %NWL%var right = pep ( this . right )  ; %NWL%7
, path = require (  ' path '  )%NWL%, connect = require (  ' connect '  )%NWL%, utils = connect . utils%NWL%, normalizeType = require (  '  .  / utils '  )  . normalizeType%NWL%, normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes%NWL%, statusCodes = http . STATUS_CODES%NWL%, send = connect . static . send%NWL%, crc = require (  ' crc '  )%NWL%, mime = require (  ' mime '  )%NWL%, basename = path . basename%NWL%, extname = path . extname%NWL%9
}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%var align = this . align_ ; %NWL%6
var html =  '  < td class =  " cell "  > cell 1 <  / td >  < td > cell 2 <  / td >  '  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%document . createElement (  ' tbody '  )  . appendChild ( tr )  ; %NWL%document . createElement (  ' table '  )  . appendChild ( tr . parentNode )  ; %NWL%dh . overwrite ( tr , html )  ; %NWL%expect ( tr . childNodes . length )  . toEqual ( 2 )  ; %NWL%expect ( tr . firstChild . className )  . toEqual (  ' cell '  )  ;%NWL%}  )  ; %NWL%it (  " should set the html of a td Element "  , function (  )  {%NWL%var html =  '  < span class =  " span "  > Some Span <  / span >  < a href =  " # "  > Some Link <  / a >  '  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%1
}  )  ; %NWL%alert (  ' Navigate was '  +  ( result . success ? ' successful! '  :  ' unsuccessful . Error :  '  + result . errorMessage )  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%epiviz . data . MockDataProvider . prototype . connected = function (  )  { return true ;  }  ; %NWL%epiviz . data . MockDataProvider . prototype . getData = function ( request , callback )  {%NWL%var requestId = request . id (  )  ; %NWL%var action = request . get (  ' action '  )  ; %NWL%var seqName = request . get (  ' chr '  )  ; %NWL%var start = request . get (  ' start '  )  ; %NWL%var end = request . get (  ' end '  )  ; %NWL%7
var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var contentDisposition = require (  '  .  / utils '  )  . contentDisposition ; %NWL%var deprecate = require (  '  .  / utils '  )  . deprecate ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%var send = require (  ' send '  )  ; %NWL%var basename = path . basename ; %NWL%var extname = path . extname ; %NWL%9
}  ,%NWL%_updateModifiedNodes : function (  )%NWL%{%NWL%if ( this . _updateModifiedNodesTimeout )  {%NWL%clearTimeout ( this . _updateModifiedNodesTimeout )  ; %NWL%delete this . _updateModifiedNodesTimeout ;%NWL%}%NWL%var updatedParentTreeElements =  [  ]  ; %NWL%for ( var i = 0 ; i < this . _recentlyModifiedNodes . length ;  +  + i )  {%NWL%var parent = this . _recentlyModifiedNodes [ i ]  . parent ; %NWL%var node = this . _recentlyModifiedNodes [ i ]  . node ; %NWL%9
}%NWL%}%NWL%}  ; %NWL%new Twitter . Ajax ( url , parameters )  . request (  )  ;%NWL%}%NWL%Twitter . FriendsTimeline = function ( params )  {%NWL%if ( typeof params . update =  =  " string "  )  {%NWL%params . update = document . getElementById ( params . update )  ;%NWL%}%NWL%var user = params . user ; %NWL%var update = params . update ; %NWL%9
nVAdj = parseInt ( oHotspot . height / 2 - this . height / 2 )  ;%NWL%} else if ( nVAdj =  =  ' b '  )  {%NWL%nVAdj = oHotspot . height - this . height ;%NWL%}%NWL%this . _doLocate ( popX + nHAdj , popY + nVAdj )  ;%NWL%}  ; %NWL%N2SimplePopover . prototype . _locateLinkLeft = function ( oHotspot )  {%NWL%var popX = oHotspot . absleft - this . width ; %NWL%var popY = oHotspot . abstop ; %NWL%var nHAdj = this . nHAdjust ; %NWL%var nVAdj = this . nVAdjust ; %NWL%9
[ anchor , options ]  =  [ options , null ]  ;%NWL%}%NWL%if ( anchor instanceof Ci . nsIDOMElement )  {%NWL%console . warn (%NWL%" Passing a DOM node to Panel . show (  ) method is an unsupported "  +%NWL%" feature that will be soon replaced .  "  +%NWL%" See : https :  /  / bugzilla . mozilla . org / show_bug . cgi?id = 878877 "%NWL%)  ;%NWL%}%NWL%let model = modelFor ( this )  ; %NWL%let view = viewFor ( this )  ; %NWL%9
}  ; %NWL%var trainsHeader = data . trainsHeader ; %NWL%var trains = data . trains ; %NWL%var stations = data . stations ; %NWL%var trainRoutes = data . trainRoutes ; %NWL%var trainTypes = data . trainTypes ; %NWL%var specialLines = data . specialLines ; %NWL%var trainAttributesTrainNumbers = data . trainAttributesTrainNumbers ; %NWL%var trainAttributesProperties = data . trainAttributesProperties ; %NWL%var trainAttributesDaysValid = data . trainAttributesDaysValid ; %NWL%var trainAttributesBorderCrossings = data . trainAttributesBorderCrossings ; %NWL%1
var express = require (  ' express '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var logger = require (  ' morgan '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var crypto = require (  ' crypto '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var session = require (  '  .  / lib / session '  )  ; %NWL%var config = require (  '  .  / lib / config '  )  ; %NWL%9
this . weightSchedule . push (  {%NWL%anim : toAnim ,%NWL%startWeight : 0 ,%NWL%endWeight : 1 ,%NWL%timeElapsed : 0 ,%NWL%duration : duration%NWL%}  )  ;%NWL%}  ; %NWL%this . warp = function ( fromAnimName , toAnimName , duration )  {%NWL%var fromAnim = this . animations [ fromAnimName ]  ; %NWL%var toAnim = this . animations [ toAnimName ]  ; %NWL%9
var JSONStream = require (  ' JSONStream '  )  ; %NWL%var split = require (  ' split '  )  ; %NWL%var qs = require (  ' querystring '  )  ; %NWL%var encode = require (  ' he '  )  . encode ; %NWL%var concat = require (  ' concat - stream '  )  ; %NWL%var exec = require (  ' child_process '  )  . exec ; %NWL%var run = require (  ' comandante '  )  ; %NWL%var OrderedEmitter = require (  ' ordered - emitter '  )  ; %NWL%var inherits = require (  ' inherits '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var fs = require (  ' fs '  )  ; %NWL%0
this . _autoCapturingMainResource = null ; %NWL%this . dispatchEventToListeners ( WebInspector . TimelineManager . Event . CapturingStopped )  ;%NWL%}  ,%NWL%eventRecorded : function ( originalRecordPayload )%NWL%{%NWL%if ( !this . _isCapturing )%NWL%return ; %NWL%function processRecord ( recordPayload , parentRecordPayload )%NWL%{%NWL%var startTime = recordPayload . startTime / 1000 ; %NWL%var endTime = recordPayload . endTime / 1000 ; %NWL%9
show : function (  )  {%NWL%if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%var parentNode = this . parentNode ; %NWL%5
writer (  ( right * xScale )  - 1 ,  ( top * yScale )  + 1 )  ; %NWL%writer (  ( left * xScale )  - 1 ,  ( bottom * yScale )  + 1 )  ; %NWL%writer (  ( right * xScale )  - 1 ,  ( bottom * yScale )  + 1 )  ; %NWL%gd . endDraw ( writer )  ; %NWL%writer = null ;%NWL%}%NWL%}%NWL%var textureWidthHalf = this . textureWidthHalf ; %NWL%var textureHeightHalf = this . textureHeightHalf ; %NWL%if ( 0 < textureWidthHalf && 0 < textureAlpha )  {%NWL%var textureMaterial = this . textureMaterial ; %NWL%7
var subscribed = req . param (  ' subscribed '  )  ; %NWL%if ( subscribed ! =  = undefined )  {%NWL%subscribed = subscribed =  =  =  ' true ' ? true : false ; %NWL%sendy . setSubscribed (  {%NWL%name : req . user . name ,%NWL%email : email ,%NWL%id : req . user . id%NWL%}  , !!subscribed )  ;%NWL%}%NWL%var updateOwnershipData = Promise . denodeify ( session . models . user . updateOwnershipData )  . bind ( session . models . user )  ; %NWL%var updateKey = Promise . denodeify ( session . models . user . updateKey )  . bind ( session . models . user )  ; %NWL%9
var user     = require (  "  .  / controllers / user "  )  ; %NWL%var fixedAsset   = require (  "  .  / controllers / fixedAsset "  )  ; %NWL%var fixedAssetHistory = require (  "  .  / controllers / fixedAssetHistory "  )  ; %NWL%var faType    = require (  "  .  / controllers / faType "  )  ; %NWL%var department   = require (  "  .  / controllers / department "  )  ; %NWL%var others    = require (  "  .  / controllers / others "  )  ; %NWL%var login    = require (  "  .  / controllers / login "  )  ; %NWL%var logout    = require (  "  .  / controllers / logout "  )  ; %NWL%var company    = require (  "  .  / controllers / company "  )  ; %NWL%var authUser    = require (  "  .  / controllers / authUser "  )  ; %NWL%var giftCategory   = require (  "  .  / controllers / giftCategory "  )  ; %NWL%0
var fs = require (  ' graceful - fs '  )%NWL%, osenv = require (  ' osenv '  )%NWL%, tar = require (  ' tar '  )%NWL%, rm = require (  ' rimraf '  )%NWL%, path = require (  ' path '  )%NWL%, crypto = require (  ' crypto '  )%NWL%, zlib = require (  ' zlib '  )%NWL%, log = require (  ' npmlog '  )%NWL%, semver = require (  ' semver '  )%NWL%, fstream = require (  ' fstream '  )%NWL%, request = require (  ' request '  )%NWL%1
var __BROWSER__ =  ( typeof window =  =  =  ' object '  )  ; %NWL%var __NODE__ = !__BROWSER__ ; %NWL%if ( __DEV__ )  {%NWL%Promise . longStackTraces (  )  ;%NWL%}%NWL%var del = require (  ' del '  )  ; %NWL%var babel = require (  ' gulp - babel '  )  ; %NWL%var fs = Promise . promisifyAll ( require (  ' fs '  )  )  ; %NWL%var gulp = require (  ' gulp '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%6
xAdvance : parseInt ( letters [ i ]  . attributes . getNamedItem (  ' xadvance '  )  . nodeValue , 10 )  ,%NWL%kerning :  {  }  ,%NWL%texture : Texture . cache [ charCode ]  = new Texture ( this . texture , textureRect )%NWL%}  ;%NWL%}%NWL%var kernings = this . request . responseXML . getElementsByTagName (  ' kerning '  )  ; %NWL%for ( i = 0 ; i < kernings . length ; i +  +  )%NWL%{%NWL%var first = parseInt ( kernings [ i ]  . attributes . getNamedItem (  ' first '  )  . nodeValue , 10 )  ; %NWL%var second = parseInt ( kernings [ i ]  . attributes . getNamedItem (  ' second '  )  . nodeValue , 10 )  ; %NWL%var amount = parseInt ( kernings [ i ]  . attributes . getNamedItem (  ' amount '  )  . nodeValue , 10 )  ; %NWL%8
}  ; %NWL%PIXI . Strip . prototype . onTextureUpdate = function (  )%NWL%{%NWL%this . updateFrame = true ;%NWL%}  ; %NWL%PIXI . Strip . prototype . getBounds = function ( matrix )%NWL%{%NWL%var worldTransform = matrix || this . worldTransform ; %NWL%var a = worldTransform . a ; %NWL%var b = worldTransform . b ; %NWL%var c = worldTransform . c ; %NWL%9
}  . bind ( this )  )  ;%NWL%}%NWL%}  ,%NWL%getTemperature : function ( type , percent )  {%NWL%if ( percent < 0 . 05 ) percent = 0 . 05 ; %NWL%if ( percent > 1 . 0 ) percent = 1 . 0%NWL%if ( type =  =  ' heat '  )  {%NWL%var p =  { r : percent / 0 . 33 , y :  ( percent - 0 . 33 )  / 0 . 33 , w :  ( percent - 0 . 66 )  / 0 . 66 }  ; %NWL%var r = Math . round ( p . r * 255 > 255 ? 255 : p . r * 255 )  ; %NWL%var y = Math . round ( p . y * 255 > 255 ? 255 : p . y * 255 )  ; %NWL%var w = Math . round ( p . w * 255 > 255 ? 255 : p . w * 255 )  ; %NWL%9
MouseDetector_ . prototype . raycast_ = function (  )  {%NWL%var raycastResult = this . engine_ . raycaster_ . raycast_ (  )  ; %NWL%this . lastHitX_ = raycastResult . hitX ; %NWL%this . lastHitY_ = raycastResult . hitY ; %NWL%this . lastHitZ_ = raycastResult . hitZ ; %NWL%return raycastResult . trigger ;%NWL%}  ; %NWL%MouseDetector_ . prototype . update_ = function (  )  {%NWL%var engine = this . engine_ ; %NWL%var raycaster = engine . raycaster_ ; %NWL%var renderer = engine . renderer_ ; %NWL%9
self . off (  '  . timepicker '  )  ; %NWL%if ( self . data (  ' timepicker - list '  )  )  {%NWL%self . data (  ' timepicker - list '  )  . remove (  )  ;%NWL%}%NWL%self . removeData (  ' timepicker - list '  )  ;%NWL%}%NWL%}  ; %NWL%function _render ( self )%NWL%{%NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
this . visit ( node . block )  ; %NWL%this . buf . push (  '  break ;  '  )  ;%NWL%}%NWL%}  ,%NWL%visitLiteral : function ( node )  {%NWL%this . buffer ( node . str )  ;%NWL%}  ,%NWL%visitBlock : function ( block )  {%NWL%var len = block . nodes . length%NWL%, escape = this . escape%NWL%, pp = this . pp%NWL%9
}%NWL%if ( !sprite )  {%NWL%sprite = new cc . Sprite (  )  ; %NWL%cc . log (  " filePath is empty . Create a sprite with no texture "  )  ;%NWL%}%NWL%} else {%NWL%sprite = new ccs . Sprite (  )  ;%NWL%}%NWL%this . generalAttributes ( sprite , options )  ; %NWL%var flipX = options [  " flipX "  ]  ; %NWL%var flipY = options [  " flipY "  ]  ; %NWL%9
mkdirp = require (  ' mkdirp '  )  ,%NWL%join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force || options . response ; %NWL%var debug = options . debug ; %NWL%var src = options . src ; %NWL%9
)  ; %NWL%expect ( 3 )  ; %NWL%$ (  ' #test - table '  )  . filterable (  {%NWL%onlyColumns :  [ 1 ]%NWL%}  )  ; %NWL%$ (  ' #heading1 > div '  )  . click (  )  ; %NWL%var heading1 = $ (  ' #heading1 '  )  . find (  ' input '  )  . length ; %NWL%$ (  ' #heading2 > div '  )  . click (  )  ; %NWL%var heading2 = $ (  ' #heading2 '  )  . find (  ' input '  )  . length ; %NWL%$ (  ' #heading3 > div '  )  . click (  )  ; %NWL%var heading3 = $ (  ' #heading3 '  )  . find (  ' input '  )  . length ; %NWL%6
dest [ 3  ]  = mat [ 3 ]  ; %NWL%dest [ 4  ]  = mat [ 4 ]  ; %NWL%dest [ 5  ]  = mat [ 5 ]  ; %NWL%dest [ 6  ]  = mat [ 6 ]  ; %NWL%dest [ 7  ]  = mat [ 7 ]  ; %NWL%dest [ 8  ]  = mat [ 8 ]  ; %NWL%dest [ 9  ]  = mat [ 9 ]  ; %NWL%dest [ 10 ]  = mat [ 10 ]  ; %NWL%dest [ 11 ]  = mat [ 11 ]  ; %NWL%dest [ 12 ]  = mat [ 12 ]  ; %NWL%dest [ 13 ]  = mat [ 13 ]  ; %NWL%7
}  ; %NWL%this . signWithMessageHash = function ( hashHex )  {%NWL%return this . signHex ( hashHex , this . prvKeyHex )  ;%NWL%}  ; %NWL%this . signHex = function ( hashHex , privHex )  {%NWL%var d = new BigInteger ( privHex , 16 )  ; %NWL%var n = this . ecparams [  ' n '  ]  ; %NWL%var e = new BigInteger ( hashHex , 16 )  ; %NWL%do {%NWL%var k = this . getBigRandom ( n )  ; %NWL%var G = this . ecparams [  ' G '  ]  ; %NWL%6
this . getQuadrantForPoint_ ( parent , point . x , point . y )  , point )  ; %NWL%default : %NWL%throw Error (  ' Invalid nodeType in parent '  )  ;%NWL%}%NWL%}  ; %NWL%goog . structs . QuadTree . prototype . split_ = function ( node )  {%NWL%var oldPoint = node . point ; %NWL%node . point = null ; %NWL%node . nodeType = goog . structs . QuadTree . NodeType . POINTER ; %NWL%var x = node . x ; %NWL%var y = node . y ; %NWL%9
ol . control . OverviewMap = function ( opt_options )  {%NWL%var options = goog . isDef ( opt_options ) ? opt_options :  {  }  ; %NWL%this . collapsed_ = goog . isDef ( options . collapsed ) ? options . collapsed : true ; %NWL%this . collapsible_ = goog . isDef ( options . collapsible ) ?%NWL%options . collapsible : true ; %NWL%if ( !this . collapsible_ )  {%NWL%this . collapsed_ = false ;%NWL%}%NWL%var className = goog . isDef ( options . className ) ?%NWL%options . className :  ' ol - overviewmap '  ; %NWL%var tipLabel = goog . isDef ( options . tipLabel ) ?%NWL%8
this . once (  ' ready '  , function (  )  {%NWL%if ( this . hasRoute ( this . getPath (  )  )  )  {%NWL%this . dispatch (  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var todoList = this . get (  ' todoList '  )  ; %NWL%var completed = todoList . completed (  )  . size (  )  ; %NWL%var remaining = todoList . remaining (  )  . size (  )  ; %NWL%var main = this . get (  ' main '  )  ; %NWL%7
" const float PI = 3 . 14159265 ;  "  ,%NWL%" float ptime = time * 0 . 1 ;  "  ,%NWL%" void main ( void )  {  "  ,%NWL%" float color1 , color2 , color ;  "  ,%NWL%" color1 =  ( sin ( dot ( gl_FragCoord . xy , vec2 ( sin ( ptime * 3 . 0 )  , cos ( ptime * 3 . 0 )  )  )  * 0 . 02 + ptime * 3 . 0 )  + 1 . 0 )  / 2 . 0 ;  "  ,%NWL%" vec2 center = vec2 ( 640 . 0 / 2 . 0 , 360 . 0 / 2 . 0 )  + vec2 ( 640 . 0 / 2 . 0 * sin (  - ptime * 3 . 0 )  , 360 . 0 / 2 . 0 * cos (  - ptime * 3 . 0 )  )  ;  "  ,%NWL%" color2 =  ( cos ( length ( gl_FragCoord . xy - center )  * size )  + 1 . 0 )  / 2 . 0 ;  "  ,%NWL%" color =  ( color1 + color2 )  / 2 . 0 ;  "  ,%NWL%" float red =  ( cos ( PI * color / redShift + ptime * 3 . 0 )  + 1 . 0 )  / 2 . 0 ;  "  ,%NWL%" float green =  ( sin ( PI * color / greenShift + ptime * 3 . 0 )  + 1 . 0 )  / 2 . 0 ;  "  ,%NWL%" float blue =  ( sin ( PI * color / blueShift + ptime * 3 . 0 )  + 1 . 0 )  / 2 . 0 ;  "  ,%NWL%9
}%NWL%}%NWL%function escapeSpaces ( text )%NWL%{%NWL%var writingSpace = $ . chili . whiteSpace . writingSpace ; %NWL%var result = text . replace (  /  / g , writingSpace )  ; %NWL%return result ;%NWL%}%NWL%function escapeTabs ( text )%NWL%{%NWL%var writingTab = $ . chili . whiteSpace . writingTab ; %NWL%4
fn ( require , exports , module )  ;%NWL%}  ;%NWL%}%NWL%define ( function ( require , exports , module )  {%NWL%if ( inNode )  {%NWL%var Canvas = require (  ' canvas '  )  ; %NWL%var fs = require (  ' fs '  )  ;%NWL%}%NWL%var util = require (  ' util / util '  )  ; %NWL%var catmullRom = util . catmullRom ; %NWL%var catmullRomDeriv = util . catmullRomDeriv ; %NWL%9
" use strict "  ; %NWL%var EventConstants = require (  ' EventConstants '  )  ; %NWL%var EventPluginUtils = require (  ' EventPluginUtils '  )  ; %NWL%var EventPropagators = require (  ' EventPropagators '  )  ; %NWL%var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%var accumulate = require (  ' accumulate '  )  ; %NWL%var keyOf = require (  ' keyOf '  )  ; %NWL%var isStartish = EventPluginUtils . isStartish ; %NWL%var isMoveish = EventPluginUtils . isMoveish ; %NWL%var isEndish = EventPluginUtils . isEndish ; %NWL%var executeDirectDispatch = EventPluginUtils . executeDirectDispatch ; %NWL%7
var rect = g . insert (  ' path '  ,  '  : first - child '  )%NWL%. attr (  ' class '  ,  ' nf - y - diff - rect '  )%NWL%. attr (  ' d '  , rectPath )  ; %NWL%var contentTransform = this . get (  ' contentTransform '  )  ; %NWL%var content = g . select (  '  . nf - y - diff - content '  )  ; %NWL%content . attr (  ' transform '  , contentTransform )  ; %NWL%this . set (  ' rectElement '  , rect )  ; %NWL%this . set (  ' contentElement '  , content )  ;%NWL%}  ,%NWL%doTransition : function (  )  {%NWL%var duration = this . get (  ' duration '  )  ; %NWL%3
var predicate = condition_pred ( node )  ; %NWL%function do_always (  )  {%NWL%var always_commands = always_commands_ . filter ( predicate )  ; %NWL%if ( always_commands . length )  {%NWL%var always = $ ( $ . el . span (  {  ' class '  :  ' notebook - commands - right '  }  )  )  ; %NWL%add_commands ( node , always , always_commands )  ; %NWL%$right . append ( always )  ;%NWL%}%NWL%}%NWL%function do_appear (  )  {%NWL%var appear_commands = appear_commands_ . filter ( predicate )  ; %NWL%2
StatusConst . EffectState . MADOGEAR |%NWL%StatusConst . EffectState . CART1 |%NWL%StatusConst . EffectState . CART2 |%NWL%StatusConst . EffectState . CART3 |%NWL%StatusConst . EffectState . CART4 |%NWL%StatusConst . EffectState . CART5 ; %NWL%return function rencerCharacter (  )%NWL%{%NWL%var character = Session . Entity ; %NWL%var direction = character . direction ; %NWL%var headDir  = character . headDir ; %NWL%9
return ; %NWL%this . inMultiSelectMode = false ; %NWL%this . unsetStyle (  " multiselect "  )  ; %NWL%this . keyBinding . removeKeyboardHandler ( commands . keyboardHandler )  ; %NWL%this . commands . removeEventListener (  " exec "  , this . $onMultiSelectExec )  ; %NWL%this . renderer . updateCursor (  )  ; %NWL%this . renderer . updateBackMarkers (  )  ;%NWL%}  ; %NWL%this . $onMultiSelectExec = function ( e )  {%NWL%var command = e . command ; %NWL%var editor = e . editor ; %NWL%9
, setupAndroidApp = gruntHelpers . setupAndroidApp%NWL%, buildAndroidBootstrap = gruntHelpers . buildAndroidBootstrap%NWL%, buildSelendroidServer = gruntHelpers . buildSelendroidServer%NWL%, buildAndroidApp = gruntHelpers . buildAndroidApp%NWL%, buildSelendroidAndroidApp = gruntHelpers . buildSelendroidAndroidApp%NWL%, fixSelendroidAndroidManifest = gruntHelpers . fixSelendroidAndroidManifest%NWL%, installAndroidApp = gruntHelpers . installAndroidApp%NWL%, generateServerDocs = gruntHelpers . generateServerDocs%NWL%, generateAppiumIo = gruntHelpers . generateAppiumIo%NWL%, setDeviceConfigVer = gruntHelpers . setDeviceConfigVer%NWL%, setBuildTime = gruntHelpers . setBuildTime%NWL%0
var PostSocai = require (  "  .  .  /  .  .  / libs / post - socai "  )  ; %NWL%var arrayfuncs = require (  "  .  .  /  .  .  / libs / array - funcs "  )  ; %NWL%var Vatvao = require (  "  .  .  /  .  .  / models / vatvao "  )  ; %NWL%var Vatra = require (  "  .  .  /  .  .  / models / vatra "  )  ; %NWL%var Vsocai = require (  "  .  .  /  .  .  / models / vsocai "  )  ; %NWL%var socai = require (  "  .  .  /  .  .  / models / socai "  )  ; %NWL%var Tdttno_tt = require (  "  .  .  /  .  .  / models / tdttno_tt "  )  ; %NWL%var Tdttno = require (  "  .  .  /  .  .  / models / tdttno "  )  ; %NWL%var dvcs = require (  "  .  .  /  .  .  / models / dvcs "  )  ; %NWL%var account = require (  "  .  .  /  .  .  / models / account "  )  ; %NWL%var customer = require (  "  .  .  /  .  .  / models / customer "  )  ; %NWL%5
var tldRE =  "  "  ; %NWL%if ( a . length > 0 )  {%NWL%tldRE =  "  (  "  + a . join (  " | "  )  +  "  )  "  ;%NWL%}%NWL%return tldRE ;  /  / String%NWL%}%NWL%dojox . regexp . ipAddress = function ( flags )  {%NWL%flags =  ( typeof flags =  =  " object "  ) ? flags :  {  }  ; %NWL%if ( typeof flags . allowDottedDecimal ! =  " boolean "  )  { flags . allowDottedDecimal = true ;  }%NWL%if ( typeof flags . allowDottedHex ! =  " boolean "  )  { flags . allowDottedHex = true ;  }%NWL%if ( typeof flags . allowDottedOctal ! =  " boolean "  )  { flags . allowDottedOctal = true ;  }%NWL%8
}%NWL%}  ; %NWL%var defaultRadius = HeatmapConfig . defaultRadius ; %NWL%Store . prototype =  {%NWL%_organiseData : function ( dataPoint , forceRender )  {%NWL%var x = dataPoint [ this . _xField ]  ; %NWL%var y = dataPoint [ this . _yField ]  ; %NWL%var radi = this . _radi ; %NWL%var store = this . _data ; %NWL%var max = this . _max ; %NWL%var min = this . _min ; %NWL%7
if ( errors ! =  = null ) console . log ( errors )  ; %NWL%var Controller = function ( $scope )  {%NWL%setTimeout ( function (  )  {%NWL%runTests (  )  ;%NWL%}  , 300 )  ;%NWL%}  ; %NWL%var runTests = function (  )  {%NWL%var register = b . $ (  ' #register - button '  )  ; %NWL%var message = b . $ (  ' #message '  )  ; %NWL%var username = b . $ (  ' #username '  )  ; %NWL%var password = b . $ (  ' #password '  )  ; %NWL%8
var kE = this . _kE ; %NWL%var nDivisionFrames = 64 ; %NWL%var nDivisions = cellL . length / nDivisionFrames ; %NWL%var frameIndex = 0 ; %NWL%var desiredGain = this . detectorAverage ; %NWL%var compressorGain = this . compressorGain ; %NWL%var maxAttackCompressionDiffDb = this . maxAttackCompressionDiffDb ; %NWL%var i_attackFrames = 1 / this . _attackFrames ; %NWL%var preDelayReadIndex = this . preDelayReadIndex ; %NWL%var preDelayWriteIndex = this . preDelayWriteIndex ; %NWL%var detectorAverage = this . detectorAverage ; %NWL%5
}  ,%NWL%set : function ( value )  {%NWL%this . _setValue ( exports . stretchProperty , value )  ;%NWL%}  ,%NWL%enumerable : true ,%NWL%configurable : true%NWL%}  )  ; %NWL%Image . prototype . onMeasure = function ( widthMeasureSpec , heightMeasureSpec )  {%NWL%var width = utils . layout . getMeasureSpecSize ( widthMeasureSpec )  ; %NWL%var widthMode = utils . layout . getMeasureSpecMode ( widthMeasureSpec )  ; %NWL%var height = utils . layout . getMeasureSpecSize ( heightMeasureSpec )  ; %NWL%8
this . assertTrue ( this . map . scope . scopeIndex )  ; %NWL%var mydiv6 = aria . utils . Dom . getElementById (  ' mydiv6 '  )  ; %NWL%this . synEvent . click ( mydiv6 ,  {%NWL%fn : this . __afterJsonFnAndArgs ,%NWL%scope : this%NWL%}  )  ;%NWL%}  ,%NWL%__afterJsonFnAndArgs : function (  )  {%NWL%this . assertTrue ( this . map . jsonFnAndArgs )  ; %NWL%this . assertTrue ( this . map . args )  ; %NWL%var mydiv7 = aria . utils . Dom . getElementById (  ' mydiv7 '  )  ; %NWL%1
BadgeImage . prototype . bakeAndSave = function ( globalCallback )  {%NWL%const imageData = this . toBuffer (  )%NWL%const findBadge = function findBadge ( callback )  {%NWL%const query =  { body_hash : this . get (  ' badge_hash '  )  }%NWL%Badge . findOne ( query , callback )%NWL%}  . bind ( this )%NWL%const bakeBadge = function bakeBadge ( badge , callback )  {%NWL%if ( !badge )%NWL%return callback ( new Error (  ' could not find badge '  )  )%NWL%const endpoint = badge . get (  ' endpoint '  )%NWL%const signature = badge . get (  ' signature '  )%NWL%9
var gulp   = require (  ' gulp '  )  ; %NWL%var browserSync = require (  ' browser - sync '  )  ; %NWL%var sass   = require (  ' gulp - sass '  )  ; %NWL%var prefix   = require (  ' gulp - autoprefixer '  )  ; %NWL%var cp    = require (  ' child_process '  )  ; %NWL%var minifyCSS  = require (  ' gulp - minify - css '  )  ; %NWL%var rename   = require (  ' gulp - rename '  )  ; %NWL%var uglify   = require (  ' gulp - uglify '  )  ; %NWL%var imagemin  = require (  ' gulp - imagemin '  )  ; %NWL%var pngquant  = require (  ' imagemin - pngquant '  )  ; %NWL%var csslint  = require (  ' gulp - csslint '  )  ; %NWL%2
$scope . showSummary = false ;%NWL%}%NWL%if ( SettingsSvc . settings [  ' dashboard '  ]  [  ' collapseMiners '  ]  )  {%NWL%$ ( MinerSvc . miners )  . each ( function ( index , miner )  {%NWL%miner . collapsed = true ;%NWL%}  )  ;%NWL%}%NWL%}  )  ; %NWL%$scope . $on (  ' error : changepool '  , function ( event , data )  {%NWL%var miner = data . miner ; %NWL%var pool = data . pool ; %NWL%9
return true =  = allowNull ;%NWL%}%NWL%return arg instanceof String || typeof arg =  =  ' string '  ;%NWL%}%NWL%var isNumber = module . exports . isNumber = function ( arg , allowNull )  {%NWL%if ( null =  = arg )  {%NWL%return true =  = allowNull ;%NWL%}%NWL%return arg instanceof Number || typeof arg =  =  ' number ' || null ! = asFloat ( arg )  ;%NWL%}%NWL%var isInteger = module . exports . isInteger = function ( arg , allowNull )  {%NWL%4
stopStealthOnSetted : function ( watcher )  {%NWL%clearInterval ( watcher )  ;%NWL%}  ,%NWL%onDefined : function ( object , property , callback )  {%NWL%if ( object [ property ] ! =  = undefined ) callback ( object [ property ]  )  ; %NWL%this . onSetted ( object , property , function ( newValue )  {%NWL%if ( newValue ! =  = undefined ) callback ( newValue )  ;%NWL%}  )  ;%NWL%}  ,%NWL%onceDefined : function ( object , property , callback )  {%NWL%if ( object [ property ] ! =  = undefined ) callback ( object [ property ]  )  ; %NWL%6
app . param (  ' blockHash '  , blocks . block )  ; %NWL%app . get ( apiPrefix +  '  / block - index /  : height '  , blocks . blockindex )  ; %NWL%app . param (  ' height '  , blocks . blockindex )  ; %NWL%var transactions = require (  '  .  .  / app / controllers / transactions '  )  ; %NWL%app . get ( apiPrefix +  '  / tx /  : txid '  , transactions . show )  ; %NWL%app . param (  ' txid '  , transactions . transaction )  ; %NWL%app . get ( apiPrefix +  '  / txs '  , transactions . list )  ; %NWL%app . post ( apiPrefix +  '  / tx / send '  , transactions . send )  ; %NWL%app . get ( apiPrefix +  '  / rawtx /  : txid '  , transactions . showRaw )  ; %NWL%app . param (  ' txid '  , transactions . rawTransaction )  ; %NWL%var addresses = require (  '  .  .  / app / controllers / addresses '  )  ; %NWL%3
getName : function (  )  {%NWL%if ( this . suite . name && _ . isString ( this . suite . name )  )  {%NWL%var name = this . suite . name ; %NWL%delete this . suite . name ; %NWL%return name ;%NWL%}%NWL%return this . name ;%NWL%}  ,%NWL%getOptions : function (  )  {%NWL%if ( this . suite . options && _ . isObject ( this . suite . options )  )  {%NWL%var options = this . suite . options ; %NWL%2
var params = require (  '  .  / params '  )  ; %NWL%var envConf = require (  '  .  .  / config / environment '  )  ; %NWL%var config = require (  '  .  .  / config / configuration '  )  ; %NWL%var database = require (  '  .  .  / config / database '  )  ; %NWL%var middleware = require (  '  .  .  / config / middleware '  )  ; %NWL%var session = require (  '  .  .  / config / session '  )  ; %NWL%var Resource = require (  '  .  / router '  )  . Resource ; %NWL%var locales = require (  '  .  / locales '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%8
editor . select ( light )  ;%NWL%}%NWL%function onAmbientLightOptionClick (  )  {%NWL%var color = 0x222222 ; %NWL%var light = new THREE . AmbientLight ( color )  ; %NWL%light . name =  ' AmbientLight '  +  (  +  + lightCount )  ; %NWL%editor . addObject ( light )  ; %NWL%editor . select ( light )  ;%NWL%}%NWL%var createOption = UI . MenubarHelper . createOption ; %NWL%var createDivider = UI . MenubarHelper . createDivider ; %NWL%9
}%NWL%else {%NWL%up_button . disabled = true ; %NWL%down_button . disabled = true ;%NWL%}%NWL%add_button . disabled =  ( available_charsets . selectedItems . length =  = 0 )  ;%NWL%}%NWL%function AddAvailableCharset (  )%NWL%{%NWL%var active_charsets = document . getElementById (  ' active_charsets '  )  ; %NWL%var available_charsets = document . getElementById (  ' available_charsets '  )  ; %NWL%9
function removeOverlay (  )  {%NWL%codeEditor . removeTextOverlay (  )  ; %NWL%codeEditor . aceEditor . removeEventListener (  ' change '  , removeOverlay )  ;%NWL%}%NWL%codeEditor . aceEditor . addEventListener (  ' change '  , removeOverlay )  ;%NWL%}  )  . delay ( 0 . 8 )  ;%NWL%}%NWL%function printResult ( err , result )  {%NWL%if ( err && !Object . isString ( err )  ) err = Objects . inspect ( err ,  { maxDepth : 3 }  )  ; %NWL%if ( !insertResult && err )  { codeEditor . world (  )  . alert ( err )  ; return ;  }%NWL%if ( result && !Object . isString ( result )  ) result = Objects . inspect ( result ,  { maxDepth : 3 }  )  ; %NWL%8
}%NWL%function assert ( name , value )  {%NWL%post ( name , value , value )  ;%NWL%}%NWL%function assertEqual ( name , expected , actual )  {%NWL%post ( name +  "  =  =  =  "  + expected , actual +  "  =  =  =  "  + expected , expected =  =  = actual )  ;%NWL%}%NWL%function post ( name , result , pass )  {%NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%tr . setAttribute (  " class "  , pass ? " passed "  :  " failed "  )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%8
var connect = require (  ' gulp - connect '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var minifyHtml = require (  ' gulp - minify - html '  )  ; %NWL%var minifyCss = require (  ' gulp - minify - css '  )  ; %NWL%var usemin = require (  ' gulp - usemin '  )  ; %NWL%var clean = require (  ' gulp - clean '  )  ; %NWL%var critical = require (  ' critical '  )  ;  /  / new%NWL%var rename = require (  ' gulp - rename '  )  ;  /  / new%NWL%var ngAnnotate = require (  ' gulp - ng - annotate '  )  ;  /  / new%NWL%var clean = require (  ' gulp - clean '  )  ;  /  / new%NWL%var del = require (  ' del '  )  ;  /  / new%NWL%6
}  )  ;%NWL%}%NWL%return modifiedContents ;%NWL%}%NWL%i18nUtil . makeFlatBundleContents = function ( prefix , prefixPath , srcFileName )  {%NWL%var bundleParts = i18nUtil . getBundlePartsFromFileName ( prefix , prefixPath , srcFileName )  ; %NWL%if ( !bundleParts )  {%NWL%return null ;%NWL%}%NWL%var moduleName = bundleParts . moduleName ; %NWL%var bundleName = bundleParts . bundleName ; %NWL%9
}%NWL%}  )  ; %NWL%if ( settings . equalize_on_stack =  =  = false )  {%NWL%if ( isStacked ) return ;%NWL%}  ; %NWL%var heights = vals . map ( function (  )  { return $ ( this )  . outerHeight ( false )  }  )  . get (  )  ; %NWL%if ( settings . use_tallest )  {%NWL%var max = Math . max . apply ( null , heights )  ; %NWL%vals . css (  ' height '  , max )  ;%NWL%} else {%NWL%var min = Math . min . apply ( null , heights )  ; %NWL%7
default : %NWL%throw new Error (  " Phaser . Color . HSVtoRGB : Unknown color "  )  ;%NWL%}%NWL%}%NWL%return result ;%NWL%}  ,%NWL%RGBtoHSV : function ( color )  {%NWL%var rgb = Phaser . Color . getRGB ( color )  ; %NWL%var red = rgb . red / 255 ; %NWL%var green = rgb . green / 255 ; %NWL%var blue = rgb . blue / 255 ; %NWL%8
var nextDay = dt . addDuration ( d , MS_IN_DAY )  ; %NWL%var cbgData = patterns . cbg . constantInadequate (  { start : d . slice ( 0 ,  - 5 )  }  )  ; %NWL%var cbg = new BGUtil ( cbgData ,  { DAILY_MIN : cbgMin }  )  ; %NWL%expect ( cbg . rangeBreakdown ( cbg . filter ( d , nextDay )  . data )  )  . to . eql ( cbgNaNObject )  ;%NWL%}  )  ; %NWL%it (  '  ( on smbg data ) should return NaN for each component if less than threshold for complete day of data '  , function (  )  {%NWL%var d = new Date (  )  ; %NWL%d = new Date ( d . setUTCMilliseconds ( 0 )  )  . toISOString (  )  ; %NWL%var nextDay = dt . addDuration ( d , MS_IN_DAY )  ; %NWL%var smbgData = patterns . smbg . constantInadequate (  { start : d . slice ( 0 ,  - 5 )  }  )  ; %NWL%var smbg = new BGUtil ( smbgData ,  { DAILY_MIN : smbgMin }  )  ; %NWL%2
attrs [  ' data - cssclass '  ]  =  '  '  ; %NWL%attrs [  ' data - attr1 '  ]  =  ' default '  ; %NWL%attrs [  ' data - attr2 '  ]  =  ' default '  ; %NWL%respond . editor . append (%NWL%utilities . element (  ' div '  , attrs , html )%NWL%)  ; %NWL%return true ;%NWL%}  ,%NWL%parse : function ( node )  {%NWL%var id = $ ( node )  . attr (  ' id '  )  ; %NWL%var attr1 = $ ( node )  . attr (  ' attr1 '  )  ; %NWL%9
expect ( URI . headers )  . toEqual (  { Name1 :  [ value1 ]  , Name2 :  [ value2 ]  }  )  ; %NWL%URI . deleteHeader ( name1 )  ; %NWL%expect ( URI . headers )  . not . toEqual (  { Name1 :  [ value1 ]  , Name2 :  [ value2 ]  }  )%NWL%expect ( URI . headers )  . toEqual (  { Name2 :  [ value2 ]  }  )  ;%NWL%}  )  ; %NWL%it (  " returns the deleted value "  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%var name1 =  ' name1 '  ; %NWL%var value1 =  ' value1 '  ; %NWL%var name2 =  ' name2 '  ; %NWL%var value2 =  ' value2 '  ; %NWL%7
this . load ( raw )  ;%NWL%}%NWL%MetricMapper . prototype . load = function ( raw )  {%NWL%if ( ! ( raw && raw . length )  )  {%NWL%logger . debug (  " No new metric mappings from server .  "  )  ; %NWL%return ;%NWL%}%NWL%for ( var i = 0 ; i < raw . length ; i +  +  )  {%NWL%var spec  = raw [ i ]  [ 0 ]%NWL%, scope = spec . scope%NWL%, name  = spec . name%NWL%9
dojo . subscribe (  "  / dnd / drop / before "  , this ,  " onDrop "  )  ,%NWL%dojo . subscribe (  "  / dnd / cancel "  , this ,  " onDropCancel "  )  ,%NWL%dojo . subscribe (  "  / dnd / source / over "  , this ,  " onDndSource "  )%NWL%]%NWL%}  ,%NWL%unsubscribeDnd : function (  )  {%NWL%dojo . forEach ( this . _subscribeHandler , dojo . unsubscribe )  ;%NWL%}  ,%NWL%_getHoverArea : function ( coords )  {%NWL%var x = coords . x ; %NWL%var y = coords . y ; %NWL%9
return this . make ( _ . reduce ( this , function ( all , elem )  {%NWL%all . push . apply ( all , elem . children )  ; %NWL%return all ;%NWL%}  ,  [  ]  )  )  ;%NWL%}%NWL%var each = exports . each = function ( fn )  {%NWL%var i = 0 , len = this . length ; %NWL%while ( i < len && fn . call ( this . make ( this [ i ]  )  , i , this [ i ]  ) ! =  = false )  +  + i ; %NWL%return this ;%NWL%}  ; %NWL%var map = exports . map = function ( fn )  {%NWL%5
}%NWL%return e ;%NWL%}  ; %NWL%var simpleTools = elt (  ' div '  ,  ' simple_tools '  )  ; %NWL%var rev = elt (  ' button '  ,  ' rev '  )  ; %NWL%var showInfo = elt (  ' button '  ,  ' show_info '  )  ; %NWL%var prev = elt (  ' button '  ,  ' prev '  )  ; %NWL%var playPause = elt (  ' button '  ,  ' play_pause '  )  ; %NWL%var next = elt (  ' button '  ,  ' next '  )  ; %NWL%var pin = elt (  ' button '  ,  ' pin '  )  ; %NWL%var close = elt (  ' button '  ,  ' close '  )  ; %NWL%4
return%NWL%}%NWL%require (  ' child - process - close '  )%NWL%var EventEmitter = require (  " events "  )  . EventEmitter%NWL%, npm = module . exports = new EventEmitter (  )%NWL%, npmconf = require (  "  .  / config / core . js "  )%NWL%, log = require (  " npmlog "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, path = require (  " path "  )%NWL%, abbrev = require (  " abbrev "  )%NWL%, which = require (  " which "  )%NWL%8
window . store (  ' hashchange : changed '  , true )  ;%NWL%}%NWL%}  ; %NWL%if ( typeof window . onhashchange =  =  ' function ' && fn ! =  = window . onhashchange )  {%NWL%window . addEvent (  ' hashchange '  , window . onhashchange )  ; %NWL%window . onhashchange = null ;%NWL%}%NWL%if ( Browser . ie6 || Browser . ie7 )  {%NWL%checker = function ( url , frame )  {%NWL%var checker = window . retrieve (  ' hashchange : checker '  )  ; %NWL%var timer = window . retrieve (  ' hashchange : timer '  )  ; %NWL%9
const { Cu }  = require (  " chrome "  )  ; %NWL%const { Class }  = require (  " sdk / core / heritage "  )  ; %NWL%const { registerPlugin , Plugin }  = require (  " plugins / core "  )  ; %NWL%const timers = require (  " sdk / timers "  )  ; %NWL%var ScratchpadStyleLink = Class (  {%NWL%extends : Plugin ,%NWL%init : function ( host )  {  }  ,%NWL%onEditorActivated : function ( editor )  {%NWL%console . log (  " Checking editor activation! "  )  ; %NWL%let live = this . host . liveFor ( editor )  ; %NWL%let project = this . host . projectFor ( editor )  ; %NWL%9
WebInspector . TimelineJSProfileProcessor =  {  }  ; %NWL%WebInspector . TimelineJSProfileProcessor . generateTracingEventsFromCpuProfile = function ( jsProfile , thread )%NWL%{%NWL%if ( !jsProfile . samples )%NWL%return [  ]  ; %NWL%var jsProfileModel = new WebInspector . CPUProfileDataModel ( jsProfile )  ; %NWL%var idleNode = jsProfileModel . idleNode ; %NWL%var programNode = jsProfileModel . programNode ; %NWL%var gcNode = jsProfileModel . gcNode ; %NWL%var samples = jsProfileModel . samples ; %NWL%var timestamps = jsProfileModel . timestamps ; %NWL%6
, core = require (  '  .  / core '  )%NWL%, string = require (  '  .  / string '  )%NWL%, file = require (  '  .  / file '  )%NWL%, async = require (  '  .  / async '  )%NWL%, i18n = require (  '  .  / i18n '  )%NWL%, uri = require (  '  .  / uri '  )%NWL%, array = require (  '  .  / array '  )%NWL%, object = require (  '  .  / object '  )%NWL%, date = require (  '  .  / date '  )%NWL%, request = require (  '  .  / request '  )%NWL%, log = require (  '  .  / log '  )%NWL%0
session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%return worker ;%NWL%}  ; %NWL%this . $id =  " ace / mode / css "  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / css_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var o = this . options ; %NWL%var menu = this . menu ; %NWL%var checkboxContainer = this . checkboxContainer ; %NWL%var optgroups =  [  ]  ; %NWL%var html =  "  "  ; %NWL%var id = el . attr (  ' id '  ) || multiselectID +  +  ;  /  / unique ID for the label & option tags%NWL%el . find (  ' option '  )  . each ( function ( i )  {%NWL%var $this = $ ( this )  ; %NWL%var parent = this . parentNode ; %NWL%var description = this . innerHTML ; %NWL%var title = this . title ; %NWL%1
}%NWL%assign ( CallbackQueue . prototype ,  {%NWL%enqueue : function ( callback , context )  {%NWL%this . _callbacks = this . _callbacks || [  ]  ; %NWL%this . _contexts = this . _contexts || [  ]  ; %NWL%this . _callbacks . push ( callback )  ; %NWL%this . _contexts . push ( context )  ;%NWL%}  ,%NWL%notifyAll : function (  )  {%NWL%var callbacks = this . _callbacks ; %NWL%var contexts = this . _contexts ; %NWL%9
. range (  [ args . left + args . buffer , svg_width - args . right - args . buffer ]  )  ; %NWL%args . scales . Y = d3 . scale . linear (  )%NWL%. domain (  [  - 2 , 2 ]  )%NWL%. range (  [ svg_height - args . bottom - args . buffer * 2 , args . top ]  )  ; %NWL%args . scalefns . xf = function ( di )  { return args . scales . X ( di . x )  ;  }  ; %NWL%args . scalefns . yf = function ( di )  { return args . scales . Y ( di . y )  ;  }  ; %NWL%var line = d3 . svg . line (  )%NWL%. x ( args . scalefns . xf )%NWL%. y ( args . scalefns . yf )%NWL%. interpolate ( args . interpolate )  ; %NWL%var area = d3 . svg . area (  )%NWL%6
}  )  ;%NWL%} else {%NWL%throw new Error ( __formatString (  " You cannot set the non - scalar complex property :  ' %1 ' on the type :  ' %2 '  .  "  +%NWL%" Instead get the property and use array functions like ' push ' or ' splice ' to change its contents .  "  ,%NWL%property . name , property . parentType . name )  )  ;%NWL%}%NWL%}%NWL%function setNpValue ( context , rawAccessorFn )  {%NWL%var parent = context . parent ; %NWL%var property = context . property ; %NWL%var entityAspect = context . entityAspect ; %NWL%8
}%NWL%var connections = this . connections ; %NWL%for ( var i = 0 ; i < connections . length ;  +  + i )  {%NWL%var connection = connections [ i ]  ; %NWL%connection . select (  )  ;%NWL%}%NWL%}%NWL%this . deselectAll = function (  )  {%NWL%var nodes = this . nodes ; %NWL%for ( var i = 0 ; i < nodes . length ;  +  + i )  {%NWL%var node = nodes [ i ]  ; %NWL%3
query . username = new RegExp (  ' ^ .  * ? '  + request . query . username +  '  .  * $ '  ,  ' i '  )  ;%NWL%}%NWL%if ( request . query . isActive )  {%NWL%query . isActive = request . query . isActive =  =  =  ' true '  ;%NWL%}%NWL%if ( request . query . role )  {%NWL%query [  ' roles .  '  + request . query . role ]  =  { $exists : true }  ;%NWL%}%NWL%var fields = request . query . fields ; %NWL%var sort = request . query . sort ; %NWL%var limit = request . query . limit ; %NWL%8
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
}  )  ; %NWL%editor . addButton (  ' formatselect '  , function (  )  {%NWL%var items =  [  ]  , blocks = createFormats ( editor . settings . block_formats ||%NWL%' Paragraph = p ;  '  +%NWL%' Address = address ;  '  +%NWL%' Pre = pre ;  '  +%NWL%' Header 1 = h1 ;  '  +%NWL%' Header 2 = h2 ;  '  +%NWL%' Header 3 = h3 ;  '  +%NWL%' Header 4 = h4 ;  '  +%NWL%' Header 5 = h5 ;  '  +%NWL%6
handleError ( newError , target , retryFunc )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%var fields = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%fields . className =  " retryFields "  ;  /  / $NON - NLS - 0$%NWL%var firstField ; %NWL%error . Retry . parameters . forEach ( function ( param , i )  {%NWL%if ( !param . hidden )  {%NWL%var div = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%var label = document . createElement (  " label "  )  ;  /  / $NON - NLS - 0$%NWL%9
User . findById ( userId , function ( err , user )  {%NWL%if ( err ) return next ( err )  ; %NWL%if ( !user ) return res . send ( 404 )  ; %NWL%res . send (  {%NWL%profile : user . profile%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%changePassword : function ( req , res , next )  {%NWL%var oldPass = String ( req . body . oldPassword )  ; %NWL%var newPass = String ( req . body . newPassword )  ; %NWL%9
}%NWL%gameState = 2 ; %NWL%for ( var i = tiles . length ; i -  -  ;  )  {%NWL%setAttr ( tiles [ i ]  . sN ,  ' display '  ,  ' none '  )  ;%NWL%}%NWL%pickNextTile (  )  ; %NWL%containerObj . mousemove ( moveHndlr )  ;%NWL%}%NWL%function redrawTile ( animate )  {%NWL%var x = currTile . cp . x ; %NWL%var y = currTile . cp . y ; %NWL%9
duiManager . addTextBox ( textBoxTitle , getValue , onButtonPress , uiGroupId , options )  ;%NWL%}  ,%NWL%selectBoxWithSubmitButton : function editoruiAddSelectBoxWithSubmitButtonFn (%NWL%uiElement , uiElementStateMap , getValueMap , uiGroupId , globals )%NWL%{%NWL%var duiManager = globals . dynamicUI ; %NWL%var uiElementId = uiElement . id ; %NWL%var selectBoxTitle =  ( uiElement . title || '  '  )  ; %NWL%var buttonText = uiElement . buttonText ; %NWL%var valueListName = uiElement . valueListName ; %NWL%var optionalFilterString = uiElement . optionalFilterString ; %NWL%8
goog . debug . LogBuffer . prototype . clear = function (  )  {%NWL%this . buffer_ = new Array ( goog . debug . LogBuffer . CAPACITY )  ; %NWL%this . curIndex_ =  - 1 ; %NWL%this . isFull_ = false ;%NWL%}  ; %NWL%goog . debug . LogBuffer . prototype . forEachRecord = function ( func )  {%NWL%var buffer = this . buffer_ ; %NWL%if ( !buffer [ 0 ]  )  {%NWL%return ;%NWL%}%NWL%var curIndex = this . curIndex_ ; %NWL%6
xScale . domain ( range )  ; %NWL%yScale . domain ( d3 . range (%NWL%this . get (  ' resizeOnCollapse '  ) ? this . get (  ' visibleNodeCount '  )  : this . get (  ' content . length '  )  )%NWL%)  ; %NWL%let rowItems = rows . selectAll (  '  . row '  )  . data ( nodes , n =  > n . id )  ; %NWL%rowItems . enter (  )  . append (  ' rect '  )  . attr (  ' class '  , n =  >  ' row '  + n . className )  ; %NWL%rowItems . exit (  )  . remove (  )  ; %NWL%this . updateRows ( rowItems )  ; %NWL%if ( labelsWidth > 0 )  {%NWL%let indentSize = this . get (  ' indentSize '  )  ; %NWL%let labelAlign = this . get (  ' labelAlign '  )  ; %NWL%9
fieldSize [ uid ]  = 8%NWL%fieldSize [ gid ]  = 8%NWL%fieldSize [ size ]  = 12%NWL%fieldSize [ mtime ]  = 12%NWL%fieldSize [ cksum ]  = 8%NWL%fieldSize [ type ]  = 1%NWL%fieldSize [ linkpath ]  = 100%NWL%var ustar = fields . ustar = f +  +%NWL%, ustarver = fields . ustarver = f +  +%NWL%, uname = fields . uname = f +  +%NWL%, gname = fields . gname = f +  +%NWL%8
}  ; %NWL%__exports__ . createFrame = createFrame ;%NWL%}  )  ; %NWL%define (%NWL%' handlebars / runtime '  ,  [  "  .  / utils "  ,  "  .  / exception "  ,  "  .  / base "  ,  " exports "  ]  ,%NWL%function ( __dependency1__ , __dependency2__ , __dependency3__ , __exports__ )  {%NWL%var Utils = __dependency1__ ; %NWL%var Exception = __dependency2__ [  " default "  ]  ; %NWL%var COMPILER_REVISION = __dependency3__ . COMPILER_REVISION ; %NWL%var REVISION_CHANGES = __dependency3__ . REVISION_CHANGES ; %NWL%var createFrame = __dependency3__ . createFrame ; %NWL%8
self . addHeader = function (  )  {%NWL%self . RequestHeaders . splice ( 0 , 0 ,  { name :  "  "  , value :  "  "  }  )  ;%NWL%}  ; %NWL%self . removeHeader = function ( header )  {%NWL%self . RequestHeaders . remove ( header )  ;%NWL%}  ; %NWL%self . response = ko . observable (  )  ; %NWL%self . sendRequest = function (  )  {%NWL%var uriPath = self . UriPath (  )  ; %NWL%var http =  " http :  /  /  "  ; %NWL%var https =  " https :  /  /  "  ; %NWL%9
var url  = require (  ' url '  )%NWL%, fs   = require (  ' fs '  )%NWL%, path  = require (  " path "  )%NWL%, http  = require (  " http "  )%NWL%, net  = require (  " net "  )%NWL%, sys  = require (  " sys "  )%NWL%, fastcgi = require (  " fastcgi - parser "  )  ; %NWL%var debug = 0 ? console :  { log : function (  )  {  }  , dir : function (  )  {  }  }  ; %NWL%var FCGI_RESPONDER = fastcgi . constants . role . FCGI_RESPONDER ; %NWL%var FCGI_BEGIN  = fastcgi . constants . record . FCGI_BEGIN ; %NWL%var FCGI_STDIN  = fastcgi . constants . record . FCGI_STDIN ; %NWL%9
if ( !this . wtTable . isWorkingOnClone (  )  )  {%NWL%this . instance . getSetting (  ' beforeDraw '  , true )  ;%NWL%}%NWL%this . rowHeaders = this . instance . getSetting (  ' rowHeaders '  )  ; %NWL%this . rowHeaderCount = this . rowHeaders . length ; %NWL%this . fixedRowsTop = this . instance . getSetting (  ' fixedRowsTop '  )  ; %NWL%this . columnHeaders = this . instance . getSetting (  ' columnHeaders '  )  ; %NWL%this . columnHeaderCount = this . columnHeaders . length ; %NWL%var visibleColIndex%NWL%, totalRows = this . instance . getSetting (  ' totalRows '  )%NWL%, totalColumns = this . instance . getSetting (  ' totalColumns '  )%NWL%9
}  ; %NWL%this . drag = function (  )  {%NWL%var editor = this . editor ; %NWL%this . dragCursor = editor . renderer . screenToTextCoordinates ( this . x , this . y )  ; %NWL%editor . moveCursorToPosition ( this . dragCursor )  ; %NWL%editor . renderer . scrollCursorIntoView (  )  ;%NWL%}  ; %NWL%this . dragEnd = function ( e )  {%NWL%var editor = this . editor ; %NWL%var dragCursor = this . dragCursor ; %NWL%var dragRange = this . dragRange ; %NWL%2
}%NWL%}  )  ; %NWL%return 1 ;%NWL%}  ,%NWL%getItemsWithParams : function ( treeRequest , params )  {%NWL%var me = this ; %NWL%var destroyBeforeAppend = treeRequest . get (  ' destroyBeforeAppend '  )  ; %NWL%var url = treeRequest . get (  ' url '  )  ; %NWL%var isLeaf = treeRequest . get (  ' isLeaf '  )  ; %NWL%var enableCheckSelection = treeRequest . get (  ' enableCheckedItems '  )  ; %NWL%var nodeToAppendTo = treeRequest . get (  ' nodeToAppendTo '  )  ; %NWL%6
var map = new google . maps . Map (%NWL%document . getElementById ( self . mapId )  , myOptions )  ; %NWL%if ( self . markers . length > 0 )  {%NWL%var bounds = new google . maps . LatLngBounds (%NWL%new google . maps . LatLng ( south , west )  ,%NWL%new google . maps . LatLng ( north , east )  )  ; %NWL%map . fitBounds ( bounds )  ;%NWL%}%NWL%for ( var i = 0 ; i < self . markers . length ; i +  +  )  {%NWL%var lat = self . markers [ i ]  . lat ; %NWL%var lon = self . markers [ i ]  . lon ; %NWL%9
bottom = bottom - barBorderSize ; %NWL%writer (  ( left * xScale )  - 1 ,  ( top * yScale )  + 1 )  ; %NWL%writer (  ( right * xScale )  - 1 ,  ( top * yScale )  + 1 )  ; %NWL%writer (  ( left * xScale )  - 1 ,  ( bottom * yScale )  + 1 )  ; %NWL%writer (  ( right * xScale )  - 1 ,  ( bottom * yScale )  + 1 )  ; %NWL%gd . endDraw ( writer )  ; %NWL%writer = null ;%NWL%}%NWL%}%NWL%var textureWidthHalf = this . textureWidthHalf ; %NWL%var textureHeightHalf = this . textureHeightHalf ; %NWL%9
for ( var pair_ix = 0 , pair_ix_limit = pairs . length ; %NWL%pair_ix < pair_ix_limit ;  +  + pair_ix )  {%NWL%var pair = pairs [ pair_ix ]  ; %NWL%var sel = pair [ 0 ]  ; %NWL%for ( var node_ix = 0 , node_ix_limit = nodes . length ; %NWL%node_ix < node_ix_limit ;  +  + node_ix )  {%NWL%var prev =  ( node_ix =  =  = 0 ) ? mutation . previousSibling : %NWL%nodes [ node_ix - 1 ]  ; %NWL%var next =  ( node_ix =  =  = node_ix_limit - 1 ) ?%NWL%mutation . nextSibling : nodes [ node_ix + 1 ]  ; %NWL%var node = nodes [ node_ix ]  ; %NWL%2
var selector = selectors [ i ]  ; %NWL%var name = selector . getAttribute (  ' data - category '  )  ; %NWL%if ( name =  =  = category )  {%NWL%selector . style . display = add ? ' none '  :  '  '  ; %NWL%break ;%NWL%}%NWL%}%NWL%var catnodes = items ( catlist )  ; %NWL%var all = true , no = true ; %NWL%for ( var i = 0 , n = catnodes . length ; i < n ;  +  + i )  {%NWL%var catnode = catnodes [ i ]  ; %NWL%0
var xtend = require (  ' xtend '  )  ; %NWL%var copy = require (  ' shallow - copy '  )  ; %NWL%var isarray = require (  ' isarray '  )  ; %NWL%var defined = require (  ' defined '  )  ; %NWL%var has = require (  ' has '  )  ; %NWL%var bresolve = require (  ' browser - resolve '  )  ; %NWL%var resolve = require (  ' resolve '  )  ; %NWL%var readonly = require (  ' read - only - stream '  )  ; %NWL%module . exports = Browserify ; %NWL%inherits ( Browserify , EventEmitter )  ; %NWL%var path = require (  ' path '  )  ; %NWL%0
+  '   /  /  / __\\ /  /   /  / ____ / \\  _ / \\ / __\\ \\ \n '%NWL%+  '   /  /  / _____ /   /  / \\____\\ /    / _ / _ / \\ \\ \\ \n '%NWL%+  '   /  /  /     /  /  / ______   /  /  /  \\ \\ \\ \n '%NWL%+  '   /  /  /     /  /  / _______\\  /  /  /   / _ /  /  \n '%NWL%+  '  \\ / _ /    \\ / __________ /  \\ / _ /  \\_\\ /  \n '%NWL%)  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var inquirer = require (  ' inquirer '  )  ; %NWL%6
zapp ( 1 , 2 , 3 , 4 )  ; %NWL%test . expect ( 7 )  ; %NWL%test . done (  )  ;%NWL%}  ,%NWL%' 15 . Zen should run two handler with 5 parameters '  : function ( test )  {%NWL%var hw1 = function ( v1 , v2 , v3 , v4 , v5 , next )  { test . ok ( true ,  ' The handler was executed '  )  ; next (  )  ;  }  ; %NWL%var hw2 = function ( v1 , v2 , v3 , v4 , v5 , next )  {%NWL%test . ok ( arguments . length =  =  = 6 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof v1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v2 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v2 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v3 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v3 +  ' ` .  '  )  ; %NWL%8
result = command . exec ( editor , e . args || {  }  )  ;%NWL%} else {%NWL%result = command . multiSelectAction ( editor , e . args || {  }  )  ;%NWL%}%NWL%return result ;%NWL%}  ; %NWL%this . forEachSelection = function ( cmd , args , $byLines )  {%NWL%if ( this . inVirtualSelectionMode )%NWL%return ; %NWL%var session = this . session ; %NWL%var selection = this . selection ; %NWL%9
id : 157 ,%NWL%from_node : 134 , from :  ' out '  ,%NWL%to_node : 143 , to :  ' geometry '%NWL%}  ; %NWL%var connection_157 = nodegraph . createConnectionFromObject ( connection_157_data )  ; %NWL%var connection_167_data =  {%NWL%id : 167 ,%NWL%from_node : 126 , from :  ' out '  ,%NWL%to_node : 158 , to :  ' y '%NWL%}  ; %NWL%var connection_167 = nodegraph . createConnectionFromObject ( connection_167_data )  ; %NWL%4
createMemberExpression ( tmp ,  ' call '  )  ,%NWL%new ArgumentList ( args . location , argResults )  )  ; %NWL%let tmp2 = this . addTempVar (  )  ; %NWL%expressions . push (%NWL%createAssignmentExpression ( tmp2 , callExpression )  ,%NWL%tmp2 )  ; %NWL%return createCommaExpression ( expressions )  ;%NWL%}%NWL%transformConditionalExpression ( tree )  {%NWL%let condition = this . transformAny ( tree . condition )  ; %NWL%let left = this . transformAny ( tree . left )  ; %NWL%9
it (  ' grant permissions for admin '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%var deleteUser = response . permissions . delete_user ; %NWL%admin . grant ( deleteUser , function ( err , granted )  {%NWL%if ( err ) throw err ; %NWL%granted . should . equal ( true )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' grant permissions for user '  , function ( done )  {%NWL%var user = response . roles . user ; %NWL%1
var DOCUMENT_INSERT =  " DOCUMENT_INSERT "  ; %NWL%var DOCUMENT_DELETE =  " DOCUMENT_DELETE "  ; %NWL%var DOCUMENT_ELEMENT_INSERT =  " DOCUMENT_ELEMENT_INSERT "  ; %NWL%var DOCUMENT_ELEMENT_DELETE =  " DOCUMENT_ELEMENT_DELETE "  ; %NWL%var WAVELET_ADD_PARTICIPANT =  " WAVELET_ADD_PARTICIPANT "  ; %NWL%var WAVELET_REMOVE_PARTICIPANT =  " WAVELET_REMOVE_PARTICIPANT "  ; %NWL%var WAVELET_APPEND_BLIP =  " WAVELET_APPEND_BLIP "  ; %NWL%var BLIP_CREATE_CHILD =  " BLIP_CREATE_CHILD "  ; %NWL%var BLIP_DELETE =  " BLIP_DELETE "  ; %NWL%var DOCUMENT_ELEMENT_DELTA =  " DOCUMENT_ELEMENT_DELTA "  ; %NWL%var DOCUMENT_ELEMENT_SETPREF =  " DOCUMENT_ELEMENT_SETPREF "  ; %NWL%0
gl . clearColor ( 255 , 255 , 255 , 255 )  ; %NWL%gl . clear ( gl . COLOR_BUFFER_BIT )  ;%NWL%}  ; %NWL%RenderContext . prototype . renderFrame = function renderFrame ( frameIndex )  {%NWL%var gl = this . context ; %NWL%var sourceData = this . sourceData ; %NWL%var img = sourceData . img ; %NWL%var transforms = this . frameData [ frameIndex ]  ; %NWL%var count = transforms . length ; %NWL%var i ; %NWL%var program = this . program ; %NWL%5
}%NWL%editor . showProblems ( markers )  ;%NWL%}%NWL%console . log ( data )  ;%NWL%}  )  ; %NWL%socket . on (  ' navigationresponse '  , function ( data )  {%NWL%if ( username =  =  = data . username && project =  =  = data . project && resource =  =  = data . resource && data . navigation ! =  = undefined )  {%NWL%var navigationTarget = data . navigation ; %NWL%if ( navigationTarget . project =  =  = project && navigationTarget . resource =  =  = resource )  {%NWL%var offset = navigationTarget . offset ; %NWL%var length = navigationTarget . length ; %NWL%9
inputCanvas . width = 0 ; %NWL%inputCanvas . height = 0 ; %NWL%div . appendChild ( inputCanvas )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' conversion_table section '  ; %NWL%conversionTable = div ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' sprites section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%4
console . error (  ' Skipping because node compiled without OpenSSL .  '  )  ; %NWL%process . exit ( 0 )  ;%NWL%}%NWL%var common = require (  '  .  .  / common '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var tls = require (  ' tls '  )  ; %NWL%var path = require (  ' path '  )  ;%NWL%( function (  )  {%NWL%var cert = fs . readFileSync ( path . join ( common . fixturesDir ,  ' test_cert . pem '  )  )  ; %NWL%var key = fs . readFileSync ( path . join ( common . fixturesDir ,  ' test_key . pem '  )  )  ; %NWL%9
}%NWL%else {%NWL%this . barWidth =  ( paxis . _offsets . min - paxis . _offsets . max )  / nvals ;%NWL%}%NWL%}%NWL%}  ; %NWL%$ . jqplot . PyramidRenderer . prototype . draw = function ( ctx , gridData , options )  {%NWL%var i ; %NWL%var opts = $ . extend (  {  }  , options )  ; %NWL%var shadow =  ( opts . shadow ! = undefined ) ? opts . shadow : this . shadow ; %NWL%var showLine =  ( opts . showLine ! = undefined ) ? opts . showLine : this . showLine ; %NWL%9
var mustache = require (  ' gulp - mustache '  )  ; %NWL%var source = require (  ' vinyl - source - stream '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var webserver = require (  ' gulp - webserver '  )  ; %NWL%var autoprefixer = require (  ' gulp - autoprefixer '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var browserify = require (  ' browserify '  )  ; %NWL%var extend = require (  ' node . extend '  )  ; %NWL%var log = require (  '  .  .  / helpers / log . js '  )  ; %NWL%var files = require (  '  .  .  / helpers / files . js '  )  ; %NWL%var textrequireify = require (  ' textrequireify '  )  ; %NWL%6
this . buffer = new Float32Array ( Math . ceil ( sound . sampleRate . value * 0 . 1 )  )  ; %NWL%this . bufferPos = 0 ;%NWL%}  ; %NWL%jfxr . Synth . Flanger . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%if ( !this . buffer )  {%NWL%return ;%NWL%}%NWL%var numSamples = array . length ; %NWL%var sampleRate = sound . sampleRate . value ; %NWL%var flangerOffset = sound . flangerOffset . value ; %NWL%var flangerOffsetSweep = sound . flangerOffsetSweep . value ; %NWL%8
goog . require (  ' goog . i18n . bidi . Dir '  )  ; %NWL%goog . require (  ' goog . i18n . bidi . Format '  )  ; %NWL%goog . require (  ' goog . testing . jsunit '  )  ; %NWL%var LRM = goog . i18n . bidi . Format . LRM ; %NWL%var RLM = goog . i18n . bidi . Format . RLM ; %NWL%var LRE = goog . i18n . bidi . Format . LRE ; %NWL%var RLE = goog . i18n . bidi . Format . RLE ; %NWL%var PDF = goog . i18n . bidi . Format . PDF ; %NWL%var LTR = goog . i18n . bidi . Dir . LTR ; %NWL%var RTL = goog . i18n . bidi . Dir . RTL ; %NWL%var NEUTRAL = goog . i18n . bidi . Dir . NEUTRAL ; %NWL%8
iframe . style . width  =  ' 300px '%NWL%iframe . style . height =  ' 300px '%NWL%iframe . src    =  ' about : blank '%NWL%var async    = t . beginAsync (  )%NWL%var cont    = function (  )  {%NWL%t . endAsync ( async )%NWL%var iframeDoc   = iframe . contentWindow . document%NWL%var div    = iframeDoc . createElement (  ' div '  )%NWL%div . setAttribute (  ' style '  ,  ' width : 100px ; height : 100px ; left : 100px ; top : 100px ; position : absolute ; border : 1px solid black '  )%NWL%div . innerHTML   =  ' &nbsp ;  '%NWL%var input    = iframeDoc . createElement (  ' input '  )%NWL%7
self . showStatusChange = Komanda . settings . get (  " notifications . status "  )  ; %NWL%Komanda . vent . on (  " ignoreStatusChange "  , function (  )  {%NWL%self . showStatusChange = false ;%NWL%}  )  ;%NWL%}  ,%NWL%onClose : function (  )  {%NWL%}  ,%NWL%onRender : function (  )  {%NWL%var $this = $ ( this . el )  ; %NWL%var server = this . model . get (  " server "  )  ; %NWL%var channel = this . model . get (  " channel "  )  ; %NWL%9
fieldSize [ uid ]  = 8%NWL%fieldSize [ gid ]  = 8%NWL%fieldSize [ size ]  = 12%NWL%fieldSize [ mtime ]  = 12%NWL%fieldSize [ cksum ]  = 8%NWL%fieldSize [ type ]  = 1%NWL%fieldSize [ linkpath ]  = 100%NWL%var ustar = fields . ustar = f +  +%NWL%, ustarver = fields . ustarver = f +  +%NWL%, uname = fields . uname = f +  +%NWL%, gname = fields . gname = f +  +%NWL%8
var uglify = require (  ' gulp - uglify '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var clean = require (  ' gulp - clean '  )  ; %NWL%var header = require (  ' gulp - header '  )  ; %NWL%var streamify = require (  ' gulp - streamify '  )  ; %NWL%var qunit = require (  ' gulp - qunit '  )  ; %NWL%var shell = require (  ' gulp - shell '  )  ; %NWL%var git = require (  ' gulp - git '  )  ; %NWL%var bump = require (  ' gulp - bump '  )  ; %NWL%var replace = require (  ' gulp - replace '  )  ; %NWL%0
function loadExtendedEvents ( annotator )  {%NWL%showExtendedGrapProgresshMessge (  " Accessing events API "  )  ; %NWL%var timeBack = $ (  ' #timeBack '  )  . val (  )  ; %NWL%var start , end ; %NWL%if ( timeBack ! =  "  "  )  {%NWL%var tsValue = parseMomentTimeSpanValue ( timeBack )  ; %NWL%var tsFrame = parseMomentTimeSpanFrame ( timeBack )  ; %NWL%end = moment (  )  ; %NWL%start = end . clone (  )  . subtract ( tsFrame , tsValue )  ;%NWL%} else {%NWL%var start = $ (  ' #start '  )  . val (  )  ; %NWL%2
var out2 =  { className :  " out2 "  , Number : 5 }  ; %NWL%var out3 =  { className :  " out3 "  , Number : 5 }  ; %NWL%var out4 =  { className :  " out4 "  , Number : 5 }  ; %NWL%var out5 =  { className :  " out5 "  , Number : 5 }  ; %NWL%var out6 =  { className :  " out6 "  , Number : 5 }  ; %NWL%var out7 =  { className :  " out7 "  , Number : 5 }  ; %NWL%var out8 =  { className :  " out8 "  , Number : 5 }  ; %NWL%var out9 =  { className :  " out9 "  , Number : 5 }  ; %NWL%var out10 =  { className :  " out10 "  , Number : 5 }  ; %NWL%var out11 =  { className :  " out11 "  , Number : 5 }  ; %NWL%var out12 =  { className :  " out12 "  , Number : 5 }  ; %NWL%0
' use strict '  ; %NWL%var EventTarget = scope . wrappers . EventTarget ; %NWL%var NodeList = scope . wrappers . NodeList ; %NWL%var TreeScope = scope . TreeScope ; %NWL%var assert = scope . assert ; %NWL%var defineWrapGetter = scope . defineWrapGetter ; %NWL%var enqueueMutation = scope . enqueueMutation ; %NWL%var getTreeScope = scope . getTreeScope ; %NWL%var isWrapper = scope . isWrapper ; %NWL%var mixin = scope . mixin ; %NWL%var registerTransientObservers = scope . registerTransientObservers ; %NWL%3
show = hasAvailability || ( hasLeadTime && hasTrailTime )  ; %NWL%if ( show )  {%NWL%if ( hasTrailTime )  {%NWL%sampleStart = JulianDate . addSeconds ( time ,  - trailTime , new JulianDate (  )  )  ;%NWL%}%NWL%if ( hasLeadTime )  {%NWL%sampleStop = JulianDate . addSeconds ( time , leadTime , new JulianDate (  )  )  ;%NWL%}%NWL%if ( hasAvailability )  {%NWL%var start = availability . start ; %NWL%var stop = availability . stop ; %NWL%9
' user '  : null ,%NWL%' headers '  :  {  }  ,%NWL%' timeout '  : 0 ,%NWL%' withCredentials '  : false ,%NWL%' overrideMimeType '  : null ,%NWL%' responseType '  :  '  '%NWL%}  ; %NWL%this . flow_ = null ; %NWL%var self = this ; %NWL%var handle = this . handle_ ; %NWL%var props = this . props_ ; %NWL%9
}%NWL%backgroundMaterial = this . backgroundMaterial ; %NWL%var barBackgroundColor = this . barBackgroundColor ; %NWL%barBackgroundColor [ 3 ]  = backgroundAlpha ; %NWL%var barColor = this . barColor ; %NWL%barColor [ 3 ]  = backgroundAlpha ; %NWL%centerx = this . barCenter . x * screenWidth ; %NWL%centery = this . barCenter . y * screenHeight ; %NWL%var barBackgroundWidth = this . barBackgroundWidth ; %NWL%var halfBarHeight = 0 . 5 * this . barBackgroundHeight ; %NWL%var barBorderSize = this . barBorderSize ; %NWL%2
} else {%NWL%func ( callback )  ;%NWL%}%NWL%} else {%NWL%var result = func ( convertArgument ( args . args , focusedWindow )  )  ; %NWL%callback ( null , result )  ;%NWL%}%NWL%} catch ( e )  {%NWL%var toReport =  '  '  ; %NWL%var message =  ( e && e . message ) || '  '  ; %NWL%var stack =  ( e && e . stack ) || '  '  ; %NWL%9
var year = 1970 , month = 0 , day = 1 , hour = 0 , minute = 0 , second = 0 , millisecond = 0 , offset = 0 ; %NWL%if ( match [ 0 ] ! = null )  {%NWL%year = match [ 0 ]  ; %NWL%if ( year < 100 )  {%NWL%year = 1970 ;%NWL%}%NWL%log (  ' sfDateToJsDate : year =  '  + year )  ;%NWL%}%NWL%if ( match [ 2 ] ! = null )  {%NWL%month = match [ 2 ]  - 1 ; %NWL%log (  ' sfDateToJsDate : month =  '  + month )  ; %NWL%6
function parseVars ( id )  {%NWL%var vars = data . vars%NWL%if ( vars && id . indexOf (  "  {  "  )  >  - 1 )  {%NWL%id = id . replace ( VARS_RE , function ( m , key )  {%NWL%return isString ( vars [ key ]  ) ? vars [ key ]  : m%NWL%}  )%NWL%}%NWL%return id%NWL%}%NWL%function parseMap ( uri )  {%NWL%var map = data . map%NWL%1
vertexFormat : options . vertexFormat%NWL%}  ; %NWL%return new WallGeometry ( newOptions )  ;%NWL%}  ; %NWL%WallGeometry . createGeometry = function ( wallGeometry )  {%NWL%var wallPositions = wallGeometry . _positions ; %NWL%var minimumHeights = wallGeometry . _minimumHeights ; %NWL%var maximumHeights = wallGeometry . _maximumHeights ; %NWL%var vertexFormat = wallGeometry . _vertexFormat ; %NWL%var granularity = wallGeometry . _granularity ; %NWL%var ellipsoid = wallGeometry . _ellipsoid ; %NWL%6
var R6_0 = this . _R6_0 ; %NWL%var R7_0 = this . _R7_0 ; %NWL%var R8_0 = this . _R8_0 ; %NWL%var R9_0 = this . _R9_0 ; %NWL%var R10_0 = this . _R10_0 ; %NWL%var R11_0 = this . _R11_0 ; %NWL%var R12_0 = this . _R12_0 ; %NWL%var R13_0 = this . _R13_0 ; %NWL%var R14_0 = this . _R14_0 ; %NWL%var R15_0 = this . _R15_0 ; %NWL%var R16_0 = this . _R16_0 ; %NWL%0
, name = nv . shift (  )%NWL%, ver = semver . validRange ( nv . join (  " @ "  )  ) || "  "%NWL%return [ name , ver ]%NWL%}  )%NWL%var depth = npm . config . get (  " depth "  )%NWL%var opt =  { depth : depth , log : log . warn , dev : true }%NWL%readInstalled ( dir , opt , function ( er , data )  {%NWL%var bfs = bfsify ( data , args )%NWL%, lite = getLite ( bfs )%NWL%if ( er || silent ) return cb ( er , data , lite )%NWL%var long = npm . config . get (  " long "  )%NWL%4
cm :  {%NWL%get : function (  )  {%NWL%var median = priv . get ( this )  . median ; %NWL%return +  (  (  (  ( median / 2 )  * 343 . 2 )  / 10 )  / 1000 )  . toFixed ( 1 )  ;%NWL%}%NWL%}%NWL%}%NWL%}  ,%NWL%DEFAULT :  {%NWL%initialize : function (  )  {%NWL%var samples = priv . get ( this )  . samples ; %NWL%2
var selector = $ (  ' #cke_ '  + id +  '  . cke_button__ '  + name )  ; %NWL%if ( value )  {%NWL%selector . show (  )  ;%NWL%} else {%NWL%selector . hide (  )  ;%NWL%}%NWL%}%NWL%function updateRichEditorControlsVisibility ( id , options )  {%NWL%var top = $ (  ' #cke_ '  + id +  '  . cke_top '  )  ; %NWL%var bottom = $ (  ' #cke_ '  + id +  '  . cke_bottom '  )  ; %NWL%var path = $ (  ' #cke_ '  + id +  '  . cke_path '  )  ; %NWL%8
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdName (  ' TEST_ELEMENT '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / name '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdSize : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%var event = _dereq_ (  '  .  / event '  )  ; %NWL%var html = _dereq_ (  '  .  / html '  )  ; %NWL%var selector = _dereq_ (  '  .  / selector '  )  ; %NWL%var selector_extra = _dereq_ (  '  .  / selector_extra '  )  ; %NWL%if ( selector ! =  = undefined )  {%NWL%$ = selector . $ ; %NWL%$ . matches = selector . matches ; %NWL%api . find = selector . find ;%NWL%}%NWL%var mode = _dereq_ (  '  .  / mode '  )  ; %NWL%0
if ( data . data . movie_count > 0 )  {%NWL%for ( var torrent in data . data . movies )  {%NWL%var title = data . data . movies [ torrent ]  . title_long ; %NWL%for ( var torrents in data . data . movies [ torrent ]  . torrents )  {%NWL%var torrent_quality = data . data . movies [ torrent ]  . torrents [ torrents ]  . quality ; %NWL%var torrent_title = title +  '  '  + torrent_quality ; %NWL%var seeds = data . data . movies [ torrent ]  . torrents [ torrents ]  . seeds ; %NWL%var leech = data . data . movies [ torrent ]  . torrents [ torrents ]  . peers ; %NWL%var hash = data . data . movies [ torrent ]  . torrents [ torrents ]  . hash ; %NWL%var torrent_link =  " http :  /  / torcache . net / torrent /  "  + hash +  "  . torrent "  ; %NWL%var size = data . data . movies [ torrent ]  . torrents [ torrents ]  . size ; %NWL%6
if ( typeof wm =  =  " undefined "  )%NWL%{%NWL%this . updateText (  )  ;%NWL%}%NWL%}  ,%NWL%updateText : function (  )  {%NWL%if ( this . storage )%NWL%{%NWL%var level = this . storage . getInt (  " level "  )  ; %NWL%var nextLevel = level + 1 ; %NWL%var totalScore = this . storage . getInt (  " totalScore "  )  ; %NWL%8
var browserSync = require (  ' browser - sync '  )  ; %NWL%var sass   = require (  ' gulp - sass '  )  ; %NWL%var prefix   = require (  ' gulp - autoprefixer '  )  ; %NWL%var cp    = require (  ' child_process '  )  ; %NWL%var minifyCSS  = require (  ' gulp - minify - css '  )  ; %NWL%var rename   = require (  ' gulp - rename '  )  ; %NWL%var uglify   = require (  ' gulp - uglify '  )  ; %NWL%var imagemin  = require (  ' gulp - imagemin '  )  ; %NWL%var pngquant  = require (  ' imagemin - pngquant '  )  ; %NWL%var csslint  = require (  ' gulp - csslint '  )  ; %NWL%var jshint   = require (  ' gulp - jshint '  )  ; %NWL%1
}  ; %NWL%this . $gutterLayer . element . style . marginTop =  (  - offset )  +  " px "  ; %NWL%this . content . style . marginTop =  (  - offset )  +  " px "  ; %NWL%this . content . style . width = longestLine +  " px "  ; %NWL%this . content . style . height = minHeight +  " px "  ; %NWL%if ( horizScrollChanged )%NWL%this . onResize ( true )  ;%NWL%}  ; %NWL%this . $updateLines = function (  )  {%NWL%var firstRow = this . $changedLines . firstRow ; %NWL%var lastRow = this . $changedLines . lastRow ; %NWL%9
result +  =  "  "  ;  /  / $NON - NLS - 0$%NWL%}%NWL%result +  = getUserKeyStrokeString ( keys [ i ]  )  ;%NWL%}%NWL%return result ;%NWL%}%NWL%function getUserText ( options )  {%NWL%var id = options . id ; %NWL%var refNode = options . refNode ; %NWL%var hideRefNode = options . hideRefNode ; %NWL%var initialText = options . initialText ; %NWL%7
, url = require (  ' url '  )%NWL%, basename = require (  ' path '  )  . basename%NWL%, join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var debug = options . debug ; %NWL%9
Orchestra . MuseumPlayer =  ( function (  )  {%NWL%var BLOB_DIMENSIONS =  {%NWL%maker :  {%NWL%radius : 25 ,%NWL%spacing : 62%NWL%}%NWL%}  ; %NWL%var MuseumLiveManager = WEBLAB . namespace (  " WEBLAB . orchestra "  )  . MuseumLiveManager ; %NWL%var Timer = WEBLAB . namespace (  " WEBLAB . orchestra . timer "  )  . Timer ; %NWL%var Player = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . Player ; %NWL%var TutorialPlayer = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . TutorialPlayer ; %NWL%9
var scope = current . scope ; %NWL%expect ( controller )  . to . eql (  ' VideosCtrl '  )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should load the WatchedVideosCtrl controller properly when / watched - videos route is accessed '  , function ( done )  {%NWL%tester . visit (  '  / watched - videos '  , function (  )  {%NWL%tester . path (  )  . should . eq (  '  / watched - videos '  )  ; %NWL%var current = tester . inject (  ' $route '  )  . current ; %NWL%var controller = current . controller ; %NWL%var params = current . params ; %NWL%0
}  ]%NWL%}  ;%NWL%}  ; %NWL%oop . inherits ( XQueryHighlightRules , TextHighlightRules )  ; %NWL%exports . XQueryHighlightRules = XQueryHighlightRules ;%NWL%}  )  ; %NWL%define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
var convertTime = function ( time )  {%NWL%return Math . floor ( time / 60 )  +  "  :  "  +  (  ( time%60 > 9 ) ? time%60 :  " 0 "  + time%60 )  +  "  : 00 "  ;%NWL%}  ; %NWL%var getProperty = function ( code )  {%NWL%return code +  '  '  + propertyDescription [ code ]  . text ;%NWL%}  ; %NWL%var trainsHeader = data . trainsHeader ; %NWL%var trains = data . trains ; %NWL%var stations = data . stations ; %NWL%var trainRoutes = data . trainRoutes ; %NWL%var trainTypes = data . trainTypes ; %NWL%6
function randomId (  )  {%NWL%return Math . floor ( Math . random (  )  * 1000 )  ;%NWL%}%NWL%function buildTestWorldURL ( testWorldName , id )  {%NWL%return ' http :  /  /  '%NWL%+ env . LIFE_STAR_HOST +  '  :  '  + env . LIFE_STAR_PORT%NWL%+ testWorldName%NWL%+  ' ?testRunId =  '  + id%NWL%+  ( options . testScript ? " &loadScript =  "  + escape ( options . testScript )  :  '  '  )%NWL%+  ( options . testFilter ? " &testFilter =  "  + escape ( options . testFilter )  :  '  '  )%NWL%+  ( options . modules ? " &additionalModules =  "  + escape ( options . modules )  :  '  '  )%NWL%8
tasksAjaxCall (  )  ; %NWL%workspaceRefresh . hide (  )  ; %NWL%workspaceLoader . delay (  ' 200 '  )  . show (  )  ;%NWL%}%NWL%}  )  ; %NWL%$ (  " #track - table "  )  . on (  ' click '  ,  ' td . estimated_time '  , function ( event )  {%NWL%if ( $ ( this )  . siblings (  '  . my_timer '  )  . find (  ' button . btn '  )  . hasClass (  ' btn - danger '  )  )  {%NWL%return false ;%NWL%}%NWL%var hours = $ ( this )  . attr (  ' data - estimated - hours '  )  ; %NWL%var minutes = $ ( this )  . attr (  ' data - estimated - minutes '  )  ; %NWL%9
}%NWL%if ( this . nearBeard && tools . clipper . isSelected && mouseCoords . down )  {%NWL%app . utils . triggerStart (  ' selfie_shave_cutting '  )  ;%NWL%} else if ( !this . nearBeard || !mouseCoords . down )  {%NWL%app . utils . triggerStop (  ' selfie_shave_cutting '  )  ;%NWL%}%NWL%}  ; %NWL%app . Cloth . prototype . drawInitialCloth = function (  )  {%NWL%var CANVAS_WIDTH = app . Constants . CANVAS_WIDTH ; %NWL%var CLOTH_WIDTH = app . Constants . CLOTH_WIDTH ; %NWL%var CLOTH_HEIGHT = app . Constants . CLOTH_HEIGHT ; %NWL%8
this . _radii = Cartesian3 . clone ( radii )  ; %NWL%this . _stackPartitions = stackPartitions ; %NWL%this . _slicePartitions = slicePartitions ; %NWL%this . _subdivisions = subdivisions ; %NWL%this . _workerName =  ' createEllipsoidOutlineGeometry '  ;%NWL%}  ; %NWL%EllipsoidOutlineGeometry . createGeometry = function ( ellipsoidGeometry )  {%NWL%var radii = ellipsoidGeometry . _radii ; %NWL%var ellipsoid = Ellipsoid . fromCartesian3 ( radii )  ; %NWL%var stackPartitions = ellipsoidGeometry . _stackPartitions ; %NWL%var slicePartitions = ellipsoidGeometry . _slicePartitions ; %NWL%7
}  )  ; %NWL%debug (  " Editing resource %s of type %s "  , resourceId , resourceType . name )  ; %NWL%return ;%NWL%}%NWL%}%NWL%fn (  )  ;  /  / blank page%NWL%}  ; %NWL%Dashboard . prototype . loadAdvancedDashboard = function ( data , fn )  {%NWL%var pagePath = data . pagePath%NWL%, dashboardPath = data . dashboardPath%NWL%, page = data . page%NWL%9
var subItems =  [  ]  ; %NWL%for ( var i = 0 ; i < formats . length ; i +  +  )  {%NWL%subItems . push (  { format : formats [ i ]  , title : formats [ i ]  . toUpperCase (  )  }  )  ;%NWL%}%NWL%menuItems . push (  { onclick : function (  )  {  }  , icon : _this . chart . pathToImages + _this . buttonIcon , items : subItems }  )%NWL%}%NWL%var color = _this . color ; %NWL%if ( color =  =  = undefined )  {%NWL%color = _this . chart . color ;%NWL%}%NWL%var buttonColor = _this . buttonColor ; %NWL%6
core . module . layout . workspace . window_manager . open ( filepath , filename , filetype , null ,  {  }  )  ; %NWL%core . module . layout . project_explorer . refresh (  )  ; %NWL%$ ( core )  . trigger (  " on_project_open "  )  ;%NWL%}  , 500 )  ;%NWL%}  )  ;%NWL%}  ,%NWL%run : function ( path )  {%NWL%var property = core . property . plugins [  ' org . goorm . plugin . php '  ]  ; %NWL%var main = property [  ' plugin . php . main '  ]  ; %NWL%var run_path = property [  ' plugin . php . run_path '  ]  ; %NWL%var deploy_path = property [  ' plugin . php . deploy_path '  ]  ; %NWL%8
return d . promise ;%NWL%}  ,%NWL%_createKeywordProposals : function ( context , completionKind , buffer )  {%NWL%if (  ( typeof context . keyword =  =  =  ' undefined ' || context . keyword ) &&%NWL%this . provider . isValid ( context . prefix , buffer , context . offset , context )  )  {%NWL%return this . provider . getKeywordProposals ( context . prefix , completionKind )  ;%NWL%}%NWL%return [  ]  ;%NWL%}  ,%NWL%_createTemplateProposals : function ( context , completionKind , buffer )  {%NWL%if (  ( typeof context . template =  =  =  ' undefined ' || context . template ) &&%NWL%3
sectionLabel . setFontSize ( 12 )  ; %NWL%sectionLabel . setTextAnchor ( thin . core . TextStyle . HorizonAlignType . MIDDLE )  ; %NWL%sectionLabel . setVerticalAlign ( thin . core . TextStyle . VerticalAlignType . CENTER )  ; %NWL%sectionLabel . setFill ( new goog . graphics . SolidFill (  ' #AAAAAA '  )  )  ; %NWL%sectionLabel . setVisibled ( false )  ; %NWL%return sectionLabel ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . disposeInternal = function (  )  {%NWL%this . inactive (  )  ; %NWL%var layout = this . layout_ ; %NWL%var separator = this . separator_ ; %NWL%9
}%NWL%var hash = crypto . createHmac (  ' sha1 '  , camo_key )  . update ( url )  . digest (  ' hex '  )  ; %NWL%var url_hex = new Buffer ( url )  . toString (  ' hex '  )  ; %NWL%var secure_url =  ' https :  /  /  '  + camo_host +  '  /  '  + hash +  '  /  '  + url_hex ; %NWL%return res . send ( secure_url )  ;%NWL%}  ; %NWL%exports . file_url = function ( req , res )  {%NWL%var channel_id = req . query . channel_id ; %NWL%var message_id = req . query . message_id ; %NWL%var file_id = req . query . file_id ; %NWL%var annotation_index = req . query . annotation_index ; %NWL%7
]  ,%NWL%function ( FBTrace , Obj , Options , Str , Http , HttpActivityObserver , HttpRequestObserver ,%NWL%NetProgress , NetUtils , Events , NetCacheListener , Module , Chrome , Win ,%NWL%DocumentLoadObserver , WindowEventObserver )  {%NWL%const Cc = Components . classes ; %NWL%const Ci = Components . interfaces ; %NWL%const Cr = Components . results ; %NWL%var panelName =  " net "  ; %NWL%var windowPaint = NetProgress . prototype . windowPaint ; %NWL%var timeStamp = NetProgress . prototype . timeStamp ; %NWL%var windowLoad = NetProgress . prototype . windowLoad ; %NWL%8
return new MochiKit . Style . Coordinates ( valueL , valueT )  ;%NWL%}  ,%NWL%relativize : function ( element , oldPos )  {%NWL%element = MochiKit . DOM . getElement ( element )  ; %NWL%if ( element . style . position =  =  ' relative '  )  {%NWL%return ;%NWL%}%NWL%MochiKit . Position . prepare (  )  ; %NWL%var top = parseFloat ( element . style . top || 0 )  -%NWL%( oldPos [  ' top '  ] || 0 )  ; %NWL%var left = parseFloat ( element . style . left || 0 )  -%NWL%8
this . setPublic = function ( p , q , g , y )  {%NWL%this . isPublic = true ; %NWL%this . p = p ; %NWL%this . q = q ; %NWL%this . g = g ; %NWL%this . y = y ; %NWL%this . x = null ;%NWL%}  ; %NWL%this . signWithMessageHash = function ( sHashHex )  {%NWL%var p = this . p ; %NWL%var q = this . q ; %NWL%9
authFormElements = document . getElementById (  " form - elements "  )  ,%NWL%signUpBtn = document . getElementById (  " signUpBtn "  )  ,%NWL%processClass =  " in - progress "  ,%NWL%regCompleteClass =  " complete "  ; %NWL%if ( linkedUser )  {%NWL%var identifier = common . getParam (  " identifier "  )  ; %NWL%var password = generateRandomPassword (  )  ;%NWL%} else {%NWL%var password = document . getElementById (  " password "  )  . value ;%NWL%}%NWL%var username = document . getElementById (  " username "  )  . value ; %NWL%8
var SourceMapDevToolPlugin = require (  "  .  / SourceMapDevToolPlugin "  )  ; %NWL%var EvalSourceMapDevToolPlugin = require (  "  .  / EvalSourceMapDevToolPlugin "  )  ; %NWL%var SingleEntryPlugin = require (  "  .  / SingleEntryPlugin "  )  ; %NWL%var MultiEntryPlugin = require (  "  .  / MultiEntryPlugin "  )  ; %NWL%var RecordIdsPlugin = require (  "  .  / RecordIdsPlugin "  )  ; %NWL%var APIPlugin = require (  "  .  / APIPlugin "  )  ; %NWL%var ConstPlugin = require (  "  .  / ConstPlugin "  )  ; %NWL%var RequireJsStuffPlugin = require (  "  .  / RequireJsStuffPlugin "  )  ; %NWL%var NodeStuffPlugin = require (  "  .  / NodeStuffPlugin "  )  ; %NWL%var CompatibilityPlugin = require (  "  .  / CompatibilityPlugin "  )  ; %NWL%var DefinePlugin = require (  "  .  / DefinePlugin "  )  ; %NWL%0
var define = require (  ' amdefine '  )  ( module )  ;%NWL%}%NWL%define ( function ( require , exports , module )  {%NWL%var tm = require (  "  .  / tree - matcher "  )  ; %NWL%var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%var bindPat = tm . bindPat ; %NWL%5
qx . Bootstrap . define (  " qx . bom . element . Clip "  ,%NWL%{%NWL%statics :%NWL%{%NWL%compile : function ( map )%NWL%{%NWL%if ( !map )  {%NWL%return " clip : auto ;  "  ;%NWL%}%NWL%var left = map . left ; %NWL%var top = map . top ; %NWL%9
return {%NWL%r : this . pixels . data [ index ]  ,%NWL%g : this . pixels . data [ index + 1 ]  ,%NWL%b : this . pixels . data [ index + 2 ]  ,%NWL%a : this . pixels . data [ index + 3 ]%NWL%}  ;%NWL%}  ; %NWL%bkcore . ImageData . prototype . getPixelBilinear = function ( fx , fy )%NWL%{%NWL%var x = Math . floor ( fx )  ; %NWL%var y = Math . floor ( fy )  ; %NWL%9
, utility  = require (  '  .  /  .  .  /  .  .  / core / utility '  )%NWL% ; %NWL%try {%NWL%pair = require (  '  .  /  .  .  / devices - gateway / gateway - insteon - automategreen '  )  . pair ;%NWL%} catch ( ex )  {%NWL%exports . start = function (  )  {  }  ; %NWL%return utility . logger (  ' devices '  )  . info (  ' failing insteon - onoff switch ( continuing )  '  ,  { diagnostic : ex . message }  )  ;%NWL%}%NWL%var util   = require (  ' util '  )%NWL%, devices  = require (  '  .  /  .  .  /  .  .  / core / device '  )%NWL%, steward  = require (  '  .  /  .  .  /  .  .  / core / steward '  )%NWL%0
var app = express (  )  ; %NWL%var record = require (  ' blue - button - record '  )  ; %NWL%var passport = require (  ' passport '  )  ; %NWL%var favicon = require (  ' serve - favicon '  )  ; %NWL%var logger = require (  ' morgan '  )  ; %NWL%var multiparty = require (  ' connect - multiparty '  )  ; %NWL%var methodOverride = require (  ' method - override '  )  ; %NWL%var session = require (  ' express - session '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var static = require (  ' serve - static '  )  ; %NWL%3
var myInstance2 = blockUI . instances . get (  ' myInstance2 '  )  ; %NWL%myInstance1 . pattern (  / ^\ / api\ / quote\ / \d + $ /  )  ; %NWL%myInstance2 . pattern (  / ^\ / api\ / quote /  )  ; %NWL%interceptor . request (  { url :  '  / api / quote / 1 '  }  )  ; %NWL%expect ( blockUI . state (  )  . blockCount )  . toBe ( 0 )  ; %NWL%expect ( myInstance1 . state (  )  . blockCount )  . toBe ( 1 )  ; %NWL%expect ( myInstance2 . state (  )  . blockCount )  . toBe ( 1 )  ;%NWL%}  )  ; %NWL%it (  ' should not block instances that do not match the pattern '  , function (  )  {%NWL%var myInstance1 = blockUI . instances . get (  ' myInstance1 '  )  ; %NWL%var myInstance2 = blockUI . instances . get (  ' myInstance2 '  )  ; %NWL%9
goog . require (  ' goog . Uri '  )  ; %NWL%goog . scope ( function (  )  {%NWL%var explorer = p3rf . perfkit . explorer ; %NWL%var ChartWidgetConfig = explorer . models . ChartWidgetConfig ; %NWL%var ContainerWidgetConfig = explorer . components . container . ContainerWidgetConfig ; %NWL%var DashboardConfig = explorer . components . dashboard . DashboardConfig ; %NWL%var DashboardModel = explorer . components . dashboard . DashboardModel ; %NWL%var ErrorService = explorer . components . error . ErrorService ; %NWL%var ErrorTypes = explorer . components . error . ErrorTypes ; %NWL%var WidgetConfig = explorer . models . WidgetConfig ; %NWL%var WidgetType = explorer . models . WidgetType ; %NWL%3
return p1 . row =  = p2 . row && p1 . column =  = p2 . column ;%NWL%}%NWL%exports . onSessionChange = function ( e )  {%NWL%var session = e . session ; %NWL%if ( !session . multiSelect )  {%NWL%session . $selectionMarkers =  [  ]  ; %NWL%session . selection . $initRangeList (  )  ; %NWL%session . multiSelect = session . selection ;%NWL%}%NWL%this . multiSelect = session . multiSelect ; %NWL%var oldSession = e . oldSession ; %NWL%3
modelModule = $__m ;%NWL%}  ]  ,%NWL%execute : function (  )  {%NWL%FormBuilder = $__export (  " FormBuilder "  ,  ( function (  )  {%NWL%var FormBuilder = function FormBuilder (  )  {  }  ; %NWL%return ( $traceurRuntime . createClass )  ( FormBuilder ,  {%NWL%group : function ( controlsConfig )  {%NWL%var extra = arguments [ 1 ] ! =  =  ( void 0 ) ? arguments [ 1 ]  : null ; %NWL%var controls = this . _reduceControls ( controlsConfig )  ; %NWL%var optionals = isPresent ( extra ) ? StringMapWrapper . get ( extra ,  " optionals "  )  : null ; %NWL%var validator = isPresent ( extra ) ? StringMapWrapper . get ( extra ,  " validator "  )  : null ; %NWL%9
var RemoveParentModulesPlugin = require (  "  .  / optimize / RemoveParentModulesPlugin "  )  ; %NWL%var RemoveEmptyChunksPlugin = require (  "  .  / optimize / RemoveEmptyChunksPlugin "  )  ; %NWL%var MergeDuplicateChunksPlugin = require (  "  .  / optimize / MergeDuplicateChunksPlugin "  )  ; %NWL%var FlagIncludedChunksPlugin = require (  "  .  / optimize / FlagIncludedChunksPlugin "  )  ; %NWL%var UnsafeCachePlugin = require (  " enhanced - resolve / lib / UnsafeCachePlugin "  )  ; %NWL%var ModulesInDirectoriesPlugin = require (  " enhanced - resolve / lib / ModulesInDirectoriesPlugin "  )  ; %NWL%var ModulesInRootPlugin = require (  " enhanced - resolve / lib / ModulesInRootPlugin "  )  ; %NWL%var ModuleTemplatesPlugin = require (  " enhanced - resolve / lib / ModuleTemplatesPlugin "  )  ; %NWL%var ModuleAsFilePlugin = require (  " enhanced - resolve / lib / ModuleAsFilePlugin "  )  ; %NWL%var ModuleAsDirectoryPlugin = require (  " enhanced - resolve / lib / ModuleAsDirectoryPlugin "  )  ; %NWL%var ModuleAliasPlugin = require (  " enhanced - resolve / lib / ModuleAliasPlugin "  )  ; %NWL%4
var url = require (  '  .  .  / services / url '  )  ; %NWL%var github = require (  '  .  .  / services / github '  )  ; %NWL%var status = require (  '  .  .  / services / status '  )  ; %NWL%var milestone = require (  '  .  .  / services / milestone '  )  ; %NWL%var pullRequest = require (  '  .  .  / services / pullRequest '  )  ; %NWL%var notification = require (  '  .  .  / services / notification '  )  ; %NWL%module . exports = function ( req , res )  {%NWL%var user = req . args . repository . owner . login ; %NWL%var repo = req . args . repository . name ; %NWL%var number = req . args . number ; %NWL%var sender = req . args . sender ; %NWL%9
path . indexOf (  " ? "  )  > 0 ||%NWL%lastC =  =  =  "  /  "  ) ? path : path +  "  . js "%NWL%}%NWL%var PATHS_RE =  / ^ (  [ ^ /  :  ]  +  )  ( \ /  .  +  ) $ /%NWL%var VARS_RE =  /  {  (  [ ^ {  ]  +  )  }  / g%NWL%function parseAlias ( id )  {%NWL%var alias = data . alias%NWL%return alias && isString ( alias [ id ]  ) ? alias [ id ]  : id%NWL%}%NWL%function parsePaths ( id )  {%NWL%var paths = data . paths%NWL%6
var Player = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . Player ; %NWL%var TutorialPlayer = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . TutorialPlayer ; %NWL%var Point = WEBLAB . namespace (  " WEBLAB . utils . math "  )  . Point ; %NWL%var StandAloneCopyGenerator = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player . copy "  )  . StandAloneCopyGenerator ; %NWL%var OrchestraCopyIds = WEBLAB . namespace (  " WEBLAB . common . constants "  )  . OrchestraCopyIds ; %NWL%var TutorialEventTypes = WEBLAB . namespace (  " WEBLAB . orchestra . constants "  )  . TutorialEventTypes ; %NWL%var PlayerChangeEventTypes = WEBLAB . namespace (  " WEBLAB . orchestra . constants "  )  . PlayerChangeEventTypes ; %NWL%var LiveSyncedVideoPlayer = WEBLAB . namespace (  " WEBLAB . orchestra . ui . video "  )  . LiveSyncedVideoPlayer ; %NWL%var OrchestraConfiguration = WEBLAB . namespace (  " WEBLAB . orchestra "  )  . OrchestraConfiguration ; %NWL%var FixedLengthTimeCodeAdjust = WEBLAB . namespace (  " WEBLAB . orchestra . ui . video "  )  . FixedLengthTimeCodeAdjust ; %NWL%var BlobsLeftPanel = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . BlobsLeftPanel ; %NWL%0
if ( !validateFrom ( fromMap , res )  ) return ; %NWL%_ . forEach ( fromMap , function ( froms , service )  {%NWL%fromMap [ service ]  = froms [ 0 ]  ;  /  / Just eliminate the array%NWL%}  )  ; %NWL%if ( toList . length =  =  = 0 ) return res . json (%NWL%lutil . jsonErr (  ' Must include a " to " parameter .  '  )  , 400%NWL%)  ; %NWL%countPosts ( req , type , _ . pluck ( toList ,  ' service '  )  )  ; %NWL%var title = req . param (  ' title '  )  ; %NWL%var body = req . param (  ' body '  )  ; %NWL%var url = req . param (  ' url '  )  ; %NWL%8
var command = protocol . execute ( function (  )  { return test (  )  ;  }  )%NWL%. on (  ' complete '  , function (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . data ,  '  {  " script "  :  " var passedArgs = Array . prototype . slice . call ( arguments , 0 )  ;  '  +%NWL%' return function (  )  { return test (  )  ;  }  . apply ( window , passedArgs )  ;  "  ,  " args "  :  [  ]  }  '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testExecuteAsync : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
if ( !jQuery ( $td . children (  )  . get ( 0 )  )  . hasClass (  ' aloha - editable '  )  )  {%NWL%$td . wrapInner (  '  < div class =  " aloha - editable "  > &nbsp ;  <  / div >  '  )  ;%NWL%}%NWL%}  )  ; %NWL%return postProcessFn (  )  ;%NWL%}%NWL%}  )  ; %NWL%var updateValue = function (  )  {%NWL%var $dropdown = jQuery19 (  '  . contentHeader ul . table - dropdown '  )  ; %NWL%var cols = jQuery19 (  '  . cols - size '  , $dropdown )  . data (  ' slider '  )  . getValue (  )  ; %NWL%var rows = jQuery19 (  '  . rows - size '  , $dropdown )  . data (  ' slider '  )  . getValue (  )  ; %NWL%9
if ( this . peek (  )  . type =  =  ' code ' && this . peek (  )  . val =  =  ' else '  )  {%NWL%this . advance (  )  ; %NWL%node . alternative = this . block (  )  ;%NWL%}%NWL%return node ;%NWL%}  ,%NWL%resolvePath : function ( path , purpose )  {%NWL%var p = require (  ' path '  )  ; %NWL%var dirname = p . dirname ; %NWL%var basename = p . basename ; %NWL%var join = p . join ; %NWL%8
QuadtreePrimitive . prototype . destroy = function (  )  {%NWL%this . _tileProvider = this . _tileProvider && this . _tileProvider . destroy (  )  ;%NWL%}  ; %NWL%function selectTilesForRendering ( primitive , context , frameState )  {%NWL%var debug = primitive . _debug ; %NWL%if ( debug . suspendLodUpdate )  {%NWL%return ;%NWL%}%NWL%var i ; %NWL%var len ; %NWL%var tilesToRender = primitive . _tilesToRender ; %NWL%4
var http = require (  ' http '  )  ; %NWL%var read = require (  ' fs '  )  . readFileSync ; %NWL%var parse = require (  ' url '  )  . parse ; %NWL%var engine = require (  ' engine . io '  )  ; %NWL%var client = require (  ' socket . io - client '  )  ; %NWL%var clientVersion = require (  ' socket . io - client / package '  )  . version ; %NWL%var Client = require (  '  .  / client '  )  ; %NWL%var Namespace = require (  '  .  / namespace '  )  ; %NWL%var Adapter = require (  ' socket . io - adapter '  )  ; %NWL%var debug = require (  ' debug '  )  (  ' socket . io : server '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%0
}  ; %NWL%var toTutorial = exports . toTutorial = function ( tutorial , content , missingOpts )  {%NWL%if ( !tutorial )  {%NWL%require (  ' jsdoc / util / error '  )  . handle ( new Error (  ' Missing required parameter : tutorial '  )  )  ; %NWL%return ;%NWL%}%NWL%var node = tutorials . getByName ( tutorial )  ; %NWL%if ( !node )  {%NWL%missingOpts = missingOpts || {  }  ; %NWL%var tag = missingOpts . tag ; %NWL%var classname = missingOpts . classname ; %NWL%9
renderList . pushTriangle ( indices [ i ]  , indices [ i + 1 ]  , indices [ i + 2 ]  )  ;%NWL%}%NWL%}%NWL%} else {%NWL%for ( var i = 0 , l = positions . length / 3 ; i < l ; i +  = 3 )  {%NWL%renderList . pushTriangle ( i , i + 1 , i + 2 )  ;%NWL%}%NWL%}%NWL%} else if ( geometry instanceof THREE . Geometry )  {%NWL%var vertices = geometry . vertices ; %NWL%var faces = geometry . faces ; %NWL%9
var filetype =  ' php '  ; %NWL%core . module . layout . workspace . window_manager . open ( filepath , filename , filetype , null ,  {  }  )  ; %NWL%core . module . layout . project_explorer . refresh (  )  ; %NWL%$ ( core )  . trigger (  " on_project_open "  )  ;%NWL%}  , 500 )  ;%NWL%}  )  ;%NWL%}  ,%NWL%run : function ( path )  {%NWL%var property = core . property . plugins [  ' org . goorm . plugin . php '  ]  ; %NWL%var main = property [  ' plugin . php . main '  ]  ; %NWL%var run_path = property [  ' plugin . php . run_path '  ]  ; %NWL%9
var ma_dvcs = condition . ma_dvcs ; %NWL%if ( !ma_dvcs )  {%NWL%ma_dvcs =  "  "  ;%NWL%}%NWL%ma_dvcs =  { $regex : ma_dvcs , $options :  ' i '  }  ; %NWL%var tk = condition . tk ; %NWL%if ( !tk )  {%NWL%tk =  "  "  ;%NWL%}%NWL%tk =  { $regex :  ' ^ '  + tk , $options :  ' i '  }  ; %NWL%var ma_kh = condition . ma_kh ; %NWL%0
throw new Error (  " Expected 2 arguments but got "  + arg_len )  ;%NWL%}%NWL%var len = this . size (  )  ; %NWL%var index2 =  ( index1 < 0%NWL%? index1 +  ( len + 1 )%NWL% : index1 )  ; %NWL%if ( index2 =  =  = len )  {%NWL%return this . push ( value )  ;%NWL%} else {%NWL%var root   = this . root ; %NWL%var tail   = this . tail ; %NWL%9
end : endOffset%NWL%}  ;%NWL%}%NWL%function getModernOffsets ( node )  {%NWL%var selection = window . getSelection (  )  ; %NWL%if ( selection . rangeCount =  =  = 0 )  {%NWL%return null ;%NWL%}%NWL%var anchorNode = selection . anchorNode ; %NWL%var anchorOffset = selection . anchorOffset ; %NWL%var focusNode = selection . focusNode ; %NWL%8
var thisObject = callFrame . thisObject (  )  ; %NWL%if ( thisObject )%NWL%extraProperties . push ( new WebInspector . RemoteObjectProperty (  " this "  , thisObject )  )  ; %NWL%if ( i =  = 0 )  {%NWL%var details = callFrame . target (  )  . debuggerModel . debuggerPausedDetails (  )  ; %NWL%if ( !callFrame . isAsync (  )  )  {%NWL%var exception = details . exception (  )  ; %NWL%if ( exception )%NWL%extraProperties . push ( new WebInspector . RemoteObjectProperty (  "  < exception >  "  , exception )  )  ;%NWL%}%NWL%var returnValue = callFrame . returnValue (  )  ; %NWL%0
calendar . empty (  )  ;  /  / init div%NWL%calendar . className = this . _classes . calendar +  '  '  + this . options . months [ this . _month ]  . toLowerCase (  )  ; %NWL%var div = new Element (  ' div '  )  . inject ( calendar )  ;  /  / a wrapper div to help correct browser css problems with the caption element%NWL%var table = new Element (  ' table '  )  . inject ( div )  . adopt ( this . _caption (  )  )  ; %NWL%var thead = new Element (  ' thead '  )  . inject ( table )  ; %NWL%var tr = new Element (  ' tr '  )  . inject ( thead )  ; %NWL%for ( var i = 0 ; i <  = 6 ; i +  +  )  {%NWL%var th = this . options . days [  ( i + this . options . offset ) % 7 ]  ; %NWL%tr . adopt ( new Element (  ' th '  ,  {  ' title '  : th }  )  . appendText ( th . substr ( 0 , 1 )  )  )  ;%NWL%}%NWL%var tbody = new Element (  ' tbody '  )  . inject ( table )  ; %NWL%4
}%NWL%}  ; %NWL%BootstrapInfo . prototype =  {  }  ; %NWL%BootstrapInfo . prototype . read = function ( input )  {%NWL%input . readStructBegin (  )  ; %NWL%while ( true )%NWL%{%NWL%var ret = input . readFieldBegin (  )  ; %NWL%var fname = ret . fname ; %NWL%var ftype = ret . ftype ; %NWL%var fid = ret . fid ; %NWL%8
dom . appendChildNodes ( listNode , paras )  ; %NWL%if ( nextList )  {%NWL%dom . appendChildNodes ( listNode , list . from ( nextList . childNodes )  )  ; %NWL%dom . remove ( nextList )  ;%NWL%}%NWL%}  ; %NWL%this . releaseList = function ( clustereds , isEscapseToBody )  {%NWL%var releasedParas =  [  ]  ; %NWL%$ . each ( clustereds , function ( idx , paras )  {%NWL%var head = list . head ( paras )  ; %NWL%var last = list . last ( paras )  ; %NWL%9
tearDown : function (  )  {%NWL%this . printProvider . un (  " layoutchange "  , this . updateBox , this )  ; %NWL%var map = this . map ; %NWL%var control = this . control ; %NWL%if ( control && control . events )  {%NWL%control . deactivate (  )  ; %NWL%if ( map && map . events && control . map )  {%NWL%map . removeControl ( control )  ;%NWL%}%NWL%}%NWL%var layer = this . layer ; %NWL%2
}%NWL%app . post (  '  /  '  , function ( req , res )  {%NWL%req . body =  '  '  ; %NWL%req . setEncoding (  ' utf8 '  )  ; %NWL%req . on (  ' data '  , function ( chunk )  {%NWL%req . body +  = chunk ;%NWL%}  )  ; %NWL%req . on (  ' end '  , function (  )  {%NWL%req . param = _param ; %NWL%var tag = req . param (  ' tag '  )  ; %NWL%var msg = req . param (  ' msg '  )  ; %NWL%9
this . geocodeNext (  )  ;%NWL%}%NWL%}%NWL%}  ,%NWL%generateMarker : function ( item )  {%NWL%var d = item . getData (  )  ; %NWL%d . _index = item . _index ; %NWL%var lat = d [ this . latitudeField ]  ; %NWL%var lon = d [ this . longitudeField ]  ; %NWL%var address = d [ this . addressField ]  ; %NWL%var title = d [ this . titleField ]  ; %NWL%9
}%NWL%}%NWL%return result ;%NWL%}  ,%NWL%_setCurrentGroup : function ( lineIndex )  {%NWL%var annotationModel = this . _annotationModel ; %NWL%var groupAnnotation = null ; %NWL%var model = annotationModel . getTextModel (  )  ; %NWL%var annotation ; %NWL%var annotations ; %NWL%var currentGroupAnnotation = this . _currentGroupAnnotation ; %NWL%5
var blockbuf = blockbufs [ i ]  ; %NWL%var encbuf = CBC . encryptblock ( blockbuf , ivbuf , blockcipher , cipherkeybuf )  ; %NWL%encbufs . push ( encbuf )  ; %NWL%ivbuf = encbuf ;%NWL%}%NWL%return encbufs ;%NWL%}  ; %NWL%CBC . decryptblocks = function ( encbufs , ivbuf , blockcipher , cipherkeybuf )  {%NWL%var blockbufs =  [  ]  ; %NWL%for ( var i = 0 ; i < encbufs . length ; i +  +  )  {%NWL%var encbuf = encbufs [ i ]  ; %NWL%0
return ( this . red + this . green + this . blue )  / 3 >  = 237 ;%NWL%}  ; %NWL%Color . prototype . isTransparent = function (  )  {%NWL%return this . alpha <  = 128 ;%NWL%}  ; %NWL%Color . prototype . toString = function (  )  {%NWL%return ' rgba (  '  + this . red +  '  ,  '  + this . green +  '  ,  '  + this . blue +  '  ,  '  +  ( this . alpha / 255 )  +  '  )  '  ;%NWL%}  ; %NWL%Color . prototype . toHex = function (  )  {%NWL%var red = this . red . toString ( 16 )  ; %NWL%var green = this . green . toString ( 16 )  ; %NWL%9
assert ( m && m [ 1 ]  ,  ' The evaluation should fail with the thrown error '  )  ; %NWL%assert . notEqual ( error . toString (  )  . indexOf (  '  :  '  + m [ 1 ]  +  '  :  '  )  ,  - 1 ,%NWL%' The corrent line number should be in the error message '  )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%function checkFile ( outDir , goldenDir , filename )  {%NWL%var actualContents = fs . readFileSync ( path . resolve ( outDir , filename )  )  ; %NWL%var actual = actualContents . toString (  )  . split (  ' \n '  )  ; %NWL%var expectedContents = fs . readFileSync ( path . resolve ( goldenDir , filename )  )  ; %NWL%var expected = expectedContents . toString (  )  . split (  ' \n '  )  ; %NWL%8
break ; %NWL%case nl . sara . webdav . Ace . SELF : %NWL%principal . appendChild ( xmlDoc . createElementNS (  ' DAV :  '  ,  ' self '  )  )  ; %NWL%break ; %NWL%default :  /  / If it isn ' t one of the constants , it should be either a Property object or a string / URL%NWL%if ( typeof princVal =  =  =  ' string '  )  {  /  / It is a string ; the URL of the principal%NWL%var href = xmlDoc . createElementNS (  ' DAV :  '  ,  ' href '  )  ; %NWL%href . appendChild ( xmlDoc . createCDATASection ( princVal )  )  ; %NWL%principal . appendChild ( href )  ;%NWL%} else {  /  / And else it is a property%NWL%var property = xmlDoc . createElementNS (  ' DAV :  '  ,  ' property '  )  ; %NWL%6
viz : viz ,%NWL%vizTypes : _ . object ( _ . map ( vizTypes , function ( item )  {%NWL%return [ item . name , item ]  ;%NWL%}  )  )%NWL%}  )  ;%NWL%}  )  . fail ( next )  ;%NWL%}  ; %NWL%exports . publicRead = function ( req , res , next )  {%NWL%var vizId = req . params . vid ; %NWL%var Visualization = models . Visualization ; %NWL%var VisualizationType = models . VisualizationType ; %NWL%9
var animates = element [ 0 ]  . querySelectorAll (  ' animate '  )  ; %NWL%var declarations =  {  }  ; %NWL%for ( var i = 0 ; i < animates . length ; i +  +  )  {%NWL%( function (  )  {%NWL%var animate = animates [ i ]  ; %NWL%if ( animate . attributes . targetmodselector )  {%NWL%var modElements = angular . element ( element [ 0 ]  . parentNode )  [ 0 ]  . querySelectorAll ( animate . attributes . targetmodselector . value )  ; %NWL%angular . forEach ( modElements , function ( modElement )  {%NWL%var modScope = angular . element ( modElement )  . scope (  )  ; %NWL%var modifier = modScope . isolate [ modScope . $id ]  . modifier ; %NWL%var getTransform = modScope . isolate [ modScope . $id ]  . getTransform ; %NWL%9
this . draw (  )  ;%NWL%}%NWL%Donatello . Tri . prototype = new Donatello ( null )  ; %NWL%Donatello . prototype . tri = function ( x1 , y1 , x2 , y2 , x3 , y3 , a )  {%NWL%return new Donatello . Tri ( this , x1 , y1 , x2 , y2 , x3 , y3 , a )  ;%NWL%}  ; %NWL%Donatello . Tri . prototype . draw = function (  )  {%NWL%var s = this . properties [  ' stroke - width '  ]  ; %NWL%var x1 = this . properties . x1 ; %NWL%var y1 = this . properties . y1 ; %NWL%var x2 = this . properties . x2 ; %NWL%8
start (  )  ;%NWL%}  , 50 )  ; %NWL%InkEvent . on ( el ,  ' click . foo '  , trigger . wrap ( handler1 )  )  ; %NWL%InkEvent . on ( el ,  ' keydown . foo '  , trigger . wrap ( handler2 )  )  ; %NWL%InkEvent . on ( el ,  ' click . bar '  , trigger . wrap ( handler3 )  )  ; %NWL%Syn . click ( el )  ;%NWL%}  )  ; %NWL%asyncTest (  ' should only remove event if the remove namespaces is within the event namespace or if the event namespace is within the remove namespace '  , function (  )  {%NWL%var el = this . byId (  ' foo '  )  ; %NWL%var trigger = this . trigger (  )  ; %NWL%var spy = this . spy (  )  ; %NWL%9
action = action ( hash )  ;%NWL%}%NWL%return magicMarkups ( action )  ;%NWL%}%NWL%function build ( string )  {%NWL%var openWith 			 = prepare ( clicked . openWith )  ; %NWL%var placeHolder 		 = prepare ( clicked . placeHolder )  ; %NWL%var replaceWith 		 = prepare ( clicked . replaceWith )  ; %NWL%var closeWith 			 = prepare ( clicked . closeWith )  ; %NWL%var openBlockWith 		 = prepare ( clicked . openBlockWith )  ; %NWL%var closeBlockWith 		 = prepare ( clicked . closeBlockWith )  ; %NWL%5
self . offsets . push ( $this [ 0 ]  )%NWL%self . targets . push ( $this [ 1 ]  )%NWL%}  )%NWL%}%NWL%, process : function (  )  {%NWL%var scrollTop = this . $scrollElement . getScroll (  )  . y + this . options . offset%NWL%, scrollHeight = this . $scrollElement . scrollHeight || this . $body . scrollHeight%NWL%, maxScroll = scrollHeight - this . $scrollElement . getSize (  )  . y%NWL%, offsets = this . offsets%NWL%, targets = this . targets%NWL%, activeTarget = this . activeTarget%NWL%8
}%NWL%}  ; %NWL%cubes . Level . prototype . key = function (  )  {%NWL%var key = this . _key ; %NWL%the_attr = _ . find ( this . attributes , function ( a )  { return a . name =  =  = key ;  }  )  ; %NWL%return the_attr || this . attributes [ 0 ]  ;%NWL%}  ; %NWL%cubes . Level . prototype . label_attribute = function (  )  {%NWL%var the_attr = null ; %NWL%if ( this . _label_attribute )  {%NWL%var label_attribute = this . _label_attribute ; %NWL%3
' to duplicate the Apple direct branch , Cancel otherwise .  '  )  )%NWL%return ; %NWL%console . log (  " duplicating apple direct into "  + branch )  ; %NWL%MargaritaApp . trigger (  " catalogsChanging "  )  ; %NWL%$ . post (  ' dup_apple /  '  + encodeURIComponent ( branch )  ,  {  }  , function (  )  {%NWL%MargaritaApp . trigger (  " catalogsChanged "  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%duplicateBranch : function ( ev )  {%NWL%var branch = $ ( ev . currentTarget )  . data (  ' branch '  )  ; %NWL%var dupbranch = $ ( ev . currentTarget )  . data (  ' dupbranch '  )  ; %NWL%9
}%NWL%AnalyserView . prototype . drawGL = function (  )  {%NWL%var canvas = this . canvas ; %NWL%var gl = this . gl ; %NWL%var vbo = this . vbo ; %NWL%var vboTexCoordOffset = this . vboTexCoordOffset ; %NWL%var sonogram3DVBO = this . sonogram3DVBO ; %NWL%var vbo3DTexCoordOffset = this . vbo3DTexCoordOffset ; %NWL%var sonogram3DGeometrySize = this . sonogram3DGeometrySize ; %NWL%var sonogram3DNumIndices = this . sonogram3DNumIndices ; %NWL%var sonogram3DWidth = this . sonogram3DWidth ; %NWL%2
expect ( fillcolor instanceof RGBColor )  . toBe ( true )  ; %NWL%expect ( fillcolor . getHexString (  )  )  . toEqual (  " 0x000000 "  )  ;%NWL%}  )  ; %NWL%it (  " should be able to set / get the ' fillcolor ' option "  ,  function (  )  {%NWL%r . setOption (  " fillcolor "  , RGBColor . parse (  " 0x123456 "  )  )  ; %NWL%var fillcolor = r . getOptionValue (  " fillcolor "  )  ; %NWL%expect ( fillcolor instanceof RGBColor )  . toBe ( true )  ; %NWL%expect ( fillcolor . getHexString (  )  )  . toEqual (  " 0x123456 "  )  ;%NWL%}  )  ; %NWL%it (  " should be able to get the default value of the ' linecolor ' option "  ,  function (  )  {%NWL%var linecolor = r . getOptionValue (  " linecolor "  )  ; %NWL%5
}%NWL%}%NWL%}  ; %NWL%exports . addReporter = jasmine . getEnv (  )  . addReporter ; %NWL%exports . executeSpecs = function ( options )  {%NWL%options = options || {  }  ; %NWL%var specs = options [  ' specs '  ] || [  ]  ; %NWL%var done = options [  ' onComplete '  ]  ; %NWL%var isVerbose = options [  ' isVerbose '  ]  ; %NWL%var showColors = options [  ' showColors '  ]  ; %NWL%var includeStackTrace = options [  ' includeStackTrace '  ]  ; %NWL%8
var middleware   = require (  '  .  .  / middleware '  )  ; %NWL%var settings    = require (  '  .  .  /  .  .  / settings '  )  ; %NWL%var utils     = require (  '  .  .  /  .  .  / utils '  )  . common ; %NWL%var constants    = require (  '  .  .  /  .  .  / utils '  )  . constants ; %NWL%var log     = require (  '  .  .  /  .  .  / log '  )  ; %NWL%var ReleaseNotesWorker = require (  '  .  .  / release_notes / worker '  )  ; %NWL%var projects    = require (  '  .  .  / projects '  )  ; %NWL%var events    = require (  "  .  .  / events "  )  ; %NWL%var et     = require (  ' elementtree '  )  ; %NWL%var ElementTree   = et . ElementTree ; %NWL%var Element    = et . Element ; %NWL%9
var key = getAnimationSplineKey ( model , animationName , samplerName )  ; %NWL%var spline = cachedAnimationSplines [ key ]  ; %NWL%if ( !defined ( spline )  )  {%NWL%var times = parameterValues [ sampler . input ]  ; %NWL%var accessor = model . gltf . accessors [ animation . parameters [ sampler . output ]  ]  ; %NWL%var controlPoints = parameterValues [ sampler . output ]  ; %NWL%if (  ( times . length =  =  = 1 ) && ( controlPoints . length =  =  = 1 )  )  {%NWL%spline = new ConstantSpline ( controlPoints [ 0 ]  )  ;%NWL%} else {%NWL%var componentType = accessor . componentType ; %NWL%var type = accessor . type ; %NWL%9
t . notOk ( err ,  ' no error '  )%NWL%if ( key && value )  {%NWL%t . ok ( Buffer . isBuffer ( key )  ,  ' key argument is a Buffer '  )%NWL%t . ok ( Buffer . isBuffer ( value )  ,  ' value argument is a Buffer '  )%NWL%t . equal ( key . toString (  )  , data [ idx ]  . key ,  ' correct key '  )%NWL%t . equal ( value . toString (  )  , data [ idx ]  . value ,  ' correct value '  )%NWL%process . nextTick ( next )%NWL%idx +  +%NWL%} else {  /  / end%NWL%t . ok ( typeof err =  =  =  ' undefined '  ,  ' err argument is undefined '  )%NWL%t . ok ( typeof key =  =  =  ' undefined '  ,  ' key argument is undefined '  )%NWL%9
maxZoom : 15 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ6142_1 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ6142_1 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%server : host ,%NWL%attribution :  ' NZ6142_1 Nelson Harbour & Entrance '  ,%NWL%minZoom : 10 ,%NWL%maxZoom : 15 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ6142_2 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ6142_2 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%3
}%NWL%function load3DSonogram ( shader )  {%NWL%this . sonogram3DShader = shader ;%NWL%}%NWL%AnalyserView . prototype . initGL = function (  )  {%NWL%model = new Matrix4x4 (  )  ; %NWL%view = new Matrix4x4 (  )  ; %NWL%projection = new Matrix4x4 (  )  ; %NWL%var sonogram3DWidth = this . sonogram3DWidth ; %NWL%var sonogram3DHeight = this . sonogram3DHeight ; %NWL%var sonogram3DGeometrySize = this . sonogram3DGeometrySize ; %NWL%8
res . json ( 403 ,  {%NWL%isTaken : true%NWL%}  )  ; %NWL%return%NWL%}%NWL%res . send ( 200 )  ;%NWL%}  )  ; %NWL%app . post (  '  / signup '  , function ( req , response )  {%NWL%var username = req . body . username ; %NWL%var email = req . body . email ; %NWL%var password = req . body . password ; %NWL%8
f32 [ 11 ]  = 8 ; %NWL%assert . deepEqual ( cc . lang . pushToTimeline . result ,  [%NWL%[  "  / b_new "  , instance . bufnum , instance . frames , instance . channels ]  ,%NWL%]  )  ; %NWL%assert . deepEqual ( cc . lang . sendToServer . result ,  [ uint8 ]  )  ;%NWL%}  )  ; %NWL%it (  " read : range ( 0 , 2 )  "  , function (  )  {%NWL%instance = cc . global . Buffer . read (  " id "  , 0 , 2 )  ; %NWL%var uint8 = new Uint8Array ( C . SET_BUFFER_HEADER_SIZE + 2 * 2 * 4 )  ; %NWL%var int16 = new Uint16Array ( uint8 . buffer )  ; %NWL%var int32 = new Uint32Array ( uint8 . buffer )  ; %NWL%9
var connect = require (  ' connect '  )%NWL%, Sara = require (  '  .  .  / sara '  )%NWL%, browserify = require (  ' browserify '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%2
if ( ! (  ' function '  =  =  = typeof callback )  ) callback = null ; %NWL%var server = this ; %NWL%var eventReceiver = options . eventReceiver ! = null ? options . eventReceiver : dbInstance ; %NWL%var eventEmitterIsDb = options . eventReceiver ! = null ? false : true ; %NWL%this . dbInstances =  [ dbInstance ]  ; %NWL%this . _serverState =  ' connecting '  ; %NWL%dbInstance . slaveOk = this . slaveOk ? this . slaveOk : dbInstance . slaveOk ; %NWL%var connectionPool = new ConnectionPool ( this . host , this . port , this . poolSize , dbInstance . bson_deserializer )  ; %NWL%server . connectionPool = connectionPool ; %NWL%var firstCall = options . firstCall =  = null ? false : options . firstCall ; %NWL%var returnIsMasterResults = options . returnIsMasterResults =  = null ? false : options . returnIsMasterResults ; %NWL%9
}  )  ;%NWL%}%NWL%function keydownListener ( ev )  {%NWL%if ( ev . keyCode =  = $mdConstant . KEY_CODE . SPACE || ev . keyCode =  = $mdConstant . KEY_CODE . ENTER )  {%NWL%element . triggerHandler (  ' click '  )  ; %NWL%ev . preventDefault (  )  ;%NWL%} else if ( ev . keyCode =  =  = $mdConstant . KEY_CODE . LEFT_ARROW )  {%NWL%var previous = tabsCtrl . previous ( tabItemCtrl )  ; %NWL%previous && previous . element . focus (  )  ;%NWL%} else if ( ev . keyCode =  =  = $mdConstant . KEY_CODE . RIGHT_ARROW )  {%NWL%var next = tabsCtrl . next ( tabItemCtrl )  ; %NWL%7
var scripts = this . scripts [ type ]  [ folder ]  ; %NWL%for ( var i = 0 , l = scripts . length ; i < l ; i +  +  ) this . includeFile ( type , folder , scripts [ i ]  )  ;%NWL%}  ,%NWL%includeType : function ( type )  {%NWL%for ( var folder in this . scripts [ type ]  ) this . includeFolder ( type , folder )  ;%NWL%}  ,%NWL%includeRequest : function ( type )  {%NWL%var req = this . getRequest (  )  ; %NWL%if ( !req . files && !req . folders ) return false ; %NWL%var files =  ( req . files ) ? req . files . split (  '  +  '  )  :  [  ]  ; %NWL%var folders =  ( req . folders ) ? req . folders . split (  '  +  '  )  :  [  ]  ; %NWL%9
var CompositionEventPlugin = require (  "  .  / CompositionEventPlugin "  )  ; %NWL%var DefaultEventPluginOrder = require (  "  .  / DefaultEventPluginOrder "  )  ; %NWL%var EnterLeaveEventPlugin = require (  "  .  / EnterLeaveEventPlugin "  )  ; %NWL%var ExecutionEnvironment = require (  "  .  / ExecutionEnvironment "  )  ; %NWL%var HTMLDOMPropertyConfig = require (  "  .  / HTMLDOMPropertyConfig "  )  ; %NWL%var MobileSafariClickEventPlugin = require (  "  .  / MobileSafariClickEventPlugin "  )  ; %NWL%var ReactBrowserComponentMixin = require (  "  .  / ReactBrowserComponentMixin "  )  ; %NWL%var ReactComponentBrowserEnvironment =%NWL%require (  "  .  / ReactComponentBrowserEnvironment "  )  ; %NWL%var ReactDefaultBatchingStrategy = require (  "  .  / ReactDefaultBatchingStrategy "  )  ; %NWL%var ReactDOMComponent = require (  "  .  / ReactDOMComponent "  )  ; %NWL%0
}%NWL%if ( newValue > max )  {%NWL%this [ fieldName ]  = max ; %NWL%return false ;%NWL%}%NWL%return true ;%NWL%}%NWL%function getActiveRule ( ruleset , maxPoolPgNum , size )  {%NWL%return _ . reduce ( ruleset . rules , function ( result , rule )  {%NWL%var active_rule = result . active_rule ; %NWL%var osd_count = result . osd_count ; %NWL%9
' with an inline @type tag , the function parameters are documented in the correct order '  ,%NWL%function (  )  {%NWL%var restock = docSet . getByLongname (  ' restock '  )  [ 0 ]  ; %NWL%info [ 0 ]  =  { name :  ' dispenser '  , typeName :  ' Dispenser '  }  ; %NWL%info [ 1 ]  =  { name :  ' item '  , typeName :  ' string '  }  ; %NWL%checkParams ( restock , info )  ;%NWL%}  )  ; %NWL%it (  ' When a function accepts multiple parameters , and only the last parameter is documented '  +%NWL%' with an inline @type tag , the function parameters are documented in the correct order '  ,%NWL%function (  )  {%NWL%var clean = docSet . getByLongname (  ' clean '  )  [ 0 ]  ; %NWL%2
this . layer_type =  ' lrn '  ; %NWL%if ( this . n%2 =  =  = 0 )  { console . log (  ' WARNING n should be odd for LRN layer '  )  ;  }%NWL%}%NWL%LocalResponseNormalizationLayer . prototype =  {%NWL%forward : function ( V , is_training )  {%NWL%this . in_act = V ; %NWL%var A = V . cloneAndZero (  )  ; %NWL%this . S_cache_ = V . cloneAndZero (  )  ; %NWL%var n2 = Math . floor ( this . n / 2 )  ; %NWL%for ( var x = 0 ; x < V . sx ; x +  +  )  {%NWL%for ( var y = 0 ; y < V . sy ; y +  +  )  {%NWL%9
else if ( typeof define =  =  =  ' function ' && typeof define . amd  =  =  =  ' object '  ) define ( definition )  ; %NWL%else context [ name ]  = definition ( name , context )  ;%NWL%}  (  ' bean '  , this , function ( name , context )  {%NWL%var win = window%NWL%, old = context [ name ]%NWL%, overOut =  / over|out /%NWL%, namespaceRegex =  /  [ ^\ .  ]  *  ( ? = \ .  .  *  ) \ . | .  *  /%NWL%, nameRegex =  / \ .  .  *  /%NWL%, addEvent =  ' addEventListener '%NWL%, attachEvent =  ' attachEvent '%NWL%, removeEvent =  ' removeEventListener '%NWL%8
onMigratingMigrate : function ( aOuter )%NWL%{%NWL%aOuter . _migrator . migrate ( aOuter . _itemsFlags , aOuter . _autoMigrate , aOuter . _selectedProfile )  ;%NWL%}  ,%NWL%_listItems : function ( aID )%NWL%{%NWL%var items = document . getElementById ( aID )  ; %NWL%while ( items . hasChildNodes (  )  )%NWL%items . removeChild ( items . firstChild )  ; %NWL%var bundle = document . getElementById (  " bundle "  )  ; %NWL%var brandBundle = document . getElementById (  " brandBundle "  )  ; %NWL%9
_max [ 0 ]  = m [ 0 ]  * v2 [ 0 ]  * w ; %NWL%_max [ 1 ]  = m [ 5 ]  * v2 [ 1 ]  * w ; %NWL%w =  - 1 / v3 [ 2 ]  ; %NWL%_min [ 2 ]  =  ( m [ 10 ]  * v3 [ 2 ]  + m [ 14 ]  )  * w ;%NWL%}%NWL%this . min . _dirty = true ; %NWL%this . max . _dirty = true ;%NWL%}  ,%NWL%updateVertices : function (  )  {%NWL%var min = this . min . _array ; %NWL%var max = this . max . _array ; %NWL%9
assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%3
var request = docSet . getByLongname (  ' request '  )  [ 0 ]  ; %NWL%expect ( typeof request . params )  . toBe (  ' object '  )  ; %NWL%expect ( request . params . length )  . toBe ( 1 )  ; %NWL%expect ( request . params [ 0 ]  . type )  . toBeUndefined (  )  ; %NWL%expect ( request . params [ 0 ]  . name )  . toBe (  ' async '  )  ; %NWL%expect ( request . params [ 0 ]  . defaultvalue )  . toBe (  ' true '  )  ; %NWL%expect ( request . params [ 0 ]  . optional )  . toBe ( true )  ; %NWL%expect ( request . params [ 0 ]  . description )  . toBe (  ' whether to be asynchronous '  )  ;%NWL%}  )  ; %NWL%it (  ' When a symbol has a @param tag with no name , the doclet includes the param name from the code '  , function (  )  {%NWL%var commit = docSet . getByLongname (  ' commit '  )  [ 0 ]  ; %NWL%0
var index = this . get (  ' index '  )%NWL%var line = this . line%NWL%var width = this . width%NWL%var col = this . col + index * width%NWL%var runner = this . get (  ' runner '  )%NWL%var results = runner . get (  ' results '  )%NWL%var resultsDisplay =  '  '%NWL%var equal = true%NWL%if ( results )  {%NWL%var total = results . get (  ' total '  )%NWL%var passed = results . get (  ' passed '  )%NWL%9
}  ; %NWL%utils . forceReflow = function (  )  {%NWL%var tempDivID =  " reflowDivBlock "  ; %NWL%var domTreeOpDiv = document . getElementById ( tempDivID )  ; %NWL%if ( !domTreeOpDiv )  {%NWL%domTreeOpDiv = document . createElement (  " div "  )  ; %NWL%domTreeOpDiv . id = tempDivID ; %NWL%document . body . appendChild ( domTreeOpDiv )  ;%NWL%}%NWL%var parentNode = domTreeOpDiv . parentNode ; %NWL%var nextSibling = domTreeOpDiv . nextSibling ; %NWL%9
var path = require (  ' path '  )  ; %NWL%var join = path . join ; %NWL%var dirname = path . dirname ; %NWL%var basename = path . basename ; %NWL%var readfile = require (  ' cached - readfile '  )  ; %NWL%var Script = require (  ' script / model '  )  ; %NWL%var conf = require (  ' conf '  )  ; %NWL%var volume = conf [  ' script volume '  ]  ; %NWL%var superagent = require (  ' superagent '  )  ; %NWL%var spawn = require (  ' child_process '  )  . spawn ; %NWL%var exec = require (  ' child_process '  )  . exec ; %NWL%9
}  . bind ( this )  ; %NWL%if ( !isNew || typeOf ( container )  =  =  ' element '  ) addToContainer (  )  ; %NWL%else window . addEvent (  ' domready '  , addToContainer )  ; %NWL%return this ;%NWL%}  ,%NWL%_buildPanel : function ( panel , div )  {%NWL%var self = this ; %NWL%var o = self . options ; %NWL%var value = MUI . getData ( panel , o . valueField )  ; %NWL%if ( !value ) value =  ' apanel '  +  (  +  + MUI . idCount )  ; %NWL%var text = MUI . getData ( panel , o . textField )  ; %NWL%8
buffer . texCoordsPerVertex = texCoordsPerVertex ; %NWL%buffer . vertexCount = Math . floor ( vertexValues . length / valuesPerVertex )  ; %NWL%this . vertexBuffers [ name ]  = buffer ; %NWL%return name ;%NWL%}  ,%NWL%drawVertexBuffer : function ( options )  {%NWL%var gl = this . gl ; %NWL%var shaderName = options . shader ; %NWL%var vertexBufferName = options . vertexBuffer ; %NWL%var inputTextures = options . inputTextures || {  }  ; %NWL%var uniforms = options . uniforms || {  }  ; %NWL%9
thead . append ( this . total . tr )  ; %NWL%table . append ( thead )  ; %NWL%table . append ( tbody )  ; %NWL%table . append ( tfoot )  ; %NWL%tbody . hide (  )  ;%NWL%}%NWL%Category . prototype =  {%NWL%update : function (  )  {%NWL%var self = this ; %NWL%var tds = self . tds ; %NWL%var hosts = self . hosts ; %NWL%9
worker . on (  " terminate "  , function (  )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%return worker ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / css_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var DB    = require (  ' DB / DBManager '  )  ; %NWL%var UIManager  = require (  ' UI / UIManager '  )  ; %NWL%var Cursor   = require (  ' UI / CursorManager '  )  ; %NWL%var InputBox   = require (  ' UI / Components / InputBox / InputBox '  )  ; %NWL%var ChatBox   = require (  ' UI / Components / ChatBox / ChatBox '  )  ; %NWL%var Equipment  = require (  ' UI / Components / Equipment / Equipment '  )  ; %NWL%var Mouse   = require (  ' Controls / MouseEventHandler '  )  ; %NWL%var Mobile   = require (  ' Core / Mobile '  )  ; %NWL%var Renderer   = require (  ' Renderer / Renderer '  )  ; %NWL%var Camera   = require (  ' Renderer / Camera '  )  ; %NWL%var EntityManager = require (  ' Renderer / EntityManager '  )  ; %NWL%9
$ . each ( result . schema . columns , function ( i , metadata )  {%NWL%if ( metadata . name ! =  ' geometry '  )  {%NWL%header +  =  '  < th >  '  + metadata . name +  '  <  / th >  '  ;%NWL%}%NWL%}  )  ; %NWL%header +  =  '  <  / tr '  >%NWL%content . append ( header )  ; %NWL%$ . each ( result . features , function ( i , feature )  {%NWL%var id = feature . properties . gx_id ; %NWL%var tr = $ (  '  < tr /  >  '  )  ; %NWL%var td = $ (  '  < td /  >  '  )  ; %NWL%9
if ( this . stopped )  { return false ;  }%NWL%var rjs = JSON . parse ( responseData )  ; %NWL%if ( rjs . code )  {%NWL%if ( rjs . code =  =  ' retry '  )  {%NWL%postMessage (  ' Retry delay of '  + rjs . period +  ' ms requested .  '  )  ; %NWL%setTimeout (  " qworker . workloadManager (  )  "  , parseInt ( rjs . period )  )  ;%NWL%}%NWL%} else {%NWL%var pktid = rjs . uid ; %NWL%var fnstr = unescape ( rjs . fnstr )  ; %NWL%var data = unescape ( rjs . data )  ; %NWL%9
to_x = xyobj . x + mid_x - 2 ;%NWL%}%NWL%UIALogger . logMessage (  " x1 =  "  + xyobj . x +  "  : y1 =  "  + xyobj . y +  "  :  : x2 =  "  + to_x +  "  : y =  "  + xyobj . y )  ; %NWL%target . flickFromTo (  { x : xyobj . x , y : xyobj . y }  ,  { x : to_x , y : xyobj . y }  )  ;%NWL%}  ,%NWL%_getXY : function (  )  {%NWL%var target = UIATarget . localTarget (  )  ; %NWL%var origin_x = target . frontMostApp (  )  . rect (  )  . origin . x ; %NWL%var origin_y = target . frontMostApp (  )  . rect (  )  . origin . y ; %NWL%var width = target . frontMostApp (  )  . rect (  )  . size . width ; %NWL%var height = target . frontMostApp (  )  . rect (  )  . size . height ; %NWL%9
else {%NWL%if ( endAngle < startAngle )%NWL%range = startAngle - endAngle ; %NWL%else%NWL%range = 360 -  ( endAngle - startAngle )  ;%NWL%}%NWL%return range ;%NWL%}  ,%NWL%_angleInRange : function ( value )  {%NWL%var startAngle = this . _mod360 ( this . startAngle )  ; %NWL%var endAngle = this . _mod360 ( this . endAngle )  ; %NWL%9
getSurface : function (  )  {%NWL%return this . _surface ;  /  / dojox . gfx . Surface%NWL%}  ,%NWL%_surfaceSize : function (  )  {%NWL%var s = this . olLayer . map . getSize (  )  ; %NWL%this . _surface . setDimensions ( s . w , s . h )  ;%NWL%}  ,%NWL%moveTo : function ( event )  {%NWL%var s = style . get ( this . olLayer . map . layerContainerDiv )  ; %NWL%var left = parseInt ( s . left )  ; %NWL%var top = parseInt ( s . top )  ; %NWL%9
mesh ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%9
var user =  {%NWL%username :  " alexduloz "%NWL%}  ; %NWL%var mockDoc =  " one - line "  ; %NWL%$ . when (%NWL%$ . get (  "  .  / documents /  "  + mockDoc +  "  / body . txt "  )  ,%NWL%$ . get (  "  .  / documents /  "  + mockDoc +  "  / data . json "  )  ,%NWL%$ . get (  "  .  / feuilles . editor . html "  )%NWL%)  . then ( function ( body , data , template )  {%NWL%var template = template [ 0 ]  ; %NWL%var body = body [ 0 ]  ; %NWL%9
var is_partial_resampling = Boolean ( options . input_index ) || Boolean ( options . output_index )  ; %NWL%if ( options . input_index ! =  = null && ( options . input_index >  = 0 )  =  =  = false )  {%NWL%throw new RangeError (  ' options . input_index should be a positive integer value .  [  '  + options . input_index +  '  ]  '  )  ;%NWL%}%NWL%if ( options . output_index ! =  = null && ( options . output_index >  = 0 )  =  =  = false )  {%NWL%throw new RangeError (  ' options . output_index should be a positive integer value .  [  '  + options . output_index +  '  ]  '  )  ;%NWL%}%NWL%if ( options . width ! =  = null && ( options . width > 0 )  =  =  = false )  {%NWL%throw new RangeError (  ' options . width should be a strictly positive integer value .  [  '  + options . width +  '  ]  '  )  ;%NWL%}%NWL%if ( options . scale ! =  = null && ( options . scale > 0 )  =  =  = false )  {%NWL%7
item = doc . createElementNS ( ns ,  ' body '  )  ; %NWL%item . setAttribute (  ' onload '  )  ; %NWL%attributes . setNamedItem ( item )  ; %NWL%doc . doctype = new core . DocumentType ( doc ,  ' xml '  , entities , notations , attributes )  ; %NWL%doc . implementation = implementation ; %NWL%var html = doc . appendChild ( doc . createElementNS ( ns ,  ' html '  )  )  ; %NWL%var head = html . appendChild ( doc . createElementNS ( ns ,  ' head '  )  )  ; %NWL%var title = doc . createElementNS ( ns ,  ' title '  )  ; %NWL%title . appendChild ( doc . createTextNode (  ' test file '  )  )  ; %NWL%head . appendChild ( title )  ; %NWL%var body = html . appendChild ( doc . createElementNS ( ns ,  ' body '  )  )  ; %NWL%6
}  ;%NWL%}%NWL%function onPlayerCollision ( pc )  {  /  / defined by physics%NWL%log . info (  ' Player '  + pc +  ' collided with physics changer '  + this . tsid )  ; %NWL%if ( this . state =  = 0 )  {%NWL%log . info (  ' Physics changer '  + this . tsid +  ' disabled .  '  )  ; %NWL%return ;%NWL%}%NWL%var gravity = this . getInstanceProp (  ' gravity '  )  ; %NWL%var vx_max = this . getInstanceProp (  ' vx_max '  )  ; %NWL%var vy_max = this . getInstanceProp (  ' vy_max '  )  ; %NWL%8
acronym . setAttribute (  " dir "  ,  " ltr "  )  ; %NWL%defaultAttributes . setNamedItem ( acronym )  ; %NWL%var doctype = new dom . DocumentType ( doc ,  " xml "  , entities , notations , defaultAttributes )  ; %NWL%doc . doctype = doctype ; %NWL%doc . implementation = implementation ; %NWL%doc . appendChild ( doc . createComment (  " This is comment number 1 .  "  )  )  ; %NWL%var html   = doc . createElement (  " html "  )  ; %NWL%var html   = doc . appendChild ( html )  ; %NWL%var head   = doc . createElement (  " head "  )  ; %NWL%var head   = html . appendChild ( head )  ; %NWL%var meta   = doc . createElement (  " meta "  )  ; %NWL%6
}%NWL%this . startAnimation (  " state0 "  )  ;%NWL%}%NWL%Sburb . SpriteButton . prototype = new Sburb . Sprite (  )  ; %NWL%Sburb . SpriteButton . prototype . update = function (  )  {%NWL%Sburb . Sprite . prototype . update . call ( this )  ; %NWL%this . updateMouse (  )  ;%NWL%}%NWL%Sburb . SpriteButton . prototype . updateMouse = function (  )  {%NWL%var x = Sburb . Mouse . x ; %NWL%var y = Sburb . Mouse . y ; %NWL%9
}  )  ; %NWL%dojo . extend ( dcolor . Color ,  {%NWL%toXYZ : function ( kwArgs )  {%NWL%kwArgs = kwArgs|| {  }  ; %NWL%var p = dcolor . Colorspace . primaries ( kwArgs )  ; %NWL%var m = dcolor . Colorspace . matrix (  " XYZ "  , p )  ; %NWL%var _r = this . r / 255 , _g = this . g / 255 , _b = this . b / 255 ; %NWL%if ( p . profile =  =  " sRGB "  )  {%NWL%var r =  ( _r > 0 . 04045 ) ? Math . pow (  (  ( _r + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _r / 12 . 92 ; %NWL%var g =  ( _g > 0 . 04045 ) ? Math . pow (  (  ( _g + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _g / 12 . 92 ; %NWL%var b =  ( _b > 0 . 04045 ) ? Math . pow (  (  ( _b + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _b / 12 . 92 ; %NWL%8
d [ 6 ]  = a12 * cos + a22 * sin ; %NWL%d [ 7 ]  = a13 * cos + a23 * sin ; %NWL%d [ 8 ]  = a20 * cos - a10 * sin ; %NWL%d [ 9 ]  = a21 * cos - a11 * sin ; %NWL%d [ 10 ]  = a22 * cos - a12 * sin ; %NWL%d [ 11 ]  = a23 * cos - a13 * sin ;%NWL%}  ,%NWL%rotateY : function ( radian )  {%NWL%var d = this . _data ; %NWL%var sin = Math . sin ( radian )  ; %NWL%var cos = Math . cos ( radian )  ; %NWL%9
var nodeNatives = require (  '  .  / jsdepend / node - natives '  )  ; %NWL%var isNativeNodeModulePath = nodeNatives . isNativeNodeModulePath ; %NWL%var nativeNodeModuleName = nodeNatives . nativeNodeModuleName ; %NWL%var pathUtils = require (  '  .  / jsdepend / utils '  )  ; %NWL%var getDirectory = pathUtils . getDirectory ; %NWL%var getFileName = pathUtils . getFileName ; %NWL%var pathResolve = pathUtils . pathResolve ; %NWL%function configure ( filesystem )  {%NWL%var getContents = filesystem . getContents ; %NWL%var putContents = filesystem . putContents ; %NWL%var listFiles = filesystem . listFiles ; %NWL%8
}  )  ; %NWL%viewport . append ( el )  ; %NWL%scrollBarWidth = viewport . width (  )  - el . width (  )  ; %NWL%el . remove (  )  ; %NWL%return scrollBarWidth ;%NWL%}%NWL%function isInViewport ( element , options )  {%NWL%var boundingRect  = element . getBoundingClientRect (  )  ; %NWL%var top    = boundingRect . top ; %NWL%var bottom   = boundingRect . bottom ; %NWL%var left    = boundingRect . left ; %NWL%8
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . accept_alert ( function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / accept_alert '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testDismissAlert : function ( test )  {%NWL%var client = this . client ; %NWL%0
var ModuleFilenameHelpers = require (  "  .  / ModuleFilenameHelpers "  )  ; %NWL%function SourceMapDevToolPlugin ( sourceMapFilename , sourceMappingURLComment , moduleFilenameTemplate , fallbackModuleFilenameTemplate )  {%NWL%this . sourceMapFilename = sourceMapFilename ; %NWL%this . sourceMappingURLComment = sourceMappingURLComment =  =  = false ? false : sourceMappingURLComment || " \n /  / # sourceMappingURL =  [ url ]  "  ; %NWL%this . moduleFilenameTemplate = moduleFilenameTemplate || " webpack :  /  /  /  [ resourcePath ]  "  ; %NWL%this . fallbackModuleFilenameTemplate = fallbackModuleFilenameTemplate || " webpack :  /  /  /  [ resourcePath ] ? [ hash ]  "  ;%NWL%}%NWL%module . exports = SourceMapDevToolPlugin ; %NWL%SourceMapDevToolPlugin . prototype . apply = function ( compiler )  {%NWL%var sourceMapFilename = this . sourceMapFilename ; %NWL%var sourceMappingURLComment = this . sourceMappingURLComment ; %NWL%9
myInstance2 . pattern (  / ^\ / api\ / quote /  )  ; %NWL%interceptor . request (  { url :  '  / api / user / 1 '  }  )  ; %NWL%expect ( blockUI . state (  )  . blockCount )  . toBe ( 1 )  ; %NWL%expect ( myInstance1 . state (  )  . blockCount )  . toBe ( 0 )  ; %NWL%expect ( myInstance2 . state (  )  . blockCount )  . toBe ( 0 )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' error '  , function (  )  {%NWL%it (  ' should stop all the blocks when an error has occured '  , function (  )  {%NWL%var myInstance1 = blockUI . instances . get (  ' myInstance1 '  )  ; %NWL%var myInstance2 = blockUI . instances . get (  ' myInstance2 '  )  ; %NWL%9
y +  =  ( de . clientHeight + body . scrollTop + de . scrollTop )  -  ( y + ttlib . jstooltip . offsetHeight )  ;%NWL%}%NWL%if ( y < 0 )  { y = 0 ;  }%NWL%ttlib . jstooltip . style . left = x +  " px "  ; %NWL%ttlib . jstooltip . style . top = y +  " px "  ;%NWL%}  ,%NWL%requestTooltip : function (  )  {%NWL%if ( !ttlib . jstooltip )  { return ;  }%NWL%var $this = $ ( this )  ; %NWL%var id = $this . data (  " tooltip - id "  )  ; %NWL%var spellid = $this . data (  " tooltip - spellid "  )  ; %NWL%9
" httpmonitor / lib / events "  ,%NWL%" httpmonitor / lib / trace "%NWL%]  ,%NWL%function factoryOptions ( Events , FBTrace )  {%NWL%const Cc = Components . classes ; %NWL%const Ci = Components . interfaces ; %NWL%const Cu = Components . utils ; %NWL%const nsIPrefBranch = Ci . nsIPrefBranch ; %NWL%const nsIPrefBranch2 = Ci . nsIPrefBranch2 ; %NWL%const PrefService = Cc [  " @mozilla . org / preferences - service ; 1 "  ]  ; %NWL%const nsIPrefService = Ci . nsIPrefService ; %NWL%7
}  ; %NWL%var filterOr = module . exports . filterOr = function (  )  {%NWL%var filters = _ . compact ( arguments )  ; %NWL%if ( _ . isEmpty ( filters )  )  {%NWL%return null ;%NWL%} else if ( filters . length =  =  = 1 )  {%NWL%return filters [ 0 ]  ;%NWL%}%NWL%return {  ' or '  : filters }  ;%NWL%}  ; %NWL%var filterAnd = module . exports . filterAnd = function (  )  {%NWL%1
var EntityQuery = breeze . EntityQuery ; %NWL%var MetadataStore = breeze . MetadataStore ; %NWL%var EntityManager = breeze . EntityManager ; %NWL%var EntityKey = breeze . EntityKey ; %NWL%var FilterQueryOp = breeze . FilterQueryOp ; %NWL%var Predicate = breeze . Predicate ; %NWL%var QueryOptions = breeze . QueryOptions ; %NWL%var FetchStrategy = breeze . FetchStrategy ; %NWL%var MergeStrategy = breeze . MergeStrategy ; %NWL%var EntityType = breeze . EntityType ; %NWL%var ComplexType = breeze . ComplexType ; %NWL%0
this . context . fillStyle = this . Get (  ' chart . shadow . color '  )  ; %NWL%this . context . beginPath (  )  ; %NWL%this . context . fillRect ( coords [ 0 ]  + offsetx , coords [ 1 ]  + offsety , coords [ 2 ]  , coords [ 3 ]  )  ; %NWL%this . context . fill (  )  ; %NWL%this . context . fillStyle = prevFillStyle ;%NWL%}%NWL%RGraph . Bipolar . prototype . getShape =%NWL%RGraph . Bipolar . prototype . getBar = function ( e )%NWL%{%NWL%var canvas   = this . canvas ; %NWL%var context  = this . context ; %NWL%9
' mouseout '  :  {%NWL%fn : function (  )  {%NWL%btn . removeClass (  ' qo - submit - over '  )  ;%NWL%}%NWL%}%NWL%}  )  ; %NWL%function onClick (  )  {%NWL%var firstNameField = Ext . get (  " field1 "  )  ; %NWL%var firstName = firstNameField . dom . value ; %NWL%var lastNameField = Ext . get (  " field2 "  )  ; %NWL%var lastName = lastNameField . dom . value ; %NWL%8
function putCustomValues ( data )%NWL%{%NWL%if ( typeof data . slaves ! =  ' undefined ' && typeof data . slaves . length ! =  ' undefined '  )%NWL%{%NWL%$ (  ' #noOfSlaves '  )  . val ( data . slaves . length )  ;%NWL%}%NWL%if ( typeof data . jobs ! =  ' undefined '  )%NWL%{%NWL%$ (  ' #noOfJobs '  )  . val ( data . jobs . length )  ;%NWL%}%NWL%if ( typeof data . userValidations ! =  ' undefined ' && typeof data . userValidations . length ! =  ' undefined '  )%NWL%2
maxChunks : parseInt ( value , 10 )%NWL%}  )  )  ;%NWL%}  )  ; %NWL%ifArg (  " optimize - min - chunk - size "  , function ( value )  {%NWL%ensureArray ( options ,  " plugins "  )  ; %NWL%var LimitChunkSizePlugin = require (  "  .  .  / lib / optimize / LimitChunkSizePlugin "  )  ; %NWL%options . plugins . push ( new LimitChunkSizePlugin ( parseInt ( value , 10 )  )  )  ;%NWL%}  )  ; %NWL%ifBooleanArg (  " optimize - minimize "  , function (  )  {%NWL%ensureArray ( options ,  " plugins "  )  ; %NWL%var UglifyJsPlugin = require (  "  .  .  / lib / optimize / UglifyJsPlugin "  )  ; %NWL%5
expect ( find . returns [ 0 ]  . type . names . join (  '  ,  '  )  )  . toBe (  ' string , Array .  < string >  '  )  ; %NWL%expect ( find . returns [ 0 ]  . description )  . toBe (  ' The names of the found item ( s )  .  '  )  ;%NWL%}  )  ; %NWL%it (  ' When a symbol has a @returns tag with a non - nullable type , the doclet indicates that the type is non - nullable '  , function (  )  {%NWL%var getName = docSet . getByLongname (  ' getName '  )  [ 0 ]  ; %NWL%expect ( typeof getName . returns )  . toBe (  ' object '  )  ; %NWL%expect ( getName . returns . length )  . toBe ( 1 )  ; %NWL%expect ( getName . returns [ 0 ]  . nullable )  . toBe ( false )  ;%NWL%}  )  ; %NWL%it (  ' When a symbol has a @returns tag with only a description , the doclet has a " returns " property that includes the description .  '  , function (  )  {%NWL%var bind = docSet . getByLongname (  ' bind '  )  [ 0 ]  ; %NWL%4
if ( Number (  " 1234567890 . 1234567890 "  ) ! =  = 1234567890 . 1234567000 )  {%NWL%$ERROR (  ' #2 : Number (  " 1234567890 . 1234567890 "  )  =  =  = 1234567890 . 1234567000 . Actual :  '  +  ( Number (  " 1234567890 . 1234567890 "  )  )  )  ;%NWL%}%NWL%if (  +  (  " 1234567890 . 1234567890 "  )  =  =  = 1234567890 . 123456 )  {%NWL%$ERROR (  ' #3 :  +  (  " 1234567890 . 1234567890 "  ) ! =  = 1234567890 . 123456 '  )  ;%NWL%}%NWL%if ( Number (  " 0 . 12345678901234567890 "  ) ! =  = 0 . 123456789012345678 )  {%NWL%$ERROR (  ' #4 : Number (  " 0 . 12345678901234567890 "  )  =  =  = 0 . 123456789012345678 . Actual :  '  +  ( Number (  " 0 . 12345678901234567890 "  )  )  )  ;%NWL%}%NWL%if ( Number (  " 00 . 12345678901234567890 "  ) ! =  = 0 . 123456789012345678 )  {%NWL%$ERROR (  ' #4 : Number (  " 00 . 12345678901234567890 "  )  =  =  = 0 . 123456789012345678 . Actual :  '  +  ( Number (  " 00 . 12345678901234567890 "  )  )  )  ; %NWL%7
try%NWL%{%NWL%var out1 =  { className :  " out1 "  , Number : 5 }  ; %NWL%var out2 =  { className :  " out2 "  , Number : 5 }  ; %NWL%var out3 =  { className :  " out3 "  , Number : 5 }  ; %NWL%var out4 =  { className :  " out4 "  , Number : 5 }  ; %NWL%var out5 =  { className :  " out5 "  , Number : 5 }  ; %NWL%var out6 =  { className :  " out6 "  , Number : 5 }  ; %NWL%var out7 =  { className :  " out7 "  , Number : 5 }  ; %NWL%var out8 =  { className :  " out8 "  , Number : 5 }  ; %NWL%var out9 =  { className :  " out9 "  , Number : 5 }  ; %NWL%2
var origx , origy ; %NWL%if ( origin . CLASS_NAME =  =  " OpenLayers . LonLat "  )  {%NWL%origx = origin . lon ; %NWL%origy = origin . lat ;%NWL%} else {%NWL%origx = origin . x ; %NWL%origy = origin . y ;%NWL%}%NWL%var left =  ( this . left - origx )  * ratio + origx ; %NWL%var bottom =  ( this . bottom - origy )  * ratio + origy ; %NWL%var right =  ( this . right - origx )  * ratio + origx ; %NWL%8
tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' checkbox '  ; %NWL%input . value =  ' 1 '  ; %NWL%input . className =  ' behind '  ; %NWL%input . checked = data . behind || false ; %NWL%td . appendChild ( input )  ; %NWL%td . appendChild ( document . createTextNode (  ' Behind BG '  )  )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%2
var text = g . select (  '  . nf - brush - selection - right - text '  )  ; %NWL%var bg = g . select (  '  . nf - brush - selection - right - text - bg '  )  ; %NWL%var display = this . get (  ' rightDisplay '  )  ; %NWL%if ( !display )  {%NWL%g . attr (  ' hidden '  , true )  ;%NWL%} else {%NWL%g . attr (  ' hidden '  , null )  ;%NWL%}%NWL%text . text ( display )  ; %NWL%var textPadding = this . get (  ' textPadding '  )  ; %NWL%var rightX = this . get (  ' rightX '  )  ; %NWL%9
consumerKey : cfg . twitter . consumerKey ,%NWL%consumerSecret : cfg . twitter . consumerSecret ,%NWL%callback : cfg . twitter . callback_url%NWL%}  )  ; %NWL%var crypto = require (  ' crypto '  )  ; %NWL%var moment = require (  ' moment '  )  ; %NWL%var Q = require (  ' q '  )  ; %NWL%var lodash = require (  ' lodash '  )  ; %NWL%var fs = require (  ' node - fs '  )  ; 		 /  / want recursive directory / folder creating%NWL%var path = require (  ' path '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%5
button : true ,%NWL%icon :  ' glyphicon glyphicon - calendar '  ,%NWL%attr :  { ngClick :  ' openCalendar (  " $property_cleanOpen "  , $event )  '  }%NWL%}  ]  ;%NWL%}%NWL%var fieldElements = $autofieldsProvider . field ( directive , field ,  '  < input /  >  '  , inputAttrs )  ; %NWL%return fieldElements . fieldContainer ;%NWL%}  )  ; %NWL%$autofieldsProvider . registerHandler (  ' static '  , function ( directive , field , index )  {%NWL%var showWeeks = field . showWeeks ? field . showWeeks : directive . options . dateSettings . showWeeks ; %NWL%var datepickerPopup = field . datepickerPopup ? field . datepickerPopup : directive . options . dateSettings . datepickerPopup ; %NWL%9
for ( var i = 0 ; i < keys . length ; i +  +  )  {%NWL%if ( i ! =  = 0 )  {%NWL%result +  =  "  "  ;  /  / $NON - NLS - 0$%NWL%}%NWL%result +  = getUserKeyStrokeString ( keys [ i ]  )  ;%NWL%}%NWL%return result ;%NWL%}%NWL%function getUserText ( options )  {%NWL%var id = options . id ; %NWL%var refNode = options . refNode ; %NWL%9
cached = new data . constructor ( data )%NWL%cached . nodes =  [ node ]%NWL%}%NWL%else cached . nodes . intact = true%NWL%}%NWL%return cached%NWL%}%NWL%function setAttributes ( node , dataAttrs , cachedAttrs , namespace )  {%NWL%for ( var attrName in dataAttrs )  {%NWL%var dataAttr = dataAttrs [ attrName ]%NWL%var cachedAttr = cachedAttrs [ attrName ]%NWL%9
$datePicker = $parent . data (  ' bfhdatepicker '  )%NWL%$datePicker . updateCalendar (  )%NWL%return false ;%NWL%}%NWL%, select : function ( e )  {%NWL%var $this = $ ( this )%NWL%, $parent%NWL%, $datePicker%NWL%$parent = $this . closest (  '  . bfh - datepicker '  )%NWL%var month = $parent . data (  ' month '  )%NWL%var year = $parent . data (  ' year '  )%NWL%9
' krusovice / effects / interpolate '  ,%NWL%' krusovice / thirdparty / three - bundle '%NWL%]  , function ( $ , krusovice , effects , Interpolate , THREE )  {%NWL%" use strict "  ; %NWL%effects . QuaternionRotate = $ . extend ( true ,  {  }  , Interpolate ,  {%NWL%id :  " quaternionrotate "  ,%NWL%available : false ,%NWL%prepareParameters : function ( parametersSlot , obj , config , source )  {%NWL%this . initParameters ( parametersSlot , obj , config , source )  ; %NWL%var axis = this . randomizeParameter (  " axis "  , parametersSlot , config , source )  ; %NWL%var angle = this . randomizeParameter (  " angle "  , parametersSlot , config , source )  ; %NWL%9
}%NWL%function pow ( x , y )  { return Math . pow ( x , y )  ;  }%NWL%raptorjs . perlin . prototype . _calculeNoise = function ( deltaTime )%NWL%{%NWL%var scale_magnitude = this . scale_magnitude ; %NWL%var noise_frames_m1 = this . noise_frames_m1 ; %NWL%var n_size_sq = this . n_size_sq ; %NWL%var scale_decimalbits = this . scale_decimalbits ; %NWL%var _def_PackedNoise = true ; %NWL%var n_packsize = this . n_packsize ; %NWL%var np_size = this . np_size ; %NWL%4
}  )  ; %NWL%var DialComponent = JFreeChartComponent . extend (  {%NWL%update : function (  )  {%NWL%var cd = this . chartDefinition ; %NWL%if ( cd =  = undefined )  {%NWL%Dashboards . log (  " Fatal - No chartDefinition passed "  ,  " error "  )  ; %NWL%return ;%NWL%}%NWL%cd . chartType =  ' DialChart '  ; %NWL%var intervals = cd . intervals ; %NWL%var colors = cd . colors ; %NWL%9
var crypto = require (  ' crypto '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var streamEqual = require (  ' stream - equal '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var Pend = require (  ' pend '  )  ; %NWL%var StreamSink = require (  ' streamsink '  )  ; %NWL%var describe = global . describe ; %NWL%var it = global . it ; %NWL%var before = global . before ; %NWL%var beforeEach = global . beforeEach ; %NWL%var after = global . after ; %NWL%6
const nsIURI    = Components . interfaces . nsIURI ; %NWL%const nsIStandardURL  = Components . interfaces . nsIStandardURL ; %NWL%const nsIChannel   = Components . interfaces . nsIChannel ; %NWL%const nsIRequest   = Components . interfaces . nsIRequest ; %NWL%const nsIIOService   = Components . interfaces . nsIIOService ; %NWL%const nsIAppShellService = Components . interfaces . nsIAppShellService ; %NWL%const nsISupports   = Components . interfaces . nsISupports ; %NWL%const nsISupportsWeakReference = Components . interfaces . nsISupportsWeakReference ; %NWL%const nsIRDFService   = Components . interfaces . nsIRDFService ; %NWL%const nsICommandLineHandler = Components . interfaces . nsICommandLineHandler ; %NWL%const nsICommandLine  = Components . interfaces . nsICommandLine ; %NWL%0
goog . base ( this , mapRenderer , imageLayer , target )  ; %NWL%this . image_ = null ; %NWL%this . transform_ = goog . vec . Mat4 . createNumberIdentity (  )  ;%NWL%}  ; %NWL%goog . inherits ( ol . renderer . dom . ImageLayer , ol . renderer . dom . Layer )  ; %NWL%ol . renderer . dom . ImageLayer . prototype . forEachFeatureAtPixel =%NWL%function ( coordinate , frameState , callback , thisArg )  {%NWL%var layer = this . getLayer (  )  ; %NWL%var source = layer . getSource (  )  ; %NWL%var resolution = frameState . viewState . resolution ; %NWL%var rotation = frameState . viewState . rotation ; %NWL%9
var g = e . dygraph ; %NWL%var setName = e . setName ; %NWL%var errorBars = g . getBooleanOption (  " errorBars "  ) ||%NWL%g . getBooleanOption (  " customBars "  )  ; %NWL%if ( !errorBars ) return ; %NWL%var fillGraph = g . getBooleanOption (  " fillGraph "  , setName )  ; %NWL%if ( fillGraph )  {%NWL%console . warn (  " Can ' t use fillGraph option with error bars "  )  ;%NWL%}%NWL%var ctx = e . drawingContext ; %NWL%var color = e . color ; %NWL%1
}  )  ; %NWL%chart . tooltips (  )  . addGroup ( poolBasal ,  {%NWL%type :  ' basal '%NWL%}  )  ; %NWL%return chart ;%NWL%}  ; %NWL%chart . load = function ( tidelineData )  {%NWL%var data = tidelineData . data ; %NWL%chart . tidelineData = tidelineData ; %NWL%var basalUtil = tidelineData . basalUtil ; %NWL%var bolusUtil = tidelineData . bolusUtil ; %NWL%7
if ( $this . data (  " horizontalScroll "  )  )  {%NWL%var mCSB_buttonLeft = mCSB_scrollTools . children (  "  . mCSB_buttonLeft "  )  ; %NWL%var mCSB_buttonRight = mCSB_scrollTools . children (  "  . mCSB_buttonRight "  )  ; %NWL%var mCustomScrollBoxW = mCustomScrollBox . width (  )  ; %NWL%if ( $this . data (  " autoExpandHorizontalScroll "  )  )  {%NWL%mCSB_container . css (  {  " position "  :  " absolute "  ,  " width "  :  " auto "  }  )  . wrap (  "  < div class =  ' mCSB_h_wrapper ' style =  ' position : relative ; left : 0 ; width : 999999px ;  '  /  >  "  )  . css (  {  " width "  : mCSB_container . outerWidth (  )  ,  " position "  :  " relative "  }  )  . unwrap (  )  ;%NWL%}%NWL%var mCSB_containerW = mCSB_container . outerWidth (  )  ;%NWL%} else {%NWL%var mCSB_buttonUp = mCSB_scrollTools . children (  "  . mCSB_buttonUp "  )  ; %NWL%var mCSB_buttonDown = mCSB_scrollTools . children (  "  . mCSB_buttonDown "  )  ; %NWL%1
ret = document . defaultView . getComputedStyle ( elem , null )  . getPropertyValue ( prop )%NWL%} else if ( elem . currentStyle )  {%NWL%ret = elem . currentStyle [ prop ]%NWL%}%NWL%return ret%NWL%}%NWL%return {%NWL%ruby :  ( function (  )  {%NWL%var ruby = $ . create (  ' ruby '  )%NWL%var rt = $ . create (  ' rt '  )%NWL%var rp = $ . create (  ' rp '  )%NWL%8
return function ( promise )  {%NWL%notificationChannel = notificationChannel || $injector . get (  ' requestNotificationChannel '  )  ; %NWL%notificationChannel . requestStarted (  )  ; %NWL%return promise . then ( success , error )  ;%NWL%}%NWL%}  ]  ; %NWL%$httpProvider . responseInterceptors . push ( interceptor )  ;%NWL%}  ]  )%NWL%. factory (  ' requestNotificationChannel '  ,  [  ' $rootScope '  , function ( $rootScope )  {%NWL%var _START_REQUEST_ =  ' _START_REQUEST_ '  ; %NWL%var _END_REQUEST_ =  ' _END_REQUEST_ '  ; %NWL%9
}  ; %NWL%req . acceptsLanguage = deprecate . function ( req . acceptsLanguages ,%NWL%' req . acceptsLanguage : Use acceptsLanguages instead '  )  ; %NWL%req . range = function ( size )  {%NWL%var range = this . get (  ' Range '  )  ; %NWL%if ( !range ) return ; %NWL%return parseRange ( size , range )  ;%NWL%}  ; %NWL%req . param = function param ( name , defaultValue )  {%NWL%var params = this . params || {  }  ; %NWL%var body = this . body || {  }  ; %NWL%9
var source = stats [ used_key +  ' _details '  ]  . samples ; %NWL%var limit = stats [ limit_key ]  ; %NWL%var dest =  [  ]  ; %NWL%for ( var i in source )  {%NWL%dest [ i ]  =  { sample : limit , timestamp : source [ i ]  . timestamp }  ;%NWL%}%NWL%stats [ limit_key +  ' _details '  ]  =  { samples : dest }  ;%NWL%}%NWL%function node_stat_bar ( used_key , limit_key , suffix , stats , fmt , colour ,%NWL%help , invert )  {%NWL%var used = stats [ used_key ]  ; %NWL%1
var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var a = require (  '  .  / a '  )%NWL%test . assert ( a =  =  = void 0 ,  ' noncmd module return undefined '  )%NWL%var mod = seajs . cache [ seajs . resolve (  ' noncmd / a '  , seajs . data . cwd )  ]%NWL%test . assert ( mod . hasOwnProperty (  ' exports '  )  =  =  = false ,  ' noncmd module has no property " exports "  '  )%NWL%test . assert ( mod . non =  =  = true ,  ' noncmd module has a property " non "  '  )%NWL%var b = require (  '  .  / b '  )%NWL%test . assert ( b =  =  = null ,  ' cmd module has property " exports " always return null '  )%NWL%mod = seajs . cache [ seajs . resolve (  ' noncmd / b '  , seajs . data . cwd )  ]%NWL%test . assert ( mod . hasOwnProperty (  ' exports '  )  =  =  = true ,  ' cmd module has property " exports " always return null '  )%NWL%var c = require (  '  .  / c '  )%NWL%1
var domRef = binding [ 1 ]  ; %NWL%var bindName = binding [ 2 ]  ; %NWL%var nodeBindingProhibited = binding [ 3 ]  ; %NWL%if (  [  ' get '  ,  ' set '  ,  ' templateId_ '  ]  . indexOf ( bindName ) ! =  - 1 )%NWL%{%NWL%basis . dev . warn (  ' binding name ` '  + bindName +  ' ` is prohibited , binding ignored '  )  ; %NWL%continue ;%NWL%}%NWL%var namePart = bindName . split (  '  :  '  )  ; %NWL%var anim = namePart [ 0 ]  =  =  ' anim '  ; %NWL%var l10n = namePart [ 0 ]  =  =  ' l10n '  ; %NWL%9
return adapter . update ( model , method , data )  ;%NWL%}  )  [  ' catch '  ]  ( function ( e )  {%NWL%if ( e . message . toLowerCase (  )  . indexOf (  ' null '  ) ! =  =  - 1 )  {%NWL%Kapow . wrap ( e , 409 )  ;%NWL%}%NWL%throw e ;%NWL%}  )  ;%NWL%}  ; %NWL%RequestHandler . prototype . destroy = function destroy ( request )  {%NWL%var method = this . method ; %NWL%var adapter = this . adapter ; %NWL%9
var MobileSafariClickEventPlugin = require (  "  .  / MobileSafariClickEventPlugin "  )  ; %NWL%var ReactBrowserComponentMixin = require (  "  .  / ReactBrowserComponentMixin "  )  ; %NWL%var ReactComponentBrowserEnvironment =%NWL%require (  "  .  / ReactComponentBrowserEnvironment "  )  ; %NWL%var ReactEventTopLevelCallback = require (  "  .  / ReactEventTopLevelCallback "  )  ; %NWL%var ReactDOM = require (  "  .  / ReactDOM "  )  ; %NWL%var ReactDOMButton = require (  "  .  / ReactDOMButton "  )  ; %NWL%var ReactDOMForm = require (  "  .  / ReactDOMForm "  )  ; %NWL%var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%0
var CONFIGURE_CMD     =  " cfg "  ; %NWL%var GET_SENSOR_VALUE_CMD   =  " get "  ; %NWL%var SET_ACTUATOR_VALUE_CMD   =  " set "  ; %NWL%var VALUECHANGE_MODE    =  " vch "  ; %NWL%var FIXEDINTERVAL_MODE    =  " fix "  ; %NWL%var NO_VALUE      =  " 000 "  ; %NWL%var boards = new Array (  )  ; %NWL%var elementsList = new Array (  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var http = require (  " http "  )  ; %NWL%var fs = require (  " fs "  )  ; %NWL%9
this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ; %NWL%this . createWorker = function ( session )  {%NWL%return null ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / haxe_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
mockControl . $tearDown (  )  ;%NWL%}%NWL%function testExecuteEmpty (  )  {%NWL%var pgpContext = new e2e . openpgp . ContextImpl (  )  ; %NWL%pgpContext . setKeyRingPassphrase (  '  '  )  ;  /  / No passphrase .%NWL%var errorCallback = mockControl . createFunctionMock (  ' errorCallback '  )  ; %NWL%errorCallback ( new goog . testing . mockmatchers . ArgumentMatcher ( function ( arg )  {%NWL%assertTrue ( arg instanceof Error )  ; %NWL%return true ;%NWL%}  )  )  ; %NWL%var callback = mockControl . createFunctionMock (  ' callback '  )  ; %NWL%5
var nodeId = pubsub . channelNodeId ( channel , node )  ; %NWL%var iq = pubsub . nodeAffiliationsIq ( nodeId )  ; %NWL%api . sendQuery ( req , res , iq , callback )  ;%NWL%}%NWL%function changeNodeSubscriptions ( req , res )  {%NWL%if ( !req . user )  {%NWL%api . sendUnauthorized ( res )  ; %NWL%return ;%NWL%}%NWL%var channel = req . params . channel ; %NWL%var node = req . params . node ; %NWL%9
var eui   = require (  ' @workshop / exercise - ui '  )%NWL%var fonts   = require (  ' google - fonts '  )%NWL%var escape  = require (  ' escape - html '  )%NWL%var fit   = require (  ' canvas - fit '  )%NWL%var getCompare = require (  ' gl - compare '  )%NWL%var getContext = require (  ' gl - context '  )%NWL%var quotemeta  = require (  ' quotemeta '  )%NWL%var cheerio  = require (  ' cheerio '  )%NWL%var glapi   = require (  ' gl - api '  )%NWL%var marked  = require (  ' marked '  )%NWL%var glsldoc  = require (  ' glsldoc '  )%NWL%6
, default :  ' utf - 8 '%NWL%, describe :  ' file encoding type '%NWL%}  ,%NWL%" minifiedSkip "  :  {%NWL%default : false%NWL%, describe :  " Skip minify if given file is minified "%NWL%}%NWL%}  ; %NWL%exports . run = function ( options )  {%NWL%var dest = options . dest ; %NWL%var charset = options . charset ; %NWL%9
this . highPassPrevIn = highPassPrevIn ; %NWL%this . highPassPrevOut = highPassPrevOut ;%NWL%}  ; %NWL%jfxr . Synth . Envelope = function ( sound , array )  {%NWL%}  ; %NWL%jfxr . Synth . Envelope . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%var sampleRate = sound . sampleRate . value ; %NWL%var attack = sound . attack . value ; %NWL%var sustain = sound . sustain . value ; %NWL%var sustainPunch = sound . sustainPunch . value ; %NWL%var decay = sound . decay . value ; %NWL%6
contentX : Ember . computed (  ' isOrientRight '  ,  ' width '  ,  ' contentPadding '  , function (  )  {%NWL%var contentPadding = this . get (  ' contentPadding '  )  ; %NWL%var width = this . get (  ' width '  )  ; %NWL%return this . get (  ' isOrientRight '  ) ? width - contentPadding : contentPadding ;%NWL%}  )  ,%NWL%rectPath : Ember . computed (  ' yA '  ,  ' yB '  ,  ' width '  , function (  )  {%NWL%var x = 0 ; %NWL%var w =  + this . get (  ' width '  ) || 0 ; %NWL%var x2 = x + w ; %NWL%var yA =  + this . get (  ' yA '  ) || 0 ; %NWL%var yB =  + this . get (  ' yB '  ) || 0 ; %NWL%9
var mismatch = function (  )  {%NWL%var err = new Error (  ' Column mismatch '  )%NWL%err . type =  ' columnMismatch '%NWL%return err%NWL%}%NWL%Schema . prototype . merge = function ( cols , opts , cb )  {%NWL%if ( typeof opts =  =  =  ' function '  ) return this . merge ( cols , null , opts )%NWL%if ( !cb ) cb = noop%NWL%var updated = 0%NWL%var names = this . names%NWL%var fields = this . fields%NWL%9
if ( e ! =  = undefined )  {%NWL%var mx = e . pageX ; %NWL%var my = e . pageY ; %NWL%this . drawHover ( mx - this . containerOffset . left , my - this . containerOffset . top )  ;%NWL%}%NWL%this . drawSelectedColor (  )  ; %NWL%this . ctx . restore (  )  ;%NWL%}  ,%NWL%drawHover : function ( mx , my )  {%NWL%var x = Math . floor ( mx / this . cellSize )  ; %NWL%var y = Math . floor ( my / this . cellSize )  ; %NWL%9
' use strict '  ; %NWL%var util = require (  ' util '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var yeoman = require (  ' yeoman - generator '  )  ; %NWL%var chalk = require (  ' chalk '  )  ; %NWL%var inquirer = require (  " inquirer "  )  ; %NWL%var wrench = require (  " wrench "  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var archiver = require (  ' archiver '  )  ; %NWL%1
}%NWL%function web2py_ajax_page ( method , action , data , target )  {%NWL%jQuery . ajax (  {  ' type '  : method ,  ' url '  : action ,  ' data '  : data ,%NWL%' beforeSend '  : function ( xhr )  {%NWL%xhr . setRequestHeader (  ' web2py - component - location '  , document . location )  ; %NWL%xhr . setRequestHeader (  ' web2py - component - element '  , target )  ;  }  ,%NWL%' complete '  : function ( xhr , text )  {%NWL%var html = xhr . responseText ; %NWL%var content = xhr . getResponseHeader (  ' web2py - component - content '  )  ; %NWL%var command = xhr . getResponseHeader (  ' web2py - component - command '  )  ; %NWL%var flash = xhr . getResponseHeader (  ' web2py - component - flash '  )  ; %NWL%8
scope . dateObject =  '  '  ; %NWL%return ;%NWL%}%NWL%var newDate = new Date (  )  ; %NWL%var date = element . find (  '  . datepicker '  )  . data (  ' DateTimePicker '  )  ; %NWL%if ( goog . isDefAndNotNull ( date ) && goog . isDefAndNotNull ( date . getDate (  )  )  )  {%NWL%date = date . getDate (  )  ; %NWL%newDate . setFullYear ( date . year (  )  , date . month (  )  , date . date (  )  )  ; %NWL%newDate . setHours ( date . hour (  )  , date . minute (  )  , date . second (  )  , date . millisecond (  )  )  ;%NWL%}%NWL%var time = element . find (  '  . timepicker '  )  . data (  ' DateTimePicker '  )  ; %NWL%4
CompositeEntityCollection . prototype . _onCollectionChanged = function ( collection , added , removed )  {%NWL%var collections = this . _collectionsCopy ; %NWL%var collectionsLength = collections . length ; %NWL%var composite = this . _composite ; %NWL%composite . suspendEvents (  )  ; %NWL%var i ; %NWL%var q ; %NWL%var entity ; %NWL%var compositeEntity ; %NWL%var removedLength = removed . length ; %NWL%var eventHash = this . _eventHash ; %NWL%3
unsubscribeChannels . onclick = function ( msg )  {%NWL%var subscribedChannels = document . getElementById (  ' subscribedChannels '  )  ; %NWL%var subscribeChannels = document . getElementById (  ' channelsToSubscribe '  )  ; %NWL%switchSelectedElements ( subscribedChannels , subscribeChannels , function ( channelName )  {%NWL%getBridge (  )  . unsubscribe ( channelName )  ;%NWL%}  )  ; %NWL%return false ;%NWL%}%NWL%element = document . getElementById (  ' publishBtn '  )  ; %NWL%element . onclick = function ( msg )  {%NWL%var publicationChannels	 = document . getElementById (  ' publicationChannels '  )  ; %NWL%1
return ret ;%NWL%}  ; %NWL%Deque . prototype . unshift = function Deque$unshift ( item )  {%NWL%var length = this . _length ; %NWL%var argsLength = arguments . length ; %NWL%if ( argsLength > 1 )  {%NWL%var capacity = this . _capacity ; %NWL%if ( length + argsLength > capacity )  {%NWL%for ( var i = argsLength - 1 ; i >  = 0 ; i -  -  )  {%NWL%this . _checkCapacity ( length + 1 )  ; %NWL%var capacity = this . _capacity ; %NWL%3
this . render (  )%NWL%}%NWL%}  ,%NWL%render : function ( firstOrLast )  {%NWL%if ( !this . get (  ' visible '  )  ) return%NWL%var screen = this . get (  ' screen '  )%NWL%var startLine = this . get (  ' line '  )%NWL%var col = this . get (  ' col '  )%NWL%var width = this . get (  ' width '  )%NWL%var height = this . get (  ' height '  )%NWL%var textLines = this . get (  ' textLines '  )%NWL%5
renderZoom : function ( el )  {%NWL%var _this = this ,%NWL%xscales = this . state . xscales ,%NWL%xaxis = this . state . xaxis ,%NWL%width = this . state . rectwidth ,%NWL%yaxis = this . state . yaxis ,%NWL%yscales = this . state . yscales ,%NWL%h = this . state . h ; %NWL%var yzoomf = function ( el )  {%NWL%var yaxis = this . state . yaxis ; %NWL%var yscales = this . state . yscales ; %NWL%9
var header = document . createElement (  ' header '  )  ; %NWL%header . className =  ' alert - js - header '  ; %NWL%return header ;%NWL%}  ,%NWL%createTitle = function (  )  {%NWL%var h1 = document . createElement (  ' h1 '  )  ; %NWL%h1 . innerHTML = this . options . title ; %NWL%return h1 ;%NWL%}  ,%NWL%createSubtitle = function (  )  {%NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%0
this . password . value = password_preference ;%NWL%}%NWL%}  ,%NWL%validateForm : function (  )  {%NWL%var quite = false ; %NWL%if ( Ext . isDefined ( arguments [ 0 ]  ) && arguments [ 0 ]  =  = true )  {%NWL%quite = true ;%NWL%}%NWL%var url = this . url . value ; %NWL%var username = this . username . value ; %NWL%var password = this . password . value ; %NWL%8
path . extname =  '  '  ;  /  / hack , see : https :  /  / github . com / sindresorhus / gulp - traceur / issues / 54%NWL%}  )  )%NWL%. pipe ( traceur (  { modules :  ' instantiate '  , moduleName : true }  )  )%NWL%. pipe ( concat (  ' angular2 . js '  )  )%NWL%. pipe ( gulp . dest (  ' dist / lib '  )  )  ;%NWL%}  )  ; %NWL%gulp . task (  ' play '  ,  [  ' default '  ]  , function (  )  {%NWL%var http = require (  ' http '  )  ; %NWL%var connect = require (  ' connect '  )  ; %NWL%var serveStatic = require (  ' serve - static '  )  ; %NWL%var open = require (  ' open '  )  ; %NWL%7
Ember . run . once ( this , this . _updateRightText )  ;%NWL%}  )%NWL%)  ,%NWL%leftDisplay : Ember . computed (  ' left '  ,  ' formatter '  , function (  )  {%NWL%var formatter = this . get (  ' formatter '  )  ; %NWL%var left = this . get (  ' left '  )  ; %NWL%return formatter ? formatter ( left )  : left ;%NWL%}  )  ,%NWL%rightDisplay : Ember . computed (  ' right '  ,  ' formatter '  , function (  )  {%NWL%var formatter = this . get (  ' formatter '  )  ; %NWL%var right = this . get (  ' right '  )  ; %NWL%4
this . engineMap [ locals . engine ]  ( source , locals , cb )%NWL%}%NWL%}%NWL%function renderEmblem ( source , locals , cb )  {%NWL%var emblem = require (  ' emblem '  )%NWL%, handlebars = require (  ' handlebars '  )%NWL%var template = emblem . compile ( handlebars , source )%NWL%cb ( null , template ( locals )  )%NWL%}%NWL%function renderLess ( source , locals , cb )  {%NWL%var less = require (  ' less '  )%NWL%4
}%NWL%else if ( v . isObject ( value )  )  {%NWL%for ( attr in value ) return ; %NWL%return message ;%NWL%}%NWL%}  ,%NWL%length : function ( value , options )  {%NWL%if ( !v . isDefined ( value )  ) return ; %NWL%var is = options . is%NWL%, maximum = options . maximum%NWL%, minimum = options . minimum%NWL%9
}%NWL%else {%NWL%e . stopPropagation (  )  ; %NWL%return false ;%NWL%}%NWL%}%NWL%this . hideHierarchicalMenu (  )  ;%NWL%}  ; %NWL%this . _showHierMenuLevel = function ( level , menuItem , x , y )  {%NWL%var table = _createElem (  ' table '  )  ; %NWL%var tbody = _createElem (  ' tbody '  )  ; %NWL%9
var particle = this . particles [ i ]  ; %NWL%var size = particle . size ; %NWL%var halfSize = size >  > 1 ; %NWL%if ( particle . position . x + size < 0%NWL%|| particle . position . y + size < 0%NWL%|| particle . position . x - size > Crafty . viewport . width%NWL%|| particle . position . y - size > Crafty . viewport . height )  {%NWL%continue ;%NWL%}%NWL%var x = ~~particle . position . x ; %NWL%var y = ~~particle . position . y ; %NWL%9
options = view . options = _ . defaults ( options || {  }  , view . options ,%NWL%proto . options )  ; %NWL%viewOptions = _ . pick ( options ,  [  " events "  ]  . concat ( _ . values ( options . events )  )  )  ; %NWL%_ . extend ( view , viewOptions )  ; %NWL%delete viewOverrides . render ; %NWL%_ . extend ( options , viewOverrides )  ; %NWL%view . _remove = Backbone . View . prototype . remove ; %NWL%view . _render = function ( manage )  {%NWL%var renderDeferred ; %NWL%var beforeRender = this . _options (  )  . beforeRender ; %NWL%var afterRender = this . _options (  )  . afterRender ; %NWL%9
callback && callback ( newDataUrl )%NWL%}  , this )  ; %NWL%var image 	 = new Image (  )  ; %NWL%image . onload	 = onLoad ; %NWL%image . src	 = srcUrl ;%NWL%}%NWL%var bindKey	 = function ( renderer , opts )  {%NWL%opts		 = opts		|| {  }  ; %NWL%var charCode	 = opts . charCode	|| ' p '  . charCodeAt ( 0 )  ; %NWL%var width	 = opts . width ; %NWL%var height	 = opts . height ; %NWL%9
deps . push ( cowebConfig . sessionImpl )  ;%NWL%}%NWL%if ( cowebConfig . listenerImpl )  {%NWL%deps . push ( cowebConfig . listenerImpl )  ;%NWL%}%NWL%if ( cowebConfig . collabImpl )  {%NWL%deps . push ( cowebConfig . collabImpl )  ;%NWL%}%NWL%define ( deps , function ( req )  {%NWL%var sessionImpl = cowebConfig . sessionImpl ? req ( cowebConfig . sessionImpl )  : undefined ; %NWL%var listenerImpl = cowebConfig . listenerImpl ? req ( cowebConfig . listenerImpl )  : undefined ; %NWL%9
return { hue : parseInt ( hsvExp [ 1 ]  )  ,%NWL%satv : parseFloat ( hsvExp [ 2 ]  )  ,%NWL%val : parseFloat ( hsvExp [ 3 ]  )  }  ;%NWL%}%NWL%var h , s , v ; %NWL%var values = this . rgbValues ( color )  ; %NWL%var r = values [  ' red '  ]  ; %NWL%var g = values [  ' green '  ]  ; %NWL%var b = values [  ' blue '  ]  ; %NWL%var min = Math . min ( r , g , b )  ; %NWL%var max = Math . max ( r , g , b )  ; %NWL%9
var gulp = require (  ' gulp '  )  ; %NWL%var shell = require (  ' gulp - shell '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var eslint = require (  ' gulp - eslint '  )  ; %NWL%var size = require (  ' gulp - size '  )  ; %NWL%var sass = require (  ' gulp - sass '  )  ; %NWL%var header = require (  ' gulp - header '  )  ; %NWL%var markdown = require (  ' gulp - markdown '  )  ; %NWL%var plumber = require (  ' gulp - plumber '  )  ; %NWL%var connect = require (  ' gulp - connect '  )  ; %NWL%1
var sinTheta = Math . sin ( theta )  ; %NWL%return _setXYZ . call ( _register ,%NWL%x ,%NWL%y * cosTheta - z * sinTheta ,%NWL%y * sinTheta + z * cosTheta%NWL%)  ;%NWL%}  ; %NWL%Vector . prototype . rotateY = function rotateY ( theta )  {%NWL%var x = this . x ; %NWL%var y = this . y ; %NWL%var z = this . z ; %NWL%8
this . selected = false ; %NWL%dojo . removeClass ( this . domNode ,  " selected "  )  ;%NWL%} else {%NWL%this . selected = true ; %NWL%dojo . addClass ( this . domNode ,  " selected "  )  ;%NWL%}%NWL%this . mouse . setEventMode ( this . selected ? " pan "  :  "  "  )  ;%NWL%}  ,%NWL%onPanDrag : function ( obj )  {%NWL%var x = obj . x - obj . last . x ; %NWL%var y = obj . y - obj . last . y ; %NWL%9
var component = new goog . ui . Component (  )  ; %NWL%component . addChild ( tree )  ; %NWL%assertNull (  ' next node for node3 inside the tree if the tree has parent '  ,%NWL%node3 . getNextShownNode (  )  )  ;%NWL%}%NWL%function testGetPreviousShownNode (  )  {%NWL%var tree = new goog . ui . tree . TreeControl (  ' tree '  )  ; %NWL%assertNull (  ' next node for unpopulated tree '  , tree . getPreviousShownNode (  )  )  ; %NWL%var node1 = new goog . ui . tree . TreeNode (  ' node1 '  )  ; %NWL%var node2 = new goog . ui . tree . TreeNode (  ' node2 '  )  ; %NWL%var node3 = new goog . ui . tree . TreeNode (  ' node3 '  )  ; %NWL%8
var highlights = this . highlights ; %NWL%var converter = this . converter ; %NWL%var doc = this . doc ; %NWL%var highlightsToRemove =  [  ]  ; %NWL%var classApplier = className ? this . classAppliers [ className ]  : null ; %NWL%options = createOptions ( options ,  {%NWL%containerElementId : null ,%NWL%exclusive : true%NWL%}  )  ; %NWL%var containerElementId = options . containerElementId ; %NWL%var exclusive = options . exclusive ; %NWL%9
var connections =  {  }  ; %NWL%var col = 0 ; %NWL%var row = 0 ; %NWL%var found_source = 0 ; %NWL%var slot_map =  {  }  ; %NWL%var tsids =  [  ]  ; %NWL%for ( var i in slots )  {%NWL%var s = slots [ i ]  ; %NWL%var data = s . data ; %NWL%if ( data . instance )  {%NWL%var x = s . x ; %NWL%8
'  - o - transition - duration '  :  [  '  - o - transition '  ]  ,%NWL%'  - o - transition - property '  :  [  '  - o - transition '  ]  ,%NWL%'  - o - transition - timing - function '  :  [  '  - o - transition '  ]  ,%NWL%'  - webkit - transition - delay '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - duration '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - property '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - timing - function '  :  [  '  - webkit - transition '  ]%NWL%}  ; %NWL%var compatibility = options . compatibility ; %NWL%var aggressiveMerging = options . aggressiveMerging ; %NWL%var shorthandCompacting = options . shorthandCompacting ; %NWL%8
var frameworks =  {  }  ; %NWL%forEach ( document . getElementsByTagName (  ' iframe '  )  , function ( iframe )  {%NWL%frameworks [ iframe . name ]  =  {%NWL%' test '  : window . frames [ iframe . name ]  . test ,%NWL%' selectors '  :  [  ]%NWL%}  ;%NWL%}  )  ; %NWL%var tbody = document . getElementById (  ' tbody '  )  ; %NWL%var tfoot = document . getElementById (  ' tfoot '  )  ; %NWL%var lastrow = tfoot . getElementsByTagName (  ' tr '  )  [ 0 ]  ; %NWL%var controls = document . getElementById (  ' controls '  )  ; %NWL%7
return [ anonymousPolicy ]  ;%NWL%}%NWL%if ( policy =  =  = false || policy =  =  = null )  {%NWL%var neverAllow = function neverAllow ( req , res , next )  {%NWL%res . send ( 403 )  ;%NWL%}  ; %NWL%neverAllow . _middlewareType =  ' POLICY : neverAllow '  ; %NWL%return [ neverAllow ]  ;%NWL%}%NWL%if ( policy =  =  = true )  {%NWL%var alwaysAllow = function alwaysAllow ( req , res , next )  {%NWL%3
this . dy = dy ; %NWL%if ( Math . abs ( dx )  + Math . abs ( dy )  > 0 . 0 )  {%NWL%this . time =  ( new Date (  )  )  . getTime (  )  ;%NWL%}%NWL%}  ,%NWL%updateWithDelay : function (  )  {%NWL%var f = 1 . 0 ; %NWL%var dt ; %NWL%var max = 2 . 0 ; %NWL%var dx = this . dx ; %NWL%var dy = this . dy ; %NWL%9
main . consumes =  [%NWL%" Plugin "  ,  " layout . preload "  ,  " c9 "  ,  " ui "  ,  " dialog . alert "  ,  " settings "  ,%NWL%" commands "  ,  " dialog . question "  ,  " anims "%NWL%]  ; %NWL%main . provides =  [  " layout "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var c9 = imports . c9 ; %NWL%var Plugin = imports . Plugin ; %NWL%var settings = imports . settings ; %NWL%var commands = imports . commands ; %NWL%7
var ws = fs . createWriteStream ( filename )  ; %NWL%ws . write ( xml )  ; %NWL%ws . end (  )  ;%NWL%}  ; %NWL%var defLog = false ; %NWL%setTimeout ( function (  )  {%NWL%if ( !defLog ) return ; %NWL%var def = soap_server . wsdl . definitions ; %NWL%var message = def . messages [ Object . keys ( def . messages )  [ 0 ]  ]  ; %NWL%var service = def . services [ Object . keys ( def . services )  [ 0 ]  ]  ; %NWL%var binding = def . bindings [ Object . keys ( def . bindings )  [ 0 ]  ]  ; %NWL%8
}  ,%NWL%onImportSourcePageShow : function (  )%NWL%{%NWL%var fromfile = null ; %NWL%if (  " arguments " in window && window . arguments [ 0 ]  =  =  " bookmarks "  )  {%NWL%this . _bookmarks = true ; %NWL%fromfile = document . getElementById (  " fromfile "  )  ; %NWL%fromfile . hidden = false ; %NWL%var importBookmarks = document . getElementById (  " importBookmarks "  )  ; %NWL%importBookmarks . hidden = false ; %NWL%var importAll = document . getElementById (  " importAll "  )  ; %NWL%8
pwlength = 5 ; %NWL%var numnumeric = pw . replace (  /  [ 0 - 9 ]  / g ,  "  "  )  ; %NWL%var numeric =  ( pw . length - numnumeric . length )  ; %NWL%if ( numeric > 3 )%NWL%numeric = 3 ; %NWL%var symbols = pw . replace (  / \W / g ,  "  "  )  ; %NWL%var numsymbols =  ( pw . length - symbols . length )  ; %NWL%if ( numsymbols > 3 )%NWL%numsymbols = 3 ; %NWL%var numupper = pw . replace (  /  [ A - Z ]  / g ,  "  "  )  ; %NWL%var upper =  ( pw . length - numupper . length )  ; %NWL%2
generator . setSourceContent ( sourceFile , content )  ;%NWL%}%NWL%}  )  ; %NWL%return generator ;%NWL%}  ; %NWL%SourceMapGenerator . prototype . addMapping =%NWL%function SourceMapGenerator_addMapping ( aArgs )  {%NWL%var generated = util . getArg ( aArgs ,  ' generated '  )  ; %NWL%var original = util . getArg ( aArgs ,  ' original '  , null )  ; %NWL%var source = util . getArg ( aArgs ,  ' source '  , null )  ; %NWL%var name = util . getArg ( aArgs ,  ' name '  , null )  ; %NWL%8
module . exports = Document ; %NWL%var Node = require (  '  .  / Node '  )  ; %NWL%var NodeList = require (  '  .  / NodeList '  )  ; %NWL%var Element = require (  '  .  / Element '  )  ; %NWL%var Text = require (  '  .  / Text '  )  ; %NWL%var Comment = require (  '  .  / Comment '  )  ; %NWL%var Event = require (  '  .  / Event '  )  ; %NWL%var DocumentFragment = require (  '  .  / DocumentFragment '  )  ; %NWL%var ProcessingInstruction = require (  '  .  / ProcessingInstruction '  )  ; %NWL%var DOMImplementation = require (  '  .  / DOMImplementation '  )  ; %NWL%var FilteredElementList = require (  '  .  / FilteredElementList '  )  ; %NWL%1
}%NWL%}%NWL%}  ; %NWL%goog . math . Long . prototype . shiftRightUnsigned = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
var path = require (  ' path '  )  ; %NWL%var browserify = require (  ' browserify '  )  ; %NWL%var helpers = require (  ' broccoli - kitchen - sink - helpers '  )  ; %NWL%var RSVP = require (  ' rsvp '  )  ; %NWL%var CoreObject = require (  ' core - object '  )  ; %NWL%var mapSeries = require (  ' promise - map - series '  )  ; %NWL%var merge  = require (  ' lodash - node / modern / objects / merge '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%var symlinkOrCopy = require (  ' symlink - or - copy '  )  ; %NWL%var quickTemp = require (  ' quick - temp '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%0
if ( this . _autoMigrate )%NWL%this . _wiz . currentPage . next =  " homePageImport "  ; %NWL%else if ( this . _bookmarks )%NWL%this . _wiz . currentPage . next =  " migrating "%NWL%}  ,%NWL%onImportItemsPageShow : function (  )%NWL%{%NWL%var dataSources = document . getElementById (  " dataSources "  )  ; %NWL%while ( dataSources . hasChildNodes (  )  )%NWL%dataSources . removeChild ( dataSources . firstChild )  ; %NWL%var bundle = document . getElementById (  " bundle "  )  ; %NWL%7
}%NWL%GeoPtProperty . prototype . getValueForDatastore = function ( obj )  {%NWL%var pt = obj [ this . name ] || this . defaultValue ; %NWL%return new JGeoPt ( pt . lat , pt . lon )  ;%NWL%}%NWL%GeoPtProperty . prototype . makeValueFromDatastore = function ( value )  {%NWL%return new GeoPt ( value . getLatitude (  )  , value . getLongitude (  )  )  ;%NWL%}%NWL%var PhoneNumberProperty = exports . PhoneNumberProperty = StringProperty ; %NWL%PhoneNumberProperty . constructor = PhoneNumberProperty ; %NWL%var PostalAddressProperty = exports . PostalAddressProperty = StringProperty ; %NWL%8
var path = require (  ' path '  )%NWL%var assert = require (  ' assert '  )%NWL%var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%var isAbsolute = common . isAbsolute%NWL%var setopts = common . setopts%NWL%var ownProp = common . ownProp%NWL%var inflight = require (  ' inflight '  )%NWL%var util = require (  ' util '  )%NWL%0
acronym . setAttribute (  " dir "  ,  " ltr "  )  ; %NWL%defaultAttributes . setNamedItem ( acronym )  ; %NWL%var doctype = new dom . DocumentType ( doc ,  " xml "  , entities , notations , defaultAttributes )  ; %NWL%doc . doctype = doctype ; %NWL%doc . implementation = implementation ; %NWL%doc . appendChild ( doc . createComment (  " This is comment number 1 .  "  )  )  ; %NWL%var html   = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " html "  )  ; %NWL%var html   = doc . appendChild ( html )  ; %NWL%var head   = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " head "  )  ; %NWL%var head   = html . appendChild ( head )  ; %NWL%var meta   = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " meta "  )  ; %NWL%6
now . getMinutes (  )  ,%NWL%now . getSeconds (  )  ,%NWL%now . getMilliseconds (  )  )  )  ; %NWL%var outputCmp = component . find (  " inputText "  )  ; %NWL%var elem = outputCmp ? outputCmp . getElement (  )  : null ; %NWL%var value = elem ? elem . value : null ; %NWL%var format = component . get (  " v . format "  )  ; %NWL%if ( !format )  {  /  / use default format%NWL%format = $A . get (  " $Locale . datetimeFormat "  )  ;%NWL%}%NWL%var langLocale = component . get (  " v . langLocale "  )  ; %NWL%6
assertExpr (  "  ( x / y )  "  , binExpr (  "  /  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % y )  "  , binExpr (  " % "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | y )  "  , binExpr (  " | "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%8
var DOMProperty = require (  ' DOMProperty '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactCurrentOwner = require (  ' ReactCurrentOwner '  )  ; %NWL%var ReactElement = require (  ' ReactElement '  )  ; %NWL%var ReactElementValidator = require (  ' ReactElementValidator '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%var ReactMarkupChecksum = require (  ' ReactMarkupChecksum '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactReconciler = require (  ' ReactReconciler '  )  ; %NWL%0
var port = cli . get (  ' port '  )  ; %NWL%request (  ' http :  /  / localhost :  '  + port , function ( err , response , body )  {%NWL%expect ( err )  . to . equal ( null )  ; %NWL%expect ( port )  . to . equal ( 4321 )  ; %NWL%server . close ( done )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  '  - p '  , function ( done )  {%NWL%cli . run (  [  '  '  ,  '  '  ,  '  - p '  ,  ' 4321 '  ]  , function ( err )  {%NWL%var server = cli . get (  ' server '  )  ; %NWL%0
function printAndClose (  )  {%NWL%win . focus (  )  ; %NWL%win . print (  )  ; %NWL%win . close (  )  ;%NWL%}%NWL%}  ; %NWL%app . OrnamentExporter . prototype . download = function ( ornament )  {%NWL%var l = app . OrnamentExporter . DOWNLOAD_LAYOUT ; %NWL%var dpr = window . devicePixelRatio || 1 ; %NWL%var width = window . screen . width ; %NWL%var height = window . screen . height ; %NWL%9
worker . on (  " terminate "  , function (  )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%return worker ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / css_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
document . getElementsByClassName (  ' instanthangouts '  )  )  ; %NWL%expect ( globals . lang )  . toBe ( DEFAULT_LANG )  ; %NWL%expect ( globals . parsetags )  . toBe ( DEFAULT_PARSETAGS )  ;%NWL%}  )  ; %NWL%it (  ' reads custom local attributes from parents '  , function (  )  {%NWL%document . body . innerHTML =%NWL%'  < div class =  " instanthangouts "  '  +%NWL%' hangout_type =  " first_hangout_type "  '  +%NWL%' publisher_id =  " first_publisher_id "  '  +%NWL%' render =  " hangout "  '  +%NWL%' room_id =  " first_room_id "  '  +%NWL%7
dbsrc :  '  . sqldb '  ,%NWL%port : 8081 ,%NWL%serverSecret :  ' onlyMeAndGitHubUsersKnowIt! - Please , change this for your use '%NWL%}%NWL%var app = require (  ' express '  )  (  )%NWL%, bodyParser = require (  ' body - parser '  )%NWL%, cookieParser = require (  ' cookie - parser '  )%NWL%, expressSession = require (  ' express - session '  )%NWL%, multipartParser = require (  ' connect - multiparty '  )%NWL%, compression = require (  ' compression '  )%NWL%, fs = require (  ' fs '  )%NWL%9
var f = 0%NWL%, fields =  {  }%NWL%, path = fields . path = f +  +%NWL%, mode = fields . mode = f +  +%NWL%, uid = fields . uid = f +  +%NWL%, gid = fields . gid = f +  +%NWL%, size = fields . size = f +  +%NWL%, mtime = fields . mtime = f +  +%NWL%, cksum = fields . cksum = f +  +%NWL%, type = fields . type = f +  +%NWL%, linkpath = fields . linkpath = f +  +%NWL%2
return returnedObject ;%NWL%}%NWL%if ( returnedError )  {%NWL%throw returnedError ;%NWL%}%NWL%return deferred . promise ;%NWL%}  ,%NWL%put : function ( object , options )  {%NWL%var id = options && typeof options . id ! =  " undefined " || this . getIdentity ( object )  ; %NWL%var store = this . store ; %NWL%var idProperty = this . idProperty ; %NWL%9
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . dismiss_alert ( function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / dismiss_alert '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testGetAlertText : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var Blob = NodeGit . Blob ; %NWL%var Checkout = NodeGit . Checkout ; %NWL%var Commit = NodeGit . Commit ; %NWL%var normalizeOptions = NodeGit . Utils . normalizeOptions ; %NWL%var Reference = NodeGit . Reference ; %NWL%var Remote = NodeGit . Remote ; %NWL%var Repository = NodeGit . Repository ; %NWL%var Revwalk = NodeGit . Revwalk ; %NWL%var Status = NodeGit . Status ; %NWL%var StatusFile = NodeGit . StatusFile ; %NWL%var StatusList = NodeGit . StatusList ; %NWL%0
start : startOffset ,%NWL%end : endOffset%NWL%}  ;%NWL%}%NWL%function getModernOffsets ( node )  {%NWL%var selection = window . getSelection (  )  ; %NWL%if ( selection . rangeCount =  =  = 0 )  {%NWL%return null ;%NWL%}%NWL%var anchorNode = selection . anchorNode ; %NWL%var anchorOffset = selection . anchorOffset ; %NWL%9
id : 96 ,%NWL%from_node : 87 , from :  ' xyz '  ,%NWL%to_node : 55 , to :  ' rotation '%NWL%}  ; %NWL%var connection_96 = nodegraph . createConnectionFromObject ( connection_96_data )  ; %NWL%var connection_103_data =  {%NWL%id : 103 ,%NWL%from_node : 97 , from :  ' out '  ,%NWL%to_node : 34 , to :  ' in4 '%NWL%}  ; %NWL%var connection_103 = nodegraph . createConnectionFromObject ( connection_103_data )  ; %NWL%4
this . getter_ , this . setter_ )  ;%NWL%}  ; %NWL%gf . sim . Variable . EntityID . prototype . getReadSource = function ( obj )  {%NWL%var setter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . setter_ )  ; %NWL%var reader = gf . net . PacketReader . getSharedReader (  )  ; %NWL%var readFn = gf . sim . Variable . getCompiledFunctionName_ (%NWL%reader , reader . readVarUint )  ; %NWL%return ' target .  '  + setter +  '  ( reader .  '  + readFn +  '  (  )  )  ;  '  ;%NWL%}  ; %NWL%gf . sim . Variable . EntityID . prototype . getWriteSource = function ( obj )  {%NWL%var getter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . getter_ )  ; %NWL%3
}  )  )  ; %NWL%if ( jsonData . points . length =  =  = 0 )  {%NWL%return ;%NWL%}%NWL%var fields =  [  ]  ; %NWL%var field ; %NWL%var n = jsonData . points . length ; %NWL%var icon_color   = jsonData . meta . icon_color ; %NWL%var icon_weight  = jsonData . meta . icon_weight ; %NWL%var icon_type   = jsonData . meta . icon_type ; %NWL%var base_icon   = jsonData . meta . base_icon ; %NWL%7
function loadWebServer (  )%NWL%{%NWL%var express = require (  ' express '  )%NWL%, path = require (  ' path '  )%NWL%, fs = require (  " fs "  )%NWL%, http = require (  ' http '  )%NWL%, https = require (  " https "  )%NWL%, underscore = require (  ' underscore '  )%NWL%, logutils = require (  '  .  / src / serverroot / utils / log . utils '  )%NWL%, cluster = require (  ' cluster '  )%NWL%, axon = require (  ' axon '  )%NWL%3
}  ,%NWL%showHintButton : function ( element , text )  {%NWL%element = $ ( element )  ; %NWL%$ (  "  < button type =  ' button '  >  "  )%NWL%. text ( text )%NWL%. addClass (  " btn btn - action dojo - submit - button "  )%NWL%. insertBefore ( element )  ;%NWL%}  ,%NWL%wrapInHtml : function ( snippet )  {%NWL%var angular =  '   < script src =  " http :  /  / cdn . kendostatic . com / kendo - version / js / angular . min . js "  >  <  / script > \n '  ; %NWL%var jszip =  '   < script src =  " http :  /  / cdn . kendostatic . com / kendo - version / js / jszip . min . js "  >  <  / script > \n '  ; %NWL%9
compiler . apply ( new TemplatedPathPlugin (  )  )  ; %NWL%compiler . apply ( new RecordIdsPlugin (  )  )  ; %NWL%compiler . apply ( new WarnCaseSensitiveModulesPlugin (  )  )  ; %NWL%if ( options . optimize && options . optimize . occurenceOrder )  {%NWL%compiler . apply ( new MovedToPluginWarningPlugin (  " optimize . occurenceOrder "  ,  " optimize . OccurrenceOrderPlugin "  )  )  ; %NWL%var OccurrenceOrderPlugin = require (  "  .  / optimize / OccurrenceOrderPlugin "  )  ; %NWL%compiler . apply ( new OccurrenceOrderPlugin ( options . optimize . occurenceOrderPreferEntry )  )  ;%NWL%}%NWL%if ( options . optimize && options . optimize . minChunkSize )  {%NWL%compiler . apply ( new MovedToPluginWarningPlugin (  " optimize . minChunkSize "  ,  " optimize . MinChunkSizePlugin "  )  )  ; %NWL%var MinChunkSizePlugin = require (  "  .  / optimize / MinChunkSizePlugin "  )  ; %NWL%5
}  ,%NWL%forEachFrame : function ( openFrameCallback , closeFrameCallback , startTime , stopTime )%NWL%{%NWL%if ( !this . profileHead )%NWL%return ; %NWL%startTime = startTime || 0 ; %NWL%stopTime = stopTime || Infinity ; %NWL%var samples = this . samples ; %NWL%var timestamps = this . timestamps ; %NWL%var idToNode = this . _idToNode ; %NWL%var gcNode = this . gcNode ; %NWL%7
}%NWL%this . chunkNames = chunkNames ; %NWL%this . filenameTemplate = filenameTemplate ; %NWL%this . minChunks = minChunks ; %NWL%this . selectedChunks = selectedChunks ;%NWL%}%NWL%}%NWL%module . exports = CommonsChunkPlugin ; %NWL%CommonsChunkPlugin . prototype . apply = function ( compiler )  {%NWL%var chunkNames = this . chunkNames ; %NWL%var filenameTemplate = this . filenameTemplate ; %NWL%9
}%NWL%}%NWL%function generatePermalink (  )  {%NWL%var href =  " dashboard . html?id =  "  + queryParam (  " id "  )  ; %NWL%href = href +  " &legend =  "  + $ (  " #legend "  )  . prop (  ' checked '  )  ; %NWL%href = href +  " &average =  "  + $ (  " #average "  )  . prop (  ' checked '  )  ; %NWL%href = href +  " &sum =  "  + $ (  " #sum "  )  . prop (  ' checked '  )  ; %NWL%href = href +  " &showEvents =  "  + $ (  " #events "  )  . prop (  ' checked '  )  ; %NWL%var timeBack = $ (  ' #timeBack '  )  . val (  )  ; %NWL%var start = $ (  ' #start '  )  . val (  )  ; %NWL%var end = $ (  ' #end '  )  . val (  )  ; %NWL%8
var filter = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " filter "  )  ; %NWL%filter . setAttribute (  " id "  ,  " SVGdesaturate "  )  ; %NWL%svg . appendChild ( filter )  ; %NWL%var feColorMatrix = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " feColorMatrix "  )  ; %NWL%feColorMatrix . setAttribute (  " type "  ,  " saturate "  )  ; %NWL%feColorMatrix . setAttribute (  " values "  ,  " 0 "  )  ; %NWL%filter . appendChild ( feColorMatrix )  ; %NWL%var clipPath = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " clipPath "  )  ; %NWL%clipPath . setAttribute (  " id "  ,  " SVGprogress "  + id )  ; %NWL%svg . appendChild ( clipPath )  ; %NWL%var rect = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " rect "  )  ; %NWL%0
}  ; %NWL%NodeParser . prototype . createStyles = function ( document , styles )  {%NWL%var hidePseudoElements = document . createElement (  ' style '  )  ; %NWL%hidePseudoElements . innerHTML = styles ; %NWL%document . body . appendChild ( hidePseudoElements )  ;%NWL%}  ; %NWL%NodeParser . prototype . getPseudoElements = function ( container )  {%NWL%var nodes =  [  [ container ]  ]  ; %NWL%if ( container . node . nodeType =  =  = Node . ELEMENT_NODE )  {%NWL%var before = this . getPseudoElement ( container ,  "  : before "  )  ; %NWL%var after = this . getPseudoElement ( container ,  "  : after "  )  ; %NWL%9
ModelAnimationCache . getAnimationParameterValues = function ( model , accessor )  {%NWL%var key = getAccessorKey ( model , accessor )  ; %NWL%var values = cachedAnimationParameters [ key ]  ; %NWL%if ( !defined ( values )  )  {%NWL%var buffers = model . _loadResources . buffers ; %NWL%var gltf = model . gltf ; %NWL%var bufferViews = gltf . bufferViews ; %NWL%var bufferView = bufferViews [ accessor . bufferView ]  ; %NWL%var componentType = accessor . componentType ; %NWL%var type = accessor . type ; %NWL%var count = accessor . count ; %NWL%8
var downloadLocales = require (  '  .  / gulp / download - locales '  )  ; %NWL%var locale = require (  '  .  / gulp / locale '  )  ; %NWL%var template = require (  '  .  / gulp / template '  )  ; %NWL%var browserify = require (  '  .  / gulp / browserify '  )  ; %NWL%var less = require (  '  .  / gulp / less '  )  ; %NWL%var cache = require (  '  .  / gulp / cache '  )  ; %NWL%var publish = require (  '  .  / gulp / publish '  )  ; %NWL%var svgmin = require (  '  .  / gulp / svgmin '  )  ; %NWL%var jsbeautify = require (  '  .  / gulp / jsbeautify '  )  ; %NWL%var jshint = require (  '  .  / gulp / jshint '  )  ; %NWL%var jscs = require (  '  .  / gulp / jscs '  )  ; %NWL%1
month :  " about a month "  ,%NWL%months :  " %d months "  ,%NWL%year :  " about a year "  ,%NWL%years :  " %d years "  ,%NWL%numbers :  [  ]%NWL%}%NWL%}  ,%NWL%inWords : function ( distanceMillis )  {%NWL%var $l = this . settings . strings ; %NWL%var prefix = $l . prefixAgo ; %NWL%var suffix = $l . suffixAgo ; %NWL%9
items . eq ( index )  [ 0 ]  . focus (  )  ;%NWL%}  ; %NWL%var show = $dropdown . show ; %NWL%$dropdown . show = function (  )  {%NWL%show (  )  ; %NWL%setTimeout ( function (  )  {%NWL%options . keyboard && $dropdown . $element . on (  ' keydown '  , $dropdown . $onKeyDown )  ; %NWL%bodyEl . on (  ' click '  , onBodyClick )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var hide = $dropdown . hide ; %NWL%2
, WriteError  = require (  '  .  / errors '  )  . WriteError%NWL%, ReadError   = require (  '  .  / errors '  )  . ReadError%NWL%, NotFoundError  = require (  '  .  / errors '  )  . NotFoundError%NWL%, OpenError   = require (  '  .  / errors '  )  . OpenError%NWL%, EncodingError  = require (  '  .  / errors '  )  . EncodingError%NWL%, InitializationError = require (  '  .  / errors '  )  . InitializationError%NWL%, ReadStream  = require (  '  .  / read - stream '  )%NWL%, WriteStream  = require (  '  .  / write - stream '  )%NWL%, util    = require (  '  .  / util '  )%NWL%, Batch    = require (  '  .  / batch '  )%NWL%, codec    = require (  '  .  / codec '  )%NWL%8
if ( !common . opensslCli )  {%NWL%console . error (  ' Skipping because node compiled without OpenSSL CLI .  '  )  ; %NWL%process . exit ( 0 )  ;%NWL%}%NWL%if ( !common . hasCrypto )  {%NWL%console . log (  ' 1 .  . 0 # Skipped : missing crypto '  )  ; %NWL%process . exit (  )  ;%NWL%}%NWL%var tls = require (  ' tls '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var constants = require (  ' constants '  )  ; %NWL%8
" use strict "  ; %NWL%var globalBackbone = window . Backbone ; %NWL%var define = window . define ? window . define : function ( cb )  { cb . call ( this )  ;  }  ; %NWL%define ( function ( require )  {%NWL%require = require || function (  )  { return false ;  }  ; %NWL%var keys ; %NWL%var Backbone = require (  " backbone "  ) || window . Backbone ; %NWL%var _ = require (  " underscore "  ) || window . _ ; %NWL%var $ = require (  " jquery "  ) || Backbone . $ ; %NWL%var warn = window . console && window . console . warn ; %NWL%var trace = window . console && window . console . trace ; %NWL%9
}%NWL%}  ,%NWL%errorHandler%NWL%)  ;%NWL%}%NWL%)  ;%NWL%}%NWL%function createEntry (  )  {%NWL%var date = sessionStorage . currentDate ; %NWL%var calories = $ (  ' #calories '  )  . val (  )  ; %NWL%var food = $ (  ' #food '  )  . val (  )  ; %NWL%9
this . opts%NWL%. boolean (  ' no - template '  )%NWL%. describe (  ' no - template '  ,  ' copy no files other than manifest . json '  )%NWL%. describe (  ' local - template '  ,  ' path to local application template '  )%NWL%. describe (  ' git - template '  ,  ' path to git repository '  )%NWL%. describe (  ' skip - install '  ,  " don ' t autorun devkit install "  )  ;%NWL%}  ; %NWL%this . exec = function ( command , args , cb )  {%NWL%var fs = require (  ' fs '  )  ; %NWL%var ff = require (  ' ff '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%8
doc . replace ( new Range ( row , 0 , row , column - 1 )  , indent )  ;%NWL%}  ; %NWL%this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  ' ace / mode / dot_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ,  ' ace / mode / doc_comment_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
exports . IncomingMessage = require (  ' _http_incoming '  )  . IncomingMessage ; %NWL%const common = require (  ' _http_common '  )  ; %NWL%exports . METHODS = common . methods . slice (  )  . sort (  )  ; %NWL%exports . OutgoingMessage = require (  ' _http_outgoing '  )  . OutgoingMessage ; %NWL%const server = require (  ' _http_server '  )  ; %NWL%exports . ServerResponse = server . ServerResponse ; %NWL%exports . STATUS_CODES = server . STATUS_CODES ; %NWL%const agent = require (  ' _http_agent '  )  ; %NWL%const Agent = exports . Agent = agent . Agent ; %NWL%exports . globalAgent = agent . globalAgent ; %NWL%const client = require (  ' _http_client '  )  ; %NWL%1
}%NWL%function stylus (  )  {%NWL%return gulp . src ( client . stylus )%NWL%. pipe ( $ . stylus (  )  )%NWL%. pipe ( $ . rename (  ' material - styles . css '  )  )%NWL%. pipe ( gulp . dest ( client . stylusDest )  )%NWL%}%NWL%function inject (  )  {%NWL%var core = gulp . src ( client . core ,  { read : false }  )  ; %NWL%var modules = gulp . src ( client . modules ,  { read : false }  )  ; %NWL%var styles = gulp . src ( client . styles ,  { read : false }  )  ; %NWL%8
var child = require (  ' child_process '  )%NWL%var mkdirp = require (  ' mkdirp '  )%NWL%var ldj = require (  ' ndjson '  )%NWL%var stdout = require (  ' stdout '  )%NWL%var request = require (  ' request '  )%NWL%var winSpawn = require (  ' win - spawn '  )%NWL%var through = require (  ' through2 '  )%NWL%var kill = require (  ' tree - kill '  )%NWL%var rimraf = require (  ' rimraf '  )%NWL%var runSerially = require (  ' run - series '  )%NWL%var split = require (  ' split '  )%NWL%1
var ActionCreatorsClass = createActionCreatorsClass ( properties )  ; %NWL%var defaultInstance = this . register ( ActionCreatorsClass )  ; %NWL%return defaultInstance ;%NWL%}%NWL%function createQueries ( properties )  {%NWL%var QueriesClass = createQueriesClass ( properties )  ; %NWL%var defaultInstance = this . register ( QueriesClass )  ; %NWL%return defaultInstance ;%NWL%}%NWL%function createStateSource ( properties )  {%NWL%var StateSourceClass = createStateSourceClass ( properties )  ; %NWL%0
if ( !Utils . checkString ( value )  )  {%NWL%return ;%NWL%}%NWL%var maxMessage = this . maxMessage ; %NWL%var max = this . max ; %NWL%if ( !Utils . checkNumber ( max )  )  {%NWL%if ( value . length > max )  {%NWL%return new Error ( Util . format ( maxMessage , key , value , max )  )  ;%NWL%}%NWL%}%NWL%var minMessage = this . minMessage ; %NWL%3
' cdf / Dashboard . Clean '  ,%NWL%' cdf / components / CggComponent . ext '  ]  ,%NWL%function ( AddIn , Dashboard , CggComponentExt )  {%NWL%var cggMarker = new AddIn (  {%NWL%name :  " cggMarker "  ,%NWL%label :  " CGG Marker "  ,%NWL%defaults :  {  }  ,%NWL%implementation : function ( tgt , st , opt )  {%NWL%var url = CggComponentExt . getCggDrawUrl (  )  +  ' ?script =  '  + st . cggGraphName ; %NWL%var width = st . width ; %NWL%var height = st . height ; %NWL%9
}%NWL%}%NWL%}  ; %NWL%$ . jqplot . BarRenderer . prototype . drawShadow = function ( ctx , gridData , options )  {%NWL%var i ; %NWL%var opts =  ( options ! = undefined ) ? options :  {  }  ; %NWL%var shadow =  ( opts . shadow ! = undefined ) ? opts . shadow : this . shadow ; %NWL%var showLine =  ( opts . showLine ! = undefined ) ? opts . showLine : this . showLine ; %NWL%var fill =  ( opts . fill ! = undefined ) ? opts . fill : this . fill ; %NWL%var xaxis = this . xaxis ; %NWL%var yaxis = this . yaxis ; %NWL%9
}%NWL%function copyProp ( val , key )  {%NWL%this [ key ]  = val ;%NWL%}%NWL%module . exports = mixIn ;%NWL%}  ,  {  "  .  / forOwn "  : 15 }  ]  , 19 :  [ function ( _dereq_ , module , exports )  {%NWL%' use strict '  ; %NWL%var forEach = _dereq_ (  ' mout / array / forEach '  )  ; %NWL%var mixIn = _dereq_ (  ' mout / object / mixIn '  )  ; %NWL%var merge = _dereq_ (  ' mout / object / merge '  )  ; %NWL%var map = _dereq_ (  ' mout / array / map '  )  ; %NWL%7
}  )  ; %NWL%require (  " timers "  )  . setInterval ;  /  /  : fn ( callback : fn (  )  , ms : number )  -  > timers . Timer%NWL%setInterval ;  /  /  : fn ( callback : fn (  )  , ms : number )  -  > timers . Timer%NWL%setTimeout ( function (  )  {  }  , 10 )  . ref ;  /  /  : fn (  )%NWL%var mymod = require (  " mymod "  )  ; %NWL%mymod . foo ;  /  /  : number%NWL%mymod . bar ;  /  /  : string%NWL%require (  "  .  / localfile "  )  . hello ;  /  /  : fn (  )  -  > number%NWL%require (  "  .  / foo /  .  .  / exportfunc . js "  )  ;  /  /  : fn ( a : number , b : number )  -  > number%NWL%require (  "  .  / dir "  )  ;  /  /  :  :  { foo : string , rel :  { abc : number , def :  { xyz : string }  }  }%NWL%var mod1 = require (  " mod1 "  )  ; %NWL%4
var m ; %NWL%switch ( algo )  {%NWL%case ' rsa_encrypt '  : %NWL%case ' rsa_encrypt_sign '  : %NWL%var rsa = new publicKey . rsa (  )  ; %NWL%var n = publicMPIs [ 0 ]  . toBigInteger (  )  ; %NWL%var e = publicMPIs [ 1 ]  . toBigInteger (  )  ; %NWL%m = data . toBigInteger (  )  ; %NWL%return [ rsa . encrypt ( m , e , n )  ]  ; %NWL%case ' elgamal '  : %NWL%var elgamal = new publicKey . elgamal (  )  ; %NWL%4
test . ok ( res =  =  =  ' result '  ,  ' The handler was executed with the value ` '  + res +  ' ` .  '  )  ;%NWL%}  ; %NWL%zapp ( 1 )  ; %NWL%test . expect ( 6 )  ; %NWL%test . done (  )  ;%NWL%}  ,%NWL%' 9 . Zen should run errorHandler with parameters on last empty " next (  )  "  '  : function ( test )  {%NWL%var hw = function ( value1 , next )  {%NWL%test . ok ( arguments . length =  =  = 2 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof value1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + value1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof next ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + next +  ' ` .  '  )  ; %NWL%9
textTags . focus (  )  ;%NWL%}  ,%NWL%changeColor : function (  )  {%NWL%var textHex = document . getElementById (  " text - value "  )  ; %NWL%var newColor = textHex . value ; %NWL%if ( newColor && rainbowColor . isValid ( newColor )  )%NWL%editColor . loadColor ( newColor , false )  ;%NWL%}  ,%NWL%saveColor : function (  )  {%NWL%var tags = document . getElementById (  " text - tags "  )  . value ; %NWL%var url = document . getElementById (  " text - url "  )  . value ; %NWL%9
for ( var i = 0 ; i < elements . length ; i +  +  )  {%NWL%arr [ i ]  = createMockTouch ( unwrap ( elements [ i ]  )  )  ;%NWL%}%NWL%return arr ;%NWL%}%NWL%var a = document . createElement (  ' a '  )  ; %NWL%var b = document . createElement (  ' b '  )  ; %NWL%var c = document . createElement (  ' c '  )  ; %NWL%var d = document . createElement (  ' d '  )  ; %NWL%var e = document . createElement (  ' e '  )  ; %NWL%var f = document . createElement (  ' f '  )  ; %NWL%6
var date ; %NWL%if ( typeof options . expires =  =  ' number '  )  {%NWL%date = new Date (  )  ; %NWL%date . setTime ( date . getTime (  )  +  ( options . expires * 24 * 60 * 60 * 1000 )  )  ;%NWL%} else {%NWL%date = options . expires ;%NWL%}%NWL%expires =  '  ; expires =  '  + date . toUTCString (  )  ;  /  / use expires attribute , max - age is not supported by IE%NWL%}%NWL%var path = options . path ? '  ; path =  '  +  ( options . path )  :  '  '  ; %NWL%var domain = options . domain ? '  ; domain =  '  +  ( options . domain )  :  '  '  ; %NWL%9
if ( match = deepSearch ( childRoute , pathname , query )  )  {%NWL%match . routes . unshift ( route )  ; %NWL%return match ;%NWL%}%NWL%}%NWL%}%NWL%var defaultRoute = route . defaultRoute ; %NWL%if ( defaultRoute && ( params = PathUtils . extractParams ( defaultRoute . path , pathname )  )  )%NWL%return new Match ( pathname , params , query ,  [ route , defaultRoute ]  )  ; %NWL%var notFoundRoute = route . notFoundRoute ; %NWL%if ( notFoundRoute && ( params = PathUtils . extractParams ( notFoundRoute . path , pathname )  )  )%NWL%7
}%NWL%function randomId (  )  {%NWL%return Math . floor ( Math . random (  )  * 1000 )  ;%NWL%}%NWL%function buildTestWorldURL ( testWorldName , id )  {%NWL%return ' http :  /  /  '%NWL%+ env . LIFE_STAR_HOST +  '  :  '  + env . LIFE_STAR_PORT%NWL%+ testWorldName%NWL%+  ' ?testRunId =  '  + id%NWL%+  ( options . testScript ? " &loadScript =  "  + escape ( options . testScript )  :  '  '  )%NWL%+  ( options . testFilter ? " &testFilter =  "  + escape ( options . testFilter )  :  '  '  )%NWL%9
this . factory = function ( options )  {%NWL%return new Flow ( options )  ;%NWL%}  ; %NWL%this . events =  [  ]  ; %NWL%this . on = function ( event , callback )  {%NWL%this . events . push (  [ event , callback ]  )  ;%NWL%}  ; %NWL%this . $get = function (  )  {%NWL%var fn = this . factory ; %NWL%var defaults = this . defaults ; %NWL%var events = this . events ; %NWL%9
MessageHandler . prototype . onMessageReceived = function ( message , sessionid )  {%NWL%if ( typeof message =  =  =  " string "  )  {%NWL%try {%NWL%message = JSON . parse ( message )  ;%NWL%} catch ( e )  {%NWL%log . error (  " JSON . parse ( message )  - error :  "  + e . message )  ;%NWL%}%NWL%}%NWL%if ( message . hasOwnProperty (  " register "  ) && message . register )  {%NWL%var from = message . from ; %NWL%var to = message . to ; %NWL%9
_removeCallback : function ( entry , target , method )  {%NWL%var callbacks = entry . callbacks ; %NWL%callbacks . forEach ( function ( x , idx )  {%NWL%if ( x [ 0 ]  =  =  = target && x [ 1 ]  =  =  = method ) callbacks [ idx ]  = null ;%NWL%}  , this )  ; %NWL%callbacks = null ;  /  / avoid memory leaks%NWL%return this ;%NWL%}  ,%NWL%_scheduleImageEntry : function ( entry , isBackgroundFlag )  {%NWL%var background = this . _backgroundQueue ; %NWL%var foreground = this . _foregroundQueue ; %NWL%9
return { controlsDescendantBindings : true }  ;%NWL%}%NWL%}  ; %NWL%koObject . bindingHandlers . modal =  {%NWL%init : function ( element , valueAccessor , allBindingsAccessor , viewModel , bindingContext )  {%NWL%var $element = $ ( element )  ; %NWL%var modalBindingValues = koObject . utils . unwrapObservable ( valueAccessor (  )  )  ; %NWL%var template = modalBindingValues . template || false ; %NWL%var options = modalBindingValues . options || {  }  ; %NWL%var data = modalBindingValues . data || false ; %NWL%var fade = modalBindingValues . fade || false ; %NWL%7
var iota4 = this . _iota4 ; %NWL%var iota5 = this . _iota5 ; %NWL%var iota6 = this . _iota6 ; %NWL%var iota7 = this . _iota7 ; %NWL%var iota8 = this . _iota8 ; %NWL%var iota9 = this . _iota9 ; %NWL%var iota10 = this . _iota10 ; %NWL%var iota11 = this . _iota11 ; %NWL%var R0_1 = this . _R0_1 ; %NWL%var R1_1 = this . _R1_1 ; %NWL%var R2_1 = this . _R2_1 ; %NWL%0
'  +  ( applySaturation ? ' u_dayTextureSaturation [  '  + i +  '  ]  '  :  ' 0 . 0 '  )  +  '  , \n\%NWL%'  +  ( applyGamma ? ' u_dayTextureOneOverGamma [  '  + i +  '  ]  '  :  ' 0 . 0 '  )  +  ' \n\%NWL%)  ; \n '  ;%NWL%}%NWL%computeDayColor +  =  ' \%NWL%return color ; \n\%NWL%}  '  ; %NWL%fs . sources . push ( computeDayColor )  ; %NWL%var getPosition3DMode =  ' vec4 getPosition ( vec3 position3DWC )  { return getPosition3DMode ( position3DWC )  ;  }  '  ; %NWL%var getPosition2DMode =  ' vec4 getPosition ( vec3 position3DWC )  { return getPosition2DMode ( position3DWC )  ;  }  '  ; %NWL%var getPositionColumbusViewMode =  ' vec4 getPosition ( vec3 position3DWC )  { return getPositionColumbusViewMode ( position3DWC )  ;  }  '  ; %NWL%8
var port = 8080 ; %NWL%var useSSL = false ; %NWL%var sslCertificatePath =  '  '  ; %NWL%var sslKeyPath =  '  '  ; %NWL%var sslCaPath =  '  '  ; %NWL%var databaseHost =  ' localhost '  ; %NWL%var databaseName =  ' zrecore '  ; %NWL%var authorizationRequired = false ;  /  / Set to false while you add your first User , then set back to true and restart the app .%NWL%var http = require (  ' http '  )%NWL%, path = require (  ' path '  )%NWL%, fs = require (  ' fs '  )%NWL%9
if ( m [  ' lat '  ]  >  =  - 90 && m [  ' lat '  ]  <  = 90 )%NWL%writeCookie (  ' ingress . intelmap . lat '  , m [  ' lat '  ]  )  ; %NWL%if ( m [  ' lng '  ]  >  =  - 180 && m [  ' lng '  ]  <  = 180 )%NWL%writeCookie (  ' ingress . intelmap . lng '  , m [  ' lng '  ]  )  ; %NWL%writeCookie (  ' ingress . intelmap . zoom '  , window . map . getZoom (  )  )  ;%NWL%}%NWL%window . getPosition = function (  )  {%NWL%if ( getURLParam (  ' latE6 '  ) && getURLParam (  ' lngE6 '  )  )  {%NWL%console . log (  " mappos : reading email URL params "  )  ; %NWL%var lat = parseInt ( getURLParam (  ' latE6 '  )  )  / 1E6 || 0 . 0 ; %NWL%var lng = parseInt ( getURLParam (  ' lngE6 '  )  )  / 1E6 || 0 . 0 ; %NWL%9
deprecate (  ' res . json ( obj , status )  : Use res . status ( status )  . json ( obj ) instead '  )  ; %NWL%this . statusCode = arguments [ 1 ]  ;%NWL%} else {%NWL%deprecate (  ' res . json ( status , obj )  : Use res . status ( status )  . json ( obj ) instead '  )  ; %NWL%this . statusCode = arguments [ 0 ]  ; %NWL%val = arguments [ 1 ]  ;%NWL%}%NWL%}%NWL%var app = this . app ; %NWL%var replacer = app . get (  ' json replacer '  )  ; %NWL%var spaces = app . get (  ' json spaces '  )  ; %NWL%9
}%NWL%return html ;%NWL%}  ; %NWL%return function ( cueText )  {%NWL%return cueText . replace ( tagSplits , replacer )  ;%NWL%}  ;%NWL%}  )  (  )  ; %NWL%var mapTtmlToVtt = function ( i )  {%NWL%var content = i +  '  '  ; %NWL%var begin = this . getAttribute (  ' begin '  ) || '  '  ; %NWL%var end = this . getAttribute (  ' end '  ) || '  '  ; %NWL%9
'  < span class =  " h5form - timezone "  >  '  + getTZ (  )  +  '  <  / span >  '  :  '  '  ; %NWL%ui . hide (  )  . after (%NWL%'  < span class =  "  '  + opts . classDatetime +  '  "  >  '  +%NWL%'  < input type =  " date " value =  "  '  + val [ 0 ]  +  '  "  '  +%NWL%' min =  "  '  + min [ 0 ]  +  '  " max =  "  '  + max [ 0 ]  +  '  "  '  +%NWL%' size =  "  '  + getAttr ( ui ,  ' size '  )  +  '  "  '  +%NWL%' class =  "  '  + getAttr ( ui ,  ' class '  )  +  '  "  '  +%NWL%' title =  "  '  + getAttr ( ui ,  ' title '  )  +  '  "  >  '  +%NWL%'  < input type =  " time " value =  "  '  + val [ 1 ]  +  '  "  '  +%NWL%' step =  "  '  + attr2num ( ui ,  ' step '  , 60 )  +  '  "  '  +%NWL%' size =  "  '  + getAttr ( ui ,  ' size '  )  +  '  "  '  +%NWL%6
var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%var ReactDOMSelect = require (  "  .  / ReactDOMSelect "  )  ; %NWL%var ReactDOMTextarea = require (  "  .  / ReactDOMTextarea "  )  ; %NWL%var ReactEventListener = require (  "  .  / ReactEventListener "  )  ; %NWL%var ReactInjection = require (  "  .  / ReactInjection "  )  ; %NWL%var ReactInstanceHandles = require (  "  .  / ReactInstanceHandles "  )  ; %NWL%var ReactMount = require (  "  .  / ReactMount "  )  ; %NWL%var SelectEventPlugin = require (  "  .  / SelectEventPlugin "  )  ; %NWL%var ServerReactRootIndex = require (  "  .  / ServerReactRootIndex "  )  ; %NWL%0
if ( ! (  " dojo " in window )  )  {%NWL%var doc = frameElement . ownerDocument ; %NWL%var win = doc . parentWindow || doc . defaultView ; %NWL%dojo = win . dojo ;%NWL%}%NWL%var isLtr = dojo . hitch ( dojo ,  " withGlobal "  )  ( window ,  " _isBodyLtr "  , dojo ,  [  ]  )  ; %NWL%document . getElementById (  " mode "  )  . innerHTML =  ( isQuirks ? " quirks "  :  " strict "  )  +  ( isLtr ? " ltr "  :  " rtl "  )  ; %NWL%var root = isQuirks? document . body : document . documentElement ; %NWL%var control = document . getElementById (  " control "  )  ; %NWL%var clientWidth = document . getElementById (  " clientWidth "  )  ; %NWL%var abs1 = document . getElementById (  " abs1 "  )  ; %NWL%8
{%NWL%' use strict '  ; %NWL%var DB     = require (  ' DB / DBManager '  )  ; %NWL%var Client    = require (  ' Core / Client '  )  ; %NWL%var Preferences   = require (  ' Core / Preferences '  )  ; %NWL%var Session    = require (  ' Engine / SessionStorage '  )  ; %NWL%var Renderer    = require (  ' Renderer / Renderer '  )  ; %NWL%var Altitude    = require (  ' Renderer / Map / Altitude '  )  ; %NWL%var KEYS     = require (  ' Controls / KeyEventHandler '  )  ; %NWL%var UIManager    = require (  ' UI / UIManager '  )  ; %NWL%var UIComponent   = require (  ' UI / UIComponent '  )  ; %NWL%9
}  ; %NWL%ol . renderer . canvas . Layer . prototype . dispatchRenderEvent =%NWL%function ( context , frameState , opt_transform )  {%NWL%this . dispatchComposeEvent_ ( ol . render . EventType . RENDER , context ,%NWL%frameState , opt_transform )  ;%NWL%}  ; %NWL%ol . renderer . canvas . Layer . prototype . getImage = goog . abstractMethod ; %NWL%ol . renderer . canvas . Layer . prototype . getImageTransform = goog . abstractMethod ; %NWL%ol . renderer . canvas . Layer . prototype . getTransform = function ( frameState )  {%NWL%var viewState = frameState . viewState ; %NWL%var pixelRatio = frameState . pixelRatio ; %NWL%9
var employees =  [  ]  ; %NWL%var addresses =  [  ]  ; %NWL%var names  =  [  ]  ; %NWL%var positions =  [  ]  ; %NWL%var genders  =  [  ]  ; %NWL%var ids   =  [  ]  ; %NWL%var salaries  =  [  ]  ; %NWL%for ( var i = 0 ; i < 5 ; i +  +  )%NWL%{%NWL%var employee = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " employee "  )  ; %NWL%var address  = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " address "  )  ; %NWL%9
var js = this . $js ; %NWL%var me = this ; %NWL%var htmlpath = options . htmlpath ; %NWL%if ( js . length =  =  = 0 )  {%NWL%this . isDone = true ; %NWL%this . cb && this . cb (  )  ;%NWL%} else {%NWL%js . each ( function ( i , el )  {%NWL%var $el = $ ( this )  ; %NWL%var src = $ ( this )  . attr (  ' src '  )  ; %NWL%var type = $ ( this )  . attr (  ' type '  )  ; %NWL%9
if ( typeof ( gWtAccountRollup )  =  =  " undefined "  )  {%NWL%WT . vt_f_a =  " 1 "  ;%NWL%}%NWL%WT . vt_f_s = WT . vt_f_d =  " 1 "  ; %NWL%WT . vt_f_tlh = WT . vt_f_tlv =  " 0 "  ;%NWL%}%NWL%else {%NWL%var c = dcsGetCookie ( name )  ; %NWL%var id = dcsGetIdCrumb ( c ,  " id "  )  ; %NWL%var lv = parseInt ( dcsGetCrumb ( c ,  " lv "  )  )  ; %NWL%var ss = parseInt ( dcsGetCrumb ( c ,  " ss "  )  )  ; %NWL%9
makeGant ( taskArray , w , h )  ; %NWL%var title = svg . append (  " text "  )%NWL%. text ( gantt . yy . getTitle (  )  )%NWL%. attr (  " x "  , w / 2 )%NWL%. attr (  " y "  , conf . titleTopMargin )%NWL%. attr (  ' class '  ,  ' titleText '  )  ; %NWL%function makeGant ( tasks , pageWidth , pageHeight )  {%NWL%var barHeight = conf . barHeight ; %NWL%var gap = barHeight + conf . barGap ; %NWL%var topPadding = conf . topPadding ; %NWL%var sidePadding = conf . sidePadding ; %NWL%7
, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Point   = geo . Point%NWL%, BezierConfig  = geo . BezierConfig%NWL%, BezierTo   = actions . BezierTo%NWL%, BezierBy   = actions . BezierBy%NWL%9
expect ( 1 )  ; %NWL%ok ( typeof navigator . orientation . currentOrientation ! =  ' undefined ' && navigator . orientation . currentOrientation =  = null ,  " navigator . orientation . currentOrientation should be initially null .  "  )  ;%NWL%}  )  ; %NWL%test (  " should contain a getCurrentOrientation function "  , function (  )  {%NWL%expect ( 2 )  ; %NWL%ok ( typeof navigator . orientation . getCurrentOrientation ! =  ' undefined ' && navigator . orientation . getCurrentOrientation ! = null ,  " navigator . orientation . getCurrentOrientation should not be null .  "  )  ; %NWL%ok ( typeof navigator . orientation . getCurrentOrientation =  =  ' function '  ,  " navigator . orientation . getCurrentOrientation should be a function .  "  )  ;%NWL%}  )  ; %NWL%test (  " should contain a watchOrientation function "  , function (  )  {%NWL%expect ( 2 )  ; %NWL%ok ( typeof navigator . orientation . watchOrientation ! =  ' undefined ' && navigator . orientation . watchOrientation ! = null ,  " navigator . orientation . watchOrientation should not be null .  "  )  ; %NWL%5
var fs = require (  ' fs '  )%NWL%, http = require (  ' http '  )%NWL%, path = require (  ' path '  )%NWL%, connect = require (  ' connect '  )%NWL%, utils = connect . utils%NWL%, normalizeType = require (  '  .  / utils '  )  . normalizeType%NWL%, normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes%NWL%, etag = require (  '  .  / utils '  )  . etag%NWL%, statusCodes = http . STATUS_CODES%NWL%, send = connect . static . send%NWL%, cookie = require (  ' cookie '  )%NWL%1
g . attr (  ' hidden '  , null )  ;%NWL%}%NWL%text . text ( display )  ; %NWL%var textPadding = this . get (  ' textPadding '  )  ; %NWL%var rightX = this . get (  ' rightX '  )  ; %NWL%var graphHeight = this . get (  ' graphHeight '  )  ; %NWL%var graphWidth = this . get (  ' graphWidth '  )  ; %NWL%var bbox = text [ 0 ]  [ 0 ]  . getBBox (  )  ; %NWL%var doublePad = textPadding * 2 ; %NWL%var width = bbox . width + doublePad ; %NWL%var height = bbox . height + doublePad ; %NWL%9
hide : function (  )  {%NWL%var visible = this . isVisible (  )  ; %NWL%mFind . Find . prototype . hide . call ( this )  ; %NWL%if ( visible )  {%NWL%this . _rootDiv . className =  " textViewFind "  ;  /  / $NON - NLS - 0$%NWL%}%NWL%}  ,%NWL%show : function ( options )  {%NWL%mFind . Find . prototype . show . call ( this , options )  ; %NWL%var findString = options . findString ; %NWL%var replaceString = options . replaceString ; %NWL%9
}  )%NWL%fs = fse%NWL%var copy = require (  '  .  / copy '  )%NWL%fs . copy = copy . copy%NWL%fs . copySync = copy . copySync%NWL%var remove = require (  '  .  / remove '  )%NWL%fs . remove = remove . remove%NWL%fs . removeSync = remove . removeSync%NWL%fs [  ' delete '  ]  = fs . remove%NWL%fs . deleteSync = fs . removeSync%NWL%var mkdir = require (  '  .  / mkdir '  )%NWL%2
}%NWL%]%NWL%}  )%NWL%define ( function ( require )  {%NWL%var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var data = seajs . data%NWL%test . assert ( data . map . length =  =  = 6 , data . map . length )%NWL%var a = require (  '  .  / a '  )%NWL%var b = require (  '  .  / b '  )%NWL%var c = require (  '  .  / c '  )%NWL%var d = require (  '  .  / d '  )%NWL%7
if ( titleAlignment =  =  =  " center "  )  {%NWL%xTitle = canWidth / 2 - ctx . measureText ( title )  . width / 2 ;%NWL%}%NWL%ctx . fillText ( title , xTitle , 2 * titleSize )  ;%NWL%}%NWL%if ( typeof previous ! =  =  " undefined "  )  {%NWL%var previousColor = myjson . previousColor ; %NWL%if ( typeof previousColor =  =  =  " undefined "  )  {%NWL%previousColor =  " gray "  ;%NWL%}%NWL%var up = myjson . up ; %NWL%6
var inherits = require (  ' inherits '  )%NWL%var EE = require (  ' events '  )  . EventEmitter%NWL%var path = require (  ' path '  )%NWL%var assert = require (  ' assert '  )%NWL%var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%var isAbsolute = common . isAbsolute%NWL%var setopts = common . setopts%NWL%var ownProp = common . ownProp%NWL%6
' use strict '  ; %NWL%var DOMProperty = require (  ' DOMProperty '  )  ; %NWL%var EventPluginHub = require (  ' EventPluginHub '  )  ; %NWL%var ReactComponentEnvironment = require (  ' ReactComponentEnvironment '  )  ; %NWL%var ReactClass = require (  ' ReactClass '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactNativeComponent = require (  ' ReactNativeComponent '  )  ; %NWL%var ReactDOMComponent = require (  ' ReactDOMComponent '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactRootIndex = require (  ' ReactRootIndex '  )  ; %NWL%1
}%NWL%return shaderCodeInfos ;%NWL%}%NWL%function processTextureMaps (  )  {%NWL%var textures =  [  ]  ; %NWL%for ( var s = 0 ; s < shaderCodeInfos . length ; s +  +  )  {%NWL%for ( var m = 0 ; m < shaderCodeInfos [ s ]  . originalMaterials . length ; m +  +  )  {%NWL%var material = shaderCodeInfos [ s ]  . originalMaterials [ m ]  ; %NWL%if ( material . map ! =  = undefined && material . map ! =  = null )%NWL%bindTexture ( material . map , shaderCodeInfos [ s ]  ,  " uMap0 "  )  ; %NWL%if ( material . env_map ! =  = undefined && material . env_map ! =  = null )%NWL%8
zoomOut : function ( event )  {%NWL%var axes = this . plot . getAxes (  )  ; %NWL%var xaxis = axes . xaxis ; %NWL%var yaxis = axes . yaxis ; %NWL%var center = this . plot . p2c (  { x :  ( xaxis . min + xaxis . max )  / 2 , y :  ( yaxis . min + yaxis . max )  / 2 }  )  ; %NWL%this . plot . zoom (  { amount : this . zoomFactor , center : center }  )  ; %NWL%this . plot . triggerRedrawOverlay (  )  ;%NWL%}  ,%NWL%zoomIn : function ( event )  {%NWL%var axes = this . plot . getAxes (  )  ; %NWL%var xaxis = axes . xaxis ; %NWL%3
if ( node . localName =  =  " element "  )%NWL%definition . element = true ; %NWL%definition . attributes =  [  ]  ; %NWL%definition . elements =  [  ]  ;%NWL%}%NWL%return definition ;%NWL%}  ; %NWL%SchemaProcessor . prototype . addElement = function ( node , definition , parentDef )  {%NWL%if ( !parentDef . schema )  {%NWL%var minOccurs = node . getAttribute (  " minOccurs "  )  ; %NWL%var maxOccurs = node . getAttribute (  " maxOccurs "  )  ; %NWL%9
define ( function ( require , exports , module )  {%NWL%main . consumes =  [%NWL%" Plugin "  ,  " proc "  ,  " c9 "  ,  " pubsub "  ,  " auth "%NWL%]  ; %NWL%main . provides =  [  " plugin . installer "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Plugin = imports . Plugin ; %NWL%var c9 = imports . c9 ; %NWL%var proc = imports . proc ; %NWL%var auth = imports . auth ; %NWL%7
window . clearInterval ( this . _intervalId )  ;%NWL%} else {%NWL%_bindObjects ( this . contentWindow , this . contentDocument )  ;%NWL%}%NWL%}  . bind ( this )  , 1 )  ;%NWL%}%NWL%function _bindObjectsToFrame ( frame )  {%NWL%_srcChangedObserver . observe ( frame ,  { attributes : true , attributeFilter :  [  " src "  ]  }  )  ; %NWL%frame . addEventListener (  " beforeload "  , _beforeLoad )  ; %NWL%var parentNode = frame . parentNode ; %NWL%var nextNode = frame . nextNode ; %NWL%9
}%NWL%this . $textbox . attr (  ' placeholder '  , value )  ;%NWL%}  ,%NWL%update : function ( options )  {%NWL%if ( options =  =  = undefined || options . updated_view ! = this )  {%NWL%if ( this . $textbox . val (  ) ! = this . model . get (  ' value '  )  )  {%NWL%this . $textbox . val ( this . model . get (  ' value '  )  )  ;%NWL%}%NWL%var disabled = this . model . get (  ' disabled '  )  ; %NWL%this . $textbox . prop (  ' disabled '  , disabled )  ; %NWL%var description = this . model . get (  ' description '  )  ; %NWL%8
var onFinished = require (  ' on - finished '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var mixin = require (  ' utils - merge '  )  ; %NWL%var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var contentDisposition = require (  '  .  / utils '  )  . contentDisposition ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%var send = require (  ' send '  )  ; %NWL%1
}  )  ;%NWL%}  )  ; %NWL%describe (  "  . getHeader "  , function (  )  {%NWL%it (  " returns undefined if the header does not exist "  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%expect ( URI . getHeader (  ' anything '  )  )  . toBeUndefined (  )  ;%NWL%}  )  ; %NWL%it (  ' returns an array of the header that it found '  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%var name =  ' name '  ; %NWL%var value =  ' value '  ; %NWL%9
if ( 0 =  =  = cellInfo . spannedY )  {%NWL%return cellInfo . cell ;%NWL%}%NWL%gridCi -  = cellInfo . spannedX + 1 ;%NWL%} while ( gridCi >  = 0 )  ; %NWL%return null ;%NWL%}  ,%NWL%' splitCell '  : function ( cell , createCell )  {%NWL%var $cell = $ ( cell )  ; %NWL%var colspan = Utils . colspan ( cell )  ; %NWL%var rowspan = Utils . rowspan ( cell )  ; %NWL%9
var uniforms = this . uniforms =  {%NWL%timeStep :  { type :  ' f '  , value : timeStep }  ,%NWL%}  ; %NWL%var uniforms2 = this . uniforms2 =  {%NWL%timeStep :  { type :  ' f '  , value :  - timeStep }  ,%NWL%}  ; %NWL%var uniforms3 = this . uniforms3 =  {%NWL%timeStep :  { type :  ' f '  , value : timeStep }  ,%NWL%field : field . uniform (  )  ,%NWL%}  ; %NWL%var uniforms4 = this . uniforms4 =  {%NWL%0
this . set ( mat )  ; %NWL%else%NWL%this . identity (  )  ;%NWL%}%NWL%THREE . Matrix4 . prototype . set = function ( mat , dest )  {%NWL%if ( !dest    ) dest = this . elements ; %NWL%if (  dest . elements ) dest = dest . elements ; %NWL%if (  mat . elements  ) mat  = mat . elements ; %NWL%dest [ 0  ]  = mat [ 0 ]  ; %NWL%dest [ 1  ]  = mat [ 1 ]  ; %NWL%dest [ 2  ]  = mat [ 2 ]  ; %NWL%8
if ( origin . CLASS_NAME =  =  " OpenLayers . LonLat "  )  {%NWL%origx = origin . lon ; %NWL%origy = origin . lat ;%NWL%} else {%NWL%origx = origin . x ; %NWL%origy = origin . y ;%NWL%}%NWL%var left =  ( this . left - origx )  * ratio + origx ; %NWL%var bottom =  ( this . bottom - origy )  * ratio + origy ; %NWL%var right =  ( this . right - origx )  * ratio + origx ; %NWL%var top =  ( this . top - origy )  * ratio + origy ; %NWL%8
ws . write ( xml )  ; %NWL%ws . end (  )  ;%NWL%}  ; %NWL%var defLog = false ; %NWL%setTimeout ( function (  )  {%NWL%if ( !defLog ) return ; %NWL%var def = soap_server . wsdl . definitions ; %NWL%var message = def . messages [ Object . keys ( def . messages )  [ 0 ]  ]  ; %NWL%var service = def . services [ Object . keys ( def . services )  [ 0 ]  ]  ; %NWL%var binding = def . bindings [ Object . keys ( def . bindings )  [ 0 ]  ]  ; %NWL%var portType = def . portTypes [ Object . keys ( def . portTypes )  [ 0 ]  ]  ; %NWL%7
var args = arguments ; %NWL%methods . forEach ( function ( method )  {%NWL%app [ method ]  . apply ( this , args )  ;%NWL%}  , this )  ; %NWL%return this ;%NWL%}  ; %NWL%app . del = app . delete ; %NWL%app . render = function ( name , options , fn )  {%NWL%var opts =  {  }%NWL%, cache = this . cache%NWL%, engines = this . engines%NWL%9
}%NWL%$ . expr [  '  :  '  ]  [  ' appeared '  ]  = function ( element )  {%NWL%var $element = $ ( element )  ; %NWL%if ( !$element . is (  '  : visible '  )  )  {%NWL%return false ;%NWL%}%NWL%var window_left = $window . scrollLeft (  )  ; %NWL%var window_top = $window . scrollTop (  )  ; %NWL%var offset = $element . offset (  )  ; %NWL%var left = offset . left ; %NWL%var top = offset . top ; %NWL%9
type :  ' menubutton '  ,%NWL%text :  ' Formats '  ,%NWL%menu : formatMenu%NWL%}  )  ; %NWL%editor . addButton (  ' formatselect '  , function (  )  {%NWL%var items =  [  ]  , blocks = createFormats ( editor . settings . block_formats ||%NWL%' Paragraph = p ;  '  +%NWL%' Address = address ;  '  +%NWL%' Pre = pre ;  '  +%NWL%' Header 1 = h1 ;  '  +%NWL%' Header 2 = h2 ;  '  +%NWL%9
}%NWL%return layoutFormat ;%NWL%}%NWL%drawGadgets (  )  ; %NWL%changeMode (  ' view '  )  ; %NWL%$ ( window )  . bind (  ' resize '  , resize )  ; %NWL%$ (  ' #btn - add - dummy - gadget '  )  . click ( function ( e )  {%NWL%e . preventDefault (  )  ; %NWL%var $dummy = $ (  ' #dummy - size '  )  ; %NWL%var w = Number ( $dummy . attr (  ' data - w '  )  )  ; %NWL%var h = Number ( $dummy . attr (  ' data - h '  )  )  ; %NWL%9
+  '  <  / html >  '%NWL%function generateEntry ( alias )  {%NWL%return (  ' module . exports = require (  "  '  + alias +  '  "  )  ; \n '  )%NWL%}%NWL%require (  ' tap '  )  . on (  ' end '  , function (  )  {%NWL%fs . unlinkSync ( entryFile )  ;%NWL%}  )%NWL%module . exports = function testLib ( t , opts )  {%NWL%var baseUrl  =  opts . baseUrl%NWL%, name   =  opts . name%NWL%, shimConfig =  opts . shimConfig%NWL%9
expect ( withoutOffset . getText (  )  )  . toEqual (  ' 3 people are viewing .  '  )  ; %NWL%expect ( withOffset . getText (  )  )  . toEqual (  ' Igor , Misko and one other person are viewing .  '  )  ; %NWL%countInput . clear (  )  ; %NWL%countInput . sendKeys (  ' 4 '  )  ; %NWL%expect ( withoutOffset . getText (  )  )  . toEqual (  ' 4 people are viewing .  '  )  ; %NWL%expect ( withOffset . getText (  )  )  . toEqual (  ' Igor , Misko and 2 other people are viewing .  '  )  ;%NWL%}  )  ; %NWL%it (  ' should show data - bound names '  , function (  )  {%NWL%var withOffset = element . all ( by . css (  ' ng - pluralize '  )  )  . get ( 1 )  ; %NWL%var personCount = element ( by . model (  ' personCount '  )  )  ; %NWL%var person1 = element ( by . model (  ' person1 '  )  )  ; %NWL%9
var Renderer = require (  '  .  / index '  )  ; %NWL%var DefaultRenderer = augment ( Renderer , function ( base )  {%NWL%this . constructor = function ( transitive )  {%NWL%base . constructor . call ( this , transitive )  ;%NWL%}  ; %NWL%this . render = function (  )  {%NWL%base . render . call ( this )  ; %NWL%var self = this ; %NWL%var display = this . transitive . display ; %NWL%var network = this . transitive . network ; %NWL%var options = this . transitive . options ; %NWL%8
Components . utils . import (  " resource :  /  / gre / modules / Services . jsm "  )  ; %NWL%Components . utils . import (  " resource :  /  / app / modules / urlHelper . jsm "  )  ; %NWL%const nsISupports    = Components . interfaces . nsISupports ; %NWL%const nsIBrowserDOMWindow  = Components . interfaces . nsIBrowserDOMWindow ; %NWL%const nsIBrowserHandler   = Components . interfaces . nsIBrowserHandler ; %NWL%const nsIBrowserHistory   = Components . interfaces . nsIBrowserHistory ; %NWL%const nsIChannel    = Components . interfaces . nsIChannel ; %NWL%const nsICommandLine   = Components . interfaces . nsICommandLine ; %NWL%const nsICommandLineHandler  = Components . interfaces . nsICommandLineHandler ; %NWL%const nsIContentHandler   = Components . interfaces . nsIContentHandler ; %NWL%const nsIDocShellTreeItem  = Components . interfaces . nsIDocShellTreeItem ; %NWL%2
var util = require (  ' util '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var Prana = require (  ' prana '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var multer = require (  ' multer '  )  ; %NWL%var methodOverride = require (  ' method - override '  )  ; %NWL%var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var lodash = require (  ' lodash '  )  ; %NWL%0
this . set (  ' scrollOffset '  , newOffset ,  { slient : true }  )%NWL%this . render (  )%NWL%}%NWL%}  ,%NWL%render : function ( firstOrLast )  {%NWL%if ( !this . get (  ' visible '  )  ) return%NWL%var screen = this . get (  ' screen '  )%NWL%var startLine = this . get (  ' line '  )%NWL%var col = this . get (  ' col '  )%NWL%var width = this . get (  ' width '  )%NWL%var height = this . get (  ' height '  )%NWL%6
} else {%NWL%this . messageViews [ found ]  . $el . before ( view . $el )  ;%NWL%}%NWL%this . messageViews . splice ( found , 0 , view )  ; %NWL%if ( isAtBottom || message . mine )  {%NWL%this . scrollToLastMessage (  )  ;%NWL%}%NWL%}  ,%NWL%_onScroll : function (  )  {%NWL%var scrollHeight = this . _scrollView . scrollHeight ; %NWL%var scrollTop = this . _scrollView . scrollTop ; %NWL%9
}%NWL%ServerError . prototype = Ember . create ( Error . prototype )  ; %NWL%ServerError . constructor = ServerError ; %NWL%DS . JsonApiAdapter . ServerError = ServerError ; %NWL%__exports__ [  " default "  ]  = DS . JsonApiAdapter ;%NWL%}  )  ; define (  " json - api - serializer "  ,%NWL%[  " exports "  ]  ,%NWL%function ( __exports__ )  {%NWL%" use strict "  ; %NWL%var get = Ember . get ; %NWL%var isNone = Ember . isNone ; %NWL%9
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
if ( error )  callback ( error )  ; %NWL%else {%NWL%var results ; %NWL%try {%NWL%results = JSON . parse ( data )  ;%NWL%}%NWL%catch ( e )  {%NWL%results = querystring . parse ( data )  ;%NWL%}%NWL%var access_token = results [  " access_token "  ]  ; %NWL%var refresh_token = results [  " refresh_token "  ]  ; %NWL%9
var config = require (  " config3 "  )  ; %NWL%var connect = require (  " connect "  )  ; %NWL%var events = require (  " events "  )  ; %NWL%var fs = require (  " fs "  )  ; %NWL%var glob = require (  " glob "  )  ; %NWL%var httpErrors = require (  " httperrors "  )  ; %NWL%var log = require (  " bole "  )  ( __filename )  ; %NWL%var markdown = require (  " markdown - js "  )  . makeHtml ; %NWL%var middleware = require (  "  .  / middleware "  )  ; %NWL%var moment = require (  " moment "  )  ; %NWL%var path = require (  " path "  )  ; %NWL%1
var id = req . id ; %NWL%var iid = req . iid ; %NWL%delete req . body . _id ; %NWL%delete req . body . _csrf ; %NWL%req . tasks . update (  { _id : id ,  ' comments . id '  : iid }  ,  { $set :  {  ' comments . $ '  : req . body }  }  , function ( err , result )  {%NWL%handleResult ( err , res , result , req . tasks , id )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . deleteTaskComment = function ( req , res )  {%NWL%var id = req . id ; %NWL%var iid = req . iid ; %NWL%0
var  argv = require (  ' optimist '  )%NWL%. usage (  " Usage : $0 -  - host [ host ]  -  - port [ port ]  -  - username [ username ]  -  - password [ password ]  -  - filename [ filename ]  -  - debug [ on / off ]  -  - networkdebug [ on / off ]  -  - tls [ on / off ]  "  )%NWL%. demand (  [  ' username '  ,  ' password '  ,  ' filename '  ]  )%NWL%. argv ; %NWL%var host = argv . host || " localhost "  ; %NWL%var port = argv . port || 110 ; %NWL%var debug = argv . debug =  =  =  " on " ? true : false ; %NWL%var tls = argv . tls =  =  =  " on " ? true : false ; %NWL%var filename = argv . filename ; %NWL%var username = argv . username ; %NWL%var password = argv . password ; %NWL%8
overRenderer = false ;%NWL%}  , false )  ; %NWL%animate (  )  ;%NWL%}%NWL%function createPoints (  )  {%NWL%var subgeo = new THREE . Geometry (  )  ; %NWL%console . log ( gridGeo )  ; %NWL%for ( i = 0 ; i < gridGeo . vertices . length ; i +  +  )  {%NWL%var x = gridGeo . vertices [ i ]  . position . x ; %NWL%var y = gridGeo . vertices [ i ]  . position . y ; %NWL%var z = gridGeo . vertices [ i ]  . position . z ; %NWL%8
expect ( 1 )  ; %NWL%var standard =  "  .  .  / example - images / test_standard . jpg "  ; %NWL%var zoom =  "  .  .  / example - images / test_zoom . jpg "  ; %NWL%var srcsetString =  "  .  .  / example - images / test_standard . jpg 1x ,  .  .  / example - images / test_zoom . jpg 2x "  ; %NWL%api . swap ( standard , zoom , srcsetString )  ; %NWL%equal ( api . $image . attr (  " srcset "  )  , srcsetString ,  " Standard image SRCSET changed "  )  ;%NWL%}  )  ; %NWL%test (  "  . swap ( standard , zoom , srcsetArray )  "  , function (  )  {%NWL%expect ( 1 )  ; %NWL%var standard =  "  .  .  / example - images / test_standard . jpg "  ; %NWL%var zoom =  "  .  .  / example - images / test_zoom . jpg "  ; %NWL%1
}%NWL%function toArray ( app )  {%NWL%var restarts = app . restarts%NWL%if ( restarts =  =  = 0 ) restarts = restarts . toString (  )  . green%NWL%if ( restarts > 0 && restarts < 10 ) restarts = restarts . toString (  )  . yellow%NWL%if ( restarts > 10 ) restarts = restarts . toString (  )  . red%NWL%var status = app . status%NWL%if ( status =  =  =  ' ON '  ) status = status . green%NWL%if ( status =  =  =  ' OFF '  ) status = status . magenta%NWL%if ( status =  =  =  ' BROKEN ' || status =  =  =  ' ERROR '  ) status = status . red%NWL%var uptime = app . uptime%NWL%2
goog . provide (  ' thin . core . MarginGuideHelper '  )  ; %NWL%goog . require (  ' goog . math . Box '  )  ; %NWL%goog . require (  ' thin . core . Component '  )  ; %NWL%goog . require (  ' thin . core . MarginGuide '  )  ; %NWL%thin . core . MarginGuideHelper = function ( layout , margins )  {%NWL%thin . core . Component . call ( this , layout )  ; %NWL%var size = layout . getNormalLayoutSize (  )  ; %NWL%var top = margins . top ; %NWL%var left = margins . left ; %NWL%var height = size . height ; %NWL%var width = size . width ; %NWL%9
_send (  { method :  ' error '  , params : error }  )  ; %NWL%_sessionErrorSent = true ;%NWL%}  ; %NWL%var _sessionStopHandler = function _sessionStopHandler ( reason )  {%NWL%_reason = reason ; %NWL%_send (  { method :  ' stop '  , params :  { reason : reason }  }  )  ;%NWL%}  ; %NWL%var _sessionPauseHandler = function _sessionPauseHandler (  )  {%NWL%_send (  { method :  ' pause '  }  )  ;%NWL%}  ; %NWL%var _sessionResumeHandler = function _sessionResumeHandler (  )  {%NWL%7
assertExpr (  "  ( x / y )  "  , binExpr (  "  /  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % y )  "  , binExpr (  " % "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | y )  "  , binExpr (  " | "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%8
var path = require (  ' path '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var constants = require (  ' constants '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var sprintf = require (  ' sprintf '  )  . sprintf ; %NWL%var config = require (  ' util / config '  )  ; %NWL%var misc = require (  ' util / misc '  )  ; %NWL%var flowctrl = require (  ' util / flow_control '  )  ; %NWL%var fsutil = require (  ' util / fs '  )  ; %NWL%var certgen = require (  ' security / certgen . js '  )  ; %NWL%var norris = require (  ' norris '  )  ; %NWL%0
var Canvas = require (  ' canvas '  )  ,%NWL%Image = Canvas . Image ; %NWL%var mootools = require (  ' mootools '  )  ; %NWL%var net = require (  ' net '  )  ; %NWL%var sys = require (  ' sys '  )  ; %NWL%var ConfigParams = require (  '  .  / ConfigParams '  )  . ConfigParams ; %NWL%var labqueueClient = ConfigParams . LABQUEUE_USE_HTTPS ? require (  ' https '  )  : require (  ' http '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var BitmapImageProcessor = require (  '  .  / BitmapImageProcessor '  )  . BitmapImageProcessor ; %NWL%var GCodeImageProcessor = require (  '  .  / GCodeImageProcessor '  )  . GCodeImageProcessor ; %NWL%5
function _injectJS ( name , file , callback )  {%NWL%_inject ( name , file , function (  )  {%NWL%var script = document . createElement (  ' script '  )  ; %NWL%script . type =  ' text / javascript '  ; %NWL%script . src = file ; %NWL%return script ;%NWL%}  , callback )  ;%NWL%}%NWL%function _injectCSS ( name , file , callback )  {%NWL%_inject ( name , file , function (  )  {%NWL%var link = document . createElement (  ' link '  )  ; %NWL%2
var mock =  { isConnected : function (  )  {%NWL%return true ;%NWL%}  }  ; %NWL%module ( function ( $provide )  {%NWL%$provide . value (  ' ElasticService '  , mock )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%beforeEach ( angular . mock . inject ( function ( $rootScope , $controller , $injector )  {%NWL%this . scope = $rootScope . $new (  )  ; %NWL%var $timeout = $injector . get (  ' $timeout '  )  ; %NWL%var $location = $injector . get (  ' $location '  )  ; %NWL%9
element . style . color = fill . getColor (  ) || fill . getColor1 (  )  ;%NWL%}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%8
var s2 =  ( k . modInverse ( q )  . multiply ( hash . add ( x . multiply ( s1 )  )  )  )  . mod ( q )  ; %NWL%var result = KJUR . asn1 . ASN1Util . jsonToASN1HEX (  {%NWL%' seq '  :  [  {  ' int '  :  {  ' bigint '  : s1 }  }  ,  {  ' int '  :  {  ' bigint '  : s2 }  }  ]%NWL%}  )  ; %NWL%return result ;%NWL%}  ; %NWL%this . verifyWithMessageHash = function ( sHashHex , hSigVal )  {%NWL%var p = this . p ; %NWL%var q = this . q ; %NWL%var g = this . g ; %NWL%var y = this . y ; %NWL%7
return ;%NWL%}%NWL%cb ( null , data , stderr )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%ExecBuffer . prototype . clean = function ( cb )  {%NWL%var src = this . src (  )  ; %NWL%var dest = this . dest (  )  ; %NWL%9
tests_finished_at : new Date (  )  ,%NWL%last_uncaught_exception : err . message%NWL%}%NWL%}  ,  {%NWL%upsert : false%NWL%}  , function (  )  {%NWL%process . abort (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%var PluginTest = models . PluginTest ; %NWL%var PageTestLog = models . PageTestLog ; %NWL%9
. directive (  ' chat '  ,  [  ' Socket '  ,  ' MapHandler '  ,  ' Tooltip '  ,%NWL%function ( Socket , MapHandler , Tooltip )  {%NWL%return {%NWL%templateUrl :  ' partials / chat '  ,%NWL%restrict :  ' E '  ,%NWL%scope :  {  }  ,%NWL%link : function postLink ( $scope , element )  {%NWL%$scope . messages =  [  ]  ; %NWL%$scope . chatMessage =  '  '  ; %NWL%var mapId = $scope . $parent . mapId ; %NWL%var userName = $scope . $parent . userName ; %NWL%9
var ReplSet = require (  '  .  / repl_set '  )  . ReplSet ; %NWL%return function ( err , doc )  {%NWL%server . close (  )  ; %NWL%if ( self . _state . isPrimary ( server )  )  {%NWL%self . _state . master =  = null ; %NWL%self . _serverState = ReplSet . REPLSET_READ_ONLY ;%NWL%} else if ( self . _state . isSecondary ( server )  )  {%NWL%delete self . _state . secondaries [ server . name ]  ;%NWL%}%NWL%var host = server . socketOptions . host ; %NWL%var port = server . socketOptions . port ; %NWL%9
' orion / commandRegistry '  ,%NWL%' orion / git / gitPreferenceStorage '  ,%NWL%' orion / git / logic / gitCommon '  ,%NWL%' orion / Deferred '  ,%NWL%' orion / objects '%NWL%]  , function ( messages , mCommandRegistry , GitPreferenceStorage , mGitCommon , Deferred , objects )  {%NWL%var handleGitServiceResponse = mGitCommon . handleGitServiceResponse ; %NWL%var gatherSshCredentials = mGitCommon . gatherSshCredentials ; %NWL%return function ( dependencies )  {%NWL%var serviceRegistry = dependencies . serviceRegistry ; %NWL%var commandService = dependencies . commandService ; %NWL%9
}  )  ;%NWL%}%NWL%else%NWL%{%NWL%console . debug (  ' not facebook '  )  ;%NWL%}%NWL%var re = new RegExp (  " \ [  [ a - z ]  + \ ]  "  ,  " g "  )  ; %NWL%jQuery . each ( nodes , function ( chatNode , messageNode )%NWL%{%NWL%console . debug (  " ### chatNode =  "  + chatNode )  ; %NWL%console . debug (  " ### messageNode =  "  + messageNode )  ; %NWL%9
var syntaxError = require (  ' syntax - error '  )  ; %NWL%var builtins = require (  '  .  / lib / builtins . js '  )  ; %NWL%var splicer = require (  ' labeled - stream - splicer '  )  ; %NWL%var through = require (  ' through2 '  )  ; %NWL%var concat = require (  ' concat - stream '  )  ; %NWL%var duplexer = require (  ' duplexer2 '  )  ; %NWL%var inherits = require (  ' inherits '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var xtend = require (  ' xtend '  )  ; %NWL%var copy = require (  ' shallow - copy '  )  ; %NWL%var isarray = require (  ' isarray '  )  ; %NWL%6
var utils = aWindow . QueryInterface ( Components . interfaces . nsIInterfaceRequestor )  .%NWL%getInterface ( Components . interfaces . nsIDOMWindowUtils )  ; %NWL%if ( utils )  {%NWL%const kIsVertical = 0x02 ; %NWL%const kIsHorizontal = 0x04 ; %NWL%const kHasPixels = 0x08 ; %NWL%var button = aEvent . button || 0 ; %NWL%var modifiers = _parseModifiers ( aEvent )  ; %NWL%var rect = aTarget . getBoundingClientRect (  )  ; %NWL%var left = rect . left ; %NWL%var top = rect . top ; %NWL%9
. dontMock (  ' EventPluginHub '  )%NWL%. dontMock (  ' ReactMount '  )%NWL%. dontMock (  ' ReactEventEmitter '  )%NWL%. dontMock (  ' ReactInstanceHandles '  )%NWL%. dontMock (  ' EventPluginHub '  )%NWL%. dontMock (  ' TapEventPlugin '  )%NWL%. dontMock (  ' TouchEventUtils '  )%NWL%. dontMock (  ' keyOf '  )  ; %NWL%var keyOf = require (  ' keyOf '  )  ; %NWL%var mocks = require (  ' mocks '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%8
var stop = stops [ i ]  ; %NWL%colors . push ( stop . offset * expansion + shift +  '  '  + stop . color )  ;%NWL%}%NWL%lineStr . push (  '  < g_vml_ : fill type =  "  '  , fillStyle . type_ ,  '  "  '  ,%NWL%' method =  " none " focus =  " 100% "  '  ,%NWL%' color =  "  '  , color1 ,  '  "  '  ,%NWL%' color2 =  "  '  , color2 ,  '  "  '  ,%NWL%' colors =  "  '  , colors . join (  '  ,  '  )  ,  '  "  '  ,%NWL%' opacity =  "  '  , opacity2 ,  '  "  '  ,%NWL%' g_o_ : opacity2 =  "  '  , opacity1 ,  '  "  '  ,%NWL%' angle =  "  '  , angle ,  '  "  '  ,%NWL%6
unbuild . usage =  " npm unbuild < folder > \n ( this is plumbing )  "%NWL%var readJson = require (  " read - package - json "  )%NWL%, gentlyRm = require (  "  .  / utils / gently - rm . js "  )%NWL%, npm = require (  "  .  / npm . js "  )%NWL%, path = require (  " path "  )%NWL%, isInside = require (  " path - is - inside "  )%NWL%, lifecycle = require (  "  .  / utils / lifecycle . js "  )%NWL%, asyncMap = require (  " slide "  )  . asyncMap%NWL%, chain = require (  " slide "  )  . chain%NWL%, log = require (  " npmlog "  )%NWL%, build = require (  "  .  / build . js "  )%NWL%3
{%NWL%this . updateFrame = true ;%NWL%}  ; %NWL%PIXI . Strip . prototype . getBounds = function ( matrix )%NWL%{%NWL%var worldTransform = matrix || this . worldTransform ; %NWL%var a = worldTransform . a ; %NWL%var b = worldTransform . b ; %NWL%var c = worldTransform . c ; %NWL%var d = worldTransform . d ; %NWL%var tx = worldTransform . tx ; %NWL%7
if ( typeof define =  =  =  " undefined "  )  {%NWL%require (  " amd - loader "  )  ; %NWL%require (  "  .  .  /  .  .  / test / setup_paths "  )  ;%NWL%}%NWL%var fs = require (  " fs "  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var baseTest = require (  '  .  .  / c9 . api / base_test '  )  ; %NWL%var child = require (  " child_process "  )  ; %NWL%var expect = require (  " chai "  )  . expect ; %NWL%var assert = require (  " assert "  )  ; %NWL%var sinon = require (  " sinon "  )  ; %NWL%4
}  )  ;%NWL%}  )  ;%NWL%[  {%NWL%arg : true ,%NWL%method :  " realZeroToOneInclusive "%NWL%}  ,  {%NWL%arg : false ,%NWL%method :  " realZeroToOneExclusive "%NWL%}  ]  . forEach ( function ( o )  {%NWL%var arg = o . arg ; %NWL%var method = o . method ; %NWL%9
var ReactCompositeComponent = require (  ' ReactCompositeComponent '  )  ; %NWL%var ReactContext = require (  ' ReactContext '  )  ; %NWL%var ReactCurrentOwner = require (  ' ReactCurrentOwner '  )  ; %NWL%var ReactDOM = require (  ' ReactDOM '  )  ; %NWL%var ReactDOMComponent = require (  ' ReactDOMComponent '  )  ; %NWL%var ReactDefaultInjection = require (  ' ReactDefaultInjection '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactPropTypes = require (  ' ReactPropTypes '  )  ; %NWL%0
x , y , radius , startAngle , endAngle , antiClockwise%NWL%)  . segments (  )%NWL%)  . attr (  {%NWL%x : x ,%NWL%y : y%NWL%}  )  ;%NWL%}  ; %NWL%var PI = Math . PI ; %NWL%var PI2 = PI * 2 ; %NWL%var sin = Math . sin ; %NWL%var cos = Math . cos ; %NWL%7
body1 . w -  =  ( vec2 . cross ( this . r1 , lambda_xy )  + lambda_z )  * body1 . i_inv ; %NWL%body2 . v . mad ( lambda_xy , body2 . m_inv )  ; %NWL%body2 . w +  =  ( vec2 . cross ( this . r2 , lambda_xy )  + lambda_z )  * body2 . i_inv ;%NWL%}%NWL%else {%NWL%this . lambda_acc . set ( 0 , 0 , 0 )  ;%NWL%}%NWL%}%NWL%WeldJoint . prototype . solveVelocityConstraints = function (  )  {%NWL%var body1 = this . body1 ; %NWL%var body2 = this . body2 ; %NWL%9
module . exports = unbuild%NWL%unbuild . usage =  " npm unbuild < folder > \n ( this is plumbing )  "%NWL%var readJson = require (  " read - package - json "  )%NWL%, rm = require (  "  .  / utils / gently - rm . js "  )%NWL%, gentlyRm = require (  "  .  / utils / gently - rm . js "  )%NWL%, npm = require (  "  .  / npm . js "  )%NWL%, path = require (  " path "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, lifecycle = require (  "  .  / utils / lifecycle . js "  )%NWL%, asyncMap = require (  " slide "  )  . asyncMap%NWL%, chain = require (  " slide "  )  . chain%NWL%9
}  ,%NWL%_displayError : function Sys_Mvc_FieldContext$_displayError (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%if ( validationMessageElement )  {%NWL%if ( this . replaceValidationMessageContents )  {%NWL%Sys . Mvc . _validationUtil . setInnerText ( validationMessageElement , this . _errors [ 0 ]  )  ;%NWL%}%NWL%Sys . UI . DomElement . removeCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%2
var mostActiveNs =  ' http :  /  / buddycloud . com / channel_directory / most_active '  ; %NWL%exports . setup = function ( app )  {%NWL%app . get (  '  / most_active '  ,%NWL%session . provider ,%NWL%getMostActive )  ;%NWL%}  ; %NWL%function getMostActive ( req , res )  {%NWL%var params = url . parse ( req . url , true )  . query%NWL%, max = params . max%NWL%, index = params . index%NWL%, domain = params . domain%NWL%8
if ( null =  = jobObj )  {%NWL%logutils . logger . error (  " In createJobAtInit (  )  : jobObj is null "  )  ; %NWL%return ;%NWL%}%NWL%var jobName = jobObj [  ' jobName '  ]  ; %NWL%if ( null =  = jobName )  {%NWL%logutils . logger . error (  " In createJobAtInit (  )  : jobName is null "  )  ; %NWL%assert ( 0 )  ;%NWL%}%NWL%var url = jobObj [  ' url '  ]  ; %NWL%var firstRunDelay = jobObj [  ' firstRunDelay '  ]  ; %NWL%4
text :  ' Added node succesfully '  ,%NWL%iconCls :  ' x - status - valid '  ,%NWL%clear : true%NWL%}  )  ;%NWL%}%NWL%}  ,%NWL%deleteSelectedNode : function (  )  {%NWL%var sm = this . getSelectionModel (  )  ; %NWL%var selectedNode = sm . getSelectedNode (  )  ; %NWL%var previousSibling = selectedNode . previousSibling ; %NWL%var parentNode = selectedNode . parentNode ; %NWL%9
var stencilset = ORYX . Core . StencilSet . stencilSet ( 3 )%NWL%fail (  " Test should fail yet for number used as namespace .  "  )%NWL%} catch ( e )  {%NWL%if ( ! ( e instanceof JsUnitException )  )  {%NWL%throw e%NWL%}%NWL%}%NWL%}%NWL%function testGetStencilSetsForEditorInstance (  )  {%NWL%var stencilset1 = new ORYX . Core . StencilSet . StencilSet (  " http :  /  / www . firstexample . org / stencilset1# "  )%NWL%var stencilset2 = new ORYX . Core . StencilSet . StencilSet (  " http :  /  / www . firstexample . org / stencilset2# "  )%NWL%9
}%NWL%else if ( !this . options . verifyClient ( info )  )  {%NWL%abortConnection ( socket , 401 ,  ' Unauthorized '  )  ; %NWL%return ;%NWL%}%NWL%}%NWL%completeUpgrade . apply ( this , args )  ;%NWL%}%NWL%function completeUpgrade ( req , socket , upgradeHead , version , cb )  {%NWL%var protocol = req . headers [  ' sec - websocket - protocol '  ]  ; %NWL%var key = req . headers [  ' sec - websocket - key '  ]  ; %NWL%9
var security_management_capabilitieswidget = southPanel . down (  ' security_management_capabilitieswidget '  )  ; %NWL%security_management_capabilitieswidget . assign_to_id = assign_to_id ; %NWL%security_management_capabilitieswidget . assign_to_description = assign_to_description ; %NWL%var security_management_groupseffectivesecurity = southPanel . down (  ' security_management_groupseffectivesecurity '  )  ; %NWL%security_management_groupseffectivesecurity . assign_to_id = assign_to_id ; %NWL%security_management_groupseffectivesecurity . assign_to_description = assign_to_description ;%NWL%}  ,%NWL%unsetGroup : function (  )  {%NWL%var security_management_rolespanel = this ; %NWL%var southPanel = Ext . ComponentQuery . query (  ' security_management_southpanel '  )  . first (  )  ; %NWL%var security_management_userswidget = southPanel . down (  ' security_management_userswidget '  )  ; %NWL%0
conversionTable . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%for ( var i = 0 ; i < palettes . length ; i +  +  )  {%NWL%var palette = palettes [ i ]  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%tr . className =  ' source_palette '  ; %NWL%var th = document . createElement (  ' th '  )  ; %NWL%th . appendChild ( document . createTextNode ( i )  )  ; %NWL%tr . appendChild ( th )  ; %NWL%for ( var j = 0 ; j < palette . length ; j +  +  )  {%NWL%var td = document . createElement (  ' td '  )  ; %NWL%1
'  < p > Load each '  + ext +  ' files to detect errors <  / p >  '  +%NWL%'  < div >  < strong > Progress :  <  / strong >  < span id =  " log "  >  <  / span >  <  / div >  '  +%NWL%'  < br /  >  '  +%NWL%'  < div id =  " error "  >  '  +%NWL%'  < h1 > Errors :  <  / h1 >  '  +%NWL%'  <  / div >  '  ; %NWL%document . body . style . backgroundColor =  ' white '  ; %NWL%document . body . style . overflow   =  ' auto '  ; %NWL%document . body . style . userSelect   =  ' text '  ; %NWL%var log  = document . getElementById (  ' log '  )  ; %NWL%var error = document . getElementById (  ' error '  )  ; %NWL%9
, mkdirp = require (  " mkdirp "  )%NWL%, spawn = require (  " child_process "  )  . spawn%NWL%, npm = require . resolve (  "  .  .  /  .  .  / bin / npm - cli . js "  )%NWL%, node = process . execPath%NWL%, pkg = path . resolve ( __dirname ,  " sorted - package - json "  )%NWL%, tmp = path . join ( pkg ,  " tmp "  )%NWL%, cache = path . join ( pkg ,  " cache "  )%NWL%, fs = require (  " fs "  )%NWL%, common = require (  "  .  .  / common - tap . js "  )%NWL%, mr = require (  " npm - registry - mock "  )%NWL%, osenv = require (  " osenv "  )%NWL%0
goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%var align = this . align_ ; %NWL%var font = this . font_ ; %NWL%5
}  )  ; %NWL%ace . define (  ' ace / mode / sh_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
type :  ' basic '  ,%NWL%labelSize : 2 ,%NWL%inputSize : 10%NWL%}  ; %NWL%$autofieldsProvider . registerMutator (  ' horizontalForm '  , function ( directive , field , fieldElements )  {%NWL%if ( ! ( directive . options . layout && directive . options . layout . type =  =  ' horizontal '  )  )  {%NWL%directive . container . removeClass (  ' form - horizontal '  )  ; %NWL%return fieldElements ;%NWL%}%NWL%var col = $autofieldsProvider . settings . classes . col [ 0 ]  ; %NWL%var colOffset = $autofieldsProvider . settings . classes . colOffset [ 0 ]  ; %NWL%9
scope . showAM = !!formats [ 3 ]  ; %NWL%scope . isAM =  ( $timepicker . $date || hours [ midIndex ]  . date )  . getHours (  )  < 12 ; %NWL%scope . timeSeparator = formats [ 1 ]  ; %NWL%$timepicker . $isBuilt = true ;%NWL%}  ; %NWL%$timepicker . $isSelected = function ( date , index )  {%NWL%if ( !$timepicker . $date ) return false ; %NWL%else if ( index =  =  = 0 )  {%NWL%return date . getHours (  )  =  =  = $timepicker . $date . getHours (  )  ;%NWL%} else if ( index =  =  = 1 )  {%NWL%return date . getMinutes (  )  =  =  = $timepicker . $date . getMinutes (  )  ; %NWL%8
test (  '  . createShadowRoot must create a WebKitShadowRoot instance '  , function (  )  {%NWL%var host = document . createElement (  ' div '  )  ; %NWL%var result = polyfill . Declaration . prototype . createShadowRoot . call (  {%NWL%template :  { childNodes :  [  ]  }%NWL%}  , host )  ; %NWL%equal ( result . __proto__ . constructor , WebKitShadowRoot )  ;%NWL%}  )  ; %NWL%test (  '  . createShadowRoot must clone template child nodes into the newly created WebKitShadowRoot instance '  , function (  )  {%NWL%var host = document . createElement (  ' div '  )  ; %NWL%var span = host . appendChild ( document . createElement (  ' span '  )  )  ; %NWL%var b = host . appendChild ( document . createElement (  ' b '  )  )  ; %NWL%9
options . push ( set )  ;%NWL%}%NWL%this . select ( name , styles )  ; %NWL%var picker = document . getElementById (  ' themepicker '  )  ; %NWL%if ( !this . themeSelect )  {%NWL%this . themeSelect = new Select (  {%NWL%options : options ,%NWL%postChange : this . selectTheme . bind ( this )%NWL%}  , picker )  ; %NWL%this . themeSelect . show (  )  ; %NWL%var saver = document . getElementById (  ' themesaver '  )  ; %NWL%3
}%NWL%}  )  ; %NWL%changeNode1 . receive (  { payload :  " payload "  }  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' sends unaltered message if a deleted multi - level message property does not exist '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " changeNode1 "  ,  " type "  :  " change "  ,  " action "  :  " delete "  ,  " property "  :  " foo . bar "  ,  " from "  :  "  "  ,  " to "  :  "  "  ,  " reg "  : false ,  " name "  :  " changeNode "  ,  " wires "  :  [  [  " helperNode1 "  ]  ]  }  ,%NWL%{ id :  " helperNode1 "  , type :  " helper "  , wires :  [  ]  }  ]  ; %NWL%helper . load ( changeNode , flow , function (  )  {%NWL%var changeNode1 = helper . getNode (  " changeNode1 "  )  ; %NWL%var helperNode1 = helper . getNode (  " helperNode1 "  )  ; %NWL%9
}  ,%NWL%removeChildren : function ( parent )  {%NWL%var child ; %NWL%while ( child = parent . firstChild )  {%NWL%DOM . remove ( child )  ;%NWL%}%NWL%}  ,%NWL%getBoundingBox : function ( el )  {%NWL%var rect = el . getBoundingClientRect (  )  ; %NWL%var scrollLeft = document . body . scrollLeft || document . documentElement . scrollLeft ; %NWL%var scrollTop = document . body . scrollTop || document . documentElement . scrollTop ; %NWL%9
}  )  ; %NWL%exports . buildNavigationPlan = buildNavigationPlan ; %NWL%var NO_CHANGE =  ' no - change '  ; %NWL%exports . NO_CHANGE = NO_CHANGE ; %NWL%var INVOKE_LIFECYCLE =  ' invoke - lifecycle '  ; %NWL%exports . INVOKE_LIFECYCLE = INVOKE_LIFECYCLE ; %NWL%var REPLACE =  ' replace '  ; %NWL%exports . REPLACE = REPLACE ; %NWL%function buildNavigationPlan ( navigationContext , forceLifecycleMinimum )  {%NWL%var prev = navigationContext . prevInstruction ; %NWL%var next = navigationContext . nextInstruction ; %NWL%9
this . selectDate ( new Date ( this . selectedDate . getFullYear (  )  ,%NWL%this . selectedDate . getMonth (  )  + months ,%NWL%this . selectedDate . getDate (  )  + days )  )  ;%NWL%}%NWL%, proxy : function ( meth )  {%NWL%this [ meth ]  = $ . proxy ( this [ meth ]  , this )  ; %NWL%return this ;%NWL%}%NWL%, daysBetween : function ( start , end )  {%NWL%var start = Date . UTC ( start . getFullYear (  )  , start . getMonth (  )  , start . getDate (  )  )  ; %NWL%var end = Date . UTC ( end . getFullYear (  )  , end . getMonth (  )  , end . getDate (  )  )  ; %NWL%9
var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactCurrentOwner = require (  ' ReactCurrentOwner '  )  ; %NWL%var ReactElement = require (  ' ReactElement '  )  ; %NWL%var ReactElementValidator = require (  ' ReactElementValidator '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%var ReactMarkupChecksum = require (  ' ReactMarkupChecksum '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactReconciler = require (  ' ReactReconciler '  )  ; %NWL%var ReactUpdateQueue = require (  ' ReactUpdateQueue '  )  ; %NWL%0
_setOption (  ' end_number '  , null )  ; %NWL%_setOption (  ' timer '  , 0 )  ; %NWL%_setOption (  ' animating '  , false )  ; %NWL%var onAnimationStopped = _getOption (  ' onAnimationStopped '  )  ; %NWL%if ( typeof onAnimationStopped =  =  ' function '  ) onAnimationStopped . call ( obj , obj )  ;%NWL%}%NWL%function _pauseAnimation (  )  {%NWL%if ( true ! =  = _getOption (  ' animating '  )  ) return false ; %NWL%_setOption (  ' paused '  , true )  ; %NWL%clearInterval ( _getOption (  ' interval '  )  )  ; %NWL%var onAnimationPaused = _getOption (  ' onAnimationPaused '  )  ; %NWL%3
Queue . prototype . push = function ( value )  {%NWL%var length = this . length ; %NWL%if ( this . capacity <  = length )  {%NWL%this . grow ( this . snap ( this . capacity * this . growFactor )  )  ;%NWL%}%NWL%var index =  ( this . front + length ) & ( this . capacity - 1 )  ; %NWL%this [ index ]  = value ; %NWL%this . length = length + 1 ;%NWL%}  ; %NWL%Queue . prototype . shift = function (  )  {%NWL%var front = this . front ; %NWL%1
var args = testUtil . parseArguments ( ARGUMENTS , process . argv )  ; %NWL%var testPath = args [  ' test_path '  ]  ; %NWL%var socketPath = args [  ' socket_path '  ]  ; %NWL%var cwd = args [  ' cwd '  ]  ; %NWL%var libCovDir = args [  ' lib_cov_dir '  ]  ; %NWL%var scopeLeaks = args [  ' scope_leaks '  ]  ; %NWL%var chdir = args [  ' chdir '  ]  ; %NWL%var customAssertModule = args [  ' custom_assert_module '  ]  ; %NWL%var testInitFile = args [  ' init_file '  ]  ; %NWL%var timeout = args [  ' timeout '  ]  ; %NWL%var concurrency = args [  ' concurrency '  ]  ; %NWL%3
goog . asserts . assert ( goog . isDef ( this . originX_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . originY_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . rotateWithView_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . rotation_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . scale_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . width_ )  )  ; %NWL%var anchorX = this . anchorX_ ; %NWL%var anchorY = this . anchorY_ ; %NWL%var height = this . height_ ; %NWL%var imageHeight = this . imageHeight_ ; %NWL%var imageWidth = this . imageWidth_ ; %NWL%6
render : function ( context , firstTime )  {%NWL%var content = this . get (  ' content '  )  ; %NWL%if ( content )  {%NWL%if ( !this . get (  ' contentIndex '  )  ) context . addClass (  ' first - assignee - item '  )  ; %NWL%context . addClass (  ' assignee - item '  )  ; %NWL%var assignee = content . getPath (  ' assignee '  )  ; %NWL%var icon = assignee? assignee . get (  ' icon '  )  : sc_static (  ' images / unassigned . jpg '  )  ; %NWL%context = context . begin (  ' img '  )  . addClass (  ' gravatar '  )  . attr (  ' src '  , icon )  . end (  )  ; %NWL%var tasksCount = content . get (  ' tasksCount '  )  ; %NWL%var assigneeTooltip ; %NWL%var loading = content . get (  ' loading '  )  ; %NWL%8
var gulp = require (  ' gulp '  )%NWL%var eslint = require (  ' gulp - eslint '  )%NWL%var concat = require (  ' gulp - concat '  )%NWL%var uglify = require (  ' gulp - uglify '  )%NWL%var rename = require (  ' gulp - rename '  )%NWL%var header = require (  ' gulp - header '  )%NWL%var footer = require (  ' gulp - footer '  )%NWL%var tap = require (  ' gulp - tap '  )%NWL%var merge = require (  ' merge - stream '  )%NWL%var pkg = require (  '  .  / package . json '  )%NWL%var path = require (  ' path '  )%NWL%0
_bindMouseEvents : function ( chartElement )  {%NWL%var self = this ; %NWL%var tooltipOptions = this . options . tooltipOptions ; %NWL%chartElement . on (  ' mouseover '  , function ( e )  {%NWL%var currentOptions = this . options ; %NWL%var key = currentOptions . key ; %NWL%var value = currentOptions . value ; %NWL%var layerPoint = e . layerPoint ; %NWL%var x = layerPoint . x - this . _point . x ; %NWL%var y = layerPoint . y - this . _point . y ; %NWL%var iconSize = currentOptions . iconSize ; %NWL%5
Module . wrap = NativeModule . wrap ; %NWL%var path = NativeModule . require (  ' path '  )  ; %NWL%Module . _debug = function (  )  {  }  ; %NWL%if ( process . env . NODE_DEBUG && / module /  . test ( process . env . NODE_DEBUG )  )  {%NWL%Module . _debug = function ( x )  {%NWL%console . error ( x )  ;%NWL%}  ;%NWL%}%NWL%var debug = Module . _debug ; %NWL%function statPath ( path )  {%NWL%var fs = NativeModule . require (  ' fs '  )  ; %NWL%1
function ( item )  {%NWL%self . _updateItem ( item )  ;%NWL%}%NWL%)  ;%NWL%}%NWL%this . _call_backs ( this . items )  ;%NWL%}  ,%NWL%_updateItem : function ( item )  {%NWL%var jid    = item . getAttribute (  " jid "  )  ; %NWL%var name    = item . getAttribute (  " name "  )  ; %NWL%var subscription  = item . getAttribute (  " subscription "  )  ; %NWL%8
var gulp = require (  ' gulp '  )  ; %NWL%var util = require (  ' gulp - util '  )  ; %NWL%var clean = require (  ' gulp - clean '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var requirejs = require (  ' gulp - requirejs '  )  ; %NWL%var bowerRequirejs = require (  ' bower - requirejs '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var less = require (  ' gulp - less '  )  ; %NWL%var inject = require (  ' gulp - inject '  )  ; %NWL%var replace = require (  ' gulp - replace '  )  ; %NWL%var bump = require (  ' gulp - bump '  )  ; %NWL%1
( regExpCache [ className ]  = new RegExp (  '  ( ? : ^|\\s +  )  '  + className +  '  ( ? : \\s + |$ )  '  )  )  ;%NWL%}%NWL%var hasClass = aristocrat . hasClass = function ( el , className )  {%NWL%return getRegExp ( className )  . test ( el . className )  ;%NWL%}  ; %NWL%var addClass = aristocrat . addClass = function ( el , className )  {%NWL%if ( !hasClass ( el , className )  )  {%NWL%el . className = el . className +  '  '  + className ;%NWL%}%NWL%}  ; %NWL%var removeClass = aristocrat . removeClass = function ( el , className )  {%NWL%2
update : 1 / 10 ,%NWL%render : 0%NWL%}  ,%NWL%viewport :  {%NWL%fullscreen : false%NWL%}%NWL%}  , data )  ; %NWL%lychee . game . Main . call ( this , settings )  ; %NWL%this . bind (  ' load '  , function ( oncomplete )  {%NWL%var bootup  = document . querySelector (  ' #status - bootup '  )  ; %NWL%var connect = document . querySelector (  ' #status - connect '  )  ; %NWL%9
goog . require (  ' p3rf . perfkit . explorer . models . perfkit_simple_builder . MetadataFilter '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . perfkit_simple_builder . QueryColumnModel '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . perfkit_simple_builder . QueryConfigModel '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . perfkit_simple_builder . QueryFilterModel '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . perfkit_simple_builder . QueryTablePartitioning '  )  ; %NWL%goog . scope ( function (  )  {%NWL%var explorer = p3rf . perfkit . explorer ; %NWL%var DateFilter = explorer . models . perfkit_simple_builder . DateFilter ; %NWL%var DateFilterType = explorer . models . perfkit_simple_builder . DateFilterType ; %NWL%var Filter = explorer . components . query_builder . Filter ; %NWL%var FilterClause = explorer . components . query_builder . FilterClause ; %NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
TermState . prototype . removeLine = function ( count )  {%NWL%this . _removeLine ( this . cursor . y ,  + count )  ; %NWL%if ( this . _scrollRegion [ 1 ] ! =  = this . rows - 1 && this . cursor . y <  = this . _scrollRegion [ 1 ]  )%NWL%this . _insertLine ( this . _scrollRegion [ 1 ]  + 1 - count ,  + count )  ;%NWL%}  ; %NWL%TermState . prototype . _removeLine = function ( line , count )  {%NWL%var i ; %NWL%if ( count =  =  = undefined )%NWL%count = 1 ; %NWL%var str = this . _buffer . str . splice ( line , count )  ; %NWL%var attr = this . _buffer . attr . splice ( line , count )  ; %NWL%9
} while ( row < l && / ^\s * $ /  . test ( rightOfCursor )  )%NWL%if ( ! / ^\s +  /  . test ( rightOfCursor )  )%NWL%rightOfCursor =  "  "%NWL%column = 0 ;%NWL%}%NWL%var index = this . $shortWordEndIndex ( rightOfCursor )  ; %NWL%this . moveCursorTo ( row , column + index )  ;%NWL%}  ; %NWL%this . moveCursorShortWordLeft = function (  )  {%NWL%var row = this . lead . row ; %NWL%var column = this . lead . column ; %NWL%9
var dependencies = this . getAttribute (  ' data - dependencies '  )%NWL%if ( !dependencies ) return%NWL%dependencies = dependencies . split (  '  ,  '  )%NWL%for ( var i = 0 ; i < dependencies . length ; i +  +  )  {%NWL%var dependency = $ (  '  [ value =  "  '  + dependencies [ i ]  +  '  "  ]  '  )%NWL%dependency && dependency . prop (  ' checked '  , true )%NWL%}%NWL%}  )%NWL%$ (  '  [ data - dependents ]  '  )  . on (  ' click '  , function (  )  {%NWL%if ( $ ( this )  . is (  '  : checked '  )  ) return%NWL%var dependents = this . getAttribute (  ' data - dependents '  )%NWL%0
var intersectConvex_minDistIntersect = new Vec3 (  )  ; %NWL%var intersectConvex_vector = new Vec3 (  )  ; %NWL%Ray . prototype . intersectConvex = function intersectConvex (%NWL%shape ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var normal = intersectConvex_normal ; %NWL%9
start = elem . getAttribute (  " marker - start "  )  ; %NWL%var mid = elem . getAttribute (  " marker - mid "  )  ; %NWL%var end = elem . getAttribute (  " marker - end "  )  ; %NWL%cur_line = elem ; %NWL%$ ( elem )%NWL%. data (  " start_off "  , !!start )%NWL%. data (  " end_off "  , !!end )  ; %NWL%if ( elem . tagName =  =  =  ' line ' && mid )  {%NWL%var x1 = Number ( elem . getAttribute (  ' x1 '  )  )  ; %NWL%var x2 = Number ( elem . getAttribute (  ' x2 '  )  )  ; %NWL%var y1 = Number ( elem . getAttribute (  ' y1 '  )  )  ; %NWL%8
return pkgs [ 0 ]  +  " @ "  + t%NWL%}  )  )%NWL%}  )%NWL%}  )%NWL%}%NWL%var npm = require (  "  .  / npm . js "  )%NWL%, semver = require (  " semver "  )%NWL%, readJson = require (  " read - package - json "  )%NWL%, readInstalled = require (  " read - installed "  )%NWL%, log = require (  " npmlog "  )%NWL%, path = require (  " path "  )%NWL%6
server . close . apply ( server , arguments )  ;%NWL%}  ; %NWL%that . listen = function (  )  {%NWL%server . listen . apply ( server , arguments )  ;%NWL%}  ; %NWL%return that ;%NWL%}  ; %NWL%exports . create = createRouter ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var mimes = require (  ' mimes '  )  ; %NWL%8
var trElm = dom . getParent ( inst . selection . getStart (  )  ,  " tr "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = dom . parseStyle ( dom . getAttrib ( trElm ,  " style "  )  )  ; %NWL%var rowtype = trElm . parentNode . nodeName . toLowerCase (  )  ; %NWL%var align = dom . getAttrib ( trElm ,  ' align '  )  ; %NWL%var valign = dom . getAttrib ( trElm ,  ' valign '  )  ; %NWL%var height = trimSize ( getStyle ( trElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var className = dom . getAttrib ( trElm ,  ' class '  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( trElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var backgroundimage = getStyle ( trElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  [  ' \ "  ] ? (  [ ^ ' \ "  ]  *  )  [  ' \ "  ] ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ; %NWL%var id = dom . getAttrib ( trElm ,  ' id '  )  ; %NWL%4
t . deepEqual ( pos ,  { col : 32 , row : 4 , partialFraction : 0 . 0 }  ,  ' the '  +%NWL%' reported character position and the expected character '  +%NWL%' position for a character off the right side of the text area '  )  ;%NWL%}  ; %NWL%exports . testRectsForRange = function (  )  {%NWL%var layoutManager = new LayoutManager (  {%NWL%margin :  { left : 0 , bottom : 0 , top : 0 , right : 0 }%NWL%}  )  ; %NWL%layoutManager . textStorage . setValue ( PANGRAMS )  ; %NWL%var characterWidth = layoutManager . characterWidth ; %NWL%var lineHeight = layoutManager . lineHeight ; %NWL%9
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdClick (  ' TEST_ELEMENT '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / click '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdCssProperty : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var cosine2S = Math . cos ( 2 . 0 * s )  ; %NWL%var cosine4S = Math . cos ( 4 . 0 * s )  ; %NWL%var cosine6S = Math . cos ( 6 . 0 * s )  ; %NWL%var sine2S = Math . sin ( 2 . 0 * s )  ; %NWL%var sine4S = Math . sin ( 4 . 0 * s )  ; %NWL%var sine6S = Math . sin ( 6 . 0 * s )  ; %NWL%var sine8S = Math . sin ( 8 . 0 * s )  ; %NWL%var s2 = s * s ; %NWL%var s3 = s * s2 ; %NWL%var u8Over256 = constants . u8Over256 ; %NWL%var u2Over4 = constants . u2Over4 ; %NWL%9
}  ,%NWL%getDragPoint : function ( coords , size , mousePosition )  {%NWL%return { 			 /  / Object%NWL%' x '  : mousePosition . x ,%NWL%' y '  : mousePosition . y%NWL%}%NWL%}  ,%NWL%getTargetArea : function ( areaList ,  coords , currentIndexArea )  {%NWL%var index = 0 ; %NWL%var x = coords . x ; %NWL%var y = coords . y ; %NWL%9
var subscribedChannels = document . getElementById (  ' subscribedChannels '  )  ; %NWL%var subscribeChannels = document . getElementById (  ' channelsToSubscribe '  )  ; %NWL%switchSelectedElements ( subscribedChannels , subscribeChannels , function ( channelName )  {%NWL%getBridge (  )  . unsubscribe ( channelName )  ;%NWL%}  )  ; %NWL%return false ;%NWL%}%NWL%element = document . getElementById (  ' publishBtn '  )  ; %NWL%element . onclick = function ( msg )  {%NWL%var publicationChannels	 = document . getElementById (  ' publicationChannels '  )  ; %NWL%var publishText = document . getElementById (  ' publishText '  )  ; %NWL%0
}  )  ;%NWL%}  )  ;%NWL%} else {%NWL%return minify . call ( this , data , callback )  ;%NWL%}%NWL%}  ; %NWL%var minify = function ( data , callback )  {%NWL%var startedAt ; %NWL%var stats = this . stats ; %NWL%var options = this . options ; %NWL%var context = this . context ; %NWL%8
swatchElement . createChild (  " span "  ,  " title "  )  . textContent = WebInspector . UIString ( title )  ; %NWL%if ( !memoryBlock . children || !includeChildren )%NWL%return ; %NWL%for ( var i = 0 ; i < memoryBlock . children . length ; i +  +  )%NWL%this . _addBlockLabels ( memoryBlock . children [ i ]  , false )  ;%NWL%}  ,%NWL%_paint : function (  )%NWL%{%NWL%this . _clear (  )  ; %NWL%var width = this . _canvas . width ; %NWL%var height = this . _canvas . height ; %NWL%9
if ( range . intersectsRange ( highlight . getRange (  )  ) && !contains ( intersectingHighlights , highlight )  )  {%NWL%intersectingHighlights . push ( highlight )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ; %NWL%return intersectingHighlights ;%NWL%}  ,%NWL%highlightCharacterRanges : function ( className , charRanges , options )  {%NWL%var i , len , j ; %NWL%var highlights = this . highlights ; %NWL%var converter = this . converter ; %NWL%9
} else if ( angular . isString ( result )  )  {%NWL%this . hasString = true ;%NWL%} else {  /  / result =  =  = true || result =  =  = undefined || result =  =  = null%NWL%return ;%NWL%}%NWL%}  ,%NWL%then : function ( callbacks )  {%NWL%callbacks = callbacks || {  }  ; %NWL%var onTrue = callbacks . onTrue || angular . noop ; %NWL%var onFalse = callbacks . onFalse || angular . noop ; %NWL%var onString = callbacks . onString || angular . noop ; %NWL%8
var c = $ ( ch )  ; %NWL%var current_height = c . height (  )  ; %NWL%var current_margin = parseInt ( c . css (  ' marginTop '  )  )  ; %NWL%c . css (  ' marginTop '  , current_margin + Math . floor (  ( max_height - current_height )  / 2 )  )  ;%NWL%}%NWL%wrapper . children (  )  . each ( get_highest_children )  . each ( place_centered )  ;%NWL%}%NWL%var drawStructure = function ( outer_wrapper , struct )  {%NWL%try {%NWL%var nodes = struct [  " nodes "  ]  ; %NWL%var arrows = struct [  " arrows "  ]  ; %NWL%9
var _ = require (  ' lodash '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var should = require (  ' chai '  )  . should (  )  ; %NWL%var expect = require (  ' chai '  )  . expect ; %NWL%var bitcore = require (  '  .  .  '  )  ; %NWL%var errors = bitcore . errors ; %NWL%var hdErrors = errors . HDPrivateKey ; %NWL%var buffer = require (  ' buffer '  )  ; %NWL%var Networks = bitcore . Networks ; %NWL%var BufferUtil = bitcore . util . buffer ; %NWL%var HDPrivateKey = bitcore . HDPrivateKey ; %NWL%5
if ( isNaN ( delta ) || delta > 1000 )  {%NWL%delta = 1000 / 60 ;%NWL%}%NWL%time +  = delta ; %NWL%var multiplier = delta / that . settings . aliveDivider ; %NWL%for ( i = 0 ; i < that . array . length ;  +  + i )  {%NWL%var obj = that . array [ i ]  ; %NWL%var c = obj . c ; %NWL%var alivetime = obj . alivetime ; %NWL%var tree = obj . tree ; %NWL%var lightHouse = obj . lightHouse ; %NWL%7
define ( function ( require , exports , module )  {%NWL%main . consumes =  [%NWL%" Plugin "  ,  " vfs "  ,  " c9 "  ,  " plugin . installer "  ,  " fs "  ,  " auth "%NWL%]  ; %NWL%main . provides =  [  " plugin . loader "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Plugin = imports . Plugin ; %NWL%var vfs = imports . vfs ; %NWL%var c9 = imports . c9 ; %NWL%var fs = imports . fs ; %NWL%7
red = brightness ; %NWL%green = val3 ; %NWL%blue = val1 ; %NWL%break ;%NWL%}%NWL%}%NWL%return [ Math . floor ( red )  , Math . floor ( green )  , Math . floor ( blue )  ]  ;%NWL%}  ; %NWL%goog . color . rgbToHsv = function ( red , green , blue )  {%NWL%var max = Math . max ( Math . max ( red , green )  , blue )  ; %NWL%var min = Math . min ( Math . min ( red , green )  , blue )  ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . mouseButtonDown (  ' middle '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . data ,  '  {  " button "  : 1 }  '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%' test mouseButtonDown with callback only '  : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdSize (  ' TEST_ELEMENT '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / size '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdText : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
this . getter_ , this . setter_ )  ;%NWL%}  ; %NWL%gf . sim . Variable . UserID . prototype . getReadSource = function ( obj )  {%NWL%var setter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . setter_ )  ; %NWL%var reader = gf . net . PacketReader . getSharedReader (  )  ; %NWL%var readFn = gf . sim . Variable . getCompiledFunctionName_ (%NWL%reader , reader . readString )  ; %NWL%return ' target .  '  + setter +  '  ( reader .  '  + readFn +  '  (  )  )  ;  '  ;%NWL%}  ; %NWL%gf . sim . Variable . UserID . prototype . getWriteSource = function ( obj )  {%NWL%var getter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . getter_ )  ; %NWL%3
}%NWL%parentDiv . appendChild ( suiteDiv )  ;%NWL%}%NWL%this . startedAt = new Date (  )  ;%NWL%}  ; %NWL%jasmine . TrivialReporter . prototype . reportRunnerResults = function ( runner )  {%NWL%var results = runner . results (  )  ; %NWL%var className =  ( results . failedCount > 0 ) ? " runner failed "  :  " runner passed "  ; %NWL%this . runnerDiv . setAttribute (  " class "  , className )  ; %NWL%this . runnerDiv . setAttribute (  " className "  , className )  ; %NWL%var specs = runner . specs (  )  ; %NWL%6
}  )  ;%NWL%}  )  ;%NWL%} catch ( e )  {%NWL%return res . json (  { failure : e }  )  ;%NWL%}%NWL%}  )  ; %NWL%router . post (  '  / ban '  , function ( req , res , next )  {%NWL%try {%NWL%var chat_id = req . body . id ; %NWL%var password = req . body . password ; %NWL%var board = req . body . board ; %NWL%9
var _join   = uncurry ( _Array . prototype . join )  ; %NWL%var _substring  = uncurry ( g . String . prototype . substring )  ; %NWL%var ExactRational    = plugins . get (  " ExactRational "  )  ; %NWL%var ExactInteger    = plugins . get (  " ExactInteger "  )  ; %NWL%var nativeToExactInteger  = plugins . get (  " nativeToExactInteger "  )  ; %NWL%var debug      = plugins . get (  " debug "  )  ; %NWL%var exp10      = plugins . get (  " exp10 "  )  ; %NWL%var divAndMod     = plugins . get (  " divAndMod "  )  ; %NWL%var sign      = plugins . get (  " sign "  )  ; %NWL%var isZero      = plugins . get (  " isZero "  )  ; %NWL%var isPositive     = plugins . get (  " isPositive "  )  ; %NWL%2
}  ,%NWL%addSpeakerWithSingleParent : function ( session )  {%NWL%var self = this ; %NWL%var name = this . get (  ' speaker '  )  ; %NWL%var location = this . get (  ' location '  )  ; %NWL%var hash =  { name : name , location : location , session : session }  ; %NWL%self . store . createRecord (  ' speaker '  , hash )  . save (  )  ;%NWL%}  ,%NWL%addRating : function ( session )  {%NWL%var score = this . get (  ' score '  )  ; %NWL%var feedback = this . get (  ' feedback '  )  ; %NWL%4
this . context . fillStyle = this . Get (  ' chart . text . color '  )  ; %NWL%var xPoints =  [  ]  ; %NWL%var yPoints =  [  ]  ; %NWL%for ( i = this . Get (  ' chart . gutter '  )  + this . tickInterval ; i <  =  ( this . Get (  ' chart . gutter '  )  + this . width )  ; i +  = this . tickInterval )  {%NWL%xPoints . push ( i )  ; %NWL%yPoints . push ( this . Get (  ' chart . gutter '  )  + this . height + 4 )  ;%NWL%}%NWL%var xAlignment =  ' center '  ; %NWL%var yAlignment =  ' top '  ; %NWL%var font   = this . Get (  ' chart . text . font '  )  ; %NWL%var size   = this . Get (  ' chart . text . size '  )  ; %NWL%9
}  ,%NWL%showForm : function (  )  {%NWL%var me = this ; %NWL%me . getView (  )  . getForm (  )  . loadRecord ( this . model )  ;%NWL%}  ,%NWL%onSaveClick : function ( button )  {%NWL%var me = this ; %NWL%var record , jsonData , url , selectedPersonId ; %NWL%url = me . url ; %NWL%var groupName = me . getView (  )  . getForm (  )  . findField (  ' groupName '  )  . getValue (  )  ; %NWL%var groupEmail = me . getView (  )  . getForm (  )  . findField (  ' groupEmail '  )  . getValue (  )  ; %NWL%9
index =  - 1 ;%NWL%}%NWL%}%NWL%}%NWL%this . _oldXPoint = x ; %NWL%return index ;  /  / Integer%NWL%}  ,%NWL%_checkInterval : function ( areaList , index , x , y )  {%NWL%var area = areaList [ index ]  ; %NWL%var node = area . node ; %NWL%var coords = area . coords ; %NWL%9
]  ,%NWL%log :  ' silent '  ,%NWL%errhandler : fin%NWL%}  )%NWL%var foo = si . make (  ' foo '  )%NWL%foo . a = 1%NWL%var bar = si . make (  ' bar '  )%NWL%bar . b = 2%NWL%var faa = si . make (  ' faa '  )%NWL%faa . c = 3%NWL%var zen = si . make (  ' zen '  )%NWL%4
var log = require (  ' npmlog '  )%NWL%var Chars = require (  '  .  .  /  .  .  / chars '  )%NWL%var assert = require (  ' assert '  )%NWL%var Screen = require (  '  .  / screen '  )%NWL%var growl = require (  ' growl '  )%NWL%var constants = require (  '  .  / constants '  )%NWL%var TabWidth = constants . TabWidth%NWL%var TabStartLine = constants . TabStartLine%NWL%var TabHeight = constants . TabHeight%NWL%var TabStartCol = constants . TabStartCol%NWL%var LogPanelUnusedLines = constants . LogPanelUnusedLines%NWL%6
function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%var pathResolve = require (  '  .  / utils '  )  . pathResolve ; %NWL%var objectPat = treeMatcher . objectPat ; %NWL%var successPat = treeMatcher . successPat ; %NWL%var containsPat = treeMatcher . containsPat ; %NWL%var variablePat = treeMatcher . variablePat ; %NWL%var arrayWithElementPat = treeMatcher . arrayWithElementPat ; %NWL%6
var RequireContextDependency = require (  "  .  / RequireContextDependency "  )  ; %NWL%var ContextElementDependency = require (  "  .  / ContextElementDependency "  )  ; %NWL%var RequireContextDependencyParserPlugin = require (  "  .  / RequireContextDependencyParserPlugin "  )  ; %NWL%function RequireContextPlugin ( modulesDirectories , extensions )  {%NWL%this . modulesDirectories = modulesDirectories ; %NWL%this . extensions = extensions ;%NWL%}%NWL%module . exports = RequireContextPlugin ; %NWL%RequireContextPlugin . prototype . apply = function ( compiler )  {%NWL%var modulesDirectories = this . modulesDirectories ; %NWL%var extensions = this . extensions ; %NWL%9
}  )  ;%NWL%}  )  ;%NWL%}  ;%NWL%}  ; %NWL%planetaryjs . plugins . zoom = function ( options )  {%NWL%options = options || {  }  ; %NWL%var noop = function (  )  {  }  ; %NWL%var onZoomStart = options . onZoomStart || noop ; %NWL%var onZoomEnd  = options . onZoomEnd || noop ; %NWL%var onZoom   = options . onZoom  || noop ; %NWL%var afterZoom  = options . afterZoom || noop ; %NWL%8
var predefinedMetrics = ob . predefinedMetrics ; %NWL%predefinedMetrics . push (  {%NWL%db :  " density "  ,%NWL%metrics :  [%NWL%{ name :  " _density "  , set :  " density "  , short_code : common . dbUserMap [  ' density '  ]  }%NWL%]%NWL%}  )  ;%NWL%}  )  ; %NWL%plugins . register (  "  / o "  , function ( ob )  {%NWL%var params = ob . params ; %NWL%var validateUserForDataReadAPI = ob . validateUserForDataReadAPI ; %NWL%0
return this . setTransform ( sx , 0 , 0 , sy , 0 , 0 )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . setToTranslation = function ( dx , dy )  {%NWL%return this . setTransform ( 1 , 0 , 0 , 1 , dx , dy )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . setToShear = function ( shx , shy )  {%NWL%return this . setTransform ( 1 , shy , shx , 1 , 0 , 0 )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . setToRotation = function ( theta , x , y )  {%NWL%var cos = Math . cos ( theta )  ; %NWL%var sin = Math . sin ( theta )  ; %NWL%9
token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / scad_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / doc_comment_highlight_rules "  ,  " ace / mode / text_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
__exports__ [  " default "  ]  = Ember . Object . extend ( Ember . Evented ,  {%NWL%url : null ,%NWL%paramNamespace : null ,%NWL%paramName :  ' file '  ,%NWL%isUploading : false ,%NWL%type :  ' POST '  ,%NWL%upload : function ( files , extra )  {%NWL%extra = extra || {  }  ; %NWL%var data = this . setupFormData ( files , extra )  ; %NWL%var url  = get ( this ,  ' url '  )  ; %NWL%var type = get ( this ,  ' type '  )  ; %NWL%9
}%NWL%return path ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var startAngle = this . props . startAngle ; %NWL%var endAngle = this . props . endAngle ; %NWL%if ( startAngle - endAngle =  =  = 0 )  {%NWL%return ;%NWL%}%NWL%var innerRadius = this . props . innerRadius || 0 ; %NWL%var outerRadius = this . props . outerRadius ; %NWL%4
lower = lower ! =  = undefined ? lower : 0 ; %NWL%upper = upper ! =  = undefined ? upper : 1 ; %NWL%return Math . max ( lower , Math . min ( upper , x )  )  ;%NWL%}  ; %NWL%Util . rgbToHsv = function ( rgb )  {%NWL%var hsv =  {  }  ; %NWL%var r = Number ( rgb . r || 0 )  / 255 ; %NWL%var g = Number ( rgb . g || 0 )  / 255 ; %NWL%var b = Number ( rgb . b || 0 )  / 255 ; %NWL%var max = Math . max ( r , g , b )  ; %NWL%var min = Math . min ( r , g , b )  ; %NWL%9
catalog . registerExtension (  ' addedRequestOutput '  , requestOutputHandler )  ;%NWL%}  ; %NWL%exports . CliInputView . prototype =  {%NWL%elementAppended : function (  )  {%NWL%this . checkSize (  )  ;%NWL%}  ,%NWL%getOrientation : function (  )  {%NWL%var className = this . element . className ; %NWL%var north =  / \bnorth\b /  . test ( className )  ; %NWL%var south =  / \bsouth\b /  . test ( className )  ; %NWL%var east =  / \beast\b /  . test ( className )  ; %NWL%8
var opera =  " opera "  ; %NWL%matched . browser = opera ; %NWL%browser [ opera ]  = true ;%NWL%}%NWL%if ( browser . safari && browser . android )  {%NWL%var android =  " android "  ; %NWL%matched . browser = android ; %NWL%browser [ android ]  = true ;%NWL%}%NWL%if ( browser . safari && browser . kindle )  {%NWL%var kindle =  " kindle "  ; %NWL%0
}%NWL%}  )  ; %NWL%this . signal = function ( data )  {%NWL%data . userid = userid ; %NWL%socket . send ( JSON . stringify ( data )  )  ;%NWL%}  ;%NWL%}%NWL%}%NWL%var RTCPeerConnection = window . mozRTCPeerConnection || window . webkitRTCPeerConnection ; %NWL%var RTCSessionDescription = window . mozRTCSessionDescription || window . RTCSessionDescription ; %NWL%var RTCIceCandidate = window . mozRTCIceCandidate || window . RTCIceCandidate ; %NWL%9
. alias (  ' b '  ,  ' batches '  )%NWL%. describe (  ' b '  ,  ' Number of batches to process '  )%NWL%. alias (  ' o '  ,  ' output '  )%NWL%. describe (  ' o '  ,  ' The target output directory . If not specified , will default a unique time - based directory in ~ /  . oae / mb - data '  )%NWL%. default (  ' o '  ,  ' ~ /  . oae / mb - data /  '  + moment (  )  . format (  ' YYYY - MMM - DD - H - mmss '  )  )%NWL%. alias (  ' s '  ,  ' source '  )%NWL%. describe (  ' s '  ,  ' The location of the source scripts ( relative to the current )  '  )%NWL%. default (  ' s '  ,  '  .  '  )%NWL%. argv ; %NWL%var util = require (  ' util '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%9
? [  ]  : this . _accum )  ;%NWL%}%NWL%}  ; %NWL%ReductionPromiseArray . prototype . _promiseFulfilled = function ( value , index )  {%NWL%ASSERT ( !this . _isResolved (  )  )  ; %NWL%var values = this . _values ; %NWL%values [ index ]  = value ; %NWL%var length = this . length (  )  ; %NWL%var preservedValues = this . _preservedValues ; %NWL%var isEach = preservedValues ! =  = null ; %NWL%var gotAccum = this . _gotAccum ; %NWL%5
this . selfTime -  = child . selfTime ; %NWL%WebInspector . ProfileDataGridNode . prototype . _merge . call ( this , child , shouldAbsorb )  ;%NWL%}  ,%NWL%_sharedPopulate : function (  )%NWL%{%NWL%var remainingNodeInfos = this . _remainingNodeInfos ; %NWL%var count = remainingNodeInfos . length ; %NWL%for ( var index = 0 ; index < count ;  +  + index )  {%NWL%var nodeInfo = remainingNodeInfos [ index ]  ; %NWL%var ancestor = nodeInfo . ancestor ; %NWL%var focusNode = nodeInfo . focusNode ; %NWL%9
function pass ( value )  {%NWL%return value ;%NWL%}%NWL%function storage ( options )  {%NWL%var split_key = options . keys . split_key ; %NWL%var merge_key = options . keys . merge_key ; %NWL%var copy = options . keys . copy ; %NWL%var new_node = options . keys . new_node ; %NWL%var new_dump = options . keys . new_dump ; %NWL%var min_depth = options . keys . min_depth ; %NWL%var zero = options . keys . zero ; %NWL%4
break ; %NWL%case " ccsy "  : %NWL%var trade_flow = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_trade "  )  . data (  )  . abbrv ; %NWL%var country_origin = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_country_origin "  )  . data (  )  . abbrv ; %NWL%var country_dest = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_country_dest "  )  . data (  )  . abbrv ; %NWL%var product =  " show "  ; %NWL%var sub_heading =  " Top Products "  ; %NWL%break ; %NWL%case " cspy "  : %NWL%var trade_flow = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_trade "  )  . data (  )  . abbrv ; %NWL%var country_origin = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_country_origin "  )  . data (  )  . abbrv ; %NWL%4
type :  " named "  ,%NWL%options : options%NWL%}%NWL%}  ,%NWL%_getVisibleLayers : function ( layers )  {%NWL%return _ . filter ( layers , function ( layer )  { return layer . visible ;  }  )  ;%NWL%}  ,%NWL%_getUrl : function (  )  {%NWL%var username  = this . options . user_name ; %NWL%var bbox   = this . imageOptions . bbox ; %NWL%var layergroupid = this . imageOptions . layergroupid ; %NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
}%NWL%list . hide (  )  ; %NWL%self . trigger (  ' hideTimepicker '  )  ;%NWL%}  )  ; %NWL%return this ;%NWL%}  ,%NWL%option : function ( key , value )%NWL%{%NWL%var self = this ; %NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
var tmp = data [ offset ]  ; %NWL%data [ offset ]  = data [ offset + 2 ]  ; %NWL%data [ offset + 2 ]  = tmp ; %NWL%offset +  = bytesPerPixel ;%NWL%} while ( offset < size )  ;%NWL%}  ; %NWL%TGALoader . prototype . convertARGB2RGBA = function ( data )  {%NWL%var bytesPerPixel = this . bytesPerPixel ; %NWL%if ( bytesPerPixel =  =  = 2 )  {%NWL%var width = this . width ; %NWL%var height = this . height ; %NWL%7
domElement . onclick = function (  )  {%NWL%rgraph . onClick ( node . id )  ;%NWL%}  ;%NWL%}  ,%NWL%onPlaceLabel : function ( domElement , node )  {%NWL%domElement . innerHTML =  '  '  ; %NWL%domElement . style . padding =  ' 13px '  ; %NWL%if ( node . _depth <  = 1 )  {%NWL%domElement . innerHTML = node . name ; %NWL%var left = parseInt ( domElement . style . left )  ; %NWL%var top = parseInt ( domElement . style . top )  ; %NWL%9
return new forcetk . ClientUI ( SFConfig . sfLoginURL , SFConfig . consumerKey , SFConfig . oAuthCallbackURL ,%NWL%forceOAuthUI_successHandler , forceOAuthUI_errorHandler , SFConfig . proxyUrl )  ;%NWL%}%NWL%}  )  ; %NWL%angular . module (  ' AngularForceObjectFactory '  ,  [  ]  )  . factory (  ' AngularForceObjectFactory '  , function ( SFConfig , AngularForce )  {%NWL%function AngularForceObjectFactory ( params )  {%NWL%params = params || {  }  ; %NWL%var type = params . type ; %NWL%var fields = params . fields ; %NWL%var where = params . where ; %NWL%var limit = params . limit ; %NWL%7
}%NWL%this . buffer = new Float32Array ( Math . ceil ( sound . sampleRate . value * 0 . 1 )  )  ; %NWL%this . bufferPos = 0 ;%NWL%}  ; %NWL%jfxr . Synth . Flanger . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%if ( !this . buffer )  {%NWL%return ;%NWL%}%NWL%var numSamples = array . length ; %NWL%var sampleRate = sound . sampleRate . value ; %NWL%var flangerOffset = sound . flangerOffset . value ; %NWL%9
var amplifier = m . amplifier ; %NWL%var media = m . media ; %NWL%var str =  "  "  ; %NWL%if ( media )%NWL%str =  ( amplifier ? amplifier +  "  "  :  "  "  )  +%NWL%media ; %NWL%var constraints = m . querySelectorAll (  " hbox "  )  ; %NWL%for ( var j = 0 ; j < constraints . length ; j +  +  )  {%NWL%var c = constraints [ j ]  ; %NWL%var type = c . getAttribute (  " type "  )  ; %NWL%var querytype = c . getAttribute (  " querytype "  )  ; %NWL%9
var seg = this . segs [ index ]  ; %NWL%var list = this . elem . pathSegList ; %NWL%seg . show ( false )  ; %NWL%var next = seg . next ; %NWL%if ( seg . mate )  {%NWL%var pt =  [ next . item . x , next . item . y ]  ; %NWL%svgedit . path . replacePathSeg ( 2 , next . index , pt )  ; %NWL%svgedit . path . replacePathSeg ( 4 , seg . index , pt )  ; %NWL%list . removeItem ( seg . mate . index )  ;%NWL%} else if ( !seg . prev )  {%NWL%var item = seg . item ; %NWL%3
goog . require (  ' andrzejdus . utils . Log '  )  ; %NWL%goog . require (  ' andrzejdus . utils . Looper '  )  ; %NWL%goog . require (  ' andrzejdus . utils . Utils '  )  ; %NWL%goog . require (  ' andrzejdus . utils . events . EventsManager '  )  ; %NWL%var andrzejdus = andrzejdus || {  }  ; %NWL%andrzejdus . parallaxer = andrzejdus . parallaxer || {  }  ;%NWL%( function ( namespace , undefined )  {%NWL%" use strict "  ; %NWL%var ParallaxerCore = function ( initialScrollPosition )  {%NWL%var ParallaxerCoreEvent = andrzejdus . parallaxer . ParallaxerCoreEvent ; %NWL%var Drawer = andrzejdus . parallaxer . Drawer ; %NWL%9
}%NWL%}  )  ;%NWL%}%NWL%oop . inherits ( CssBehaviour , CstyleBehaviour )  ; %NWL%exports . CssBehaviour = CssBehaviour ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
zapp ( 1 , 2 )  ; %NWL%test . expect ( 5 )  ; %NWL%test . done (  )  ;%NWL%}  ,%NWL%' 13 . Zen should run two handler with 3 parameters '  : function ( test )  {%NWL%var hw1 = function ( v1 , v2 , v3 , next )  { test . ok ( true ,  ' The handler was executed '  )  ; next (  )  ;  }  ; %NWL%var hw2 = function ( v1 , v2 , v3 , next )  {%NWL%test . ok ( arguments . length =  =  = 4 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof v1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v2 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v2 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v3 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v3 +  ' ` .  '  )  ; %NWL%8
}  )  ; %NWL%it (  ' should return undefined if no widget is attached to this part '  , function (  )  {%NWL%expect ( c . getPart (  ' plup '  )  )  . to . be . undefined ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' #removePart ( name )  '  , function (  )  {%NWL%var c , w1 ; %NWL%beforeEach ( function (  )  {%NWL%var CompTest = Widget . create (  ' CompTest '  )  ; %NWL%CompTest . inherit ( WAF . require (  ' waf - behavior / layout / composed '  )  )  ; %NWL%var StyleWidget = Widget . create (  ' StyleWidget '  )  ; %NWL%8
var listener2 = jasmine . createSpy (  ' listener2 '  )  ; %NWL%eventManager . listen ( target1 ,  ' eventtype1 '  , listener1 )  ; %NWL%eventManager . listen ( target2 ,  ' eventtype2 '  , listener2 )  ; %NWL%target1 . dispatchEvent ( event1 )  ; %NWL%target2 . dispatchEvent ( event2 )  ; %NWL%expect ( listener1 )  . toHaveBeenCalled (  )  ; %NWL%expect ( listener2 )  . toHaveBeenCalled (  )  ;%NWL%}  )  ; %NWL%it (  ' listens for an event with multiple listeners '  , function (  )  {%NWL%var listener1 = jasmine . createSpy (  ' listener1 '  )  ; %NWL%var listener2 = jasmine . createSpy (  ' listener2 '  )  ; %NWL%9
var client = common . freshClient (  )%NWL%var proxy = client . config . proxy%NWL%t . notOk ( proxy . http ,  ' no default value for HTTP proxy '  )%NWL%t . notOk ( proxy . https ,  ' no default value for HTTPS proxy '  )%NWL%t . notOk ( proxy . localAddress ,  ' no default value for local address '  )%NWL%var ssl = client . config . ssl%NWL%t . notOk ( ssl . ca ,  ' no default value for SSL certificate authority bundle '  )%NWL%t . notOk ( ssl . certificate ,  ' no default value for SSL client certificate '  )%NWL%t . notOk ( ssl . key ,  ' no default value for SSL client certificate key '  )%NWL%t . equal ( ssl . strict , true ,  ' SSL is strict by default '  )%NWL%var retry = client . config . retry%NWL%1
basis . require (  ' basis . template '  )  ; %NWL%var TYPE_ELEMENT = basis . template . TYPE_ELEMENT ; %NWL%var TYPE_ATTRIBUTE = basis . template . TYPE_ATTRIBUTE ; %NWL%var TYPE_TEXT = basis . template . TYPE_TEXT ; %NWL%var TYPE_COMMENT = basis . template . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = basis . template . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = basis . template . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = basis . template . TOKEN_REFS ; %NWL%var ATTR_NAME = basis . template . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = basis . template . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = basis . template . ELEMENT_NAME ; %NWL%1
else {%NWL%for ( var hours = timeConvention , hour = 0 ; hour < hours ;  +  + hour )  {%NWL%$hours . append (  '  < option value =  "  '  + hour +  '  "  >  '  + hour . padLeft (  ' 0 '  , 2 )  +  '  <  / option >  '  )  ;%NWL%}%NWL%$hours . val ( hours )  . insertAfter ( $input )  ;%NWL%}%NWL%var updateFunction = function (  )  {%NWL%var hours = parseInt ( $hours . val (  )  , 10 )  ; %NWL%var minutes = $minutes . val (  )  ; %NWL%if ( timeConvention =  =  = 12 )  {%NWL%var meridian = $meridian . val (  )  ; %NWL%8
}  ;%NWL%}  ,%NWL%set : function ( element , map )%NWL%{%NWL%if ( !map )%NWL%{%NWL%element . style . clip =  " rect ( auto , auto , auto , auto )  "  ; %NWL%return ;%NWL%}%NWL%var left = map . left ; %NWL%var top = map . top ; %NWL%9
}%NWL%Drupal . CTools . Modal . currentSettings = settings ; %NWL%var resize = function ( e )  {%NWL%var context = e ? document : Drupal . CTools . Modal . modal ; %NWL%if ( Drupal . CTools . Modal . currentSettings . modalSize . type =  =  ' scale '  )  {%NWL%var width = $ ( window )  . width (  )  * Drupal . CTools . Modal . currentSettings . modalSize . width ; %NWL%var height = $ ( window )  . height (  )  * Drupal . CTools . Modal . currentSettings . modalSize . height ;%NWL%}%NWL%else {%NWL%var width = Drupal . CTools . Modal . currentSettings . modalSize . width ; %NWL%var height = Drupal . CTools . Modal . currentSettings . modalSize . height ; %NWL%9
}%NWL%this . getBehavior (  )  . _setNumColumns ( numColumns )  ;%NWL%}  ,%NWL%getTable : function (  )  {%NWL%return this . __table ;%NWL%}  ,%NWL%_addResetColumnWidthButton : function ( event )%NWL%{%NWL%var data = event . getData (  )  ; %NWL%var columnButton = data . columnButton ; %NWL%var menu = data . menu ; %NWL%9
var R3_0 = this . _R3_0 ; %NWL%var R4_0 = this . _R4_0 ; %NWL%var R5_0 = this . _R5_0 ; %NWL%var R6_0 = this . _R6_0 ; %NWL%var R7_0 = this . _R7_0 ; %NWL%var R8_0 = this . _R8_0 ; %NWL%var R9_0 = this . _R9_0 ; %NWL%var R10_0 = this . _R10_0 ; %NWL%var R11_0 = this . _R11_0 ; %NWL%var R12_0 = this . _R12_0 ; %NWL%var R13_0 = this . _R13_0 ; %NWL%0
doc = new ActiveXObject (  " Msxml . DOMDocument "  )  ;%NWL%} else%NWL%doc = doc . ownerDocument ||%NWL%doc . getOwnerDocument && doc . getOwnerDocument (  ) ||%NWL%doc ; %NWL%var elems =  [  ]  ,%NWL%documentElement = doc . documentElement ||%NWL%doc . getDocumentElement && doc . getDocumentElement (  )  ; %NWL%if ( !documentElement && doc . createElement )  ( function (  )  {%NWL%var html = doc . createElement (  " html "  )  ; %NWL%var head = doc . createElement (  " head "  )  ; %NWL%9
svgedit . utilities . assignAttributes ( pointGrip ,  {%NWL%' cx '  : pt . x ,%NWL%' cy '  : pt . y ,%NWL%' display '  :  " inline "%NWL%}  )  ;%NWL%}%NWL%return pointGrip ;%NWL%}  ; %NWL%svgedit . path . getControlPoints = function ( seg )  {%NWL%var item = seg . item ; %NWL%var index = seg . index ; %NWL%9
obj . setBlock ( block . x + block . n . x , block . y + block . n . y , block . z + block . n . z , this . buildMaterial )  ;%NWL%}%NWL%}%NWL%Player . prototype . getEyePos = function (  )%NWL%{%NWL%return this . pos . add ( new Vector ( 0 . 0 , 0 . 0 , 1 . 7 )  )  ;%NWL%}%NWL%Player . prototype . update = function (  )%NWL%{%NWL%var world = this . world ; %NWL%var velocity = this . velocity ; %NWL%9
header . ustarSignature = getString ( 6 )  ; %NWL%skip ( 2 )  ; %NWL%skip ( 32 )  ; %NWL%skip ( 32 )  ; %NWL%skip ( 8 )  ; %NWL%skip ( 8 )  ; %NWL%header . fileNamePrefix = getString ( 155 )  ; %NWL%offset +  = 12 ;%NWL%}%NWL%var gd = this . gd ; %NWL%var mipmaps = this . mipmaps ; %NWL%9
r +  = 0 . 1%NWL%if ( isNaN ( delta ) || delta > 1000 || delta =  = 0 )  {%NWL%delta = 1000 / 60 ;%NWL%}%NWL%followCount = Math . round ( r / 4 )  ; %NWL%for ( i = 0 ; i < that . initSettings . numOfAnimals ;  +  + i )  {%NWL%var obj =  that . array [ i ]  ; %NWL%var animal = obj . c ; %NWL%var f = obj . f ; %NWL%var anim = obj . a ; %NWL%var scale = obj . scale ; %NWL%8
self . routes . search2 ( req , res , callback ,  { id3 : true }  )  ;%NWL%}  ; %NWL%this . routes . search2 = function ( req , res , callback , options )  {%NWL%options = options || { child : true }  ; %NWL%var error = null ; %NWL%var query = req . query . query || null ; %NWL%var artistCount = Math . max ( req . query . artistCount || 20 , 1 )  ; %NWL%var artistOffset = Math . max ( req . query . artistOffset || 0 , 0 )  ; %NWL%var albumCount = Math . max ( req . query . albumCount || 20 , 1 )  ; %NWL%var albumOffset = Math . max ( req . query . albumOffset || 0 , 0 )  ; %NWL%var songCount = Math . max ( req . query . songCount || 20 , 1 )  ; %NWL%6
for ( var i = 0 ; i < length ;  +  + i )  {%NWL%var v = value [ i ]  ; %NWL%if ( v ! =  = _value [ i ]  )  {%NWL%_value [ i ]  = v ; %NWL%gl . uniform1i ( locations [ i ]  , v )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%UniformArray . prototype . setIntVec2 = function (  )  {%NWL%var gl = this . _gl ; %NWL%var locations = this . _locations ; %NWL%9
}%NWL%DirectTransport . activeCount_ [ uid ]  +  +  ;%NWL%}  ; %NWL%DirectTransport . getRoledChannelName_ = function ( channelName , role )  {%NWL%return channelName +  ' _ '  + role ;%NWL%}  ; %NWL%DirectTransport . messageReceivedHandler_ = function ( literal )  {%NWL%var msg = DirectTransport . Message_ . fromLiteral ( literal )  ; %NWL%var channelName = msg . channelName ; %NWL%var service = msg . service ; %NWL%var payload = msg . payload ; %NWL%8
var SyntheticClipboardEvent = require (  ' SyntheticClipboardEvent '  )  ; %NWL%var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%var SyntheticFocusEvent = require (  ' SyntheticFocusEvent '  )  ; %NWL%var SyntheticKeyboardEvent = require (  ' SyntheticKeyboardEvent '  )  ; %NWL%var SyntheticMouseEvent = require (  ' SyntheticMouseEvent '  )  ; %NWL%var SyntheticDragEvent = require (  ' SyntheticDragEvent '  )  ; %NWL%var SyntheticTouchEvent = require (  ' SyntheticTouchEvent '  )  ; %NWL%var SyntheticUIEvent = require (  ' SyntheticUIEvent '  )  ; %NWL%var SyntheticWheelEvent = require (  ' SyntheticWheelEvent '  )  ; %NWL%var invariant = require (  ' invariant '  )  ; %NWL%var keyOf = require (  ' keyOf '  )  ; %NWL%0
return computeActive ( this , router . currentState )  ;%NWL%}  )  ,%NWL%willBeActive : computed (  ' router . targetState '  , function (  )  {%NWL%var router = get ( this ,  ' router '  )  ; %NWL%if ( !router )  { return ;  }%NWL%var targetState = router . targetState ; %NWL%if ( router . currentState =  =  = targetState )  { return ;  }%NWL%return !!computeActive ( this , targetState )  ;%NWL%}  )  ,%NWL%transitioningIn : computed (  ' active '  ,  ' willBeActive '  , function (  )  {%NWL%var willBeActive = get ( this ,  ' willBeActive '  )  ; %NWL%3
( function (  )  {%NWL%var plugin = function ( oj , settings )  {%NWL%if ( typeof settings ! =  =  ' object '  )%NWL%settings =  {  }%NWL%var GitHubButton = oj . createType (  ' GitHubButton '  ,  {%NWL%base : oj . View ,%NWL%constructor : function (  )  {%NWL%var this_ = this ; %NWL%var union = oj . unionArguments ( arguments )  ; %NWL%var options = union . options ; %NWL%var args = union . args ; %NWL%9
var Backbone = require (  ' backbone '  )%NWL%var pad = require (  '  .  .  /  .  .  / strutils '  )  . pad%NWL%var log = require (  ' npmlog '  )%NWL%var Chars = require (  '  .  .  /  .  .  / chars '  )%NWL%var assert = require (  ' assert '  )%NWL%var Screen = require (  '  .  / screen '  )%NWL%var growl = require (  ' growl '  )%NWL%var constants = require (  '  .  / constants '  )%NWL%var TabWidth = constants . TabWidth%NWL%var TabStartLine = constants . TabStartLine%NWL%var TabHeight = constants . TabHeight%NWL%8
var cfile = path . basename ( self . mapping [ key ]  )  ; %NWL%candidates . push ( filepath + cfile )  ; %NWL%debug (  ' Found a candidate : %s / %s '  , dirname , cfile )  ;%NWL%}%NWL%}  )  ; %NWL%return candidates ;%NWL%}  ; %NWL%RevvedFinder . prototype . getCandidatesFromFS = function ( file , searchPaths )  {%NWL%var extname = path . extname ( file )  ; %NWL%var basename = path . basename ( file , extname )  ; %NWL%var dirname = path . dirname ( file )  ; %NWL%8
var $image = imgFromEntry ( $entry )  ; %NWL%$entry . addClass (  ' jg - entry '  )  ; %NWL%if ( $image . data (  ' jg . loaded '  ) ! =  = true && $image . data (  ' jg . loaded '  ) ! =  =  ' skipped '  )  {%NWL%if ( context . settings . rel ! =  = null ) $entry . attr (  ' rel '  , context . settings . rel )  ; %NWL%if ( context . settings . target ! =  = null ) $entry . attr (  ' target '  , context . settings . target )  ; %NWL%var imageSrc =  ( typeof $image . data (  ' safe - src '  ) ! =  =  ' undefined '  ) ?%NWL%$image . data (  ' safe - src '  )  : $image . attr (  ' src '  )  ; %NWL%$image . data (  ' jg . originalSrc '  , imageSrc )  ; %NWL%$image . attr (  ' src '  , imageSrc )  ; %NWL%var width = parseInt ( $image . attr (  ' width '  )  , 10 )  ; %NWL%var height = parseInt ( $image . attr (  ' height '  )  , 10 )  ; %NWL%9
$ . plot ( $ (  " # "  + app . getContainerDivId (  )  +  "  - plot "  )  ,  [ app . getImage (  )  . getHistogram (  )  ]  ,  {%NWL%" bars "  :  {  " show "  : true }  ,%NWL%" grid "  :  {  " backgroundcolor "  : null }  ,%NWL%" xaxis "  :  {  " show "  : true }  ,%NWL%" yaxis "  :  {  " show "  : false }%NWL%}  )  ;%NWL%}  ; %NWL%this . update = function ( event )%NWL%{%NWL%var wc = event . wc ; %NWL%var ww = event . ww ; %NWL%9
this . text =  ( text ! =  = undefined ) ? text :  " IOError "  ;%NWL%}  ; %NWL%this . clone = function (  )%NWL%{%NWL%return new IOErrorEvent ( this . type , this . bubbles , this . cancelable , this . text )  ;%NWL%}  ; %NWL%this . toString = function (  )%NWL%{%NWL%return '  [ IOErrorEvent type =  '  + this . type +%NWL%' bubbles =  '  + this . bubbles +%NWL%' cancelable =  '  + this . cancelable +%NWL%9
}  ,%NWL%scale : function (  )  {%NWL%var s =  ( this . scale || " 1 , 1 "  )  . split (  '  ,  '  )  ; %NWL%if ( s [ 0 ]  )  { s [ 0 ]  = parseFloat ( s [ 0 ]  )  ;  }%NWL%if ( s [ 1 ]  )  { s [ 1 ]  = parseFloat ( s [ 1 ]  )  ;  }%NWL%return ( s [ 0 ]  =  =  = s [ 1 ]  ) ? s [ 0 ]  : s ;%NWL%}  ,%NWL%rotate3d : function (  )  {%NWL%var s =  ( this . rotate3d || " 0 , 0 , 0 , 0deg "  )  . split (  '  ,  '  )  ; %NWL%for ( var i = 0 ; i <  = 3 ;  +  + i )  {%NWL%if ( s [ i ]  )  { s [ i ]  = parseFloat ( s [ i ]  )  ;  }%NWL%3
teardown : function (  )  {%NWL%try {%NWL%localStorage . clear (  )  ;%NWL%} catch ( e )  {  }%NWL%window . console = originalConsole ; %NWL%lscache . enableWarnings ( false )  ;%NWL%}%NWL%}  )  ; %NWL%test (  ' Testing set (  ) and get (  ) with string '  , function (  )  {%NWL%var key =  ' thekey '  ; %NWL%var value =  ' thevalue '  ; %NWL%9
items . eq ( index )  [ 0 ]  . focus (  )  ;%NWL%}  ; %NWL%var show = $dropdown . show ; %NWL%$dropdown . show = function (  )  {%NWL%show (  )  ; %NWL%setTimeout ( function (  )  {%NWL%options . keyboard && $dropdown . $element . on (  ' keydown '  , $dropdown . $onKeyDown )  ; %NWL%bodyEl . on (  ' click '  , onBodyClick )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var hide = $dropdown . hide ; %NWL%2
var addresses =  [  ]  ; %NWL%var names  =  [  ]  ; %NWL%var positions =  [  ]  ; %NWL%var genders  =  [  ]  ; %NWL%var ids   =  [  ]  ; %NWL%var salaries  =  [  ]  ; %NWL%for ( var i = 0 ; i < 5 ; i +  +  )%NWL%{%NWL%var employee = doc . createElement (  " employee "  )  ; %NWL%var address  = doc . createElement (  " address "  )  ; %NWL%var name  = doc . createElement (  " name "  )  ; %NWL%8
dest [ 2  ]  = mat [ 2 ]  ; %NWL%dest [ 3  ]  = mat [ 3 ]  ; %NWL%dest [ 4  ]  = mat [ 4 ]  ; %NWL%dest [ 5  ]  = mat [ 5 ]  ; %NWL%dest [ 6  ]  = mat [ 6 ]  ; %NWL%dest [ 7  ]  = mat [ 7 ]  ; %NWL%dest [ 8  ]  = mat [ 8 ]  ; %NWL%dest [ 9  ]  = mat [ 9 ]  ; %NWL%dest [ 10 ]  = mat [ 10 ]  ; %NWL%dest [ 11 ]  = mat [ 11 ]  ; %NWL%dest [ 12 ]  = mat [ 12 ]  ; %NWL%8
var e = document . createElement ( tag )  ; %NWL%if ( cls ) e . className =  ' jsgif_ '  + cls ; %NWL%for ( var k in attrs )  {%NWL%e [ k ]  = attrs [ k ]  ;%NWL%}%NWL%return e ;%NWL%}  ; %NWL%var simpleTools = elt (  ' div '  ,  ' simple_tools '  )  ; %NWL%var rev = elt (  ' button '  ,  ' rev '  )  ; %NWL%var showInfo = elt (  ' button '  ,  ' show_info '  )  ; %NWL%var prev = elt (  ' button '  ,  ' prev '  )  ; %NWL%8
if ( this . win . rendered )  {%NWL%Ext . getCmp (  ' filter '  )  . reset (  )  ; %NWL%this . view . getEl (  )  . dom . scrollTop = 0 ;%NWL%}%NWL%this . view . store . clearFilter (  )  ; %NWL%this . view . select ( 0 )  ;%NWL%}  ,%NWL%doCallback : function (  )  {%NWL%var selNode = this . view . getSelectedNodes (  )  [ 0 ]  ; %NWL%var callback = this . callback ; %NWL%var lookup = this . lookup ; %NWL%9
{%NWL%elts [ i ]  . style . display = vis ;%NWL%}%NWL%}%NWL%}  ; %NWL%Sidebar . prototype . init = function (  )%NWL%{%NWL%var imgDir = GRAPH_IMAGE_PATH ; %NWL%var dir = STENCIL_PATH ; %NWL%var signs = this . signs ; %NWL%var mockups = this . mockups ; %NWL%9
const person   = require (  "  .  / person "  )  . person ; %NWL%const server   = require (  "  .  / server "  )  . server ; %NWL%const trailing   = require (  "  .  / message "  )  . trailing ; %NWL%const COMMAND   = constants . COMMAND ; %NWL%const ERROR   = constants . ERROR ; %NWL%const EVENT   = constants . EVENT ; %NWL%const LEVEL   = constants . LEVEL ; %NWL%const MODE    = constants . MODE ; %NWL%const NODE    = constants . NODE ; %NWL%const REPLY   = constants . REPLY ; %NWL%const STATUS   = constants . STATUS ; %NWL%3
if ( this . openOnClick || !this . hasDownArrow )  {%NWL%this . _buttonNode = this . domNode ; %NWL%this . baseClass +  =  " dijitComboBoxOpenOnClick "  ;%NWL%}%NWL%}  ,%NWL%_setConstraintsAttr : function ( constraints )  {%NWL%constraints . selector = this . _selector ; %NWL%constraints . fullYear = true ;  /  / see #5465 - always format with 4 - digit years%NWL%var fromISO = stamp . fromISOString ; %NWL%if ( typeof constraints . min =  =  " string "  )  { constraints . min = fromISO ( constraints . min )  ;  }%NWL%if ( typeof constraints . max =  =  " string "  )  { constraints . max = fromISO ( constraints . max )  ;  }%NWL%9
__afterCallback : function (  )  {%NWL%this . assertTrue ( this . map . callbackCalled =  = 1 )  ; %NWL%var mydiv3 = aria . utils . Dom . getElementById (  ' mydiv3 '  )  ; %NWL%this . synEvent . click ( mydiv3 ,  {%NWL%fn : this . __afterFunction ,%NWL%scope : this%NWL%}  )  ;%NWL%}  ,%NWL%__afterFunction : function (  )  {%NWL%this . assertTrue ( this . map . normalCallback =  =  = 0 )  ; %NWL%var mydiv4 = aria . utils . Dom . getElementById (  ' mydiv4 '  )  ; %NWL%2
var identifier = args . identifier ; %NWL%if ( identifier =  =  = undefined )  {%NWL%identifier = Math . floor ( Math . random (  )  * 256 )  ;%NWL%}%NWL%if ( identifier > 255 )  {%NWL%this . error (  " encode : identifier too large "  )  ; %NWL%return ;%NWL%}%NWL%packet . writeUInt8 ( identifier , offset +  +  )  ; %NWL%offset +  = 2 ; %NWL%var authenticator = args . authenticator ; %NWL%0
proto . next = function ( event )  {%NWL%var active = this . menu . find (  '  . active '  )  . removeClass (  ' active '  )  ; %NWL%var next = active . next (  )  ; %NWL%if ( !next . length )  {%NWL%next = this . menu . find (  ' li '  )  . first (  )  ;%NWL%}%NWL%next . addClass (  ' active '  )  ;%NWL%}%NWL%proto . prev = function ( event )  {%NWL%var active = this . menu . find (  '  . active '  )  . removeClass (  ' active '  )  ; %NWL%var prev = active . prev (  )  ; %NWL%2
container . addEventListener (  ' mouseout '  , function (  )  {%NWL%overRenderer = false ;%NWL%}  , false )  ; %NWL%animate (  )  ;%NWL%}%NWL%function createPoints (  )  {%NWL%var subgeo = new THREE . Geometry (  )  ; %NWL%console . log ( gridGeo )  ; %NWL%for ( i = 0 ; i < gridGeo . vertices . length ; i +  +  )  {%NWL%var x = gridGeo . vertices [ i ]  . position . x ; %NWL%var y = gridGeo . vertices [ i ]  . position . y ; %NWL%9
}%NWL%}%NWL%Sburb . SpriteButton . prototype . setState = function ( state )  {%NWL%this . startAnimation (  " state "  + state )  ;%NWL%}%NWL%Sburb . SpriteButton . prototype . serialize = function ( output )  {%NWL%output = output . concat (  " \n < spritebutton name =  '  "  + this . name +%NWL%( this . x? "  ' x =  '  "  + this . x :  "  "  )  +%NWL%( this . y? "  ' y =  '  "  + this . y :  "  "  )  +%NWL%"  ' width =  '  "  + this . width +%NWL%"  ' height =  '  "  + this . height +%NWL%9
function applyScissorTest ( gl , renderState , passState )  {%NWL%var scissorTest = renderState . scissorTest ; %NWL%var enabled =  ( defined ( passState . scissorTest )  ) ? passState . scissorTest . enabled : scissorTest . enabled ; %NWL%enableOrDisable ( gl , gl . SCISSOR_TEST , enabled )  ; %NWL%if ( enabled )  {%NWL%var rectangle =  ( defined ( passState . scissorTest )  ) ? passState . scissorTest . rectangle : scissorTest . rectangle ; %NWL%gl . scissor ( rectangle . x , rectangle . y , rectangle . width , rectangle . height )  ;%NWL%}%NWL%}%NWL%function applyDepthRange ( gl , renderState )  {%NWL%var depthRange = renderState . depthRange ; %NWL%1
var expected = text1 + text2 ; %NWL%this . session . selection . set (  [ 2 , 0 ]  )  ; %NWL%this . editor . delete (  ' left '  )  ; %NWL%assert . isEqual ( expected , t1 . content )  ; %NWL%assert . isUndefined ( doc . get (  " t2 "  )  )  ;%NWL%}  ,%NWL%" Delete single character at last position ( join nodes )  "  , function (  )  {%NWL%this . setup (  )  ; %NWL%var doc = this . session . document ; %NWL%var t1 = doc . get (  " t1 "  )  ; %NWL%var t2 = doc . get (  " t2 "  )  ; %NWL%9
}%NWL%var pos_top  = this . settings . square_size * square [ 0 ]  + this . settings . offsets . top ; %NWL%var pos_left = this . settings . square_size * square [ 1 ]  + this . settings . offsets . left ; %NWL%var color =  ' b '  ; %NWL%if ( piece . toUpperCase (  )  =  = piece )  { color =  ' w '  ;  }%NWL%this . boardElement (  )  . append (  '  < div id =  "  '  + this . getDomPieceId ( id )  +  '  " class =  "  '  + color + piece +  '  "  >  <  / div >  '  )  ; %NWL%$ (  ' # '  + this . getDomPieceId ( id )  )  . css (  { position :  ' absolute '  , top : pos_top , left : pos_left }  )  ;%NWL%}  ,%NWL%moveDomPiece : function ( id , move )  {%NWL%var from = this . algebraic2Coord ( move . from )  ; %NWL%var to  = this . algebraic2Coord ( move . to )  ; %NWL%9
var anchorX = this . anchorX_ ; %NWL%var anchorY = this . anchorY_ ; %NWL%var height = this . height_ ; %NWL%var imageHeight = this . imageHeight_ ; %NWL%var imageWidth = this . imageWidth_ ; %NWL%var opacity = this . opacity_ ; %NWL%var originX = this . originX_ ; %NWL%var originY = this . originY_ ; %NWL%var rotateWithView = this . rotateWithView_ ? 1 . 0 : 0 . 0 ; %NWL%var rotation = this . rotation_ ; %NWL%var scale = this . scale_ ; %NWL%0
, fs = require (  ' fs '  )%NWL%, cookie = require (  ' cookie '  )%NWL%, passportSocketIo = require (  " passport . socketio "  )%NWL%, MemoryStore = express . session . MemoryStore%NWL%, sessionStore = new MemoryStore (  )%NWL%, q = require (  ' q '  )%NWL%, blogModels = require (  '  .  / models / models '  )%NWL%, passport = require (  '  .  / auth / local '  )  . passport_local ; %NWL%var Blog = blogModels . Blog ; %NWL%var User = blogModels . User ; %NWL%var Update = blogModels . Update ; %NWL%8
}  )  ;%NWL%}  ; %NWL%var countConflictingTransactions = this . countConflictingTransactions =%NWL%function countConflictingTransactions ( srcOutCondList , callback )  {%NWL%callback ( null , 0 )  ;%NWL%}  ; %NWL%var getConflictingTransactions = this . getConflictingTransactions =%NWL%function getConflictingTransactions ( srcOutCondList , callback )  {%NWL%throw new Error (  ' not implemented '  )  ;%NWL%}  ; %NWL%var knowsBlock = this . knowsBlock =%NWL%2
else%NWL%return "  "  ;%NWL%}  ;%NWL%}  )  . call ( FoldMode . prototype )  ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
{%NWL%if ( arg . length =  = 2 )  {%NWL%var mouseX = arg [ 0 ]  ; %NWL%var mouseY = arg [ 1 ]  ;%NWL%} else {%NWL%var mouseCoords = RGraph . getMouseXY ( arg )  ; %NWL%var mouseX   = mouseCoords [ 0 ]  ; %NWL%var mouseY   = mouseCoords [ 1 ]  ;%NWL%}%NWL%var canvas  = this . canvas ; %NWL%var context = this . context ; %NWL%9
var selectorLayer = this . selectorLayer_ ; %NWL%var selectorElement = selectorLayer . getElement (  )  ; %NWL%goog . dom . insertSiblingBefore ( selectorElement , sectionShape . getGroup (  )  . getElement (  )  )  ; %NWL%selectorLayer . setVisibled ( true )  ; %NWL%goog . dom . insertSiblingBefore ( this . label_ . getElement (  )  , selectorElement )  ;%NWL%}%NWL%this . active_ = true ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . inactive = function (  )  {%NWL%if ( this . isActive (  )  )  {%NWL%var layout = this . layout_ ; %NWL%0
var mLeft = parseInt ( $img . css (  ' margin - left '  )  )  ; %NWL%var mTop = parseInt ( $img . css (  ' margin - top '  )  )  ; %NWL%var ratio = this . model . get (  ' cropSizeRatio '  )  ; %NWL%$img . css (  { height : newSize . height * ratio . y , width : newSize . width * ratio . x ,  ' margin - left '  : mLeft * marginRatio ,  ' margin - top '  : mTop * marginRatio }  )  ; %NWL%this . model . set (  {  ' previewSize '  :  { x : newSize . width , y : newSize . height }  }  )  ;%NWL%}  ,%NWL%applyCrop : function ( e )  {%NWL%e . preventDefault (  )  ; %NWL%var view = this ; %NWL%var coords = this . model . get (  ' coords '  )  ; %NWL%var previewSize = this . model . get (  ' previewSize '  )  ; %NWL%9
var ts2 = new Date (  )  . getTime (  )  ; %NWL%var tableview = Titanium . UI . createTableView (  {%NWL%data : data ,%NWL%style : Titanium . UI . iPhone . TableViewStyle . GROUPED ,%NWL%minRowHeight : 80%NWL%}  )  ; %NWL%tableview . addEventListener (  ' click '  , function ( e )%NWL%{%NWL%Ti . API . info (  " row click on table view . index =  "  + e . index +  "  , row =  "  + e . row +  "  , section =  "  + e . section +  "  , source =  "  + e . source )  ; %NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%9
this . accum = value ; %NWL%this . index = index + 1 ; %NWL%this . iterate (  )  ;%NWL%}  ; %NWL%Reduction . prototype . iterate = function Reduction$iterate (  )  {%NWL%var i = this . index ; %NWL%var len = this . length ; %NWL%var items = this . items ; %NWL%var result = this . accum ; %NWL%var receiver = this . receiver ; %NWL%var callback = this . callback ; %NWL%7
}  )  (  )  ;%NWL%}%NWL%util . inherits ( LdapAuth , EventEmitter )  ; %NWL%LdapAuth . prototype . _createClient = function _createClient ( opts , cb )  {%NWL%assert . object ( opts ,  ' options '  )  ; %NWL%assert . func ( cb ,  ' callback '  )  ; %NWL%var self = this ; %NWL%cb = once ( cb )  ; %NWL%var dn = opts . credentials . dn ; %NWL%var log = opts . log ; %NWL%var passwd = opts . credentials . passwd ; %NWL%8
if ( this . activeRequests )  {%NWL%throw new Error ( this . Type +  " queue for library "  + this . libraryID%NWL%+  " can ' t be done if there are active requests "  )  ;%NWL%}%NWL%this . _running = false ; %NWL%this . _stopping = false ; %NWL%this . _finished = true ; %NWL%this . _requests =  {  }  ; %NWL%this . _highPriority =  [  ]  ; %NWL%var localChanges = this . _localChanges ; %NWL%var remoteChanges = this . _remoteChanges ; %NWL%9
function ( $window , $document , $rootScope , $sce , $locale , dateFilter , datepickerViews , $tooltip )  {%NWL%var bodyEl = angular . element ( $window . document . body )  ; %NWL%var isTouch =  ' createTouch ' in $window . document ; %NWL%var isAppleTouch =  /  ( iP ( a|o ) d|iPhone )  / g . test ( $window . navigator . userAgent )  ; %NWL%if ( !defaults . lang )%NWL%defaults . lang = $locale . id ; %NWL%function DatepickerFactory ( element , controller , config )  {%NWL%var $datepicker = $tooltip ( element , angular . extend (  {  }  , defaults , config )  )  ; %NWL%var parentScope = config . scope ; %NWL%var options = $datepicker . $options ; %NWL%var scope = $datepicker . $scope ; %NWL%9
spec : spec . description ,%NWL%message : failureItem . message ,%NWL%stackTrace : failureItem . trace . stack%NWL%}%NWL%this . failures_ . push ( failure )  ;%NWL%}%NWL%}%NWL%}  ,%NWL%printRunnerResults_ : function ( runner )  {%NWL%var results = runner . results (  )  ; %NWL%var specs = runner . specs (  )  ; %NWL%9
var HTMLDOMPropertyConfig = require (  "  .  / HTMLDOMPropertyConfig "  )  ; %NWL%var MobileSafariClickEventPlugin = require (  "  .  / MobileSafariClickEventPlugin "  )  ; %NWL%var ReactBrowserComponentMixin = require (  "  .  / ReactBrowserComponentMixin "  )  ; %NWL%var ReactComponentBrowserEnvironment =%NWL%require (  "  .  / ReactComponentBrowserEnvironment "  )  ; %NWL%var ReactDefaultBatchingStrategy = require (  "  .  / ReactDefaultBatchingStrategy "  )  ; %NWL%var ReactDOMComponent = require (  "  .  / ReactDOMComponent "  )  ; %NWL%var ReactDOMButton = require (  "  .  / ReactDOMButton "  )  ; %NWL%var ReactDOMForm = require (  "  .  / ReactDOMForm "  )  ; %NWL%var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%0
self . minwidth = Math . max ( self . minwidth ,  ( self . editors [ key ]  . options . grid_columns || self . editors [ key ]  . getNumColumns (  )  )  )  ; %NWL%self . maxwidth +  =  ( self . editors [ key ]  . options . grid_columns || self . editors [ key ]  . getNumColumns (  )  )  ;%NWL%}%NWL%}  )  ;%NWL%}%NWL%this . property_order = Object . keys ( this . editors )  ; %NWL%this . property_order = this . property_order . sort ( function ( a , b )  {%NWL%var ordera = self . editors [ a ]  . schema . propertyOrder ; %NWL%var orderb = self . editors [ b ]  . schema . propertyOrder ; %NWL%if ( typeof ordera ! =  =  " number "  ) ordera = 1000 ; %NWL%if ( typeof orderb ! =  =  " number "  ) orderb = 1000 ; %NWL%9
var config = this . config ; %NWL%this . xScale = fnCreateScale (  ' pos '  , config . x ,  [ 0 , config . options . width ]  )  ; %NWL%this . yScale = fnCreateScale (  ' pos '  , config . y ,  [ config . options . height , 0 ]  )  ; %NWL%this . color = fnCreateScale (  ' color '  , config . color ,  {  }  )  ; %NWL%this . size = fnCreateScale (  ' size '  , config . size ,  {  }  )  ; %NWL%return this ;%NWL%}%NWL%drawFrames ( frames )  {%NWL%var guide = this . config . guide ; %NWL%var options = this . config . options ; %NWL%var xScale = this . xScale ; %NWL%0
}%NWL%_objects [ i ]  . vertCount  = data . infos [ i ]  . vertCount ; %NWL%_objects [ i ]  . vertOffset = data . infos [ i ]  . vertOffset ; %NWL%_objects [ i ]  . complete  = false ; %NWL%WebGL . texture ( gl , data . infos [ i ]  . texture , onTextureLoaded , i )  ;%NWL%}%NWL%}%NWL%function render ( gl , modelView , projection , normalMat , fog , light )%NWL%{%NWL%var uniform  = _program . uniform ; %NWL%var attribute = _program . attribute ; %NWL%9
return p1 . row =  = p2 . row && p1 . column =  = p2 . column ;%NWL%}%NWL%exports . onSessionChange = function ( e )  {%NWL%var session = e . session ; %NWL%if ( !session . multiSelect )  {%NWL%session . $selectionMarkers =  [  ]  ; %NWL%session . selection . $initRangeList (  )  ; %NWL%session . multiSelect = session . selection ;%NWL%}%NWL%this . multiSelect = session . multiSelect ; %NWL%var oldSession = e . oldSession ; %NWL%3
args . push ( callback )  ;  /  / Add the callback function as the last argument .%NWL%f . apply ( fs , args )  ;  /  / raw node doesn ' t need fs to be passed for ' this ' but%NWL%return d . promise ;%NWL%}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%var readdir = promisedFunction (  ' readdir '  )  ; %NWL%7
newSession (  )  {%NWL%var child = this . constructor . create (  {%NWL%parent : this ,%NWL%context : this . context ,%NWL%idManager : this . idManager%NWL%}  )  ; %NWL%return child ;%NWL%}%NWL%getShadow ( model )  {%NWL%var shadows = this . shadows ; %NWL%var models = this . models ; %NWL%9
var express = require (  " express "  )  ; %NWL%var fs = require (  " graceful - fs "  )  ; %NWL%var path = require (  " path "  )  ; %NWL%var Q = require (  " q "  )  ; %NWL%Q . longStackSupport = true ; %NWL%var http = require (  " http "  )  ; %NWL%var xtend = require (  " xtend "  )  ; %NWL%var config = require (  "  .  / config "  )  ; %NWL%var filesize = require (  " filesize "  )  ; %NWL%var writeFile = Q . denodeify ( fs . writeFile )  ; %NWL%var readFile = Q . denodeify ( fs . readFile )  ; %NWL%9
var debug = require (  ' debug '  )  (  ' superagent '  )  ; %NWL%var formidable = require (  ' formidable '  )  ; %NWL%var Response = require (  '  .  / response '  )  ; %NWL%var parse = require (  ' url '  )  . parse ; %NWL%var format = require (  ' url '  )  . format ; %NWL%var methods = require (  ' methods '  )  ; %NWL%var Stream = require (  ' stream '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var extend = require (  ' extend '  )  ; %NWL%var Part = require (  '  .  / part '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%1
packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%var externals = taffy ( members . externals )  ; %NWL%6
}  )  ,%NWL%init : function ( cfg )  {%NWL%this . cfg = this . cfg . extend ( cfg )  ;%NWL%}  ,%NWL%compute : function ( password , salt )  {%NWL%var cfg = this . cfg ; %NWL%var hasher = cfg . hasher . create (  )  ; %NWL%var derivedKey = WordArray . create (  )  ; %NWL%var derivedKeyWords = derivedKey . words ; %NWL%var keySize = cfg . keySize ; %NWL%var iterations = cfg . iterations ; %NWL%9
var NativeMethodsMixin = require (  ' NativeMethodsMixin '  )  ; %NWL%var ReactIOSComponentMixin = require (  ' ReactIOSComponentMixin '  )  ; %NWL%var ReactIOSEventEmitter = require (  ' ReactIOSEventEmitter '  )  ; %NWL%var ReactIOSStyleAttributes = require (  ' ReactIOSStyleAttributes '  )  ; %NWL%var ReactIOSTagHandles = require (  ' ReactIOSTagHandles '  )  ; %NWL%var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var RCTUIManager = require (  ' NativeModules '  )  . UIManager ; %NWL%var styleDiffer = require (  ' styleDiffer '  )  ; %NWL%var deepFreezeAndThrowOnMutationInDev = require (  ' deepFreezeAndThrowOnMutationInDev '  )  ; %NWL%var diffRawProperties = require (  ' diffRawProperties '  )  ; %NWL%var flattenStyle = require (  ' flattenStyle '  )  ; %NWL%0
return editable ;%NWL%}  ; %NWL%BitmapIndexedNode . prototype . ensureOwner = function ( ownerID )  {  " use strict "  ; %NWL%if ( ownerID && ownerID =  =  = this . ownerID )  {%NWL%return this ;%NWL%}%NWL%return new BitmapIndexedNode ( ownerID , this . bitmap , this . keys . slice (  )  , this . values . slice (  )  )  ;%NWL%}  ; %NWL%BitmapIndexedNode . prototype . iterate = function ( map , fn , reverse )  {  " use strict "  ; %NWL%var values = this . values ; %NWL%var keys = this . keys ; %NWL%9
TurbulenzEngine . setTimeout ( requestFn , retryAfter * 1000 )  ;%NWL%}  ; %NWL%RequestHandler . prototype . request = function ( callContext )  {%NWL%var makeRequest ; %NWL%var that = this ; %NWL%var responseCallback = function responseCallbackFn ( responseAsset , status )  {%NWL%if ( that . destroyed )  {%NWL%return ;%NWL%}%NWL%var sendEventToHandlers = that . sendEventToHandlers ; %NWL%var handlers = that . handlers ; %NWL%9
}%NWL%}%NWL%}  . observes (  ' parentView . layout '  ,  ' needScrolling '  )  ,%NWL%_scrollTo : function ( position , scrollTime )  {%NWL%var viewPort = this . get (  ' viewPort '  )  . $ (  )  ; %NWL%viewPort . scrollTop ( position )  ;%NWL%}  ,%NWL%scroll : function (  )  {%NWL%var scrollDirection = this . get (  ' scrollDirection '  )  ; %NWL%var scrollTime = 20 ; %NWL%var scrollSize = this . get (  ' scrollSize '  )  ; %NWL%8
}  ,%NWL%checkUrl : function ( e )  {%NWL%var current = this . getFragment (  )  ; %NWL%if ( current =  = this . fragment ) return false ; %NWL%this . loadUrl (  )  ;%NWL%}  ,%NWL%loadUrl : function ( fragmentOverride )  {%NWL%this . fragment = this . getFragment ( fragmentOverride )  ; %NWL%this . debug (  ' Loading '  , this . fragment )  ; %NWL%var current = this . current (  )  ; %NWL%var next = this . next (  )  ; %NWL%9
logger . warn (  ' Report data error : not found order <  '  , orderId ,  '  >  '  )%NWL%return%NWL%}%NWL%var laborId = data . laborId%NWL%if ( ! ( laborId in this . labors )  )  {%NWL%logger . warn (  ' Report data error : not found labor <  '  , laborId ,  '  >  '  )%NWL%return%NWL%}%NWL%var order = this . orders [ orderId ]%NWL%var labor = this . labors [ laborId ]%NWL%var action = data . action%NWL%3
xysData . _chunkDownloadsInProgress [ chunkIndex ]  = deferred ; %NWL%var chunkUrl ; %NWL%var xysFileUrlTemplate = xysData . _xysFileUrlTemplate ; %NWL%if ( defined ( xysFileUrlTemplate )  )  {%NWL%chunkUrl = xysFileUrlTemplate . replace (  '  { 0 }  '  , chunkIndex )  ;%NWL%} else {%NWL%chunkUrl = buildModuleUrl (  ' Assets / IAU2006_XYS / IAU2006_XYS_ '  + chunkIndex +  '  . json '  )  ;%NWL%}%NWL%when ( loadJson ( chunkUrl )  , function ( chunk )  {%NWL%xysData . _chunkDownloadsInProgress [ chunkIndex ]  = false ; %NWL%var samples = xysData . _samples ; %NWL%2
var ret = this [ front ]  ; %NWL%this [ front ]  = void 0 ; %NWL%this . _front =  ( front + 1 ) & ( this . _capacity - 1 )  ; %NWL%this . _length = length - 1 ; %NWL%return ret ;%NWL%}  ; %NWL%Deque . prototype . unshift = function Deque$unshift ( item )  {%NWL%var length = this . _length ; %NWL%var argsLength = arguments . length ; %NWL%if ( argsLength > 1 )  {%NWL%var capacity = this . _capacity ; %NWL%7
it (  ' should return a single className '  , function (  )  {%NWL%expect ( joinClasses (  ' aaa '  )  )  . toEqual (  ' aaa '  )  ;%NWL%}  )  ; %NWL%it (  ' should join two classes together '  , function (  )  {%NWL%var aaa =  ' aaa '  ; %NWL%var bbb =  ' bbb '  ; %NWL%expect ( joinClasses ( aaa , bbb )  )  . toEqual (  ' aaa bbb '  )  ;%NWL%}  )  ; %NWL%it (  ' should join many classes together '  , function (  )  {%NWL%var aaa =  ' aaa '  ; %NWL%var bbb =  ' bbb '  ; %NWL%4
, InitializationError = require (  '  .  / errors '  )  . InitializationError%NWL%, ReadStream  = require (  '  .  / read - stream '  )%NWL%, WriteStream  = require (  '  .  / write - stream '  )%NWL%, util    = require (  '  .  / util '  )%NWL%, Batch    = require (  '  .  / batch '  )%NWL%, codec    = require (  '  .  / codec '  )%NWL%, getOptions  = util . getOptions%NWL%, defaultOptions = util . defaultOptions%NWL%, getLevelDOWN  = util . getLevelDOWN%NWL%, dispatchError  = util . dispatchError%NWL%, isDefined   = util . isDefined%NWL%6
c = parseInt ( hex . substr ( i * 2 , 2 )  , 16 )  ; %NWL%c = Math . round ( Math . min ( Math . max ( 0 , c +  ( c * lum )  )  , 255 )  )  . toString ( 16 )  ; %NWL%rgb +  =  (  " 00 "  + c )  . substr ( c . length )  ;%NWL%}%NWL%return rgb ;%NWL%}%NWL%lib . api . colors = function ( api )  {%NWL%var darken = api . darken = function ( color , percents )  {%NWL%return ColorLuminance ( color ,  -  ( percents / 100 )  )  ;%NWL%}%NWL%var lighten = api . lighten = function ( color , percents )  {%NWL%7
packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%var externals = taffy ( members . externals )  ; %NWL%6
' tag '  :  shape . tagName ,%NWL%' attrs '  :  attrs ,%NWL%' content '  : thin . core . ShapeStructure . serializeToContent ( textLineShapes )%NWL%}  ; %NWL%return json ;%NWL%}  ; %NWL%thin . core . ShapeStructure . serializeForImageblock_ = function ( shape , json )  {%NWL%var left = Number ( shape . getAttribute (  ' x - left '  )  )  ; %NWL%var top = Number ( shape . getAttribute (  ' x - top '  )  )  ; %NWL%var width = Number ( shape . getAttribute (  ' x - width '  )  )  ; %NWL%var height = Number ( shape . getAttribute (  ' x - height '  )  )  ; %NWL%7
}%NWL%return false ;%NWL%}%NWL%return function ( req , res , next )  {%NWL%if ( res . _livereload )  {%NWL%return next (  )  ;%NWL%}%NWL%res . _livereload = true ; %NWL%var writeHead = res . writeHead ; %NWL%var write = res . write ; %NWL%var end = res . end ; %NWL%8
module . exports = authify%NWL%function authify ( authed , parsed , headers , credentials )  {%NWL%if ( credentials && credentials . token )  {%NWL%this . log . verbose (  ' request '  ,  ' using bearer token for auth '  )%NWL%headers . authorization =  ' Bearer '  + credentials . token%NWL%return null%NWL%}%NWL%if ( authed )  {%NWL%if ( credentials && credentials . username && credentials . password )  {%NWL%var username = encodeURIComponent ( credentials . username )%NWL%var password = encodeURIComponent ( credentials . password )%NWL%9
}  ,%NWL%parse : function (  )  {%NWL%var drawingId = dojo . attr ( this . domNode ,  " drawingId "  )  ; %NWL%this . drawing = dojox . drawing . util . common . byId ( drawingId )  ; %NWL%!this . drawing && console . error (  " Drawing not found based on ' drawingId ' in Toolbar .  "  )  ; %NWL%this . toolNodes =  {  }  ; %NWL%var _sel ; %NWL%dojo . query (  "  >  "  , this . domNode )  . forEach ( function ( node , i )  {%NWL%node . className = this . buttonClass ; %NWL%var tool = dojo . attr ( node ,  " tool "  )  ; %NWL%var action = dojo . attr ( node ,  " action "  )  ; %NWL%9
assert ( typeof flash =  =  =  ' string '  ,  ' flash must be a string '  )  ;%NWL%}%NWL%var remoteUser = env . remoteUser ; %NWL%if ( remoteUser )  {%NWL%assert ( typeof remoteUser =  =  =  ' string '  ,  ' remoteUser must be a string '  )  ;%NWL%}%NWL%var route = env . route ; %NWL%if ( route )  {%NWL%assert ( typeof route =  =  =  ' object '  ,  ' route must be an object '  )  ;%NWL%}%NWL%var session = env . session ; %NWL%2
setup : expect . html . mocked%NWL%}  ,%NWL%{%NWL%consumes :  [  " c9 "  ,  " watcher "  ,  " fs "  ]  ,%NWL%provides :  [  ]  ,%NWL%setup : main%NWL%}%NWL%]  , architect )  ; %NWL%function main ( options , imports , register )  {%NWL%var watcher = imports . watcher ; %NWL%var fs = imports . fs ; %NWL%9
this . _overrideEvent (  )  ; %NWL%this . form . reset (  )  ; %NWL%var model = this . event ; %NWL%this . getEl (  ' title '  )  . value = model . title ; %NWL%this . getEl (  ' location '  )  . value = model . location ; %NWL%var dateSrc = model ; %NWL%if ( model . remote . isRecurring && this . busytime )  {%NWL%dateSrc = this . busytime ;%NWL%}%NWL%var startDate = dateSrc . startDate ; %NWL%var endDate = dateSrc . endDate ; %NWL%9
__afterFunction : function (  )  {%NWL%this . assertTrue ( this . map . normalCallback =  =  = 0 )  ; %NWL%var mydiv4 = aria . utils . Dom . getElementById (  ' mydiv4 '  )  ; %NWL%this . synEvent . click ( mydiv4 ,  {%NWL%fn : this . __afterFunctionAlone ,%NWL%scope : this%NWL%}  )  ;%NWL%}  ,%NWL%__afterFunctionAlone : function (  )  {%NWL%this . assertTrue ( this . map . functionAlone =  = 1 )  ; %NWL%var mydiv5 = aria . utils . Dom . getElementById (  ' mydiv5 '  )  ; %NWL%2
loadScript . apply ( this , paras )  ; %NWL%return ;%NWL%}%NWL%else {%NWL%message = dojo . fromJson ( message )  ;%NWL%}%NWL%}%NWL%if ( message . type =  =  " subscribe "  )  {%NWL%( function (  )  {%NWL%var index = message . index ; %NWL%var name  = message . name ; %NWL%9
assert . equal ( actual . hdvideoState , expected . hdvideoState )  ; %NWL%assert . deepEqual ( actual . storageFifo , expected . storageFifo )  ; %NWL%assert . deepEqual ( actual . usbkey , expected . usbkey )  ; %NWL%assert . equal ( actual . frameNumber , expected . frameNumber )  ;%NWL%}  ,%NWL%' parses wifi option '  : function (  )  {%NWL%var wifi = parseNavdata ( fixture )  . wifi ; %NWL%assert . equal ( wifi . linkQuality , 1 )  ;%NWL%}  ,%NWL%' parses gps option '  : function (  )  {%NWL%var gps = parseNavdata ( fixture )  . gps ; %NWL%6
break ; %NWL%case ANALYSISTYPE_WAVEFORM : %NWL%analyser . smoothingTimeConstant = 0 . 1 ; %NWL%analyser . getByteTimeDomainData ( freqByteData )  ; %NWL%break ;%NWL%}%NWL%this . drawGL (  )  ;%NWL%}%NWL%AnalyserView . prototype . drawGL = function (  )  {%NWL%var canvas = this . canvas ; %NWL%var gl = this . gl ; %NWL%9
Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%for ( var i = 0 ; i < elements . length ; i +  +  )  {%NWL%var element = elements [ i ]  ; %NWL%Sys . UI . DomElement . removeCssClass ( element , Sys . Mvc . FieldContext . _inputElementValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( element , Sys . Mvc . FieldContext . _inputElementErrorCss )  ;%NWL%}%NWL%}  ,%NWL%_displaySuccess : function Sys_Mvc_FieldContext$_displaySuccess (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%2
]  , function (%NWL%defined )  {%NWL%" use strict "  ; %NWL%var a ; %NWL%var isCrossOriginUrl = function ( url )  {%NWL%if ( !defined ( a )  )  {%NWL%a = document . createElement (  ' a '  )  ;%NWL%}%NWL%a . href = window . location . href ; %NWL%var host = a . host ; %NWL%var protocol = a . protocol ; %NWL%9
}  ,%NWL%_displaySuccess : function Sys_Mvc_FieldContext$_displaySuccess (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%if ( validationMessageElement )  {%NWL%if ( this . replaceValidationMessageContents )  {%NWL%Sys . Mvc . _validationUtil . setInnerText ( validationMessageElement ,  '  '  )  ;%NWL%}%NWL%Sys . UI . DomElement . removeCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageValidCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%2
if ( e . paren )  {%NWL%return '  (  '  + str +  '  )  '  ;%NWL%} else {%NWL%return str ;%NWL%}%NWL%}%NWL%function aggrToSQL ( e )  {%NWL%var args = e . args ; %NWL%var expr = args . expr%NWL%var str = exprToSQL ( args . expr )  ; %NWL%var name = e . name ; %NWL%7
}%NWL%return txt ;%NWL%}  ,%NWL%getItems : function ( treeRequest )  {%NWL%var me = this ; %NWL%var destroyBeforeAppend = treeRequest . get (  ' destroyBeforeAppend '  )  ; %NWL%var url = treeRequest . get (  ' url '  )  ; %NWL%var isLeaf = treeRequest . get (  ' isLeaf '  )  ; %NWL%var enableCheckSelection = treeRequest . get (  ' enableCheckedItems '  )  ; %NWL%var nodeToAppendTo = treeRequest . get (  ' nodeToAppendTo '  )  ; %NWL%var nodeType = treeRequest . get (  ' nodeType '  )  ; %NWL%5
}%NWL%}  ,%NWL%hiddenPixels : function (  )  {%NWL%return this . pixels . filter ( function ( p )  { return p . isHidden ;  }  )  ;%NWL%}  ,%NWL%visiblePixels : function (  )  {%NWL%return this . pixels . filter ( function ( p )  { return !p . isHidden ;  }  )  ;%NWL%}  ,%NWL%moveFadedPixel : function (  )  {%NWL%var hiddenPixels = this . hiddenPixels (  )  ; %NWL%var visiblePixels = this . visiblePixels (  )  ; %NWL%9
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdAttribute (  ' TEST_ELEMENT '  ,  ' test_attr '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / attribute / test_attr '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdClick : function ( test )  {%NWL%var client = this . client ; %NWL%0
zapp . resultHandler = function (  )  { test . ok ( false ,  ' The resultHandler was executed '  )  ;  }  ; %NWL%zapp ( 1 )  ; %NWL%test . expect ( 4 )  ; %NWL%test . done (  )  ;%NWL%}  ,%NWL%' 11 . Zen should run two handler with 2 parameters '  : function ( test )  {%NWL%var hw1 = function ( value1 , value2 , next )  { test . ok ( true ,  ' The handler was executed '  )  ; next (  )  ;  }  ; %NWL%var hw2 = function ( value1 , value2 , next )  {%NWL%test . ok ( arguments . length =  =  = 3 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof value1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + value1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof value2 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + value2 +  ' ` .  '  )  ; %NWL%9
var extend = _dereq_ (  '  .  / util '  )  . extend ; %NWL%var api =  {  }  ,%NWL%apiNodeList =  {  }  ,%NWL%$ =  {  }  ; %NWL%var array = _dereq_ (  '  .  / array '  )  ; %NWL%var attr = _dereq_ (  '  .  / attr '  )  ; %NWL%var className = _dereq_ (  '  .  / class '  )  ; %NWL%var data = _dereq_ (  '  .  / data '  )  ; %NWL%var dom = _dereq_ (  '  .  / dom '  )  ; %NWL%var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%var event = _dereq_ (  '  .  / event '  )  ; %NWL%4
. addConstraint ( new c . Inequality ( y , c . GEQ , x )  )%NWL%. addConstraint ( new c . Inequality ( z , c . GEQ , y )  )%NWL%. addConstraint ( new c . Inequality ( z , c . GEQ , 8 )  )  ; %NWL%assert . throws (%NWL%solver . addConstraint . bind ( solver , new c . Inequality ( z , c . LEQ , 4 )  )  ,%NWL%c . RequiredFailure )  ;%NWL%}  )  ; %NWL%it (  ' inconsistent4 '  , function (  )  {%NWL%var solver = new c . SimplexSolver (  )  ; %NWL%var x = new c . Variable (  { name :  ' x '  }  )  ; %NWL%var y = new c . Variable (  { name :  ' y '  }  )  ; %NWL%9
WScript . quit ( 1 )%NWL%return%NWL%}%NWL%require (  ' child - process - close '  )%NWL%var EventEmitter = require (  " events "  )  . EventEmitter%NWL%, npm = module . exports = new EventEmitter (  )%NWL%, npmconf = require (  "  .  / config / core . js "  )%NWL%, log = require (  " npmlog "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, path = require (  " path "  )%NWL%, abbrev = require (  " abbrev "  )%NWL%9
webpg . utils . sendRequest ( params )  ;%NWL%}  ;%NWL%}%NWL%if ( webpg . overlay . insert_target &&%NWL%typeof ( webpg . overlay . insert_target . updateElementValue ) ! =  ' undefined '  )  {%NWL%webpg . overlay . insert_target . updateElementValue ( webpg . overlay . insert_target )  ;%NWL%}%NWL%webpg . overlay . block_target = false ;%NWL%} else if ( request . msg =  =  =  ' openDialog '  )  {%NWL%var target = webpg . overlay . insert_target ; %NWL%var range = webpg . overlay . insert_range ; %NWL%9
grunt . util = util ; %NWL%grunt . util . task = require (  '  .  / util / task '  )  ; %NWL%var Log = require (  ' grunt - legacy - log '  )  . Log ; %NWL%var log = new Log (  { grunt : grunt }  )  ; %NWL%grunt . log = log ; %NWL%gRequire (  ' template '  )  ; %NWL%gRequire (  ' event '  )  ; %NWL%var fail = gRequire (  ' fail '  )  ; %NWL%gRequire (  ' file '  )  ; %NWL%var option = gRequire (  ' option '  )  ; %NWL%var config = gRequire (  ' config '  )  ; %NWL%7
var uncurry      = plugins . get (  " uncurry "  )  ; %NWL%var _undefined  = g . undefined ; %NWL%var _Infinity  = g . Infinity ; %NWL%var Math_min  = g . Math . min ; %NWL%var Math_LN10  = g . Math . LN10 ; %NWL%var _Array   = g . Array ; %NWL%var _parseFloat = g . parseFloat ; %NWL%var _concat  = uncurry ( _Array . prototype . concat )  ; %NWL%var _join   = uncurry ( _Array . prototype . join )  ; %NWL%var _substring  = uncurry ( g . String . prototype . substring )  ; %NWL%var ExactRational    = plugins . get (  " ExactRational "  )  ; %NWL%0
if ( !Cartesian2 . equals ( v , _value [ i ]  )  )  {%NWL%_value [ i ]  = Cartesian2 . clone ( v , _value [ i ]  )  ; %NWL%gl . uniform2f ( locations [ i ]  , v . x , v . y )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%UniformArray . prototype . setFloatVec3 = function (  )  {%NWL%var gl = this . _gl ; %NWL%var locations = this . _locations ; %NWL%var value = this . value ; %NWL%var _value = this . _value ; %NWL%9
}  ,%NWL%onResized : function (  )  {%NWL%this . _calcHitGrid (  )  ;%NWL%}  ,%NWL%_onGridMouseMove : function ( x , y )  {%NWL%this . pos =  { x : x , y : y }  ; %NWL%this . _paint (  )  ;%NWL%}  ,%NWL%_paint : function (  )  {%NWL%var x = this . pos . x ; %NWL%var y = this . pos . y ; %NWL%9
doc = new ActiveXObject (  " Msxml . DOMDocument "  )  ;%NWL%} else%NWL%doc = doc . ownerDocument ||%NWL%doc . getOwnerDocument && doc . getOwnerDocument (  ) ||%NWL%doc ; %NWL%var elems =  [  ]  ,%NWL%documentElement = doc . documentElement ||%NWL%doc . getDocumentElement && doc . getDocumentElement (  )  ; %NWL%if ( !documentElement && doc . createElement )  ( function (  )  {%NWL%var html = doc . createElement (  " html "  )  ; %NWL%var head = doc . createElement (  " head "  )  ; %NWL%9
PolylinePipeline ,%NWL%PrimitiveType )  {%NWL%" use strict "  ; %NWL%var cartesian1 = new Cartesian3 (  )  ; %NWL%var cartesian2 = new Cartesian3 (  )  ; %NWL%var cartesian3 = new Cartesian3 (  )  ; %NWL%function combine ( computedPositions , cornerType )  {%NWL%var wallIndices =  [  ]  ; %NWL%var positions = computedPositions . positions ; %NWL%var corners = computedPositions . corners ; %NWL%var endPositions = computedPositions . endPositions ; %NWL%8
var breakpoint = Breakpoint . fromJson ( v8Breakpoints . breakpoints [ i ]  , _self . $debugger )  ; %NWL%var id = breakpoint . source +  " | "  + breakpoint . line ; %NWL%_self . $breakpoints [ id ]  = breakpoint ; %NWL%model . removeXml (  " breakpoint [ @script =  '  "  + breakpoint . source +  "  ' and @line =  '  "  + breakpoint . line +  "  '  ]  "  )  ; %NWL%breakpoint . xml = model . appendXml ( _self . $getBreakpointXml ( breakpoint , 0 )  )  ;%NWL%}%NWL%}%NWL%var modelBps = model . queryNodes (  " breakpoint "  ) || [  ]  ; %NWL%apf . asyncForEach ( Array . prototype . slice . call ( modelBps , 0 )  , function ( modelBp , next )  {%NWL%var script = modelBp . getAttribute (  " script "  )  ; %NWL%var line  = modelBp . getAttribute (  " line "  )  ; %NWL%9
projection :  ' EPSG : 3857 '  ,%NWL%tileGrid : new ol . tilegrid . XYZ (  {%NWL%maxZoom : 19%NWL%}  )  ,%NWL%url :  ' http :  /  /  { a - c }  . tile . openstreetmap . us /  '  +%NWL%' vectiles - highroad /  { z }  /  { x }  /  { y }  . topojson '%NWL%}  )  ,%NWL%style : function ( feature , resolution )  {%NWL%var kind = feature . get (  ' kind '  )  ; %NWL%var railway = feature . get (  ' railway '  )  ; %NWL%var sort_key = feature . get (  ' sort_key '  )  ; %NWL%8
{%NWL%var tempnoise =  [  ]  ;  /  /  [ this . n_size_sq * this . noise_frames ]%NWL%var temp ; %NWL%var i ; %NWL%var frame ; %NWL%var v ; %NWL%var u ; %NWL%var	v0 , v1 , v2 , u0 , u1 , u2 , f ; %NWL%var n_size_sq = this . n_size_sq ; %NWL%var noise_frames = this . noise_frames ; %NWL%var n_size = this . n_size ; %NWL%8
}%NWL%Donatello . Tri . prototype = new Donatello ( null )  ; %NWL%Donatello . prototype . tri = function ( x1 , y1 , x2 , y2 , x3 , y3 , a )  {%NWL%return new Donatello . Tri ( this , x1 , y1 , x2 , y2 , x3 , y3 , a )  ;%NWL%}  ; %NWL%Donatello . Tri . prototype . draw = function (  )  {%NWL%var s = this . properties [  ' stroke - width '  ]  ; %NWL%var x1 = this . properties . x1 ; %NWL%var y1 = this . properties . y1 ; %NWL%var x2 = this . properties . x2 ; %NWL%var y2 = this . properties . y2 ; %NWL%7
this . user = args . user%NWL%}  }%NWL%UserStorage_store_args . prototype =  {  }%NWL%UserStorage_store_args . prototype . read = function ( input )  {%NWL%var ret = input . readStructBegin (  )%NWL%while ( 1 )%NWL%{%NWL%var ret = input . readFieldBegin (  )%NWL%var fname = ret . fname%NWL%var ftype = ret . ftype%NWL%var fid  = ret . fid%NWL%8
var then =  ( new Date (  )  )  . getTime (  )  ; %NWL%addEventListener (  " message "  ,%NWL%function ( e )  {%NWL%var data = e . data ; %NWL%switch ( data . cmd )  {%NWL%case " setConfigs "  : %NWL%setConfigs ( data . configs )  ; %NWL%break ; %NWL%case " createBody "  : %NWL%var bodyId = data . bodyId ; %NWL%var bodyCfg = data . bodyCfg ; %NWL%9
var fs = require (  ' fs '  )  ; %NWL%fs . exists (  '  .  / assets / vars . js '  , function ( exists )  {%NWL%if ( !exists )  {%NWL%grunt . fail . fatal (  '  .  / assets / vars . js does not exist .  '  )  ;%NWL%}%NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%grunt . registerTask (  ' check - imgur - credit '  , function checkImgurCredit (  )  {%NWL%var https = require (  ' https '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%9
var arr = utils . arr ; %NWL%var vectors = gamejs . utils . vectors ; %NWL%var math = gamejs . utils . math ; %NWL%radians = math . radians ; %NWL%degrees = math . degrees ; %NWL%var animation = require (  '  .  / animation '  )  ; %NWL%var STEER_NONE = exports . STEER_NONE = 0 ; %NWL%var STEER_RIGHT = exports . STEER_RIGHT = 1 ; %NWL%var STEER_LEFT = exports . STEER_LEFT = 2 ; %NWL%var ACC_NONE = exports . ACC_NONE = 0 ; %NWL%var ACC_ACCELERATE = exports . ACC_ACCELERATE = 1 ; %NWL%7
var path = require (  ' path '  )  ; %NWL%var core = require (  '  .  / core . js '  )  ; %NWL%var engine = require (  '  .  / engine . js '  )  ; %NWL%var services = require (  '  .  / services . js '  )  ; %NWL%var util = require (  '  .  / util . js '  )  ; %NWL%var helpers = util . helpers ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var share = require (  '  .  / share . js '  )  ; %NWL%var disco = require (  '  .  / app / discovery . js '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var npm = require (  ' npm '  )  ; %NWL%0
var meta   = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " meta "  )  ; %NWL%meta . setAttribute (  " http - equiv "  ,  " Content - Type "  )  ; %NWL%meta . setAttribute (  " content "  ,  " text / html ; charset = UTF - 8 "  )  ; %NWL%head . appendChild ( meta )  ; %NWL%var title  = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " title "  )%NWL%title . appendChild ( doc . createTextNode (  " hc_staff "  )  )  ; %NWL%var title  = head . appendChild ( title )  ; %NWL%head . appendChild ( doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " script "  )  )  ; %NWL%head . appendChild ( doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " script "  )  )  ; %NWL%head . appendChild ( doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " script "  )  )  ; %NWL%var body   = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " body "  )  ; %NWL%0
}%NWL%}  ,%NWL%willDestroyElement : function (  )  {%NWL%var card = this . get (  ' controller . card '  )  ; %NWL%if ( card )  {%NWL%card . destroy (  )  ;%NWL%}%NWL%}  ,%NWL%appendCard : function ( card )  {%NWL%var element = this . get (  ' element '  )  ; %NWL%var parentView = this . get (  ' parentView '  )  ; %NWL%9
assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | = y )  "  , aExpr (  " | =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ = y )  "  , aExpr (  " ^ =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%1
hash = hash && typeof hash =  =  ' string ' ? hash : new String ( window . location . hash )  ; %NWL%hashchanged . delay ( 1 , window ,  [ hash ]  )  ;%NWL%}%NWL%}%NWL%else {  /  / Others%NWL%if ( Browser . opera )  {%NWL%history . navigationMode =  ' compatible '  ;%NWL%}%NWL%checker = function ( hash )  {%NWL%var checker = window . retrieve (  ' hashchange : checker '  )  ; %NWL%var timer = window . retrieve (  ' hashchange : timer '  )  ; %NWL%9
params :  "  "%NWL%}%NWL%}  )  ; %NWL%App . MediaDataSource = SC . DataSource . extend (%NWL%{%NWL%fetch : function ( store , query )  {%NWL%var auth_string = App . get (  " INSTAGRAM_AUTH_STRING "  )  ; %NWL%var q = query . get (  " query "  )  ; %NWL%var endpoint = q . endpoint ; %NWL%var id = q . id ; %NWL%var qualifier = q . qualifier ; %NWL%8
var MapRenderer   = require (  ' Renderer / MapRenderer '  )  ; %NWL%var EntityManager  = require (  ' Renderer / EntityManager '  )  ; %NWL%var Entity    = require (  ' Renderer / Entity / Entity '  )  ; %NWL%var Altitude   = require (  ' Renderer / Map / Altitude '  )  ; %NWL%var MapControl   = require (  ' Controls / MapControl '  )  ; %NWL%var Mouse    = require (  ' Controls / MouseEventHandler '  )  ; %NWL%var KEYS    = require (  ' Controls / KeyEventHandler '  )  ; %NWL%var UIManager   = require (  ' UI / UIManager '  )  ; %NWL%var Background   = require (  ' UI / Background '  )  ; %NWL%var Escape    = require (  ' UI / Components / Escape / Escape '  )  ; %NWL%var ChatBox    = require (  ' UI / Components / ChatBox / ChatBox '  )  ; %NWL%9
SimpleMotor . prototype . applyCachedImpulse = function ( dt_coef )%NWL%{%NWL%var a = this . a ; %NWL%var b = this . b ; %NWL%var j = this . jAcc * dt_coef ; %NWL%a . w -  = j * a . i_inv ; %NWL%b . w +  = j * b . i_inv ;%NWL%}  ; %NWL%SimpleMotor . prototype . applyImpulse = function (  )%NWL%{%NWL%var a = this . a ; %NWL%3
var errorHandler = require (  " errorhandler "  )  ; %NWL%var express = require (  " express "  )  ; %NWL%var fs = require (  " fs "  )  ; %NWL%var http = require (  " http "  )  ; %NWL%var methodOverride = require (  " method - override "  )  ; %NWL%var logger = require (  " morgan "  )  ; %NWL%var multer = require (  " multer "  )  ; %NWL%var passport = require (  " passport "  )  ; %NWL%var FacebookStrategy = require (  " passport - facebook "  )  . Strategy ; %NWL%var GitHubStrategy = require (  " passport - github "  )  . Strategy ; %NWL%var path = require (  " path "  )  ; %NWL%1
var libraryTree = document . getElementById (  " libraryTree "  )  ; %NWL%libraryTree . treeBoxObject . view = treeView ; %NWL%rainbowc . observers . addObserver ( library . onChangeObserver ,  " rainbow - color - added "  , false )  ; %NWL%rainbowc . observers . addObserver ( library . onChangeObserver ,  " rainbow - color - edited "  , false )  ; %NWL%library . stylesheet = rainbowc . getStyleSheetByTitle (  " treeColors "  )  ; %NWL%var colors = rainbowc . storage . allColors (  )  ; %NWL%library . addColorRules ( colors )  ; %NWL%library . sortAndSet ( colors )  ; %NWL%var contrast = document . getElementById (  " context - contrast "  )  ; %NWL%contrast . setAttribute (  " rainbow - platform "  , rainbowc . getPlatform (  )  )  ; %NWL%var filterBox = document . getElementById (  " filterBox "  )  ; %NWL%0
emitToRoom ( room ,  ' leave '  ,  {%NWL%user : user%NWL%}  )  ; %NWL%enemies . unattack ( users . get ( user )  , room )  ; %NWL%socket . leave ( room )  ;%NWL%}  ; %NWL%handlers . move = function ( data )  {%NWL%var user = data . user ; %NWL%var room = data . room ; %NWL%var dir = data . dir ; %NWL%var x = data . x ; %NWL%7
filetype_detail . append (  "  < div style =  ' width : 100% ;  '  > Editor <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  >  < input class =  ' editor ' style =  ' width : 200px ;  ' value =  '  "  + self . get_filetype_info ( $ ( this )  . attr (  " id "  )  ,  " editor "  )  +  "  '  >  <  / input >  <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  > Type <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  >  < input class =  ' type ' style =  ' width : 200px ;  ' value =  '  "  + self . get_filetype_info ( $ ( this )  . attr (  " id "  )  ,  " type "  )  +  "  '  >  <  / input >  <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  > Description <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  >  < textarea class =  ' description ' style =  ' resize : none ; width : 200px ; height : 100px ; overflow : hidden ;  '  >  "  + self . get_filetype_info ( $ ( this )  . attr (  " id "  )  ,  " description "  )  +  "  <  / textarea >  <  / div >  "  )  ;%NWL%}  )  ;%NWL%}%NWL%$ (  " #add "  )  . click ( function (  )  {%NWL%var filetype_list = $ (  " div . filetype_contents "  )  . find (  " div . filetype_list "  )%NWL%var filetype_detail = $ (  " div . filetype_contents "  )  . find (  " div . filetype_detail "  )%NWL%9
var UserStorage_store_result = function ( args )  {%NWL%}%NWL%UserStorage_store_result . prototype =  {  }%NWL%UserStorage_store_result . prototype . read = function ( input )  {%NWL%var ret = input . readStructBegin (  )%NWL%while ( 1 )%NWL%{%NWL%var ret = input . readFieldBegin (  )%NWL%var fname = ret . fname%NWL%var ftype = ret . ftype%NWL%var fid  = ret . fid%NWL%8
console . log ( json )  ; %NWL%try {%NWL%var json = JSON . parse ( message . data )  ; %NWL%if ( json . type =  =  =  " ok "  )  {%NWL%}%NWL%}%NWL%catch ( e )  {  }%NWL%}%NWL%function comment (  )  {%NWL%var name = strip ( document . getElementById (  " comment_name "  )  . value )  ; %NWL%var mail = strip ( document . getElementById (  " comment_mail "  )  . value )  ; %NWL%9
var assert = require (  ' assert '  )%NWL%var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%var isAbsolute = common . isAbsolute%NWL%var setopts = common . setopts%NWL%var ownProp = common . ownProp%NWL%var inflight = require (  ' inflight '  )%NWL%var util = require (  ' util '  )%NWL%var childrenIgnored = common . childrenIgnored%NWL%3
return target ;%NWL%}%NWL%function copyProp ( val , key )  {%NWL%this [ key ]  = val ;%NWL%}%NWL%module . exports = mixIn ;%NWL%}  ,  {  "  .  / forOwn "  : 15 }  ]  , 19 :  [ function ( _dereq_ , module , exports )  {%NWL%' use strict '  ; %NWL%var forEach = _dereq_ (  ' mout / array / forEach '  )  ; %NWL%var mixIn = _dereq_ (  ' mout / object / mixIn '  )  ; %NWL%var merge = _dereq_ (  ' mout / object / merge '  )  ; %NWL%9
}%NWL%return streamResults ;%NWL%}  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var dump = function ( tvar )  {%NWL%fs . writeFileSync (  "  .  / dump . json "  , JSON . stringify ( tvar )  )  ;%NWL%}%NWL%var gulp = require (  ' gulp '  )  ; %NWL%var htmlmin = require (  ' gulp - htmlmin '  )  ; %NWL%var ngmin = require (  ' gulp - ngmin '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%8
serviceClass : dojox . rpc . Rest ,%NWL%conflictDateHeader :  " If - Unmodified - Since "  ,%NWL%commit : function ( kwArgs )  {%NWL%kwArgs = kwArgs || {  }  ; %NWL%var actions =  [  ]  ; %NWL%var alreadyRecorded =  {  }  ; %NWL%var savingObjects =  [  ]  ; %NWL%for ( var i = 0 ; i < dirtyObjects . length ; i +  +  )  {%NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
}  )  ; %NWL%ace . define (  ' ace / mode / sh_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
goog . crypt . Sha1 . prototype . update = function ( bytes , opt_length )  {%NWL%if ( bytes =  = null )  {%NWL%return ;%NWL%}%NWL%if ( !goog . isDef ( opt_length )  )  {%NWL%opt_length = bytes . length ;%NWL%}%NWL%var lengthMinusBlock = opt_length - this . blockSize ; %NWL%var n = 0 ; %NWL%var buf = this . buf_ ; %NWL%var inbuf = this . inbuf_ ; %NWL%9
total_rows : api . _meta . docCount ,%NWL%offset : opts . skip ,%NWL%rows :  [  ]%NWL%}  )  ;%NWL%}%NWL%callback ( errors . error ( errors . IDB_ERROR , err . name , err . message )  )  ;%NWL%}%NWL%function idbAllDocs ( opts , api , idb , callback )  {%NWL%function allDocsQuery ( opts , callback )  {%NWL%var start =  ' startkey ' in opts ? opts . startkey : false ; %NWL%var end =  ' endkey ' in opts ? opts . endkey : false ; %NWL%9
end : endOffset%NWL%}  ;%NWL%}%NWL%function getModernOffsets ( node )  {%NWL%var selection = window . getSelection && window . getSelection (  )  ; %NWL%if ( !selection || selection . rangeCount =  =  = 0 )  {%NWL%return null ;%NWL%}%NWL%var anchorNode = selection . anchorNode ; %NWL%var anchorOffset = selection . anchorOffset ; %NWL%var focusNode = selection . focusNode ; %NWL%8
dashboard . data . reports . push ( rpt_new )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%director_support . plugins . livingWAR_editForm = function ( item )  {%NWL%var form = director_support . plugins . livingWAR_modalForm ; %NWL%var form_title = form . find (  ' h3 '  )  ; %NWL%var title = form . find (  '  [ name =  " title "  ]  '  )  ; %NWL%var details = form . find (  '  [ name =  " details "  ]  '  )  ; %NWL%var tags = form . find (  '  [ name =  " tags "  ]  '  )  ; %NWL%var id = form . find (  '  [ name =  " id "  ]  '  )  ; %NWL%7
var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%7
var path = require (  ' path '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var sprintf = require (  ' sprintf '  )  . sprintf ; %NWL%var hooks = require (  ' deployment / hooks '  )  ; %NWL%var deployTemplates = require (  ' deployment / templates '  )  ; %NWL%var deployServices = require (  ' deployment / services '  )  ; %NWL%var deployFiles = require (  ' deployment / files '  )  ; %NWL%var deployConstants = require (  ' deployment / constants '  )  ; %NWL%var serviceManagement = require (  ' service_management '  )  ; %NWL%var manifest = require (  ' manifest '  )  ; %NWL%0
var plugins = function ( dir )  {%NWL%if ( !dir ) return [  ]  ; %NWL%var files = glob . sync ( path . join ( dir ,  '  *  '  ,  ' index . js '  )  ) || [  ]  ; %NWL%return files . map ( function ( file )  {%NWL%return file . replace ( dir ,  ' plugins '  )  . replace (  / \ . js$ /  ,  '  '  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%module . exports = function ( config )  {%NWL%var bundled_plugin_ids = config . kibana . bundled_plugin_ids || [  ]  ; %NWL%var bundled_plugins = plugins ( config . bundled_plugins_folder )  ; %NWL%var external_plugins = plugins ( config . external_plugins_folder )  ; %NWL%9
else if ( typeof define =  =  ' function ' && typeof define . amd =  =  ' object '  ) define ( definition )%NWL%else this [ name ]  = definition (  )%NWL%}  (  ' qwery '  , function (  )  {%NWL%var doc = document%NWL%, html = doc . documentElement%NWL%, byClass =  ' getElementsByClassName '%NWL%, byTag =  ' getElementsByTagName '%NWL%, qSA =  ' querySelectorAll '%NWL%, useNativeQSA =  ' useNativeQSA '%NWL%, tagName =  ' tagName '%NWL%, nodeType =  ' nodeType '%NWL%8
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
button . top = 5 ; %NWL%button . width = 300 ; %NWL%button . height = 30 ; %NWL%tableViewOptions . top = 45 ; %NWL%win . add ( button )  ;%NWL%}%NWL%var tableview = Titanium . UI . createTableView ( tableViewOptions )  ; %NWL%function showClickEventInfo ( e , islongclick )  {%NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%var row = e . row ; %NWL%8
x : evCoord . x - ul . x ,%NWL%y : evCoord . y - ul . y%NWL%}%NWL%return ;%NWL%}  ,%NWL%handleLayoutRows : function ( event )  {%NWL%var shape = event . shape ; %NWL%var offsetPos = this . offSetPosition ; %NWL%var marginLeft = event . marginLeft ; %NWL%var marginTop = event . marginTop ; %NWL%var spacingX = event . spacingX ; %NWL%6
update : function ( details )%NWL%{%NWL%this . bodyElement . removeChildren (  )  ; %NWL%if ( !details )  {%NWL%var infoElement = this . bodyElement . createChild (  " div "  ,  " info "  )  ; %NWL%infoElement . textContent = WebInspector . UIString (  " Not Paused "  )  ; %NWL%return ;%NWL%}%NWL%this . _target = details . target (  )  ; %NWL%var callFrames = details . callFrames ; %NWL%var asyncStackTrace = details . asyncStackTrace ; %NWL%9
return range ;%NWL%}%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%oop . inherits ( CstyleBehaviour , Behaviour )  ; %NWL%exports . CstyleBehaviour = CstyleBehaviour ;%NWL%}  )  ; %NWL%define (  ' ace / mode / folding / xml '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / range '  ,  ' ace / mode / folding / fold_mode '  ,  ' ace / token_iterator '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%9
var core = breeze . core ; %NWL%var Event = core . Event ; %NWL%var EntityQuery = breeze . EntityQuery ; %NWL%var MetadataStore = breeze . MetadataStore ; %NWL%var EntityManager = breeze . EntityManager ; %NWL%var EntityKey = breeze . EntityKey ; %NWL%var FilterQueryOp = breeze . FilterQueryOp ; %NWL%var Predicate = breeze . Predicate ; %NWL%var QueryOptions = breeze . QueryOptions ; %NWL%var FetchStrategy = breeze . FetchStrategy ; %NWL%var MergeStrategy = breeze . MergeStrategy ; %NWL%0
var sign      = plugins . get (  " sign "  )  ; %NWL%var isZero      = plugins . get (  " isZero "  )  ; %NWL%var isPositive     = plugins . get (  " isPositive "  )  ; %NWL%var isNegative     = plugins . get (  " isNegative "  )  ; %NWL%var eq       = plugins . get (  " eq "  )  ; %NWL%var compare      = plugins . get (  " compare "  )  ; %NWL%var abs       = plugins . get (  " abs "  )  ; %NWL%var negate      = plugins . get (  " negate "  )  ; %NWL%var square      = plugins . get (  " square "  )  ; %NWL%var add       = plugins . get (  " add "  )  ; %NWL%var multiply     = plugins . get (  " multiply "  )  ; %NWL%0
var sha = sjcl . hash [  ' sha '  + shanum ]  ; %NWL%if ( !sha ) continue ; %NWL%var h = sjcl . codec . hex ; %NWL%var ba = sjcl . bitArray ; %NWL%var bn = sjcl . bn ; %NWL%for ( var i = 0 ; i < vectors . length ; i +  +  )  {%NWL%var msgbits = h . toBits ( vectors [ i ]  . msg )  ; %NWL%var d = bn . fromBits ( h . toBits ( vectors [ i ]  . d )  )  ; %NWL%var x = bn . fromBits ( h . toBits ( vectors [ i ]  . Qx )  )  ; %NWL%var y = bn . fromBits ( h . toBits ( vectors [ i ]  . Qy )  )  ; %NWL%var k = bn . fromBits ( h . toBits ( vectors [ i ]  . k )  )  ; %NWL%7
if ( include . includes )  {%NWL%include . include = cvtIncludes ( include . includes )  ; %NWL%delete include . includes ;%NWL%}%NWL%}  )  ;%NWL%}%NWL%return includes ;%NWL%}%NWL%SequelizeQuery . prototype . _processSelect = function (  )  {%NWL%var selectClause = this . entityQuery . selectClause ; %NWL%var usesNameOnServer = this . entityQuery . usesNameOnServer ; %NWL%9
, NotFoundError   = errors . NotFoundError%NWL%, OpenError    = errors . OpenError%NWL%, EncodingError   = errors . EncodingError%NWL%, InitializationError = errors . InitializationError%NWL%, ReadStream    = require (  '  .  / read - stream '  )%NWL%, util     = require (  '  .  / util '  )%NWL%, Batch     = require (  '  .  / batch '  )%NWL%, Codec     = require (  ' level - codec '  )%NWL%, getOptions    = util . getOptions%NWL%, defaultOptions   = util . defaultOptions%NWL%, getLevelDOWN   = util . getLevelDOWN%NWL%8
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdClick (  ' TEST_ELEMENT '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / click '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdCssProperty : function ( test )  {%NWL%var client = this . client ; %NWL%0
return $ . isFunction ( option ) ? option . apply ( element , toArray . apply ( arguments )  . slice ( 2 , arguments . length )  )  : option ;%NWL%}%NWL%function totalValue ( value )  {%NWL%if ( value instanceof Array )%NWL%return $ . sum ( value )  ; %NWL%else%NWL%return value ;%NWL%}%NWL%function draw ( plot , options )  {%NWL%var ctx = plot . ctx ; %NWL%var axis = plot . axis ; %NWL%9
if ( url . charAt ( 0 ) ! =  '  /  ' && url . indexOf (  '  :  /  /  '  )  =  =  - 1 )%NWL%url = tinyMCE . documentBasePath +  "  /  "  + url ; %NWL%document . write (  '  < sc '  +  ' ript language =  " javascript " type =  " text / javascript " src =  "  '  + url +  '  "  >  <  / sc '  +  ' ript >  '  )  ;%NWL%}%NWL%function insertImage (  )  {%NWL%var src = document . forms [ 0 ]  . src . value ; %NWL%var alt = document . forms [ 0 ]  . alt . value ; %NWL%var border = document . forms [ 0 ]  . border . value ; %NWL%var vspace = document . forms [ 0 ]  . vspace . value ; %NWL%var hspace = document . forms [ 0 ]  . hspace . value ; %NWL%var width = document . forms [ 0 ]  . width . value ; %NWL%5
}%NWL%}%NWL%}  ; %NWL%Long . prototype . shiftRightUnsigned = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
if ( object . options . fixedWidth =  = 0 )  {%NWL%tooltipster . css (  {%NWL%' width '  :  ( tooltipInnerWidth + 1 )  +  ' px '  ,%NWL%' padding - left '  :  ' 0px '  ,%NWL%' padding - right '  :  ' 0px '%NWL%}  )  ;%NWL%}%NWL%var myLeft = 0 ,%NWL%myTop = 0 ; %NWL%var offsetY = parseInt ( object . options . offsetY )  ; %NWL%var offsetX = parseInt ( object . options . offsetX )  ; %NWL%9
path . indexOf (  " ? "  )  > 0 ||%NWL%path . substring ( last - 3 )  =  =  =  "  . css "  ) ? path : path +  "  . js "%NWL%}%NWL%var PATHS_RE =  / ^ (  [ ^ /  :  ]  +  )  ( \ /  .  +  ) $ /%NWL%var VARS_RE =  /  {  (  [ ^ {  ]  +  )  }  / g%NWL%function parseAlias ( id )  {%NWL%var alias = data . alias%NWL%return alias && isString ( alias [ id ]  ) ? alias [ id ]  : id%NWL%}%NWL%function parsePaths ( id )  {%NWL%var paths = data . paths%NWL%6
$scope . reset  = resetAnimations ; %NWL%function resetAnimations (  )  {%NWL%var orange = $ (  " div . block . orange "  )  ; %NWL%var purple = $ (  " div . block . purple "  )  ; %NWL%$scope . progress = init (  )  ; %NWL%$scope . elapsedTime =  "  "  ; %NWL%$timeline . reset (  [ orange , purple ]  )  ;%NWL%}%NWL%function startAnimation (  )  {%NWL%var startedAt = Date . now (  )  ; %NWL%var orange = $ (  " div . block . orange "  )  ; %NWL%3
if ( !this . datatypeWriters [ datatype ]  )  {%NWL%return value ;%NWL%}%NWL%return this . datatypeWriters [ datatype ]  ( value )  ;%NWL%}  ,%NWL%readElementValue : function ( predicate , element )  {%NWL%var content = element . attr (  ' content '  )  ; %NWL%if ( content )  {%NWL%return this . parseElementValue ( content , element )  ;%NWL%}%NWL%var resource = element . attr (  ' resource '  )  ; %NWL%6
}%NWL%if ( register )  {%NWL%simpli5 . register ( register , implementation . constructor )  ;%NWL%}%NWL%return new Class ( implementation )  ;%NWL%}%NWL%}  )  ; %NWL%Configuration = new Class (  {%NWL%constructor : function ( implementation )  {%NWL%var constructor = implementation . constructor ; %NWL%var register = implementation . register ; %NWL%9
}  )  ; %NWL%it (  ' should contain the quicktext details '  , function (  )  {%NWL%var title = element ( by . model (  ' selectedTemplate . title '  )  )  ; %NWL%expect ( title . getAttribute (  ' value '  )  )  . toBe ( config . quicktextNew . title )  ; %NWL%var shortcut = element ( by . model (  ' selectedTemplate . shortcut '  )  )  ; %NWL%expect ( shortcut . getAttribute (  ' value '  )  )  . toBe ( config . quicktextNew . shortcut )  ; %NWL%var subject = element ( by . model (  ' selectedTemplate . subject '  )  )  ; %NWL%expect ( subject . getAttribute (  ' value '  )  )  . toBe ( config . quicktextNew . subject )  ; %NWL%var tags = element ( by . model (  ' selectedTemplate . tags '  )  )  ; %NWL%expect ( tags . getAttribute (  ' value '  )  )  . toBe ( config . quicktextNew . tags )  ; %NWL%var body = element ( by . model (  ' selectedTemplate . body '  )  )  ; %NWL%2
for ( var i = 0 ; i < length ;  +  + i )  {%NWL%var v = value [ i ]  ; %NWL%if ( !Cartesian4 . equals ( v , _value [ i ]  )  )  {%NWL%_value [ i ]  = Cartesian4 . clone ( v , _value [ i ]  )  ; %NWL%gl . uniform4i ( locations [ i ]  , v . x , v . y , v . z , v . w )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%UniformArray . prototype . setMat2 = function (  )  {%NWL%var gl = this . _gl ; %NWL%var locations = this . _locations ; %NWL%9
validator : YAHOO . lang . isBoolean%NWL%}  )  ; %NWL%YAHOO . log (  ' attributes initialized '  ,  ' info '  ,  ' Tab '  )  ;%NWL%}  ; %NWL%var _createTabElement = function ( attr )  {%NWL%var el = document . createElement (  ' li '  )  ; %NWL%var a = document . createElement (  ' a '  )  ; %NWL%a . href = attr . href || ' # '  ; %NWL%el . appendChild ( a )  ; %NWL%var label = attr . label || null ; %NWL%var labelEl = attr . labelEl || null ; %NWL%9
}%NWL%if ( !this . parent )  {%NWL%throw new Error (  ' Cannot redraw item : no parent attached '  )  ;%NWL%}%NWL%if ( !dom . box . parentNode )  {%NWL%var foreground = this . parent . dom . foreground ; %NWL%if ( !foreground ) throw new Error (  ' Cannot redraw item : parent has no foreground container element '  )  ; %NWL%foreground . appendChild ( dom . box )  ;%NWL%}%NWL%if ( !dom . line . parentNode )  {%NWL%var background = this . parent . dom . background ; %NWL%5
var __extends = this . __extends || function ( d , b )  {%NWL%for ( var p in b ) if ( b . hasOwnProperty ( p )  ) d [ p ]  = b [ p ]  ; %NWL%function __ (  )  { this . constructor = d ;  }%NWL%__ . prototype = b . prototype ; %NWL%d . prototype = new __ (  )  ;%NWL%}  ; %NWL%var dialogs = require (  " ui / dialogs "  )  ; %NWL%var dialogs_common = require (  " ui / dialogs / dialogs - common "  )  ; %NWL%var types = require (  " utils / types "  )  ; %NWL%var utils = require (  " utils / utils "  )  ; %NWL%var frame = require (  " ui / frame "  )  ; %NWL%6
constructorName :  " DeleteNoteConfirmAlert "  ,%NWL%makeModel : function (  )  {%NWL%this . _super (  " makeModel "  , arguments )  ; %NWL%var commentId = this . options . commentId ; %NWL%if ( commentId )  {%NWL%this . model = new chorus . models . Comment (  {%NWL%id : commentId%NWL%}  )  ; %NWL%this . setComment (  )  ;%NWL%} else {%NWL%var activity = this . options . activity ; %NWL%3
{%NWL%this . contDiv . parentNode . insertBefore ( this . tbl , this . contDiv )  ; %NWL%this . contDiv . parentNode . removeChild ( this . contDiv )  ; %NWL%this . contDiv = null ; %NWL%var thead = tf_Tag ( this . tbl ,  ' thead '  )  ; %NWL%if ( thead . length =  = 0 ) return ; %NWL%var theadTr = tf_Tag ( thead [ 0 ]  ,  ' tr '  )  ; %NWL%if ( theadTr . length =  = 0 ) return ; %NWL%for ( var i = 0 ; i < theadTr . length ; i +  +  )%NWL%theadTr [ i ]  . style . cssText =  '  '  ; %NWL%var tfoot = tf_Tag ( this . tbl ,  ' tfoot '  )  ; %NWL%4
var PluginService  = pb . PluginService ; %NWL%var TopMenu   = require ( pb . config . docRoot +  '  / include / theme / top_menu '  )  ( pb )  ; %NWL%var Comments   = require ( pb . config . docRoot +  '  / include / theme / comments '  )  ( pb )  ; %NWL%var ArticleService = require ( pb . config . docRoot +  '  / include / service / entities / article_service '  )  ( pb )  . ArticleService ; %NWL%function Blog (  )  {  }%NWL%util . inherits ( Blog , pb . BaseController )  ; %NWL%Blog . prototype . render = function ( cb )  {%NWL%var self = this ; %NWL%var section = self . req . pencilblue_section || null ; %NWL%var topic  = self . req . pencilblue_topic || null ; %NWL%var article = self . req . pencilblue_article || null ; %NWL%8
function FMDemodulator ( inRate , outRate , maxF , filterFreq , kernelLen )  {%NWL%var AMPL_CONV = outRate /  ( 2 * Math . PI * maxF )  ; %NWL%var coefs = getLowPassFIRCoeffs ( inRate , filterFreq , kernelLen )  ; %NWL%var downsamplerI = new Downsampler ( inRate , outRate , coefs )  ; %NWL%var downsamplerQ = new Downsampler ( inRate , outRate , coefs )  ; %NWL%var lI = 0 ; %NWL%var lQ = 0 ; %NWL%var relSignalPower = 0 ; %NWL%function demodulateTuned ( samplesI , samplesQ )  {%NWL%var I = downsamplerI . downsample ( samplesI )  ; %NWL%var Q = downsamplerQ . downsample ( samplesQ )  ; %NWL%9
if ( wifi_encryption )  {%NWL%wifi_encryption . onchange = function ( event )  {%NWL%onchange_security ( event . target )  ;%NWL%}%NWL%}%NWL%var confpassword = document . getElementById (  " confpassword "  )  ; %NWL%if ( confpassword )  {%NWL%confpassword . onkeyup = show_message_is_passwords_dont_match ; %NWL%document . getElementById (  " password "  )  . onkeyup = show_message_is_passwords_dont_match ;%NWL%}%NWL%var dmesg = document . getElementById (  " dmesg "  )  ; %NWL%5
" use strict "  ; %NWL%var formatError = function ( object )  {%NWL%var result ; %NWL%var name = object . name ; %NWL%var message = object . message ; %NWL%if ( defined ( name ) && defined ( message )  )  {%NWL%result = name +  '  :  '  + message ;%NWL%} else {%NWL%result = object . toString (  )  ;%NWL%}%NWL%var stack = object . stack ; %NWL%3
)%NWL%filepath . src = dirs [ 0 ]  +  "  / projekktor .  "  + filepath . src +  "  . js "  ;%NWL%}%NWL%var user = filepath . user ; %NWL%if ( user && filepath . src )  {%NWL%if ( !grunt . file . exists ( filepath . src )  )  {%NWL%delete src [ index ]  ; %NWL%return ;%NWL%}%NWL%}%NWL%var flag = filepath . flag ; %NWL%3
exports . filter = function ( req , res )  {%NWL%return / json|text|javascript /  . test ( res . getHeader (  ' Content - Type '  )  )  ;%NWL%}  ; %NWL%module . exports = function compress ( options )  {%NWL%options = options || {  }  ; %NWL%var names = Object . keys ( exports . methods )%NWL%, filter = options . filter || exports . filter ; %NWL%return function ( req , res , next )  {%NWL%var accept = req . headers [  ' accept - encoding '  ]%NWL%, write = res . write%NWL%, end = res . end%NWL%9
var hex2 = buf2 . toString (  ' hex '  )  ; %NWL%if ( hex =  =  = hex2 )  {%NWL%this . chunks . splice ( i , 1 )  ;%NWL%}%NWL%}%NWL%return this ;%NWL%}  ; %NWL%Script . prototype . checkMinimalPush = function ( i )  {%NWL%var chunk = this . chunks [ i ]  ; %NWL%var buf = chunk . buf ; %NWL%var opcodenum = chunk . opcodenum ; %NWL%9
var globalNamespace  =  [  ]  ; %NWL%var counterNamespace =  [  ]  ; %NWL%var timerNamespace  =  [  ]  ; %NWL%var gaugesNamespace  =  [  ]  ; %NWL%var setsNamespace  =  [  ]  ; %NWL%var graphiteStats =  {  }  ; %NWL%var post_stats = function graphite_post_stats ( statString )  {%NWL%var last_flush = graphiteStats . last_flush || 0 ; %NWL%var last_exception = graphiteStats . last_exception || 0 ; %NWL%var flush_time = graphiteStats . flush_time || 0 ; %NWL%var flush_length = graphiteStats . flush_length || 0 ; %NWL%7
background : url ( \ " data : image / png ; base64 , iVBORw0KGgoAAAANSUhEUgAAAAEAAAACCAYAAACZgbYnAAAAE0lEQVQImWP4 /  /  /  / f4bLly /  / BwAmVgd1 / w11 / gAAAABJRU5ErkJggg =  = \ "  ) right repeat - y ; \%NWL%} \%NWL%"  ; %NWL%var dom = require (  "  .  .  / lib / dom "  )  ; %NWL%dom . importCssString ( exports . cssText , exports . cssClass )  ;%NWL%}  )  ; %NWL%ace . define (  " ace / ace "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / fixoldbrowsers "  ,  " ace / lib / dom "  ,  " ace / lib / event "  ,  " ace / editor "  ,  " ace / edit_session "  ,  " ace / undomanager "  ,  " ace / virtual_renderer "  ,  " ace / worker / worker_client "  ,  " ace / keyboard / hash_handler "  ,  " ace / placeholder "  ,  " ace / multi_select "  ,  " ace / mode / folding / fold_mode "  ,  " ace / theme / textmate "  ,  " ace / ext / error_marker "  ,  " ace / config "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%require (  "  .  / lib / fixoldbrowsers "  )  ; %NWL%var dom = require (  "  .  / lib / dom "  )  ; %NWL%var event = require (  "  .  / lib / event "  )  ; %NWL%9
" use strict "  ; %NWL%var CSSPropertyOperations = require (  ' CSSPropertyOperations '  )  ; %NWL%var DOMProperty = require (  ' DOMProperty '  )  ; %NWL%var DOMPropertyOperations = require (  ' DOMPropertyOperations '  )  ; %NWL%var ReactBrowserComponentMixin = require (  ' ReactBrowserComponentMixin '  )  ; %NWL%var ReactComponent = require (  ' ReactComponent '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var escapeTextForBrowser = require (  ' escapeTextForBrowser '  )  ; %NWL%1
do {%NWL%var tmp = data [ offset ]  ; %NWL%data [ offset ]  = data [ offset + 2 ]  ; %NWL%data [ offset + 2 ]  = tmp ; %NWL%offset +  = bytesPerPixel ;%NWL%} while ( offset < size )  ;%NWL%}  ; %NWL%TGALoader . prototype . convertARGB2RGBA = function ( data )  {%NWL%var bytesPerPixel = this . bytesPerPixel ; %NWL%if ( bytesPerPixel =  =  = 2 )  {%NWL%var width = this . width ; %NWL%8
var canvas = document . createElement (  ' canvas '  )  ; %NWL%var context = canvas . getContext (  ' 2d '  )  ; %NWL%var img = document . createElement (  ' img '  )  ; %NWL%img . onload = function (  )  {%NWL%var pattern = context . createPattern ( img ,  ' repeat '  )  ; %NWL%done (  )  ;%NWL%}  ; %NWL%img . src = iconUrl ;%NWL%}  )  ; %NWL%test (  ' WebGL texImage2D '  , function ( done )  {%NWL%var canvas = document . createElement (  ' canvas '  )  ; %NWL%2
{%NWL%name :  " ReadAPI :  getValues "  ,%NWL%timeout : 	5000 ,  /  / 1 second%NWL%runTest : function ( t )  {%NWL%var atomStore = dojox . data . tests . stores . AtomReadStore . getBlog1Store (  )  ; %NWL%var d = new doh . Deferred (  )  ; %NWL%function completedAll ( items )  {%NWL%t . is ( 1 , items . length )  ; %NWL%var summary = atomStore . getValues ( items [ 0 ]  ,  " summary "  )  ; %NWL%t . assertTrue ( dojo . isArray ( summary )  )  ; %NWL%var content = atomStore . getValues ( items [ 0 ]  ,  " content "  )  ; %NWL%8
return out ;%NWL%}%NWL%module . exports = deepClone ;%NWL%}  ,  {  "  .  .  / object / forOwn "  : 15 ,  "  .  / clone "  : 6 ,  "  .  / isPlainObject "  : 11 ,  "  .  / kindOf "  : 12 }  ]  , 8 :  [ function ( _dereq_ , module , exports )  {%NWL%var isKind = _dereq_ (  '  .  / isKind '  )  ; %NWL%var isArray = Array . isArray || function ( val )  {%NWL%return isKind ( val ,  ' Array '  )  ;%NWL%}  ; %NWL%module . exports = isArray ;%NWL%}  ,  {  "  .  / isKind "  : 9 }  ]  , 9 :  [ function ( _dereq_ , module , exports )  {%NWL%var kindOf = _dereq_ (  '  .  / kindOf '  )  ; %NWL%4
var url = constants . queries . postType (  )  + id ; %NWL%request ( url , function ( error , response , body )  {%NWL%var parsed = JSON . parse ( body )%NWL%if ( error ) return res . send ( 404 )  ; %NWL%if ( parsed . error ) return res . send ( 404 )  ; %NWL%return res . render ( constants . views . deletePost , buildResponse ( parsed )  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . deletePost = function ( req , res )  {%NWL%var id = req . body . id ; %NWL%var secret = req . body . secret ; %NWL%9
contextPrototype . transform = function ( m11 , m12 , m21 , m22 , dx , dy )  {%NWL%var m1 =  [%NWL%[ m11 , m12 , 0 ]  ,%NWL%[ m21 , m22 , 0 ]  ,%NWL%[ dx ,  dy , 1 ]%NWL%]  ; %NWL%this . m_ = matrixMultiply ( m1 , this . m_ )  ;%NWL%}  ; %NWL%contextPrototype . rotate = function ( aRot )  {%NWL%var c = mc ( aRot )  ; %NWL%var s = ms ( aRot )  ; %NWL%9
if ( this . _currAnim =  =  - 1 || this . _anims . length =  = 0 )  { return ;  }%NWL%this . _currAnim +  +  ; %NWL%if ( this . _anims [ this . _currAnim ]  )  {%NWL%var e =  { type :  " next "  , animation : this . _anims [ this . _currAnim ]  }  ; %NWL%if ( typeof this . handler =  =  " function "  )  { this . handler ( e )  ;  }%NWL%if ( typeof this . onNext =  =  " function "  )  { this . onNext ( e )  ;  }%NWL%this . _anims [ this . _currAnim ]  . play ( true )  ;%NWL%} else {%NWL%var e =  { type :  " end "  , animation : this . _anims [ this . _anims . length - 1 ]  }  ; %NWL%if ( typeof this . handler =  =  " function "  )  { this . handler ( e )  ;  }%NWL%if ( typeof this . onEnd =  =  " function "  )  { this . onEnd ( e )  ;  }%NWL%4
projectData . product , projectData . repository )%NWL%)  ; %NWL%this . view . addDefaultCompareOption (  )  ; %NWL%HOME_PAGE . NavComponent . view . initializeCompareSeries (  )  ; %NWL%this . view . setSliderEl ( project , this . sliders )  ;%NWL%}  ,%NWL%loadPlatformsAndTests : function ( data )  {%NWL%var project = this . view . getProject (  )  ; %NWL%var projectData = HOME_PAGE . selectionState . getProjectData ( project )  ; %NWL%var product = projectData . product ; %NWL%var repository = projectData . repository ; %NWL%9
t . end (  )%NWL%}%NWL%}  )%NWL%return state%NWL%}%NWL%t . test (  ' triggered with go (  )  '  , function ( t )  {%NWL%var stateRouter = basicTest ( t )  . stateRouter%NWL%stateRouter . go (  ' rofl . copter '  ,  { wat :  ' wut '  }  )%NWL%}  )%NWL%t . test (  ' triggered by the router '  , function ( t )  {%NWL%var hashRouter = basicTest ( t )  . hashRouter%NWL%6
}%NWL%return new scroller ( contentElement , contentWrapperElement , options )  ;%NWL%}  ; %NWL%window . addEvent (  ' domready '  , function ( e )  {%NWL%var scrolls =  {  }  ; %NWL%document . addEvent (  ' touchstart '  , function ( e )  {%NWL%var touches = e . changedTouches ; %NWL%for ( var i = 0 , l = touches . length ; i < l ; i +  +  )  {%NWL%var touch = touches [ i ]  ; %NWL%var target = touch . target ; %NWL%var identifier = touch . identifier ; %NWL%9
var fdSlicer = require (  '  .  .  /  '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var crypto = require (  ' crypto '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var streamEqual = require (  ' stream - equal '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var Pend = require (  ' pend '  )  ; %NWL%var StreamSink = require (  ' streamsink '  )  ; %NWL%var describe = global . describe ; %NWL%var it = global . it ; %NWL%var before = global . before ; %NWL%8
}  ,%NWL%getItemsWithParams : function ( treeRequest , params )  {%NWL%var me = this ; %NWL%var destroyBeforeAppend = treeRequest . get (  ' destroyBeforeAppend '  )  ; %NWL%var url = treeRequest . get (  ' url '  )  ; %NWL%var isLeaf = treeRequest . get (  ' isLeaf '  )  ; %NWL%var enableCheckSelection = treeRequest . get (  ' enableCheckedItems '  )  ; %NWL%var nodeToAppendTo = treeRequest . get (  ' nodeToAppendTo '  )  ; %NWL%var nodeType = treeRequest . get (  ' nodeType '  )  ; %NWL%var expanded = treeRequest . get (  ' expanded '  )  ; %NWL%var expandable = treeRequest . get (  ' expandable '  )  ; %NWL%3
. success ( callback )%NWL%}  )%NWL%. then ( function ( valid , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%var user = objects [ id ]%NWL%users . sessionCode ( user , callback )%NWL%}  )%NWL%. then ( function ( authCode , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%3
var counter = this . _counters [ i ]  ; %NWL%counter . total = 0 ;%NWL%}%NWL%}  ,%NWL%_drawGraph : function ( counterUI , previousCounterUI , maxTotalValue )%NWL%{%NWL%var canvas = this . _canvas ; %NWL%var ctx = canvas . getContext (  " 2d "  )  ; %NWL%var width = canvas . width ; %NWL%var height = this . _clippedHeight ; %NWL%var originY = this . _originY ; %NWL%6
var params = option . params ; %NWL%var param0 = params [ 0 ]  ; %NWL%if ( param0 )  {%NWL%var fn = option . fn ; %NWL%if ( fn )  {%NWL%buffer = fn ( scope , buffer )  ;%NWL%}%NWL%} else {%NWL%var matchElseIf = false ; %NWL%var elseIfs = option . elseIfs ; %NWL%var inverse = option . inverse ; %NWL%0
}  )%NWL%this . render (  )%NWL%}  ,%NWL%updateTextLines : function (  )  {%NWL%var text = this . get (  ' text '  )%NWL%var lines = splitLines ( text , this . get (  ' width '  )  )%NWL%this . set (  ' textLines '  , lines )%NWL%}  ,%NWL%scrollUp : function (  )  {%NWL%var line = this . get (  ' line '  )%NWL%var height = this . get (  ' height '  )%NWL%4
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
return this . set (  ' Link '  , link + Object . keys ( links )  . map ( function ( rel )  {%NWL%return '  <  '  + links [ rel ]  +  '  >  ; rel =  "  '  + rel +  '  "  '  ;%NWL%}  )  . join (  '  ,  '  )  )  ;%NWL%}  ; %NWL%res . send = function send ( body )  {%NWL%var chunk = body ; %NWL%var encoding ; %NWL%var len ; %NWL%var req = this . req ; %NWL%var type ; %NWL%var app = this . app ; %NWL%8
goog . ui . RoundedTabRenderer . prototype . createCaption = function ( dom , caption )  {%NWL%var baseClass = this . getStructuralCssClass (  )  ; %NWL%return dom . createDom (  ' tr '  , null ,%NWL%dom . createDom (  ' td '  ,  {  ' noWrap '  : true }  ,%NWL%dom . createDom (  ' div '  , goog . getCssName ( baseClass ,  ' caption '  )  ,%NWL%caption )  )  )  ;%NWL%}  ; %NWL%goog . ui . RoundedTabRenderer . prototype . createEdge = function ( dom , isTopEdge )  {%NWL%var baseClass = this . getStructuralCssClass (  )  ; %NWL%var inner = dom . createDom (  ' div '  , goog . getCssName ( baseClass ,  ' inner - edge '  )  )  ; %NWL%var outer = dom . createDom (  ' div '  , goog . getCssName ( baseClass ,  ' outer - edge '  )  )  ; %NWL%9
var text = g . select (  '  . nf - brush - selection - left - text '  )  ; %NWL%var bg = g . select (  '  . nf - brush - selection - left - text - bg '  )  ; %NWL%var display = this . get (  ' leftDisplay '  )  ; %NWL%if ( !display )  {%NWL%g . attr (  ' hidden '  , true )  ;%NWL%} else {%NWL%g . attr (  ' hidden '  , null )  ;%NWL%}%NWL%text . text ( display )  ; %NWL%var textPadding = this . get (  ' textPadding '  )  ; %NWL%var leftX = this . get (  ' leftX '  )  ; %NWL%9
} else if ( typeof this . fillStyle =  =  ' object '  )  {%NWL%var fillStyle = this . fillStyle ; %NWL%var angle = 0 ; %NWL%var focus =  { x : 0 , y : 0 }  ; %NWL%var shift = 0 ; %NWL%var expansion = 1 ; %NWL%if ( fillStyle . type_ =  =  ' gradient '  )  {%NWL%var x0 = fillStyle . x0_ / this . arcScaleX_ ; %NWL%var y0 = fillStyle . y0_ / this . arcScaleY_ ; %NWL%var x1 = fillStyle . x1_ / this . arcScaleX_ ; %NWL%var y1 = fillStyle . y1_ / this . arcScaleY_ ; %NWL%8
var keywords =  [%NWL%{ id : 1 , text :  ' select '  , order : 1 }  ,%NWL%{ id : 2 , text :  ' delete '  , order : 2 }  ,%NWL%{ id : 3 , text :  ' insert '  , order : 3 }  ,%NWL%{ id : 4 , text :  ' update '  , order : 4 }  ,%NWL%]  ; %NWL%var Comment = Mapper . map (  " Comments "  )%NWL%, Post = Mapper . map (  " Posts "  )%NWL%, PostTag = Mapper . map (  " PostsTags "  )%NWL%, MoreDetail = Mapper . map (  " PostMoreDetails "  )%NWL%, Keyword = Mapper . map (  " Keywords "  )%NWL%7
var TutorialPlayer = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . TutorialPlayer ; %NWL%var Point = WEBLAB . namespace (  " WEBLAB . utils . math "  )  . Point ; %NWL%var StandAloneCopyGenerator = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player . copy "  )  . StandAloneCopyGenerator ; %NWL%var OrchestraCopyIds = WEBLAB . namespace (  " WEBLAB . common . constants "  )  . OrchestraCopyIds ; %NWL%var TutorialEventTypes = WEBLAB . namespace (  " WEBLAB . orchestra . constants "  )  . TutorialEventTypes ; %NWL%var PlayerChangeEventTypes = WEBLAB . namespace (  " WEBLAB . orchestra . constants "  )  . PlayerChangeEventTypes ; %NWL%var LiveSyncedVideoPlayer = WEBLAB . namespace (  " WEBLAB . orchestra . ui . video "  )  . LiveSyncedVideoPlayer ; %NWL%var OrchestraConfiguration = WEBLAB . namespace (  " WEBLAB . orchestra "  )  . OrchestraConfiguration ; %NWL%var FixedLengthTimeCodeAdjust = WEBLAB . namespace (  " WEBLAB . orchestra . ui . video "  )  . FixedLengthTimeCodeAdjust ; %NWL%var BlobsLeftPanel = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . BlobsLeftPanel ; %NWL%var UserInteractionEventTypes = WEBLAB . namespace (  " WEBLAB . orchestra . constants "  )  . UserInteractionEventTypes ; %NWL%4
}%NWL%}%NWL%return {  " ok "  : true ,  " atoms "  : atoms ,  " bonds "  : bonds ,  " histogram "  : histogram }  ;%NWL%}  ; %NWL%THREE . PDBLoader . prototype . createModel = function ( json , callback )  {%NWL%var scope = this ,%NWL%geometryAtoms = new THREE . Geometry (  )  ,%NWL%geometryBonds = new THREE . Geometry (  )  ; %NWL%geometryAtoms . elements =  [  ]  ; %NWL%var atoms = json . atoms ; %NWL%var bonds = json . bonds ; %NWL%9
return new Q ( requestParams )%NWL%. then ( this . _mergeRequestAndSourceParams )%NWL%. then ( this . _sendRequestAndHandleResponse )  ;%NWL%}  ,%NWL%_sendRequestAndHandleResponse : function ( requestParams )  {%NWL%var url = requestParams . url ; %NWL%var wsdlPath = requestParams . wsdlPath ; %NWL%var soapMethod = requestParams . soapMethod ; %NWL%var data = requestParams . data ; %NWL%var headers = requestParams . headers ; %NWL%var security = requestParams . security ; %NWL%5
var TableEditor = require (  ' table - editor '  )  ; %NWL%var prettify = require (  ' jsonpretty '  )  ; %NWL%var elClass = require (  ' element - class '  )  ; %NWL%var on = require (  ' component - delegate '  )  . bind ; %NWL%var closest = require (  ' component - closest '  )  ; %NWL%var CSV = require (  ' comma - separated - values '  )  ; %NWL%var Handlebars = require (  ' handlebars '  )  ; %NWL%var request = require (  ' xhr '  )  ; %NWL%var domify = require (  ' domify '  )  ; %NWL%var dom = require (  ' dom - tree '  )  ; %NWL%var domquery = require (  ' domquery '  )  ; %NWL%8
if ( err ) return res . send ( 500 ,  ' failed to clear cache '  )%NWL%res . send ( 204 )%NWL%}  )%NWL%}%NWL%exports . create_project = function ( req , res , next )  {%NWL%if ( req . params . org =  =  =  ' auth '  )  {%NWL%return next (  )  ;%NWL%}%NWL%var name = req . params . org +  '  /  '  + req . params . repo%NWL%var account = req . body . account%NWL%var display_name = req . body . display_name%NWL%9
var debug = require (  ' debug '  )  (  ' superagent '  )  ; %NWL%var formidable = require (  ' formidable '  )  ; %NWL%var Response = require (  '  .  / response '  )  ; %NWL%var parse = require (  ' url '  )  . parse ; %NWL%var format = require (  ' url '  )  . format ; %NWL%var methods = require (  ' methods '  )  ; %NWL%var Stream = require (  ' stream '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var Part = require (  '  .  / part '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%1
section . add ( Ti . UI . createTableViewRow (  { hasDetail : true , title :  ' Row 2 '  }  )  )  ; %NWL%section . add ( Ti . UI . createTableViewRow (  { hasCheck : true , title :  ' Row 3 '  }  )  )  ; %NWL%section . add ( Ti . UI . createTableViewRow (  { title :  ' Row 4 '  }  )  )  ; %NWL%var tableview = Titanium . UI . createTableView (  {%NWL%data : data%NWL%}  )  ; %NWL%tableview . addEventListener (  ' click '  , function ( e )%NWL%{%NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%var row = e . row ; %NWL%8
this . onChange = function ( e )  {%NWL%var delta = e . data ; %NWL%var range = delta . range ; %NWL%if ( range . start . row =  = range . end . row && range . start . row ! = this . row )%NWL%return ; %NWL%if ( range . start . row > this . row )%NWL%return ; %NWL%if ( range . start . row =  = this . row && range . start . column > this . column )%NWL%return ; %NWL%var row = this . row ; %NWL%var column = this . column ; %NWL%9
var express = require (  ' express '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var favicon = require (  ' serve - favicon '  )  ; %NWL%var logger = require (  ' morgan '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var handlebars = require (  ' express - handlebars '  )  ; %NWL%var session = require (  ' express - session '  )  ; %NWL%var routes = require (  '  .  / routes / index '  )  ; %NWL%var stats = require (  '  .  / routes / stats '  )  ; %NWL%var parse = require (  '  .  / routes / parse '  )  ; %NWL%9
if ( !mh [ x ]  . hasOwnProperty (  " expiry "  )  )  {%NWL%continue ;%NWL%}%NWL%var playername = utilities . html_escape ( x )  ; %NWL%var expirytime = isNaN ( mh [ x ]  . expiry ) ? " never "  : mh [ x ]  . expiry - parseInt ( sys . time (  )  , 10 )  ; %NWL%if ( expirytime <  = 0 )  {%NWL%continue ;%NWL%}%NWL%var issuetime = getTimeString ( parseInt ( sys . time (  )  , 10 )  - mh [ x ]  . issuetime )  ; %NWL%var auth = utilities . html_escape ( mh [ x ]  . auth )  ; %NWL%var reason = utilities . html_escape ( mh [ x ]  . reason )  ; %NWL%9
}  )  ; %NWL%return i18n ;%NWL%}  ; %NWL%i18n . serveRemoveKeyRoute = function ( app , authenticated )  {%NWL%app . post (  '  / locales / remove /  : lng /  : ns '  , function ( req , res )  {%NWL%if ( authenticated && !authenticated ( req , res )  )  {%NWL%res . end (  )  ; %NWL%return ;%NWL%}%NWL%var lng = req . params . lng ; %NWL%var ns = req . params . ns ; %NWL%9
client . emit (  ' error '  , e )  ;%NWL%}  )  ; %NWL%req . end ( message )  ;%NWL%}%NWL%var https = require (  ' https '  )  ; %NWL%function HTTPSTransport (  )  {%NWL%this . defaultPort = 443 ; %NWL%this . transport = https ;%NWL%}%NWL%util . inherits ( HTTPSTransport , HTTPTransport )  ; %NWL%var dgram = require (  ' dgram '  )  ; %NWL%4
function enable_save (  )%NWL%{%NWL%var save_button = document . documentElement . getButton (  " accept "  )  ; %NWL%save_button . removeAttribute (  ' disabled '  )  ;%NWL%}%NWL%function update_buttons (  )%NWL%{%NWL%var available_charsets = document . getElementById (  ' available_charsets '  )  ; %NWL%var active_charsets = document . getElementById (  ' active_charsets '  )  ; %NWL%var remove_button = document . getElementById (  ' remove_button '  )  ; %NWL%var add_button = document . getElementById (  ' add_button '  )  ; %NWL%7
rm . write (  "  >  "  )  ;  /  / Close the containing < span > tag%NWL%rm . write (  "  < input type =  ' radio ' tabindex =  '  - 1 ' id =  '  "  )  ; %NWL%rm . write ( sId )  ; %NWL%rm . write (  "  - RB ' name = \ "  "  )  ; %NWL%rm . writeEscaped ( oRadioButton . getGroupName (  )  )  ; %NWL%rm . write (  " \ "  "  )  ; %NWL%if ( oRadioButton . getSelected (  )  )  {%NWL%rm . write (  " checked =  ' checked '  "  )  ;%NWL%}%NWL%if ( !enabled )  {%NWL%rm . write (  " disabled =  ' disabled '  "  )  ; %NWL%7
return fn ( this . entry )  ;%NWL%}%NWL%class MapIterator extends Iterator {%NWL%constructor ( map , type , reverse )  {%NWL%this . _type = type ; %NWL%this . _reverse = reverse ; %NWL%this . _stack = map . _root && mapIteratorFrame ( map . _root )  ;%NWL%}%NWL%next (  )  {%NWL%var type = this . _type ; %NWL%var stack = this . _stack ; %NWL%9
var concat = require (  ' gulp - concat '  )  ; %NWL%var vsource = require (  ' vinyl - source - stream '  )  ; %NWL%var streamify = require (  ' gulp - streamify '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var livereload = require (  ' gulp - livereload '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var header = require (  ' gulp - header '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var karma = require (  ' karma '  )  ; %NWL%var browserify = require (  ' browserify '  )  ; %NWL%9
return goog . math . Long . fromBits ( this . low_ ^ other . low_ ,%NWL%this . high_ ^ other . high_ )  ;%NWL%}  ; %NWL%goog . math . Long . prototype . shiftLeft = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var low = this . low_ ; %NWL%if ( numBits < 32 )  {%NWL%var high = this . high_ ; %NWL%8
var addr = this . address (  ) || '  '%NWL%var fuzzy = this . fuzzyAddress (  )%NWL%if ( fuzzy )  {%NWL%if ( addr ) addr +  =  '  ,  '  + fuzzy%NWL%else addr = fuzzy%NWL%}%NWL%return addr%NWL%}%NWL%Model . prototype . fuzzyAddress = function (  )  {%NWL%var city = this . city (  )%NWL%var state = this . state (  )%NWL%9
}%NWL%var nodeName = DOM . nodeName ( current . element )  ; %NWL%if ( StringWrapper . equals ( nodeName . toUpperCase (  )  ,  ' CONTENT '  )  )  {%NWL%var attrs = current . attrs (  )  ; %NWL%var selector = MapWrapper . get ( attrs ,  ' select '  )  ; %NWL%current . contentTagSelector = isPresent ( selector ) ? selector :  '  '  ; %NWL%var contentStart = DOM . createScriptTag (  ' type '  ,  ' ng / contentStart '  )  ; %NWL%if ( assertionsEnabled (  )  )  {%NWL%DOM . setAttribute ( contentStart ,  ' select '  , current . contentTagSelector )  ;%NWL%}%NWL%var contentEnd = DOM . createScriptTag (  ' type '  ,  ' ng / contentEnd '  )  ; %NWL%6
textArea . value = str ; %NWL%textArea . select (  )  ; %NWL%document . execCommand (  ' copy '  )  ; %NWL%document . body . removeChild ( textArea )  ;%NWL%}%NWL%var canvasUtils =  {%NWL%appendImageToCanvas : function ( argObj )  {%NWL%var scale = argObj . scale || 1 . 0 ; %NWL%var zoom = argObj . zoom || 1 . 0 ; %NWL%var canvasData = argObj . canvasData ; %NWL%var imageSrc = argObj . imageSrc ; %NWL%9
String . dirname =  ( function ( path )  {%NWL%return path . replace (  / \\ / g ,  '  /  '  )  . replace (  / \ /  [ ^\ /  ]  * \ / ?$ /  ,  '  '  )  ;%NWL%}  )  ; %NWL%var cluster = require (  ' cluster '  )  ; %NWL%var url = require (  " url "  )  ; %NWL%var fs = require (  " fs "  )  ; %NWL%var readline = require (  " readline "  )  ; %NWL%var util = require (  " util "  )  ; %NWL%var events = require (  ' events '  )  ; %NWL%var eventEmitter = new events . EventEmitter (  )  ; %NWL%var child_process = require (  ' child_process '  )  ; %NWL%3
var cntr = p . reader . dom . find ( k . CLS . container )  ; %NWL%x = Math . min ( cntr . offsetWidth - node . offsetWidth , x )  ; %NWL%x = Math . max ( x , 0 )  ; %NWL%Monocle . Styles . setX ( node , x )  ;%NWL%}%NWL%function createControlElements ( holder )  {%NWL%var cntr = holder . dom . make (  ' div '  , k . CLS . container )  ; %NWL%var track = cntr . dom . append (  ' div '  , k . CLS . track )  ; %NWL%var needleTrail = cntr . dom . append (  ' div '  , k . CLS . trail )  ; %NWL%var needle = cntr . dom . append (  ' div '  , k . CLS . needle )  ; %NWL%var bubble = cntr . dom . append (  ' div '  , k . CLS . bubble )  ; %NWL%7
var ReactDOM = require (  ' ReactDOM '  )  ; %NWL%var ReactDOMComponent = require (  ' ReactDOMComponent '  )  ; %NWL%var ReactDefaultInjection = require (  ' ReactDefaultInjection '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactPropTypes = require (  ' ReactPropTypes '  )  ; %NWL%var ReactServerRendering = require (  ' ReactServerRendering '  )  ; %NWL%var ReactTextComponent = require (  ' ReactTextComponent '  )  ; %NWL%var onlyChild = require (  ' onlyChild '  )  ; %NWL%0
var operationsClient = new mOperationsClient . OperationsClient ( serviceRegistry )  ; %NWL%var statusService = new mStatus . StatusReportingService ( serviceRegistry , operationsClient ,  ' statusPane '  ,  ' notifications '  ,  ' notificationArea '  )  ;  /  / $NON - NLS - 2$ /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%var commandRegistry = new mCommandRegistry . CommandRegistry (  {  }  )  ; %NWL%var progressService = new mProgress . ProgressService ( serviceRegistry , operationsClient , commandRegistry )  ; %NWL%var fileClient = new mFileClient . FileClient ( serviceRegistry )  ; %NWL%var searcher = new mSearchClient . Searcher (  { serviceRegistry : serviceRegistry , commandService : commandRegistry , fileService : fileClient }  )  ; %NWL%mGlobalCommands . generateBanner (  " godoc - searchResults "  , serviceRegistry , commandRegistry , preferences , searcher )  ;  /  / $NON - NLS - 0$%NWL%var primaryNav = document . getElementById (  " primaryNav "  )  ; %NWL%var location = document . getElementById (  " location "  )  ; %NWL%location . parentNode . setAttribute (  " style "  ,  " display : inline - block ; text - align : center ;  "  )  ; %NWL%var userMenu = document . getElementById (  " userMenu "  )  ; %NWL%7
var keyAssistDiv = this . _keyAssistDiv = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%keyAssistDiv . id =  " keyAssist "  ;  /  / $NON - NLS - 0$%NWL%keyAssistDiv . style . display =  " none "  ;  /  / $NON - NLS - 0$%NWL%keyAssistDiv . classList . add (  " keyAssistFloat "  )  ;  /  / $NON - NLS - 0$%NWL%keyAssistDiv . setAttribute (  " role "  ,  " menu "  )  ;  /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%var keyAssistInput = this . _keyAssistInput = document . createElement (  " input "  )  ;  /  / $NON - NLS - 0$%NWL%keyAssistInput . classList . add (  " keyAssistInput "  )  ;  /  / $NON - NLS - 0$%NWL%keyAssistInput . type =  " text "  ;  /  / $NON - NLS - 0$%NWL%keyAssistInput . placeholder = messages [  " Filter bindings "  ]  ; %NWL%keyAssistDiv . appendChild ( keyAssistInput )  ; %NWL%var keyAssistContents = this . _keyAssistContents = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%0
this . addErrors ( errors )  ; %NWL%return errors ;%NWL%}%NWL%}%NWL%Sys . Mvc . RangeValidator = function Sys_Mvc_RangeValidator ( minimum , maximum )  {%NWL%this . _minimum = minimum ; %NWL%this . _maximum = maximum ;%NWL%}%NWL%Sys . Mvc . RangeValidator . create = function Sys_Mvc_RangeValidator$create ( rule )  {%NWL%var min = rule . ValidationParameters [  ' minimum '  ]  ; %NWL%var max = rule . ValidationParameters [  ' maximum '  ]  ; %NWL%9
test . ok ( typeof err =  =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + err +  ' ` .  '  )  ;%NWL%}  ; %NWL%zapp ( 1 )  ; %NWL%test . expect ( 3 )  ; %NWL%test . done (  )  ;%NWL%}  ,%NWL%' 6 . Zen should run one handler with parameters '  : function ( test )  {%NWL%var hw = function ( value1 , next )  {%NWL%test . ok ( arguments . length =  =  = 2 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof value1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + value1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof next ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + next +  ' ` .  '  )  ; %NWL%9
if ( state . length =  =  = 0 && state . needDrain )  {%NWL%state . needDrain = false ; %NWL%stream . emit (  ' drain '  )  ;%NWL%}%NWL%}%NWL%function clearBuffer ( stream , state )  {%NWL%state . bufferProcessing = true ; %NWL%for ( var c = 0 ; c < state . buffer . length ; c +  +  )  {%NWL%var entry = state . buffer [ c ]  ; %NWL%var chunk = entry . chunk ; %NWL%var encoding = entry . encoding ; %NWL%9
reportFailure (  " Testing TwelveOutParameters :  "  + e . toString (  )  )  ;%NWL%}%NWL%try%NWL%{%NWL%var out1 =  { className :  " out1 "  , Number : 5 }  ; %NWL%var out2 =  { className :  " out2 "  , Number : 5 }  ; %NWL%var out3 =  { className :  " out3 "  , Number : 5 }  ; %NWL%var out4 =  { className :  " out4 "  , Number : 5 }  ; %NWL%var out5 =  { className :  " out5 "  , Number : 5 }  ; %NWL%var out6 =  { className :  " out6 "  , Number : 5 }  ; %NWL%var out7 =  { className :  " out7 "  , Number : 5 }  ; %NWL%4
$form . find (  '  . device_name '  )  . addClass (  ' error '  )  ;%NWL%}%NWL%}%NWL%)  ;%NWL%}  ; %NWL%var addPasswordClick = function (  )  {%NWL%var $form = $ (  ' #addpassword_form '  )  ; %NWL%$form . find (  '  . pass ,  . pass_repeat '  )  . removeClass (  ' error '  )  ; %NWL%$form . find (  '  . errormessage '  )  . css (  ' visibility '  ,  ' hidden '  )  ; %NWL%var pass = $form . find (  '  . pass '  )  . val (  )  ; %NWL%var pass_repeat = $form . find (  '  . pass_repeat '  )  . val (  )  ; %NWL%9
var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%7
var EventPluginUtils = require (  ' EventPluginUtils '  )  ; %NWL%var EventPropagators = require (  ' EventPropagators '  )  ; %NWL%var SyntheticClipboardEvent = require (  ' SyntheticClipboardEvent '  )  ; %NWL%var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%var SyntheticFocusEvent = require (  ' SyntheticFocusEvent '  )  ; %NWL%var SyntheticKeyboardEvent = require (  ' SyntheticKeyboardEvent '  )  ; %NWL%var SyntheticMouseEvent = require (  ' SyntheticMouseEvent '  )  ; %NWL%var SyntheticDragEvent = require (  ' SyntheticDragEvent '  )  ; %NWL%var SyntheticTouchEvent = require (  ' SyntheticTouchEvent '  )  ; %NWL%var SyntheticUIEvent = require (  ' SyntheticUIEvent '  )  ; %NWL%var SyntheticWheelEvent = require (  ' SyntheticWheelEvent '  )  ; %NWL%0
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdDisplayed (  ' TEST_ELEMENT '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / displayed '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdLocation : function ( test )  {%NWL%var client = this . client ; %NWL%0
}  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%exports . shouldFailDueToNotPresentingCertificateToServer =  {%NWL%metadata :  { requires :  { topology :  ' ssl '  }  }  ,%NWL%test : function ( configuration , test )  {%NWL%var ReplSetManager = require (  ' mongodb - tools '  )  . ReplSetManager%NWL%, Db = configuration . require . Db%NWL%, Server = configuration . require . Server%NWL%, ReplSet = configuration . require . ReplSet%NWL%8
define (  [  ' tantaman / web / widgets / Dropdown '  ,%NWL%' strut / deck / Utils '  ,%NWL%' tantaman / web / widgets / ItemImportModal '  ,%NWL%'  .  / ColorChooserModal '  ,%NWL%' lang '  ]  ,%NWL%function ( View , DeckUtils , ItemImportModal , ColorChooserModal , lang )  {%NWL%function BackgroundProvider ( opts )  {%NWL%var backgrounds = opts . backgrounds ; %NWL%var editorModel = opts . editorModel ; %NWL%var selector = opts . selector ; %NWL%var attr = opts . attr ; %NWL%7
ControllerScroll = function ( smoothing , horizontal , convertScroll )  {%NWL%this . target = $ ( window )  ; %NWL%this . horizontal = horizontal ; %NWL%this . convertScroll = convertScroll ; %NWL%$ ( window )  . scrollTop ( 0 )  ; %NWL%$ ( window )  . scrollLeft ( 0 )  ; %NWL%if ( !horizontal )  {%NWL%var height = parseInt ( $ (  " body "  )  . css (  ' height '  )  , 10 )  ; %NWL%this . scrollSpace = height - this . target . height (  )  ;%NWL%} else {%NWL%var width = parseInt ( $ (  " body "  )  . css (  ' width '  )  , 10 )  ; %NWL%7
this . suite . slow ( slow )  ; %NWL%return this ;%NWL%}  ; %NWL%Mocha . prototype . asyncOnly = function (  )  {%NWL%this . options . asyncOnly = true ; %NWL%return this ;%NWL%}  ; %NWL%Mocha . prototype . run = function ( fn )  {%NWL%if ( this . files . length ) this . loadFiles (  )  ; %NWL%var suite = this . suite ; %NWL%var options = this . options ; %NWL%9
var intersectPlane_dir_scaled_with_t = vec2 . create (  )  ; %NWL%var intersectPlane_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectPlane_worldNormal = vec2 . create (  )  ; %NWL%var intersectPlane_len = vec2 . create (  )  ; %NWL%Ray . prototype . intersectPlane = function ( shape , angle , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var direction = this . _direction ; %NWL%var planePointToFrom = intersectPlane_planePointToFrom ; %NWL%var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; %NWL%var hitPointWorld = intersectPlane_hitPointWorld ; %NWL%8
var $ = require (  ' jquery '  )  ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var simulateKeys = require (  ' test_utils / simulate_keys '  )  ; %NWL%require (  ' components / agg_types / controls / _values_list '  )  ; %NWL%var $el ; %NWL%var $scope ; %NWL%var compile ; %NWL%beforeEach ( module (  ' kibana '  )  )  ; %NWL%beforeEach ( inject ( function ( $injector )  {%NWL%var $compile = $injector . get (  ' $compile '  )  ; %NWL%var $rootScope = $injector . get (  ' $rootScope '  )  ; %NWL%9
t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " updated "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " category "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " id "  )  )  ; %NWL%t . assertTrue ( !atomStore . hasAttribute ( items [ 0 ]  ,  " foo "  )  )  ; %NWL%t . assertTrue ( !atomStore . hasAttribute ( items [ 0 ]  ,  " bar "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " summary "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " content "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " title "  )  )  ; %NWL%var summary = atomStore . getValue ( items [ 0 ]  ,  " summary "  )  ; %NWL%var content = atomStore . getValue ( items [ 0 ]  ,  " content "  )  ; %NWL%var title = atomStore . getValue ( items [ 0 ]  ,  " title "  )  ; %NWL%8
var expect = require (  ' expect . js '  )  ; %NWL%var fs = require (  ' graceful - fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var mout = require (  ' mout '  )  ; %NWL%var Q = require (  ' q '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%var RegistryClient = require (  ' bower - registry - client '  )  ; %NWL%var Logger = require (  ' bower - logger '  )  ; %NWL%var resolverFactory = require (  '  .  .  /  .  .  / lib / core / resolverFactory '  )  ; %NWL%var resolvers = require (  '  .  .  /  .  .  / lib / core / resolvers '  )  ; %NWL%9
var direction =  ( this . options . direction || L . CalloutLine . DIRECTION . NE )  . toLowerCase (  )  ; %NWL%var yDirection = direction [ 0 ]  ; %NWL%var yMultiplier = yDirection =  =  =  ' n ' ? - 1 : 1 ; %NWL%var point1 = this . _points [ 0 ]  ; %NWL%var point2 = this . _points [ this . _points . length - 1 ]  ; %NWL%var parts =  [  ' M '  , point1 . x ,  '  ,  '  , point1 . y ,  ' Q '  , point1 . x ,  '  ,  '  , point1 . y + yMultiplier * this . options . size . y ,  '  '  , point2 . x ,  '  ,  '  , point2 . y ]  ; %NWL%return parts . join (  '  '  )  ;%NWL%}  ,%NWL%_getPoints : function (  )  {%NWL%var x = this . _point . x + this . options . position . x ; %NWL%var y = this . _point . y + this . options . position . y ; %NWL%9
main . consumes =  [%NWL%" Editor "  ,  " editors "  ,  " ui "  ,  " commands "  ,  " menus "  ,  " layout "  ,%NWL%" tabManager "  ,  " util "  ,  " settings "  ,  " api "  ,  " c9 "%NWL%]  ; %NWL%main . provides =  [  " plugin . market "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Editor = imports . Editor ; %NWL%var editors = imports . editors ; %NWL%var tabs = imports . tabManager ; %NWL%var commands = imports . commands ; %NWL%7
LE . log (  [%NWL%undefined ,%NWL%null%NWL%]  )  ; %NWL%var event = this . getXhrJson ( 0 )  . event ; %NWL%expect ( event [ 0 ]  )  . toBe (  ' undefined '  )  ; %NWL%expect ( event [ 1 ]  )  . toBe ( null )  ;%NWL%}  )  ; %NWL%it (  ' sends trace code '  , function (  )  {%NWL%LE . log (  ' test '  )  ; %NWL%var trace = this . getXhrJson ( 0 )  . trace ; %NWL%4
var newImageIdIndex =  - 1 ; %NWL%var stackToolDataSource = cornerstoneTools . getToolState ( targetElement ,  ' stack '  )  ; %NWL%if ( stackToolDataSource =  =  = undefined )  {%NWL%return ;  /  / Same as ' continue ' in a normal for loop%NWL%}%NWL%var stackData = stackToolDataSource . data [ 0 ]  ; %NWL%$ . each ( stackData . imageIds , function ( index , imageId )  {%NWL%var imagePlane = cornerstoneTools . metaData . get (  ' imagePlane '  , imageId )  ; %NWL%var imagePosition = imagePlane . imagePositionPatient ; %NWL%var row = imagePlane . rowCosines . clone (  )  ; %NWL%var column = imagePlane . columnCosines . clone (  )  ; %NWL%9
assert . notStrictEqual ( prevEtag , object . etag ,  ' new etag '  )  ; %NWL%assert . typeOf ( calendar . syncToken ,  ' string '  )  ; %NWL%assert . operator ( calendar . syncToken . length ,  '  >  '  , 0 )  ; %NWL%assert . notStrictEqual ( calendar . syncToken , prevSyncToken ,  ' new token '  )  ;%NWL%}  )  ; %NWL%test (  ' #deleteCalendarObject '  , async function (  )  {%NWL%let calendar = calendars [ 0 ]  ; %NWL%let objects = calendar . objects ; %NWL%assert . isArray ( objects )  ; %NWL%assert . lengthOf ( objects , 1 )  ; %NWL%let object = objects [ 0 ]  ; %NWL%6
var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = tinyMCE . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = tinyMCE . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var bordercolor = convertRGBToHex ( getStyle ( tdElm ,  ' bordercolor '  ,  ' borderLeftColor '  )  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( tdElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var className = tinyMCE . getVisualAidClass ( tinyMCE . getAttrib ( tdElm ,  ' class '  )  , false )  ; %NWL%var backgroundimage = getStyle ( tdElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  ' ? (  [ ^ '  ]  *  )  ' ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ;  ; %NWL%var id = tinyMCE . getAttrib ( tdElm ,  ' id '  )  ; %NWL%var lang = tinyMCE . getAttrib ( tdElm ,  ' lang '  )  ; %NWL%1
var show = $typeahead . show ; %NWL%$typeahead . show = function (  )  {%NWL%show (  )  ; %NWL%setTimeout ( function (  )  {%NWL%$typeahead . $element . on (  ' mousedown '  , $typeahead . $onMouseDown )  ; %NWL%if ( options . keyboard )  {%NWL%element . on (  ' keydown '  , $typeahead . $onKeyDown )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%var hide = $typeahead . hide ; %NWL%0
var input = $ (  '  < input >  '  )  ; %NWL%if ( settings . width ! =  ' none '  )  { input . width ( settings . width )  ;  }%NWL%if ( settings . height ! =  ' none '  )  { input . height ( settings . height )  ;  }%NWL%input . attr (  ' autocomplete '  ,  ' off '  )  ; %NWL%$ ( this )  . append ( input )  ; %NWL%return ( input )  ;%NWL%}%NWL%}  ,%NWL%textarea :  {%NWL%element : function ( settings , original )  {%NWL%var textarea = $ (  '  < textarea >  '  )  ; %NWL%0
var argv = require (  ' commander '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var chalk = require (  ' chalk '  )  ; %NWL%var chokidar = require (  ' chokidar '  )  ; %NWL%var config = require (  '  .  / config '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var getBuild = require (  '  .  / get - build '  )  ; %NWL%var getFile = require (  '  .  / get - file '  )  ; %NWL%var glob = require (  ' glob '  )  ; %NWL%var memoize = require (  '  .  / memoize '  )  ; %NWL%var minimatch = require (  ' minimatch '  )  ; %NWL%1
browser . driver . sleep ( config . sleepTime )  ; %NWL%var modal = element ( by . css (  '  . quicktext - modal '  )  )  ; %NWL%expect ( modal . getCssValue (  ' display '  )  )  . toBe (  ' block '  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should contain the quicktext details '  , function (  )  {%NWL%var title = element ( by . model (  ' selectedTemplate . title '  )  )  ; %NWL%expect ( title . getAttribute (  ' value '  )  )  . toBe ( config . quicktextNew . title )  ; %NWL%var shortcut = element ( by . model (  ' selectedTemplate . shortcut '  )  )  ; %NWL%expect ( shortcut . getAttribute (  ' value '  )  )  . toBe ( config . quicktextNew . shortcut )  ; %NWL%var subject = element ( by . model (  ' selectedTemplate . subject '  )  )  ; %NWL%6
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . cookie (  ' GET '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / cookie '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testCookiePost : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
render : function (  )  {%NWL%this . clear (  )  ; %NWL%var r1 = this . model . node . parameters . r1 ; %NWL%var r2 = this . model . node . parameters . r2 ; %NWL%this . $r1 = this . addElement (  '  < div class =  " dimension "  >  '  + r1 +  '  <  / div >  '  )  ; %NWL%this . $r2 = this . addElement (  '  < div class =  " dimension "  >  '  + r2 +  '  <  / div >  '  )  ; %NWL%this . update (  )  ;%NWL%}  ,%NWL%update : function (  )  {%NWL%var origin = this . model . node . origin ; %NWL%var r1 = this . model . node . parameters . r1 ; %NWL%3
}%NWL%}%NWL%function _createChangeRequest ( saveContext , entity , index )  {%NWL%var data , rawEntity , request ; %NWL%var type = entity . entityType ; %NWL%var rn = type . defaultResourceName ; %NWL%if ( !rn )  {%NWL%throw new Error (  " Missing defaultResourceName for type "  + type . name )  ;%NWL%}%NWL%var adapter = saveContext . adapter ; %NWL%var entityManager = saveContext . entityManager ; %NWL%9
} else {%NWL%self . outerDiv . className = self . outerDiv . className . replace (  / show - skipped /  ,  '  '  )  ;%NWL%}%NWL%}  ;%NWL%}  ; %NWL%jasmine . TrivialReporter . prototype . reportRunnerResults = function ( runner )  {%NWL%var results = runner . results (  )  ; %NWL%var className =  ( results . failedCount > 0 ) ? " runner failed "  :  " runner passed "  ; %NWL%this . runnerDiv . setAttribute (  " class "  , className )  ; %NWL%this . runnerDiv . setAttribute (  " className "  , className )  ; %NWL%var specs = runner . specs (  )  ; %NWL%6
StatusConst . EffectState . CART2 |%NWL%StatusConst . EffectState . CART3 |%NWL%StatusConst . EffectState . CART4 |%NWL%StatusConst . EffectState . CART5 ; %NWL%return function rencerCharacter (  )%NWL%{%NWL%var character = Session . Entity ; %NWL%var direction = character . direction ; %NWL%var headDir  = character . headDir ; %NWL%var action  = character . action ; %NWL%var animation = character . animation ; %NWL%7
$scope . setElementTemplate ( template )  ;%NWL%} else {%NWL%var templateName = $scope . config . templateName ; %NWL%if ( templateName && FormusTemplates . has ( templateName )  )  {%NWL%FormusTemplates . get ( templateName )  . then ( function ( template )  {%NWL%$scope . setElementTemplate ( template )  ;%NWL%}  , function (  )  {%NWL%$log . error (  ' Template type \ '  '  + templateName +  ' \ ' not supported .  '  )  ;%NWL%}  )  ;%NWL%} else {%NWL%var templateUrl = $scope . config . templateUrl ; %NWL%2
hl : this . _lang%NWL%}  ; %NWL%for ( var attr in this . _queryAttrs )  {%NWL%content [ this . _queryAttrs [ attr ]  ]  = query [ attr ]  ;%NWL%}%NWL%return content ;%NWL%}%NWL%}  )  ; %NWL%var WebSearchStore = declare (  " dojox . data . GoogleWebSearchStore "  , SearchStore ,  {%NWL%}  )  ; %NWL%var BlogSearchStore = declare (  " dojox . data . GoogleBlogSearchStore "  , SearchStore ,  {%NWL%8
self . _duration ,%NWL%self . _currentState ,%NWL%self . _originalState ,%NWL%self . _targetState ,%NWL%self . _easing ,%NWL%self . _step ,%NWL%self . _scheduleFunction%NWL%)  ;%NWL%}  ; %NWL%var currentState = this . _currentState ; %NWL%var targetState = this . _targetState ; %NWL%9
if ( !this . bounds || !this . state . changed )  {%NWL%return ;%NWL%}%NWL%this . rendering = true ; %NWL%var fadeModifier = this . checkFade ( dt )  ; %NWL%var state = this . state ,%NWL%player = this . player ,%NWL%s = state . happens ,%NWL%coords = state . mpos ,%NWL%time = state . time = player . state . time ; %NWL%var ctx = this . ctx ,%NWL%5
url : API_BASEURL +  " connection "  ,%NWL%method :  " GET "  ,%NWL%dataType :  " json "  ,%NWL%success : function ( response )  {%NWL%self . fromResponse ( response )  ;%NWL%}%NWL%}  )%NWL%}%NWL%self . fromResponse = function ( response )  {%NWL%var ports = response . options . ports ; %NWL%var baudrates = response . options . baudrates ; %NWL%9
+  '  <  / html >  '  ; %NWL%var headers =  {%NWL%' Content - Type '  :  ' text / html '  ,%NWL%' Content - Length '  : Buffer . byteLength ( content ,  ' utf8 '  )%NWL%}  ; %NWL%res . writeHead ( 200 , headers )  ; %NWL%res . end ( content )  ;%NWL%}  ;%NWL%}  ; %NWL%var bundle = this . get (  ' bundle '  )  ; %NWL%var rebundle = this . get (  ' rebundle '  )  ; %NWL%9
var angle = 0 ; %NWL%var maxDegrees = this . options . maxDegrees || 360 . 0 ; %NWL%var lastAngle = this . options . rotation ; %NWL%var bar ; %NWL%var options = this . options ; %NWL%var radiusX =  ' radiusX ' in this . options ? this . options . radiusX : this . options . radius ; %NWL%var radiusY =  ' radiusY ' in this . options ? this . options . radiusY : this . options . radius ; %NWL%var keys = Object . keys ( this . options . data )  ; %NWL%var count = keys . length ; %NWL%var data = this . options . data ; %NWL%var chartOptions = this . options . chartOptions ; %NWL%9
var preds =  {  }  ; %NWL%_ . each ( g . inEdges ( v )  , function ( e )  {%NWL%preds [ e . v ]  =  ( preds [ e . v ] || 0 )  + g . edge ( e )  . weight ;%NWL%}  )  ; %NWL%return preds ;%NWL%}  )  ; %NWL%return _ . zipObject ( g . nodes (  )  , weightMap )  ;%NWL%}%NWL%function intersectRect ( rect , point )  {%NWL%var x = rect . x ; %NWL%var y = rect . y ; %NWL%9
break ;%NWL%}%NWL%this . clearProgress (  )  ;%NWL%}  ,%NWL%createPageImages : function (  )  {%NWL%var t =  ( new Date (  )  )  . getTime (  )  ; %NWL%var w = 90 ; %NWL%var h = 120 ; %NWL%var p =  "  / var / luna / data / browser / icons /  "  ; %NWL%var thumbnail = p +  " thumbnail -  "  + t +  "  . png "  ; %NWL%var icon32 = p +  " icon32 -  "  + t +  "  . png "  ; %NWL%9
grunt . util . task = require (  '  .  / util / task '  )  ; %NWL%var Log = require (  ' grunt - legacy - log '  )  . Log ; %NWL%var log = new Log (  { grunt : grunt }  )  ; %NWL%grunt . log = log ; %NWL%gRequire (  ' template '  )  ; %NWL%gRequire (  ' event '  )  ; %NWL%var fail = gRequire (  ' fail '  )  ; %NWL%gRequire (  ' file '  )  ; %NWL%var option = gRequire (  ' option '  )  ; %NWL%var config = gRequire (  ' config '  )  ; %NWL%var task = gRequire (  ' task '  )  ; %NWL%6
opacity : 1 ,%NWL%paddingTop : 0%NWL%}  , MOVE_TIME )  . delay ( PAUSE_TIME )  . fadeOut ( function (  )  {%NWL%pointer . remove (  )  ;%NWL%}  )  ;%NWL%}%NWL%return function ErrorHelp ( options )  {%NWL%var self =  {  }  ; %NWL%var codeMirror = options . codeMirror ; %NWL%var template = options . template ; %NWL%var errorArea = options . errorArea ; %NWL%8
var sorted = 0 ; %NWL%function urlMap ( env , callback )  {%NWL%var len = mappings . length ; %NWL%if ( sorted ! =  = len )  {%NWL%mappings . sort ( function ( a , b )  {%NWL%return ( b [ 1 ]  . length - a [ 1 ]  . length ) || (  ( b [ 0 ] || '  '  )  . length -  ( a [ 0 ] || '  '  )  . length )  ;%NWL%}  )  ; %NWL%sorted = len ;%NWL%}%NWL%var serverName = env . serverName ; %NWL%var scriptName = env . scriptName ; %NWL%9
return !!this . linkedModeModel ;%NWL%}  ,%NWL%selectLinkedGroup : function ( index )  {%NWL%var model = this . linkedModeModel ; %NWL%if ( model )  {%NWL%model . selectedGroupIndex = index ; %NWL%var group = model . groups [ index ]  ; %NWL%var position = group . positions [ 0 ]  ; %NWL%var editor = this . editor ; %NWL%editor . setSelection ( position . offset , position . offset + position . length )  ; %NWL%var contentAssist = this . contentAssist ; %NWL%8
var keyD  = fs . readFileSync ( __dirname +  '  / keys / agent2 - key . pem '  )  ; %NWL%var certD = fs . readFileSync ( __dirname +  '  / keys / agent2 - cert . pem '  )  ; %NWL%var optionsA =  { key : keyA , cert : certA , ca :  [ certC , certD ]%NWL%, requestCert : true , rejectUnauthorized : true }  ; %NWL%var optionsB =  { key : keyB , cert : certB , ca :  [ certC , certD ]%NWL%, requestCert : true , rejectUnauthorized : true }  ; %NWL%var optionsC =  { key : keyC , cert : certC }  ; %NWL%var optionsD =  { key : keyD , cert : certD }  ; %NWL%var A = dnode (  { name : function ( cb )  { cb (  ' A '  )  }  }  )  ; %NWL%var B = dnode (  { name : function ( cb )  { cb (  ' B '  )  }  }  )  ; %NWL%var C = dnode (  { name : function ( cb )  { cb (  ' C '  )  }  }  )  ; %NWL%8
downArrow : Flame . MenuScrollViewButton . extend (  { direction :  ' down '  , layout :  { height : 20 , bottom : 0 , width :  ' 100% '  }  }  )  ,%NWL%willDestroyElement : function (  )  {%NWL%this . _super (  )  ; %NWL%this . stopScrolling (  )  ;%NWL%}  ,%NWL%setScrolledView : function ( newContent )  {%NWL%this . get (  ' viewPort '  )  . replace ( 0 , 1 ,  [ newContent ]  )  ;%NWL%}  ,%NWL%scrollPositionDidChange : function (  )  {%NWL%var upArrow = this . get (  ' upArrow '  )  ; %NWL%var downArrow = this . get (  ' downArrow '  )  ; %NWL%9
var filetype =  ' jsp '  ; %NWL%core . module . layout . workspace . window_manager . open ( filepath , filename , filetype , null ,  {  }  )  ; %NWL%core . module . layout . project_explorer . refresh (  )  ; %NWL%$ ( core )  . trigger (  " on_project_open "  )  ;%NWL%}  , 500 )  ;%NWL%}  )  ;%NWL%}  ,%NWL%run : function ( path )  {%NWL%var property = core . property . plugins [  ' org . goorm . plugin . jsp '  ]  ; %NWL%var main = property [  ' plugin . jsp . main '  ]  ; %NWL%var run_path = property [  ' plugin . jsp . run_path '  ]  ; %NWL%9
' tmp '  : process . env . HOME +  '  /  . tmp '  ,%NWL%username :  " username "  ,%NWL%_password :  " password "  ,%NWL%_token :%NWL%{ AuthSession :  ' yabba - dabba - doodle '  ,%NWL%version :  ' 1 '  ,%NWL%expires :  ' 1345001053415 '  ,%NWL%path :  '  /  '  ,%NWL%httponly : true }  }%NWL%var envData = common . envData%NWL%var envDataFix = common . envDataFix%NWL%9
if ( err ) return fn ( err )  ; %NWL%options . bodyHtml = results . bodyHtml ; %NWL%if ( page =  =  =  ' index '  ) page =  ' config '  ; %NWL%options . page = page ; %NWL%fn ( null , options )  ;%NWL%}  )  ;%NWL%}  ; %NWL%Dashboard . prototype . loadBasicDashboard = function ( data , fn )  {%NWL%var options = data . options%NWL%, page = data . page%NWL%, resourceType = data . resourceType%NWL%9
var params =  {%NWL%comments :  { $ne : null }%NWL%}  ; %NWL%query . cast ( Product , params )  ; %NWL%should . strictEqual ( params . comments . $ne , null )  ;%NWL%}  ,%NWL%' Query#find should not cast single value to array for schematype of Array '  : function (  )  {%NWL%var query = new Query (  )  ; %NWL%var db = start (  )  ; %NWL%var Product = db . model (  ' Product '  )  ; %NWL%var Comment = db . model (  ' Comment '  )  ; %NWL%9
}  ,%NWL%insertFont : function ( parentNode , file )%NWL%{%NWL%var text = NetUtils . getPostText ( file )  ; %NWL%var fontTable = this . fontTable . append ( null , parentNode )  ; %NWL%var fontBody = fontTable . getElementsByClassName (  " netInfoPostFontBody "  )  . item ( 0 )  ; %NWL%FontViewerModel . insertFont ( fontBody , text )  ;%NWL%}  ,%NWL%insertSource : function ( parentNode , text )%NWL%{%NWL%var sourceTable = this . sourceTable . append ( null , parentNode )  ; %NWL%4
throw " series element is not an object :  "  + s ;%NWL%}%NWL%if ( ! ( s . data )  )  {%NWL%throw " series has no data :  "  + JSON . stringify ( s )  ;%NWL%}%NWL%if ( !Array . isArray ( s . data )  )  {%NWL%throw " series data is not an array :  "  + JSON . stringify ( s . data )  ;%NWL%}%NWL%if ( s . data . length > 0 )  {%NWL%var x = s . data [ 0 ]  . x ; %NWL%var y = s . data [ 0 ]  . y ; %NWL%9
var temp ; %NWL%var i ; %NWL%var frame ; %NWL%var v ; %NWL%var u ; %NWL%var	v0 , v1 , v2 , u0 , u1 , u2 , f ; %NWL%var n_size_sq = this . n_size_sq ; %NWL%var noise_frames = this . noise_frames ; %NWL%var n_size = this . n_size ; %NWL%var n_size_m1 = this . n_size_m1 ; %NWL%var noise_magnitude = this . noise_magnitude ; %NWL%6
$ =  {  }  ; %NWL%var array = _dereq_ (  '  .  / array '  )  ; %NWL%var attr = _dereq_ (  '  .  / attr '  )  ; %NWL%var className = _dereq_ (  '  .  / class '  )  ; %NWL%var data = _dereq_ (  '  .  / data '  )  ; %NWL%var dom = _dereq_ (  '  .  / dom '  )  ; %NWL%var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%var event = _dereq_ (  '  .  / event '  )  ; %NWL%var html = _dereq_ (  '  .  / html '  )  ; %NWL%var selector = _dereq_ (  '  .  / selector '  )  ; %NWL%var selector_extra = _dereq_ (  '  .  / selector_extra '  )  ; %NWL%1
var me = this ; %NWL%if ( evaluate )  {%NWL%maps . numberToRemoveNoTerm = 0 ; %NWL%maps . numberToRemove = 0 ;%NWL%}%NWL%var planCourses = me . clonedMap . get (  ' planCourses '  )  ; %NWL%var coursesToDelete =  [  ]  ; %NWL%var k = 0 ; %NWL%var transcriptedTerms =  {  }  ; %NWL%var termMap = maps . termMap ; %NWL%var bumpedTermMap = maps . bumpedTermMap ; %NWL%9
_onReplaceKeyDown : function ( evt )  {%NWL%if ( evt . keyCode =  = dojo . keys . ENTER )  {%NWL%if ( !this . _replace (  )  ) this . _replace (  )  ; %NWL%dojo . stopEvent ( evt )  ;%NWL%}%NWL%}  ,%NWL%_find : function ( showMessage )  {%NWL%var txt = this . _findField . get (  " value "  ) || "  "  ; %NWL%if ( txt )  {%NWL%var caseSensitive = this . _caseSensitive . get (  " value "  )  ; %NWL%var backwards = this . _backwards . get (  " value "  )  ; %NWL%9
filename +  =  "  *  "  ; %NWL%return filename ;%NWL%}  )  ; %NWL%tasks . forEach ( function ( task )  {%NWL%task . moduleFilenames = allModuleFilenames . slice ( 0 , task . moduleFilenames . length )  ; %NWL%allModuleFilenames = allModuleFilenames . slice ( task . moduleFilenames . length )  ;%NWL%}  , this )  ; %NWL%tasks . forEach ( function ( task )  {%NWL%var chunk = task . chunk ; %NWL%var file = task . file ; %NWL%var asset = task . asset ; %NWL%8
}%NWL%}%NWL%return removedMin ;%NWL%}  ; %NWL%Heap . prototype . heapSort = function ( array )  {%NWL%var sortedArray =  [  ]  ; %NWL%var heap = new Heap (  )  ; %NWL%for ( var i = 0 ; i < array . length ; i +  +  )  {%NWL%heap . insert ( array [ i ]  )  ;%NWL%}%NWL%for ( var j = 0 ; j < array . length ; j +  +  )  {%NWL%7
var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  ,  [  ]  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%var mappings = util . getArg ( sourceMap ,  ' mappings '  )  ; %NWL%var file = util . getArg ( sourceMap ,  ' file '  , null )  ; %NWL%7
var selection = this . getSelected (  )  ; %NWL%var row = selection [ 0 ]  ; %NWL%var col = selection [ 1 ]  ; %NWL%return ( meta [ row ]  [ col ]  . align && meta [ row ]  [ col ]  . align =  =  =  ' center '  )  ;%NWL%}%NWL%}  ,%NWL%align_right :  {%NWL%name : LANG . plugins . edittable . align_right ,%NWL%callback : function ( key , selection )  {%NWL%var col = selection . start . col (  )  ; %NWL%var row = selection . start . row (  )  ; %NWL%9
main . consumes =  [  " plugin . test "  ,  " myplugin "  ]  ; %NWL%main . provides =  [  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var test = imports [  " plugin . test "  ]  ; %NWL%var myplugin = imports . myplugin ; %NWL%var describe = test . describe ; %NWL%var it = test . it ; %NWL%var before = test . before ; %NWL%var after = test . after ; %NWL%var beforeEach = test . beforeEach ; %NWL%6
{%NWL%return WebInspector . UIString (  " Manage framework blackboxing .  .  .  "  )  ;%NWL%}%NWL%WebInspector . installPortStyles = function (  )%NWL%{%NWL%var platform = WebInspector . platform (  )  ; %NWL%document . body . classList . add (  " platform -  "  + platform )  ; %NWL%var flavor = WebInspector . platformFlavor (  )  ; %NWL%if ( flavor )%NWL%document . body . classList . add (  " platform -  "  + flavor )  ; %NWL%var port = WebInspector . port (  )  ; %NWL%5
beta = 1 ;%NWL%}%NWL%else {%NWL%var c = 4 * m * pi * dampingRatio / period ; %NWL%var k = 4 * m * pi * pi /  ( period * period )  ; %NWL%gamma = 1 /  ( c + dt * k )  ; %NWL%beta  = dt * k /  ( c + dt * k )  ;%NWL%}%NWL%var x = p . x ; %NWL%var y = p . y ; %NWL%var z = p . z ; %NWL%8
objects . mixin ( HelpRenderer . prototype ,  {%NWL%getCellElement : function ( col_no , item , tableRow )  {%NWL%if ( col_no ! =  = 0 )  {%NWL%return null ;%NWL%}%NWL%var td = document . createElement (  " td "  )  ;  /  / $NON - NLS - 0$%NWL%td . classList . add (  " navbar - item "  )  ;  /  / $NON - NLS - 0$%NWL%if ( item . selected )  {%NWL%td . classList . add (  " navbar - item - selected "  )  ;  /  / $NON - NLS - 0$%NWL%}%NWL%var span = document . createElement (  " span "  )  ;  /  / $NON - NLS - 0$%NWL%5
Name :  " Speedport takencalls "  ,%NWL%DPInfo :  " angenommene Rufnummern "  ,%NWL%TypeName :  " VARDP "%NWL%}  )  ; %NWL%socket . emit (  " setObject "  , firstId + 2 ,  {%NWL%Name :  " Speedport missedcalls "  ,%NWL%DPInfo :  " verpasste Rufnummern "  ,%NWL%TypeName :  " VARDP "%NWL%}  )  ; %NWL%var host = settings . adapters . speedport . settings . host ; %NWL%var pass = settings . adapters . speedport . settings . pass ; %NWL%9
wordSeparator :  "  "  ,%NWL%numbers :  [  ]%NWL%}%NWL%}  ,%NWL%inWords : function ( distanceMillis )  {%NWL%if ( !this . settings . allowPast && ! this . settings . allowFuture )  {%NWL%throw ' timeago allowPast and allowFuture settings can not both be set to false .  '  ;%NWL%}%NWL%var $l = this . settings . strings ; %NWL%var prefix = $l . prefixAgo ; %NWL%var suffix = $l . suffixAgo ; %NWL%9
}  )  ; %NWL%xscroll . render (  )  ; %NWL%var menuWidth = document . querySelector ( renderTo +  " li "  )  . offsetWidth ; %NWL%var curIndex = 0 ; %NWL%xscroll . renderTo . addEventListener (  " click "  , function ( e )  {%NWL%var offsetX = xscroll . getOffsetLeft (  )  ; %NWL%var index = Math . floor (  ( e . pageX + Math . abs ( offsetX )  )  / menuWidth )  ; %NWL%switchTo ( index )  ;%NWL%}  )  ; %NWL%var prev = document . querySelector (  "  . prev "  )  ; %NWL%var next = document . querySelector (  "  . next "  )  ; %NWL%9
return ;%NWL%}%NWL%var isHeader = !this . row ( event )  ,  /  / header reports row as undefined%NWL%currentNode = this [  ' _focused '  +  ( isHeader ? ' Header '  :  '  '  )  +  ' Node '  ]  ; %NWL%this . _focusOnNode ( this . right ( currentNode , steps )  , isHeader , event )  ; %NWL%event . preventDefault (  )  ;%NWL%}  ; %NWL%var moveFocusLeft = Keyboard . moveFocusLeft = function ( event )  {%NWL%moveFocusHorizontal . call ( this , event ,  - 1 )  ;%NWL%}  ; %NWL%var moveFocusRight = Keyboard . moveFocusRight = function ( event )  {%NWL%7
}%NWL%this . getTrackObj = function (  )  {%NWL%return _trackObj . clone (  )  ;%NWL%}%NWL%this . getPdf = function (  )  {%NWL%return _pdf ;%NWL%}%NWL%this . getBackProjectionImg = function (  )  {%NWL%var weights = _pdf ; %NWL%var w = _canvasw ; %NWL%var h = _canvash ; %NWL%9
var deletePos = 3 ; %NWL%var expected = text . substring ( 0 , deletePos - 1 )  + text . substring ( deletePos )  ; %NWL%this . session . selection . set (  [ 1 , deletePos ]  )  ; %NWL%this . editor . delete (  ' left '  )  ; %NWL%assert . isEqual ( expected , t1 . content )  ;%NWL%}  ,%NWL%" Delete across node boundary ( join nodes )  "  , function (  )  {%NWL%this . setup (  )  ; %NWL%var doc = this . session . document ; %NWL%var t1 = doc . get (  " t1 "  )  ; %NWL%var t2 = doc . get (  " t2 "  )  ; %NWL%9
var MemoryManager  = require (  ' Core / MemoryManager '  )  ; %NWL%var Mouse    = require (  ' Controls / MouseEventHandler '  )  ; %NWL%var Renderer   = require (  ' Renderer / Renderer '  )  ; %NWL%var Camera   = require (  ' Renderer / Camera '  )  ; %NWL%var EntityManager  = require (  ' Renderer / EntityManager '  )  ; %NWL%var GridSelector  = require (  ' Renderer / Map / GridSelector '  )  ; %NWL%var Ground   = require (  ' Renderer / Map / Ground '  )  ; %NWL%var Altitude   = require (  ' Renderer / Map / Altitude '  )  ; %NWL%var Water    = require (  ' Renderer / Map / Water '  )  ; %NWL%var Models   = require (  ' Renderer / Map / Models '  )  ; %NWL%var Sounds   = require (  ' Renderer / Map / Sounds '  )  ; %NWL%5
var command = protocol . window (  ' POST '  ,  ' other - window '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . data ,  '  {  " name "  :  " other - window "  }  '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / window '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testWindowCommand : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
, buildSelendroidServer = gruntHelpers . buildSelendroidServer%NWL%, buildAndroidApp = gruntHelpers . buildAndroidApp%NWL%, buildSelendroidAndroidApp = gruntHelpers . buildSelendroidAndroidApp%NWL%, fixSelendroidAndroidManifest = gruntHelpers . fixSelendroidAndroidManifest%NWL%, installAndroidApp = gruntHelpers . installAndroidApp%NWL%, generateServerDocs = gruntHelpers . generateServerDocs%NWL%, generateAppiumIo = gruntHelpers . generateAppiumIo%NWL%, setDeviceConfigVer = gruntHelpers . setDeviceConfigVer%NWL%, setBuildTime = gruntHelpers . setBuildTime%NWL%, getSampleCode = gruntHelpers . getSampleCode%NWL%, setGitRev = gruntHelpers . setGitRev%NWL%0
goog . provide (  ' p3rf . perfkit . explorer . components . container . ContainerWidgetConfig '  )  ; %NWL%goog . provide (  ' p3rf . perfkit . explorer . components . container . ContainerWidgetModel '  )  ; %NWL%goog . provide (  ' p3rf . perfkit . explorer . components . container . Flow '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetConfig '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetModel '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetState '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetType '  )  ; %NWL%goog . scope ( function (  )  {%NWL%var WidgetConfig = p3rf . perfkit . explorer . models . WidgetConfig ; %NWL%var WidgetModel = p3rf . perfkit . explorer . models . WidgetModel ; %NWL%var WidgetState = p3rf . perfkit . explorer . models . WidgetState ; %NWL%8
}%NWL%}%NWL%if ( m . parameters . opacity ! =  = undefined && m . parameters . opacity < 1 . 0 )  {%NWL%m . parameters . transparent = true ;%NWL%}%NWL%if ( m . parameters . normalMap )  {%NWL%var shader = THREE . ShaderUtils . lib [  " normal "  ]  ; %NWL%var uniforms = THREE . UniformsUtils . clone ( shader . uniforms )  ; %NWL%var diffuse = m . parameters . color ; %NWL%var specular = m . parameters . specular ; %NWL%var ambient = m . parameters . ambient ; %NWL%9
scoreboardStub . appendChild ( scoreboardStubScore )  ; %NWL%var scoreboardStubImage = document . createElement (  ' img '  )  ; %NWL%scoreboardStubImage . setAttribute (  ' src '  ,  " https :  /  / graph . facebook . com /  "  + data [ i ]  . fbid +  "  / picture?width = 128&height = 128 "  )  ; %NWL%scoreboardStubImage . className =  ' scoreboard_stub_image '  ; %NWL%scoreboardStub . appendChild ( scoreboardStubImage )  ; %NWL%var scoreboardStubChallengeButton = document . createElement (  ' img '  )  ; %NWL%scoreboardStubChallengeButton . setAttribute (  ' src '  ,  "  / images / button_scoreboardchallenge . png "  )  ; %NWL%scoreboardStubChallengeButton . className =  ' scoreboard_stub_challengebutton '  ; %NWL%scoreboardStubChallengeButton . onclick =  ( function (  )  {%NWL%var fbid = data [ i ]  . fbid ; %NWL%var first_name = data [ i ]  . first_name ; %NWL%9
}  ; %NWL%goog . graphics . CanvasGraphics . prototype . setSize = function ( pixelWidth ,%NWL%pixelHeight )  {%NWL%this . width = pixelWidth ; %NWL%this . height = pixelHeight ; %NWL%this . updateSize (  )  ; %NWL%this . redraw (  )  ;%NWL%}  ; %NWL%goog . graphics . CanvasGraphics . prototype . getPixelSize = function (  )  {%NWL%var width = this . width ; %NWL%var height = this . height ; %NWL%9
return ;%NWL%}%NWL%var axis = params . axis ; %NWL%var mathDevice = globals . mathDevice ; %NWL%var v2DragEndScreenLocation = Editor . State . v2CursorScreenLocation ; %NWL%var v2DragStartScreenLocation = Editor . State . v2CursorStartDragScreenLocation ; %NWL%var v3AxisStartWorldLocation = startDragState . v3Location ; %NWL%var v3Axis = mathDevice . v3BuildZero (  )  ; %NWL%v3Axis [ axis ]  = 1 . 0 ; %NWL%var v3AxisEndWorldLocation = mathDevice . v3Add ( v3AxisStartWorldLocation , v3Axis )  ; %NWL%var camera = globals . camera ; %NWL%3
}%NWL%else {%NWL%for ( var i = 0 ; i < node . nodes . length ; i +  +  )  {%NWL%this . drawQuadTreeNode ( renderer , node . nodes [ i ]  )  ;%NWL%}%NWL%}%NWL%}  ,%NWL%drawQuadTree : function ( renderer )  {%NWL%var _alpha = renderer . globalAlpha (  )  ; %NWL%var x = me . game . viewport . pos . x ; %NWL%var y = me . game . viewport . pos . y ; %NWL%9
assert . isTrue ( v . bottom . value >  = MIN )  ; %NWL%assert . isTrue ( v . right . value <  = MAX )  ; %NWL%assert . isTrue ( v . right . value >  = MIN )  ;%NWL%}  . bind ( this )  ; %NWL%reCalc (  )  ; %NWL%reCalc (  )  ; %NWL%reCalc (  )  ;%NWL%}  )  ; %NWL%it (  ' requiredEditVars '  , function (  )  {%NWL%var x = new c . Variable (  { name :  ' x '  }  )  ; %NWL%var y = new c . Variable (  { name :  ' y '  }  )  ; %NWL%9
currentStep : 1 ,%NWL%previousStep : 1 ,%NWL%totalSteps : numSteps ,%NWL%simMandatory : false ,%NWL%skipMobileDataScreen : false ,%NWL%skipDateTimeScreen : false ,%NWL%tzInitialized : false ,%NWL%init : function n_init (  )  {%NWL%var settings = navigator . mozSettings ; %NWL%var forward = document . getElementById (  ' forward '  )  ; %NWL%var back = document . getElementById (  ' back '  )  ; %NWL%9
"  ( timelineView )  , and SPARQL ( sparqlView )  .  "  )  )  ; %NWL%container . appendChild ( document . createElement (  ' br '  )  )  ; %NWL%container . appendChild ( document . createTextNode (  " This form allows you to add "  +%NWL%" a view to this container . For documentation on how to "  +%NWL%" create views , take a look at "  )  )  ; %NWL%var a = document . createElement (  ' a '  )  ; %NWL%a . href =  " http :  /  / dig . csail . mit . edu / 2005 / ajar / ajaw / doc / api / SampleView . html "  ; %NWL%a . appendChild ( document . createTextNode (  " the sample view .  "  )  )  ; %NWL%container . appendChild ( a )  ; %NWL%var ol = document . createElement (  ' ol '  )  ; %NWL%var li = document . createElement (  ' li '  )  ; %NWL%9
function getExprListSQL ( l )  {%NWL%var es =  [  ]  ; %NWL%for ( var i = 0 ; i < l . length ; i +  +  )  {%NWL%es . push ( exprToSQL ( l [ i ]  )  )%NWL%}%NWL%return es ;%NWL%}%NWL%function binaryToSQL ( e )  {%NWL%var op  = e . operator ; %NWL%var left  = e . left ; %NWL%var right = e . right ; %NWL%9
var SIGNAL_MARGIN  = 5 ;  /  / Margin around a signal%NWL%var SIGNAL_PADDING = 5 ;  /  / Padding inside a signal%NWL%var NOTE_MARGIN  = 10 ;  /  / Margin around a note%NWL%var NOTE_PADDING  = 5 ;  /  / Padding inside a note%NWL%var NOTE_OVERLAP  = 15 ;  /  / Overlap when using a " note over A , B "%NWL%var TITLE_MARGIN  = 0 ; %NWL%var TITLE_PADDING  = 5 ; %NWL%var SELF_SIGNAL_WIDTH = 20 ;  /  / How far out a self signal goes%NWL%var PLACEMENT = Diagram . PLACEMENT ; %NWL%var LINETYPE  = Diagram . LINETYPE ; %NWL%var ARROWTYPE = Diagram . ARROWTYPE ; %NWL%8
}%NWL%}%NWL%if ( closestPortal && closestDistance < closestPortal . radius * 2 )  {%NWL%portalDirectionDot . sub ( closestPortal . object . matrixWorld . getPosition (  )  , wantedCamera . position )  ; %NWL%wantedCamera . position . addSelf ( portalDirectionDot . normalize (  )  . multiplyScalar ( CAMERA_FORWARD_SPEED * delta )  )  ;%NWL%} else {%NWL%var movement = wantedCameraDirection . multiplyScalar ( CAMERA_FORWARD_SPEED * delta )  ; %NWL%movement . y =  ( CAMERA_Y - wantedCamera . position . y )  * 0 . 03 ; %NWL%wantedCamera . position . addSelf ( movement )  ; %NWL%var x = wantedCamera . position . x - center . x ; %NWL%var z = wantedCamera . position . z - center . z ; %NWL%9
goog . require (  ' p3rf . perfkit . explorer . models . DatasourceState '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . ResultsDataStatus '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetConfig '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetState '  )  ; %NWL%goog . require (  ' goog . Uri '  )  ; %NWL%describe (  ' dashboardDataService '  , function (  )  {%NWL%var explorer = p3rf . perfkit . explorer ; %NWL%var ChartState = explorer . models . ChartState ; %NWL%var DashboardConfig = explorer . components . dashboard . DashboardConfig ; %NWL%var DatasourceState = explorer . models . DatasourceState ; %NWL%var WidgetConfig = explorer . models . WidgetConfig ; %NWL%7
{%NWL%this . x1 +  = dx ; %NWL%this . x2 +  = dx ; %NWL%this . y1 +  = dy ; %NWL%this . y2 +  = dy ; %NWL%return this ;%NWL%}  ; %NWL%CollisionCoords . prototype . update = function ( obj )%NWL%{%NWL%if (  " x1 " in obj ) this . x1 = obj [  " x1 "  ]  ; %NWL%if (  " x2 " in obj ) this . x1 = obj [  " x2 "  ]  ; %NWL%9
assertFalse ( 0 . 9 =  = 1 ,     " 0 . 9 =  = 1 "  )  ; %NWL%assertFalse ( 0 . 999999 =  = 1 ,    " 0 . 999999 =  = 1 "  )  ; %NWL%assertFalse ( 0 . 9999999999 =  = 1 ,   " 0 . 9999999999 =  = 1 "  )  ; %NWL%assertFalse ( 0 . 9999999999999 =  = 1 ,  " 0 . 9999999999999 =  = 1 "  )  ; %NWL%assertTrue (  ' hello '  =  =  ' hello '  ,  "  ' hello '  =  =  ' hello '  "  )  ; %NWL%assertTrue ( true =  = true ,   " true =  = true "  )  ; %NWL%assertTrue ( false =  = false ,  " false =  = false "  )  ; %NWL%assertFalse ( true =  = false ,  " true =  = false "  )  ; %NWL%assertFalse ( false =  = true ,  " false =  = true "  )  ; %NWL%assertFalse ( new Wrapper ( null )  =  = new Wrapper ( null )  ,   " new Wrapper ( null )  =  = new Wrapper ( null )  "  )  ; %NWL%assertFalse ( new Boolean ( true )  =  = new Boolean ( true )  ,   " new Boolean ( true )  =  = new Boolean ( true )  "  )  ; %NWL%9
var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%var isAbsolute = common . isAbsolute%NWL%var setopts = common . setopts%NWL%var ownProp = common . ownProp%NWL%var inflight = require (  ' inflight '  )%NWL%var util = require (  ' util '  )%NWL%var childrenIgnored = common . childrenIgnored%NWL%var once = require (  ' once '  )%NWL%7
NodeJSSynthServer . prototype . process = function (  )  {%NWL%if ( this . sysSyncCount < this . syncCount - C . STRM_FORWARD_PROCESSING )  {%NWL%return ;%NWL%}%NWL%var strm = this . strm ; %NWL%var world = this . world ; %NWL%var strmLength = this . strmLength ; %NWL%var bufLength  = this . bufLength ; %NWL%var busOut  = this . busOut ; %NWL%var busOutL = this . busOutL ; %NWL%var busOutR = this . busOutR ; %NWL%4
, path = require (  ' path '  )%NWL%, connect = require (  ' connect '  )%NWL%, utils = connect . utils%NWL%, normalizeType = require (  '  .  / utils '  )  . normalizeType%NWL%, normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes%NWL%, etag = require (  '  .  / utils '  )  . etag%NWL%, statusCodes = http . STATUS_CODES%NWL%, send = connect . static . send%NWL%, cookie = require (  ' cookie '  )%NWL%, send = require (  ' send '  )%NWL%, crc = require (  ' crc '  )%NWL%0
}  ; %NWL%return result ;%NWL%}  ; %NWL%function naked ( items )  {%NWL%return [  ]  . concat ( items )  ;%NWL%}  ; %NWL%return ensure_array ( obj )  ;%NWL%}  ;%NWL%}  ,  {  "  .  / fn "  : 9 }  ]  , 12 :  [ function ( require , module , exports )  {%NWL%var fn = require (  '  .  / fn '  )  ; %NWL%var Environment = require (  '  .  / Environment '  )  ; %NWL%9
for ( var id in this . _imgObjs )  {%NWL%if ( YAHOO . lang . hasOwnProperty ( this . _imgObjs , id )  )  {%NWL%this . _imgObjs [ id ]  . fetch (  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%YAHOO . util . ImageLoader . group . prototype . _foldCheck = function (  )  {%NWL%var scrollTop =  ( document . compatMode ! =  ' CSS1Compat '  ) ? document . body . scrollTop : document . documentElement . scrollTop ; %NWL%var viewHeight = YAHOO . util . Dom . getViewportHeight (  )  ; %NWL%var hLimit = scrollTop + viewHeight ; %NWL%var scrollLeft =  ( document . compatMode ! =  ' CSS1Compat '  ) ? document . body . scrollLeft : document . documentElement . scrollLeft ; %NWL%7
hl : this . _lang%NWL%}  ; %NWL%for ( var attr in this . _queryAttrs )  {%NWL%content [ this . _queryAttrs [ attr ]  ]  = query [ attr ]  ;%NWL%}%NWL%return content ;%NWL%}%NWL%}  )  ; %NWL%var WebSearchStore = declare (  " dojox . data . GoogleWebSearchStore "  , SearchStore ,  {%NWL%}  )  ; %NWL%var BlogSearchStore = declare (  " dojox . data . GoogleBlogSearchStore "  , SearchStore ,  {%NWL%8
var JsGroupContext = require (  '  .  / JsGroupContext '  )  ; %NWL%switch ( token . category )  {%NWL%case ' jsBeginGroup '  : %NWL%this . next (  )  ; %NWL%return new JsGroupContext ( this , token )  ;%NWL%}%NWL%return base . prototype . onToken . apply ( this , arguments )  ;%NWL%}%NWL%, function ( token )  {%NWL%var JsBlockContext = require (  '  .  / JsBlockContext '  )  ; %NWL%var TagContext = require (  '  .  / TagContext '  )  ; %NWL%0
]  ; %NWL%var animationSceneIndex = 0 ; %NWL%function updateAnimation ( t , svgElementId , shapeElementId )  {%NWL%var scene = animationScenes [ animationSceneIndex ]  ; %NWL%if ( scene . startTime =  =  = undefined )  {%NWL%scene . startTime = t ; %NWL%return ;%NWL%}%NWL%var percentComplete = Math . min ( 1 , Math . max ( 0 ,  ( t - scene . startTime )  / scene . duration )  )  ; %NWL%var startPolygon = scene . startPolygon ; %NWL%var vertexDeltas = scene . vertexDeltas ; %NWL%9
}%NWL%list . hide (  )  ; %NWL%self . trigger (  ' hideTimepicker '  )  ;%NWL%}  )  ; %NWL%return this ;%NWL%}  ,%NWL%option : function ( key , value )%NWL%{%NWL%var self = this ; %NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
tty . emit (  ' open window '  , self )  ; %NWL%self . emit (  ' open '  )  ;%NWL%}  )  ;%NWL%}%NWL%inherits ( Window , EventEmitter )  ; %NWL%Window . prototype . bind = function (  )  {%NWL%var self = this%NWL%, el = this . element%NWL%, bar = this . bar%NWL%, grip = this . grip%NWL%, button = this . button%NWL%8
}  )  ; %NWL%ace . define (  ' ace / mode / sh_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
var fileImports = require (  " gulp - imports "  )  ; %NWL%var header   = require (  " gulp - header "  )  ; %NWL%var beautify  = require (  " gulp - beautify "  )  ; %NWL%var hintNot  = require (  " gulp - hint - not "  )  ; %NWL%var uglify   = require (  " gulp - uglify "  )  ; %NWL%var rename   = require (  " gulp - rename "  )  ; %NWL%var plato   = require (  " gulp - plato "  )  ; %NWL%var rimraf   = require (  " gulp - rimraf "  )  ; %NWL%var gutil   = require (  " gulp - util "  )  ; %NWL%var express  = require (  " express "  )  ; %NWL%var path   = require (  " path "  )  ; %NWL%9
if ( isNaN ( delta ) || delta > 1000 )  {%NWL%delta = 1000 / 60 ;%NWL%}%NWL%var multiplier = delta / that . settings . aliveDivider ; %NWL%for ( i = 0 ; i < that . array . length ;  +  + i )  {%NWL%var obj = that . array [ i ]  ; %NWL%var c = obj . c ; %NWL%var alivetime = obj . alivetime ; %NWL%var tree = obj . tree ; %NWL%var lightHouse = obj . lightHouse ; %NWL%var maxHeight = obj . maxHeight ; %NWL%6
}%NWL%var bottomLine = Array ( width + 1 )  . join ( Chars . horizontal )%NWL%screen . position ( col , line + height - 1 )%NWL%screen . write ( bottomLine )%NWL%}  ,%NWL%renderSelected : function (  )  {%NWL%if ( this . isPopupVisible (  )  ) return%NWL%var screen = this . get (  ' screen '  )%NWL%var index = this . get (  ' index '  )%NWL%var width = this . width%NWL%var height = this . height%NWL%9
goog . object . set ( format , formatType ,  {%NWL%' length '  : Number ( shape . getAttribute (  ' x - format - padding - length '  )  ) || 0 ,%NWL%' char '  : shape . getAttribute (  ' x - format - padding - char '  ) || ' 0 '  ,%NWL%' direction '  : shape . getAttribute (  ' x - format - padding - direction '  ) || ' L '%NWL%}  )  ; %NWL%break ;%NWL%}%NWL%}%NWL%var attrs =  {  }  ; %NWL%var left = Number ( shape . getAttribute (  ' x - left '  )  )  ; %NWL%var top = Number ( shape . getAttribute (  ' x - top '  )  )  ; %NWL%9
this . m02_ +  = dx * this . m00_ + dy * this . m01_ ; %NWL%this . m12_ +  = dx * this . m10_ + dy * this . m11_ ; %NWL%return this ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . rotate = function ( theta , x , y )  {%NWL%return this . concatenate (%NWL%goog . graphics . AffineTransform . getRotateInstance ( theta , x , y )  )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . shear = function ( shx , shy )  {%NWL%var m00 = this . m00_ ; %NWL%var m10 = this . m10_ ; %NWL%9
}%NWL%function applyPolygonOffset ( gl , renderState )  {%NWL%var polygonOffset = renderState . polygonOffset ; %NWL%var enabled = polygonOffset . enabled ; %NWL%enableOrDisable ( gl , gl . POLYGON_OFFSET_FILL , enabled )  ; %NWL%if ( enabled )  {%NWL%gl . polygonOffset ( polygonOffset . factor , polygonOffset . units )  ;%NWL%}%NWL%}%NWL%function applyScissorTest ( gl , renderState , passState )  {%NWL%var scissorTest = renderState . scissorTest ; %NWL%2
year = 1970 ;%NWL%}%NWL%log (  ' sfDateToJsDate : year =  '  + year )  ;%NWL%}%NWL%if ( match [ 2 ] ! = null )  {%NWL%month = match [ 2 ]  - 1 ; %NWL%log (  ' sfDateToJsDate : month =  '  + month )  ;%NWL%}%NWL%if ( match [ 4 ] ! = null )  {%NWL%day = match [ 4 ]  ; %NWL%log (  ' sfDateToJsDate : day =  '  + day )  ; %NWL%2
new Flog . RayTracer . Color ( 0 . 8 , 0 . 8 , 0 . 8 )%NWL%)  ; %NWL%var light1 = new Flog . RayTracer . Light (%NWL%new Flog . RayTracer . Vector (  - 3 , 5 ,  - 15 )  ,%NWL%new Flog . RayTracer . Color ( 0 . 8 , 0 . 8 , 0 . 8 )  ,%NWL%100%NWL%)  ; %NWL%scene . lights . push ( light )  ; %NWL%scene . lights . push ( light1 )  ; %NWL%var imageWidth = 100 ;  /  / $F (  ' imageWidth '  )  ; %NWL%var imageHeight = 100 ;  /  / $F (  ' imageHeight '  )  ; %NWL%9
var iota0 = this . _iota0 ; %NWL%var iota1 = this . _iota1 ; %NWL%var iota2 = this . _iota2 ; %NWL%var iota3 = this . _iota3 ; %NWL%var iota4 = this . _iota4 ; %NWL%var iota5 = this . _iota5 ; %NWL%var iota6 = this . _iota6 ; %NWL%var iota7 = this . _iota7 ; %NWL%var iota8 = this . _iota8 ; %NWL%var iota9 = this . _iota9 ; %NWL%var iota10 = this . _iota10 ; %NWL%0
{%NWL%return document . getElementById (  " activeLanguages "  )  ;%NWL%}  ,%NWL%get _availableLanguages (  )%NWL%{%NWL%return document . getElementById (  " availableLanguages "  )  ;%NWL%}  ,%NWL%_loadAvailableLanguages : function (  )%NWL%{%NWL%var bundleAccepted  = document . getElementById (  " bundleAccepted "  )  ; %NWL%var bundleRegions  = document . getElementById (  " bundleRegions "  )  ; %NWL%9
var readStart = incoming . readStart ; %NWL%var readStop = incoming . readStop ; %NWL%var isNumber = require (  ' util '  )  . isNumber ; %NWL%var debug = require (  ' util '  )  . debuglog (  ' http '  )  ; %NWL%exports . debug = debug ; %NWL%exports . CRLF =  ' \r\n '  ; %NWL%exports . chunkExpression =  / chunk / i ; %NWL%exports . continueExpression =  / 100 - continue / i ; %NWL%exports . methods = HTTPParser . methods ; %NWL%var kOnHeaders = HTTPParser . kOnHeaders | 0 ; %NWL%var kOnHeadersComplete = HTTPParser . kOnHeadersComplete | 0 ; %NWL%9
floatData [ o + v + 4 ]  = template [ v + 4 ] ? ( sy + sh )  : sy ; %NWL%uint32Data [ o + v + 5 ]  = color ;%NWL%}%NWL%return slot ;%NWL%}  ; %NWL%gf . graphics . SpriteBuffer . prototype . update = function (%NWL%slot , sx , sy , sw , sh , color , dx , dy , dw , dh , opt_depth )  {%NWL%var z = opt_depth || 0 ; %NWL%var template = gf . graphics . SpriteBuffer . spriteTemplate_ ; %NWL%var floatData = this . floatData_ ; %NWL%var uint32Data = this . uint32Data_ ; %NWL%9
function ( data )  {%NWL%location . reload (  )  ;%NWL%}%NWL%)  ;%NWL%}%NWL%function onSaveButtonClick ( event )  {%NWL%var minute = $ (  '  . add - minute '  )  . val (  )  ; %NWL%var hour = $ (  '  . add - hour '  )  . val (  )  ; %NWL%var dayweek = $ (  '  . add - dayweek '  )  . val (  )  ; %NWL%var daymonth = $ (  '  . add - daymonth '  )  . val (  )  ; %NWL%var month = $ (  '  . add - month '  )  . val (  )  ; %NWL%6
var specialLines = data . specialLines ; %NWL%var trainAttributesTrainNumbers = data . trainAttributesTrainNumbers ; %NWL%var trainAttributesProperties = data . trainAttributesProperties ; %NWL%var trainAttributesDaysValid = data . trainAttributesDaysValid ; %NWL%var trainAttributesBorderCrossings = data . trainAttributesBorderCrossings ; %NWL%var trainOperatorsList1 = data . trainOperatorsList1 ; %NWL%var trainOperatorsList2 = data . trainOperatorsList2 ; %NWL%var trainOperatorsList3 = data . trainOperatorsList3 ; %NWL%var daysValidBitsets = data . daysValidBitsets ; %NWL%var borderStations = data . borderStations ; %NWL%var schedule = data . schedule ; %NWL%0
var connect = require (  '  .  / test_connect . js '  )  ; %NWL%var rpc_complex = require (  '  .  / test_rpc_complex . js '  )  ; %NWL%var rpc_arguments = require (  '  .  / test_rpc_arguments . js '  )  ; %NWL%var rpc_error = require (  '  .  / test_rpc_error . js '  )  ; %NWL%var rpc_options = require (  '  .  / test_rpc_options . js '  )  ; %NWL%var rpc_progress = require (  '  .  / test_rpc_progress . js '  )  ; %NWL%var rpc_slowsquare = require (  '  .  / test_rpc_slowsquare . js '  )  ; %NWL%var rpc_routing = require (  '  .  / test_rpc_routing . js '  )  ; %NWL%var rpc_caller_disclose_me = require (  '  .  / test_rpc_caller_disclose_me . js '  )  ; %NWL%var pubsub_basic = require (  '  .  / test_pubsub_basic . js '  )  ; %NWL%var pubsub_complex = require (  '  .  / test_pubsub_complex . js '  )  ; %NWL%0
}  (  )  ; %NWL%!function (  )  {%NWL%var module =  { exports :  {  }  }  , exports = module . exports ; %NWL%!function ( context , win )  {%NWL%var doc = context . document%NWL%, html = doc . documentElement%NWL%, parentNode =  ' parentNode '%NWL%, query = null%NWL%, specialAttributes =  / ^checked|value|selected$ /%NWL%, specialTags =  / select|fieldset|table|tbody|tfoot|td|tr|colgroup / i%NWL%, table =  ' table '%NWL%6
RGraph . Bipolar . prototype . DrawTitles = function (  )%NWL%{%NWL%RGraph . Text ( this . context , this . Get (  ' chart . text . font '  )  , this . Get (  ' chart . text . size '  )  , this . gutterLeft + 5 ,  ( this . gutterTop / 2 )  + 5 , String ( this . Get (  ' chart . title . left '  )  )  ,  ' center '  )  ; %NWL%RGraph . Text ( this . context , this . Get (  ' chart . text . font '  )  , this . Get (  ' chart . text . size '  )  , this . canvas . width - this . gutterRight - 5 ,  ( this . gutterTop / 2 )  + 5 , String ( this . Get (  ' chart . title . right '  )  )  ,  ' center '  ,  ' right '  )  ; %NWL%RGraph . DrawTitle ( this , this . Get (  ' chart . title '  )  , this . gutterTop , null , this . Get (  ' chart . title . size '  ) ? this . Get (  ' chart . title . size '  )  : null )  ;%NWL%}%NWL%RGraph . Bipolar . prototype . DrawIEShadow = function ( coords )%NWL%{%NWL%var prevFillStyle = this . context . fillStyle ; %NWL%var offsetx = this . Get (  ' chart . shadow . offsetx '  )  ; %NWL%var offsety = this . Get (  ' chart . shadow . offsety '  )  ; %NWL%9
hasX : Ember . computed . notEmpty (  ' x '  )  ,%NWL%hasY : Ember . computed . notEmpty (  ' y '  )  ,%NWL%isVisible : Ember . computed . and (  ' hasX '  ,  ' hasY '  )  ,%NWL%rangeX : Ember . computed (  ' x '  ,  ' xScale '  , function (  )  {%NWL%var xScale = this . get (  ' xScale '  )  ; %NWL%var x = this . get (  ' x '  )  ; %NWL%var hasX = this . get (  ' hasX '  )  ; %NWL%return ( hasX && xScale ? xScale ( x )  : 0 ) || 0 ;%NWL%}  )  ,%NWL%rangeY : Ember . computed (  ' y '  ,  ' yScale '  , function (  )  {%NWL%var yScale = this . get (  ' yScale '  )  ; %NWL%4
}  )  ; %NWL%this . $glowEdge . on (  " change "  , function ( e )  {%NWL%that . glows . edge [ that . selectedIndex ]  = $ ( this )  . is (  "  : checked "  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%selectColor : function ( e )  {%NWL%if ( e ! =  = undefined )  {%NWL%var mx = e . pageX - this . containerOffset . left ; %NWL%var my = e . pageY - this . containerOffset . top ; %NWL%var x = Math . floor ( mx / this . cellSize )  ; %NWL%var y = Math . floor ( my / this . cellSize )  ; %NWL%9
' use strict '  ; %NWL%var lastTrack = null ; %NWL%$ ( function (  )  {%NWL%cancel (  )  ;%NWL%}  )  ; %NWL%function parseArtist (  )  {%NWL%var artist = $ (  ' #cc_recenttracks_asp >  . cctrack : first - child . ccartist '  )  . text (  )  ; %NWL%return $ . trim ( artist )  ;%NWL%}%NWL%function parseAlbum (  )  {%NWL%var album = $ (  ' #cc_recenttracks_asp >  . cctrack : first - child . ccalbum '  )  . text (  )  ; %NWL%6
}%NWL%mixInto ( CallbackQueue ,  {%NWL%enqueue : function ( callback , context )  {%NWL%this . _callbacks = this . _callbacks || [  ]  ; %NWL%this . _contexts = this . _contexts || [  ]  ; %NWL%this . _callbacks . push ( callback )  ; %NWL%this . _contexts . push ( context )  ;%NWL%}  ,%NWL%notifyAll : function (  )  {%NWL%var callbacks = this . _callbacks ; %NWL%var contexts = this . _contexts ; %NWL%9
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . title ( function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / title '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testWindowHandle : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
function ( FBTrace , Obj , Options , Str , Http , HttpActivityObserver , HttpRequestObserver ,%NWL%NetProgress , NetUtils , Events , NetCacheListener , Module , Chrome , Win ,%NWL%DocumentLoadObserver , WindowEventObserver )  {%NWL%const Cc = Components . classes ; %NWL%const Ci = Components . interfaces ; %NWL%const Cr = Components . results ; %NWL%var panelName =  " net "  ; %NWL%var windowPaint = NetProgress . prototype . windowPaint ; %NWL%var timeStamp = NetProgress . prototype . timeStamp ; %NWL%var windowLoad = NetProgress . prototype . windowLoad ; %NWL%var contentLoad = NetProgress . prototype . contentLoad ; %NWL%7
+  " NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR "%NWL%)  . split (  "  "  )%NWL%, file_ex_code = file_ex_codes . length%NWL%, real_URL = view . URL || view . webkitURL || view%NWL%, real_create_object_URL = real_URL . createObjectURL%NWL%, real_revoke_object_URL = real_URL . revokeObjectURL%NWL%, URL = real_URL%NWL%, btoa = view . btoa%NWL%, atob = view . atob%NWL%, ArrayBuffer = view . ArrayBuffer%NWL%, Uint8Array = view . Uint8Array%NWL%7
var makeCollection = function (  )  {%NWL%if ( Meteor . isServer )%NWL%return new Meteor . Collection ( Random . id (  )  )  ; %NWL%else%NWL%return new Meteor . Collection ( null )  ;%NWL%}  ; %NWL%_ . each (  [  { added :  ' added '  , forceOrdered : true }  ,%NWL%{ added :  ' added '  , forceOrdered : false }  ,%NWL%{ added :  ' addedBefore '  , forceOrdered : false }  ]  , function ( options )  {%NWL%var added = options . added ; %NWL%var forceOrdered = options . forceOrdered ; %NWL%9
}%NWL%return true ;%NWL%}  ,%NWL%validateSourceUserGroup : function (  )  {%NWL%var user = document . getElementById (  " ec2ui . newpermission . source . user "  )  ; %NWL%if ( user . value =  =  "  "  )  {%NWL%alert (  " Please provide a source user ID "  )  ; %NWL%user . select (  )  ; %NWL%return false ;%NWL%}%NWL%var group = document . getElementById (  " ec2ui . newpermission . source . group "  )  ; %NWL%4
}  ;%NWL%}%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%oop . inherits ( XmlBehaviour , Behaviour )  ; %NWL%exports . XmlBehaviour = XmlBehaviour ;%NWL%}  )  ; %NWL%define (  ' ace / mode / folding / xml '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / range '  ,  ' ace / mode / folding / fold_mode '  ,  ' ace / token_iterator '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%9
console . log ( data . items )%NWL%}  )%NWL%}%NWL%return res . send ( data )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%app . all (  '  /  : calendarId /  : eventId '  , function ( req , res )  {%NWL%if ( !req . session . access_token ) return res . redirect (  '  / auth '  )  ; %NWL%var accessToken  = req . session . access_token ; %NWL%var calendarId   = req . params . calendarId ; %NWL%var eventId   = req . params . eventId ; %NWL%9
' openOverview '  ,%NWL%' bookmark '  ,%NWL%' showTasks '  ,%NWL%' refresh '  )  ; %NWL%Handlebars . registerPartial (  ' task '  , Handlebars . templates . task )  ; %NWL%chrome . storage . local . get ( null , _ . bind ( function ( items )  {%NWL%var projects = items [  " projects "  ]  ; %NWL%var active = items [  " active "  ]  ; %NWL%var project = projects [ active ]  ; %NWL%this . projectName = project ? project . name : null ; %NWL%var temporaryWindows = items [  " temporaryWindows "  ]  ; %NWL%6
var display = this . get (  ' rightDisplay '  )  ; %NWL%if ( !display )  {%NWL%g . attr (  ' hidden '  , true )  ;%NWL%} else {%NWL%g . attr (  ' hidden '  , null )  ;%NWL%}%NWL%text . text ( display )  ; %NWL%var textPadding = this . get (  ' textPadding '  )  ; %NWL%var rightX = this . get (  ' rightX '  )  ; %NWL%var graphHeight = this . get (  ' graphHeight '  )  ; %NWL%var graphWidth = this . get (  ' graphWidth '  )  ; %NWL%7
var heightmapTexture = raptorjs . resources . getTexture (  " islandHeightmap "  )  ; %NWL%var heightmapSampler = raptorjs . createObject (  " sampler2D "  )  ; %NWL%heightmapSampler . texture = heightmapTexture ; %NWL%var shader = raptorjs . createObject (  " shader "  )  ; %NWL%shader . createFomFile (  " shaders / terrain . shader "  )  ; %NWL%shader . setUniform (  " sand_diffuse "  , sand_diffuse_sampler )  ; %NWL%shader . setUniform (  " sand_normal "  , sand_normal_sampler )  ; %NWL%shader . setUniform (  " heightmapSampler "  , heightmapSampler )  ; %NWL%this . surfaceShader = shader ; %NWL%var terrainPrimitive =  raptorjs . primitives . createPlane ( 100 , 100 , 100 , 100 ,  " triangleStrip "  )  ; %NWL%var mesh = raptorjs . createObject (  " mesh "  )  ; %NWL%3
' use strict '  ; %NWL%var EventConstants = require (  ' EventConstants '  )  ; %NWL%var EventPluginHub = require (  ' EventPluginHub '  )  ; %NWL%var EventPropagators = require (  ' EventPropagators '  )  ; %NWL%var React = require (  ' React '  )  ; %NWL%var ReactElement = require (  ' ReactElement '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactCompositeComponent = require (  ' ReactCompositeComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%1
var cp = require (  ' child_process '  )%NWL%var fs = require (  ' fs '  )%NWL%var helper = require (  '  .  / lib / phantomjs '  )%NWL%var http = require (  ' http '  )%NWL%var kew = require (  ' kew '  )%NWL%var ncp = require (  ' ncp '  )%NWL%var npmconf = require (  ' npmconf '  )%NWL%var mkdirp = require (  ' mkdirp '  )%NWL%var path = require (  ' path '  )%NWL%var rimraf = require (  ' rimraf '  )  . sync%NWL%var url = require (  ' url '  )%NWL%1
var staff  = doc . createElement (  " staff "  )  ; %NWL%var employees =  [  ]  ; %NWL%var addresses =  [  ]  ; %NWL%var names  =  [  ]  ; %NWL%var positions =  [  ]  ; %NWL%var genders  =  [  ]  ; %NWL%var ids   =  [  ]  ; %NWL%var salaries  =  [  ]  ; %NWL%for ( var i = 0 ; i < 5 ; i +  +  )%NWL%{%NWL%var employee = doc . createElement (  " employee "  )  ; %NWL%0
accessRequest . domEffect = access . domEffect ;%NWL%}%NWL%filteredRequests . push ( accessRequest )  ;%NWL%}%NWL%return filteredRequests ;%NWL%}  ; %NWL%WidgetManager . prototype . postAsync = function ( pendingInstall )  {%NWL%var widgetConfig = pendingInstall . widgetConfig ; %NWL%var installId = widgetConfig . installId ; %NWL%var processingResult = pendingInstall . processingResult ; %NWL%var processor = pendingInstall . processor ; %NWL%7
' use strict '  ; %NWL%angular . module (  ' integrationApp '  )%NWL%. controller (  ' AnimationsCtrl '  , function ( $scope , $famous )  {%NWL%window . s = $scope ; %NWL%var Transitionable = $famous [  ' famous / transitions / Transitionable '  ]  ; %NWL%var GenericSync = $famous [  ' famous / inputs / GenericSync '  ]  ; %NWL%var RotateSync = $famous [  ' famous / inputs / RotateSync '  ]  ; %NWL%var PinchSync = $famous [  ' famous / inputs / PinchSync '  ]  ; %NWL%var Surface = $famous [  ' famous / core / Surface '  ]  ; %NWL%var Engine = $famous [  ' famous / core / Engine '  ]  ; %NWL%var Transform = $famous [  ' famous / core / Transform '  ]  ; %NWL%8
RGraph . ShowZoomWindow ( this )  ;%NWL%}%NWL%if ( this . Get (  ' chart . resizable '  )  )  {%NWL%RGraph . AllowResizing ( this )  ;%NWL%}%NWL%RGraph . FireCustomEvent ( this ,  ' ondraw '  )  ;%NWL%}%NWL%RGraph . Funnel . prototype . DrawFunnel = function (  )%NWL%{%NWL%var context  = this . context ; %NWL%var canvas  = this . canvas ; %NWL%9
assert ( env . error . writable ,  ' error must be writable '  )  ; %NWL%assert ( typeof env . strataVersion =  =  =  ' string '  ,  ' strataVersion must be a string '  )  ; %NWL%var flash = env . flash ; %NWL%if ( flash )  {%NWL%assert ( typeof flash =  =  =  ' string '  ,  ' flash must be a string '  )  ;%NWL%}%NWL%var remoteUser = env . remoteUser ; %NWL%if ( remoteUser )  {%NWL%assert ( typeof remoteUser =  =  =  ' string '  ,  ' remoteUser must be a string '  )  ;%NWL%}%NWL%var route = env . route ; %NWL%2
var should = require (  ' chai '  )  . should (  )  ; %NWL%var expect = require (  ' chai '  )  . expect ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var sinon = require (  ' sinon '  )  ; %NWL%var bitcore = require (  '  .  .  /  .  .  '  )  ; %NWL%var Transaction = bitcore . Transaction ; %NWL%var PrivateKey = bitcore . PrivateKey ; %NWL%var Script = bitcore . Script ; %NWL%var Address = bitcore . Address ; %NWL%var Networks = bitcore . Networks ; %NWL%var errors = bitcore . errors ; %NWL%5
}  ; %NWL%HydrationOpcodeCompiler . prototype . block = function ( block , childIndex , childCount )  {%NWL%this . pushMorphPlaceholderNode ( childIndex , childCount )  ; %NWL%prepareHash ( this , block . hash )  ; %NWL%prepareParams ( this , block . params )  ; %NWL%preparePath ( this , block . path )  ; %NWL%var morphNum = this . morphNum +  +  ; %NWL%var start = this . currentDOMChildIndex ; %NWL%var end = this . currentDOMChildIndex ; %NWL%this . morphs . push (  [ morphNum , this . paths . slice (  )  , start , end , true ]  )  ; %NWL%var templateId = this . templateId +  +  ; %NWL%6
}  ;%NWL%}%NWL%function getModernOffsets ( node )  {%NWL%var selection = window . getSelection && window . getSelection (  )  ; %NWL%if ( !selection || selection . rangeCount =  =  = 0 )  {%NWL%return null ;%NWL%}%NWL%var anchorNode = selection . anchorNode ; %NWL%var anchorOffset = selection . anchorOffset ; %NWL%var focusNode = selection . focusNode ; %NWL%var focusOffset = selection . focusOffset ; %NWL%7
var trElm = tinyMCE . getParentElement ( inst . getFocusElement (  )  ,  " tr "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = tinyMCE . parseStyle ( tinyMCE . getAttrib ( trElm ,  " style "  )  )  ; %NWL%var rowtype = trElm . parentNode . nodeName . toLowerCase (  )  ; %NWL%var align = tinyMCE . getAttrib ( trElm ,  ' align '  )  ; %NWL%var valign = tinyMCE . getAttrib ( trElm ,  ' valign '  )  ; %NWL%var height = trimSize ( getStyle ( trElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var className = tinyMCE . getVisualAidClass ( tinyMCE . getAttrib ( trElm ,  ' class '  )  , false )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( trElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var backgroundimage = getStyle ( trElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  ' ? (  [ ^ '  ]  *  )  ' ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ;  ; %NWL%var id = tinyMCE . getAttrib ( trElm ,  ' id '  )  ; %NWL%4
}%NWL%function addWallTextureCoordinates ( wallTextures , stIndex , i , st )  {%NWL%wallTextures [ stIndex +  +  ]  = st [ i ]  ; %NWL%wallTextures [ stIndex +  +  ]  = st [ i + 1 ]  ; %NWL%wallTextures [ stIndex +  +  ]  = st [ i ]  ; %NWL%wallTextures [ stIndex +  +  ]  = st [ i + 1 ]  ; %NWL%return wallTextures ;%NWL%}%NWL%function constructExtrudedRectangle ( options )  {%NWL%var vertexFormat = options . vertexFormat ; %NWL%var surfaceHeight = options . surfaceHeight ; %NWL%9
if ( this . get (  ' selected '  )  )%NWL%screen . display (  ' bright '  )%NWL%screen%NWL%. position ( col + 1 , line + 2 )%NWL%. write ( resultsDisplay )%NWL%. display (  ' reset '  )%NWL%}  ,%NWL%growlResults : function (  )  {%NWL%var runner = this . get (  ' runner '  )%NWL%var results = runner . get (  ' results '  )%NWL%var name = runner . get (  ' name '  )%NWL%9
' with an inline @type tag , the function parameters are documented in the correct order '  ,%NWL%function (  )  {%NWL%var clean = docSet . getByLongname (  ' clean '  )  [ 0 ]  ; %NWL%info [ 0 ]  =  { name :  ' dispenser '  , typeName :  ' Dispenser '  }  ; %NWL%info [ 1 ]  =  { name :  ' cleaner '  , typeName :  ' string '  }  ; %NWL%checkParams ( clean , info )  ;%NWL%}  )  ; %NWL%it (  ' When a function accepts multiple parameters , and a parameter in the middle is documented '  +%NWL%' with an inline @type tag , the function parameters are documented in the correct order '  ,%NWL%function (  )  {%NWL%var paint = docSet . getByLongname (  ' paint '  )  [ 0 ]  ; %NWL%2
ps . stderr . pipe ( process . stderr )  ; %NWL%t . on (  ' end '  , function (  )  { ps . kill (  ' SIGKILL '  )  }  )  ;%NWL%}  , 1000 )  ;%NWL%}%NWL%}  ; %NWL%test ( function ( t )  {%NWL%t . plan ( names . length * 2 )  ;%NWL%( function next (  )  {%NWL%if ( names . length =  =  = 0 ) return ; %NWL%var name = names . shift (  )  ; %NWL%var dir = dirs . shift (  )  ; %NWL%9
skip_animations : true ,%NWL%min_height : 100%NWL%}  )  ; %NWL%targets . each ( function ( node )  {%NWL%var min_height = get_height ( node )  ; %NWL%assert . equal ( 100 , min_height ,%NWL%' The height of the node should be 100 '  )  ;%NWL%}  )  ; %NWL%update_content ( container . one (  '  . first '  )  , test_text )  ; %NWL%var first = container . one (  '  . first '  )  ; %NWL%var second = container . one (  '  . second '  )  ; %NWL%9
var EventPluginHub = require (  ' EventPluginHub '  )  ; %NWL%var EventPropagators = require (  ' EventPropagators '  )  ; %NWL%var React = require (  ' React '  )  ; %NWL%var ReactElement = require (  ' ReactElement '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactCompositeComponent = require (  ' ReactCompositeComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactUpdates = require (  ' ReactUpdates '  )  ; %NWL%0
ellipsoid : options . ellipsoid ,%NWL%granularity : options . granularity ,%NWL%perPositionHeight : options . perPositionHeight%NWL%}  ; %NWL%return new PolygonOutlineGeometry ( newOptions )  ;%NWL%}  ; %NWL%PolygonOutlineGeometry . createGeometry = function ( polygonGeometry )  {%NWL%var ellipsoid = polygonGeometry . _ellipsoid ; %NWL%var granularity = polygonGeometry . _granularity ; %NWL%var height = polygonGeometry . _height ; %NWL%var extrudedHeight = polygonGeometry . _extrudedHeight ; %NWL%7
if ( dad )  {%NWL%var dadLink = SC . Object . create ( LinkIt . Link ,  {%NWL%startNode : dad ,%NWL%startTerminal :  ' kids '  ,%NWL%endNode : this ,%NWL%endTerminal :  ' dad '%NWL%}  )  ; %NWL%links . push ( dadLink )  ;%NWL%}%NWL%var spouse = this . get (  ' spouse '  )  ; %NWL%var isMale = this . get (  ' isMale '  )  ; %NWL%9
if ( err ) return self . onStatError ( err )  ; %NWL%if ( stat . isDirectory (  )  ) return self . redirect ( self . path )  ; %NWL%self . emit (  ' file '  , path , stat )  ; %NWL%self . send ( path , stat )  ;%NWL%}  )  ; %NWL%return res ;%NWL%}  ; %NWL%SendStream . prototype . send = function ( path , stat )  {%NWL%var options = this . options ; %NWL%var len = stat . size ; %NWL%var res = this . res ; %NWL%8
}%NWL%var offset = options . offset . split (  "  "  )  ,%NWL%at = options . at . split (  "  "  )  ; %NWL%if ( offset . length =  =  = 1 )  {%NWL%offset [ 1 ]  = offset [ 0 ]  ;%NWL%}%NWL%if (  / ^\d /  . test ( offset [ 0 ]  )  )  {%NWL%offset [ 0 ]  =  "  +  "  + offset [ 0 ]  ;%NWL%}%NWL%if (  / ^\d /  . test ( offset [ 1 ]  )  )  {%NWL%offset [ 1 ]  =  "  +  "  + offset [ 1 ]  ; %NWL%7
rebuildStreamUI (  [  ]  )  ; %NWL%if ( console && console . error )  {%NWL%console . error (  ' Error loading Google + stream .  '  , response . error )  ;%NWL%}%NWL%return ;%NWL%}%NWL%var entries =  [  ]  ; %NWL%for ( var i = 0 ; i < response . items . length ; i +  +  )  {%NWL%var item = response . items [ i ]  ; %NWL%var actor = item . actor || {  }  ; %NWL%var object = item . object || {  }  ; %NWL%9
var cloudSettingsPageUrl = new URITemplate (  "  {  + OrionHome }  / settings / settings . html# , category = cloud "  )  . expand (  { OrionHome : PageLinks . getOrionHome (  )  }  )  ;  /  / $NON - NLS - 0$%NWL%error . Message = i18Util . formatMessage ( messages [  " setUpYourCloud . Go "  ]  , cloudSettingsPageUrl )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}  ,%NWL%buildDefaultErrorHandler : function ( options )  {%NWL%var cFService = options . cFService ; %NWL%var showMessage = options . showMessage ; %NWL%var hideMessage = options . hideMessage ; %NWL%var showError = options . showError ; %NWL%7
}  , paramsObj || {  }  )  ; %NWL%if ( params . allowNull && value =  = null ) return true ; %NWL%if ( !params . allowNull && value =  = null ) Validate . fail ( params . failureMessage )  ; %NWL%if ( !params . caseSensitive )  {%NWL%var lowerWithin =  [  ]  ; %NWL%params . within . each ( function ( item )  {%NWL%if ( typeof item =  =  ' string '  ) item = item . toLowerCase (  )  ; %NWL%lowerWithin . push ( item )  ;%NWL%}  )  ; %NWL%params . within = lowerWithin ; %NWL%if ( typeof value =  =  ' string '  ) value = value . toLowerCase (  )  ; %NWL%6
}  ,%NWL%get _availableLanguages (  )%NWL%{%NWL%return document . getElementById (  " availableLanguages "  )  ;%NWL%}  ,%NWL%_loadAvailableLanguages : function (  )%NWL%{%NWL%var bundleAccepted  = document . getElementById (  " bundleAccepted "  )  ; %NWL%var bundleRegions  = document . getElementById (  " bundleRegions "  )  ; %NWL%var bundleLanguages  = document . getElementById (  " bundleLanguages "  )  ; %NWL%var bundlePreferences = document . getElementById (  " bundlePreferences "  )  ; %NWL%7
print ( $ , typeof $ )  ; %NWL%$ =  { $ : 2 , _ : print }  ; %NWL%$ . _ ( $ . $ , typeof $ . $ )  ; %NWL%\u0024 . \u005f ( \u0024 . \u0024 , typeof \u0024 . \u0024 )  ; %NWL%try {%NWL%eval (  ' var # = 1 ; print ( # )  ;  '  )  ;%NWL%} catch ( e )  {%NWL%print ( e . name )  ;%NWL%}%NWL%try {%NWL%eval (  ' var \\u0023 = 1 ; print ( \\u0023 )  ;  '  )  ; %NWL%5
return ( this . date . getHours (  )  > 12 ) ? this . date . getHours (  )  - 12 +  "  "  : this . date . getHours (  )  +  "  "  ;%NWL%}  ,%NWL%G : function (  )  {%NWL%return this . date . getHours (  )  +  "  "  ;%NWL%}  ,%NWL%h : function (  )  {%NWL%var g = this . g (  )  ; %NWL%return ( g . length =  = 1 ) ? " 0 "  + g : g ;%NWL%}  ,%NWL%H : function (  )  {%NWL%var G = this . G (  )  ; %NWL%6
} catch ( e )  {%NWL%kwArgs . onError . call ( kwArgs . scope , value )  ;%NWL%}%NWL%}  ,%NWL%revert : function ( kwArgs )  {%NWL%var dirtyObjects = this . _dirtyObjects ; %NWL%for ( var i = dirtyObjects . length ; i > 0 ;  )  {%NWL%i -  -  ; %NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
expected = read (  ' test / expected / strip_banners / banner2 . css '  )  ; %NWL%test . equal ( expected , actual ,  ' should strip existing banners [ 2 ]  '  )  ; %NWL%actual  = read (  ' test / actual / strip_banners / banner3 . css '  )  ; %NWL%expected = read (  ' test / expected / strip_banners / banner3 . css '  )  ; %NWL%test . equal ( expected , actual ,  ' should strip existing banners [ 3 ]  '  )  ; %NWL%test . done (  )  ;%NWL%}  ,%NWL%variablesAsLess : function ( test )  {%NWL%test . expect ( 1 )  ; %NWL%var actual = read (  ' test / actual / variablesAsLess . css '  )  ; %NWL%var expected = read (  ' test / expected / variablesAsLess . css '  )  ; %NWL%9
time : new Date (  )  ,%NWL%loadTime : null ,%NWL%processingTime : null ,%NWL%requests :  [  ]  ,%NWL%stripped :  [  ]  ,%NWL%errors :  [  ]  ,%NWL%cssLength : 0%NWL%}  ; %NWL%var fs = require (  " fs "  )  ; %NWL%var webpage = require (  " webpage "  )  ; %NWL%var system = require (  " system "  )  ; %NWL%8
}  ,%NWL%" regexp "  :  {%NWL%" is typeOf regexp matcher "  : function (  )  {%NWL%var regexp = sinon . match . regexp ; %NWL%assert ( sinon . match . isMatcher ( regexp )  )  ; %NWL%assert . equals ( regexp . toString (  )  ,  " typeOf ( \ " regexp\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" date "  :  {%NWL%" is typeOf regexp matcher "  : function (  )  {%NWL%var date = sinon . match . date ; %NWL%3
}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%exports . shouldCorrectlyConnectToSSLBasedReplicaset =  {%NWL%metadata :  { requires :  { topology :  ' ssl '  }  }  ,%NWL%test : function ( configuration , test )  {%NWL%var ReplSetManager = require (  ' mongodb - tools '  )  . ReplSetManager%NWL%, Db = configuration . require . Db%NWL%, Server = configuration . require . Server%NWL%9
}  ,%NWL%scaleX : def1 ,%NWL%scaleY : def1 ,%NWL%rotate : def0deg ,%NWL%skewX : def0deg ,%NWL%skewY : def0deg%NWL%}%NWL%Transform2d = prime (  {%NWL%constructor : function ( transform )  {%NWL%var names = this . names =  [  ]%NWL%var values = this . values =  [  ]%NWL%9
curve . setAnchorPointZero ( x , y )  ; %NWL%curve . setControlPointZero ( x , y )  ; %NWL%path . addEdge ( curve )  ; %NWL%this . prevCurve = curve ; %NWL%this . onDrawing = true ;%NWL%}  ; %NWL%self . prototype . onMouseMove = function ( e )  {%NWL%if ( !this . onDrawing ) return ; %NWL%var position = an . u . getMousePositionInCanvas ( e )  ; %NWL%var x = position . x ; %NWL%var y = position . y ; %NWL%9
next_1 . call ( this , 1 )  ;%NWL%}  ; %NWL%var next = function ( inNumSamples )  {%NWL%var out  = this . outputs [ 0 ]  ; %NWL%var inIn  = this . inputs [ 0 ]  ; %NWL%var next_srclo = this . inputs [ 1 ]  [ 0 ]  ; %NWL%var next_srchi = this . inputs [ 2 ]  [ 0 ]  ; %NWL%var next_dstlo = this . inputs [ 3 ]  [ 0 ] || 0 . 001 ; %NWL%var next_dsthi = this . inputs [ 4 ]  [ 0 ] || 0 . 001 ; %NWL%var srclo = this . _srclo ; %NWL%var srchi = this . _srchi ; %NWL%9
Session . set (  ' playing '  , false )  ; %NWL%Session . set (  ' main_menu '  , true )  ; %NWL%Session . set (  ' weapon '  , GameLogic . X )  ; %NWL%$ (  '  . gameboard i '  )  . detach (  )  ;%NWL%}%NWL%}%NWL%var checkGameOver = function ( status )  {%NWL%if ( status )  {%NWL%var user = Session . get (  ' user '  )  ; %NWL%var enemy = Session . get (  ' enemy '  )  ; %NWL%var room = Session . get (  ' room '  )  ; %NWL%8
var Node = require (  ' basis . ui '  )  . Node ; %NWL%var templates = require (  ' basis . template '  )  . define ( namespace ,  {%NWL%Popup : resource (  '  .  / templates / popup / Popup . tmpl '  )  ,%NWL%Balloon : resource (  '  .  / templates / popup / Balloon . tmpl '  )  ,%NWL%popupManager : resource (  '  .  / templates / popup / popupManager . tmpl '  )%NWL%}  )  ; %NWL%var LEFT =  ' LEFT '  ; %NWL%var RIGHT =  ' RIGHT '  ; %NWL%var TOP =  ' TOP '  ; %NWL%var BOTTOM =  ' BOTTOM '  ; %NWL%var CENTER =  ' CENTER '  ; %NWL%6
}  ;%NWL%}%NWL%function getModernOffsets ( node )  {%NWL%var selection = window . getSelection (  )  ; %NWL%if ( selection . rangeCount =  =  = 0 )  {%NWL%return null ;%NWL%}%NWL%var anchorNode = selection . anchorNode ; %NWL%var anchorOffset = selection . anchorOffset ; %NWL%var focusNode = selection . focusNode ; %NWL%var focusOffset = selection . focusOffset ; %NWL%7
}  )  ; %NWL%test (  " unidirectional attach - n -  > 1 "  , function (  )  {%NWL%if ( testFns . DEBUG_MONGO )  {%NWL%ok ( true ,  " NA for Mongo - OrderDetail "  )  ; %NWL%return ;%NWL%}%NWL%var em = newEm (  )  ; %NWL%var orderDetailType = em . metadataStore . getEntityType (  " OrderDetail "  )  ; %NWL%var orderDetail = orderDetailType . createEntity (  )  ; %NWL%var productType = em . metadataStore . getEntityType (  " Product "  )  ; %NWL%var product = productType . createEntity (  )  ; %NWL%8
' use strict '  ; %NWL%var config = require (  '  .  / config '  )  ; %NWL%module . exports = function ( app )  {%NWL%var apiPrefix = config . apiPrefix ; %NWL%var blocks = require (  '  .  .  / app / controllers / blocks '  )  ; %NWL%app . get ( apiPrefix +  '  / blocks '  , blocks . list )  ; %NWL%app . get ( apiPrefix +  '  / block /  : blockHash '  , blocks . show )  ; %NWL%app . param (  ' blockHash '  , blocks . block )  ; %NWL%app . get ( apiPrefix +  '  / block - index /  : height '  , blocks . blockindex )  ; %NWL%app . param (  ' height '  , blocks . blockindex )  ; %NWL%var transactions = require (  '  .  .  / app / controllers / transactions '  )  ; %NWL%4
}%NWL%}%NWL%cb ( doc )  ;%NWL%}%NWL%scope . forDocumentTree = forDocumentTree ; %NWL%scope . forSubtree = forSubtree ;%NWL%}  )  ; %NWL%CustomElements . addModule ( function ( scope )  {%NWL%var flags = scope . flags ; %NWL%var forSubtree = scope . forSubtree ; %NWL%var forDocumentTree = scope . forDocumentTree ; %NWL%8
. append ( it )  ;%NWL%}  ,%NWL%before : function ( fn )  {%NWL%var before = $ (  '  < li class =  " before "  >  '  )%NWL%. data (  ' screwunit . run '  , fn )  ; %NWL%this . context [ this . context . length - 1 ]%NWL%. children (  '  . befores '  )%NWL%. append ( before )  ;%NWL%}  ,%NWL%after : function ( fn )  {%NWL%var after = $ (  '  < li class =  " after "  >  '  )%NWL%3
new Asset . images ( images ,  {%NWL%onProgress : function ( i )  {%NWL%immagine = this ;%NWL%}  ,%NWL%onComplete : function (  )  {%NWL%try {%NWL%$ (  ' simple - modal '  )  . removeClass (  " loading "  )  ; %NWL%var content = $ (  ' simple - modal '  )  . getElement (  "  . simple - modal - body "  )  ; %NWL%var padding = content . getStyle (  " padding "  )  . split (  "  "  )  ; %NWL%var width  = immagine . get (  " width "  )  . toInt (  )  ; %NWL%var height  = immagine . get (  " height "  )  . toInt (  )  ; %NWL%9
var oldWidth = field . style . width ; %NWL%var oldHeight = field . style . height ; %NWL%goog . style . setStyle ( field ,  ' visibility '  ,  ' hidden '  )  ; %NWL%var startDiv = dh . createDom ( goog . dom . TagName . DIV ,%NWL%{  ' style '  :  ' height : 0 ; clear : both '  ,  ' innerHTML '  :  ' &nbsp ;  '  }  )  ; %NWL%var endDiv = startDiv . cloneNode ( true )  ; %NWL%field . insertBefore ( startDiv , field . firstChild )  ; %NWL%goog . dom . appendChild ( field , endDiv )  ; %NWL%var contentBox = goog . style . getContentBoxSize ( field )  ; %NWL%var width = contentBox . width ; %NWL%var height = contentBox . height ; %NWL%9
var DynaNestedModel = editors [  ' DynaNestedModel '  ]  = editors . Text . extend (  {%NWL%initialize : function ( options )  {%NWL%editors . Text . prototype . initialize . call ( this , options )  ;%NWL%}  ,%NWL%setValue : function ( value )  {%NWL%this . value = value ; %NWL%this . render ( this . value )  ;%NWL%}  ,%NWL%render : function ( renderer )  {%NWL%var form = this . form ; %NWL%var key = this . key ; %NWL%9
angular%NWL%. module (  ' draganddrop '  ,  [  ]  )%NWL%. directive (  ' draggable '  , draggableDirective )%NWL%. directive (  ' drop '  ,  [  ' $parse '  , dropDirective ]  )  ; %NWL%function draggableDirective (  )  {%NWL%return {%NWL%restrict :  ' A '  ,%NWL%link : function ( scope , element , attrs )  {%NWL%var domElement = element [ 0 ]  ; %NWL%var effectAllowed = attrs . effectAllowed ; %NWL%var draggableData = attrs . draggableData ; %NWL%9
var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var assign = require (  ' Object . assign '  )  ; %NWL%var escapeTextContentForBrowser = require (  ' escapeTextContentForBrowser '  )  ; %NWL%var invariant = require (  ' invariant '  )  ; %NWL%var isEventSupported = require (  ' isEventSupported '  )  ; %NWL%var keyOf = require (  ' keyOf '  )  ; %NWL%var warning = require (  ' warning '  )  ; %NWL%var deleteListener = ReactBrowserEventEmitter . deleteListener ; %NWL%var listenTo = ReactBrowserEventEmitter . listenTo ; %NWL%var registrationNameModules = ReactBrowserEventEmitter . registrationNameModules ; %NWL%8
case 46 :  /  / delete%NWL%_setSelected ( self , list )  ; %NWL%break ; %NWL%default : %NWL%return ;%NWL%}%NWL%}%NWL%function _selectValue ( self )%NWL%{%NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
}%NWL%}%NWL%function render (  )  { aRes . render (  ' pages / scriptIssueListPage '  , options )  ;  }%NWL%function asyncComplete (  )  { preRender (  )  ; render (  )  ;  }%NWL%async . parallel ( tasks , asyncComplete )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . view = function ( aReq , aRes , aNext )  {%NWL%var authedUser = aReq . session . user ; %NWL%var type = aReq . params . type ; %NWL%var username = aReq . params . username ; %NWL%9
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . window_handles ( function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / window_handles '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testCloseWindow : function ( test )  {%NWL%var client = this . client ; %NWL%0
var account_db_facade = rewire (  '  .  .  / account_db_facade '  )  ; %NWL%account_db_facade . __set__ (  ' ACCOUNT_COLLECTION '  , TEST_ACCOUNT_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' USAGE_COLLECTION '  , TEST_USAGE_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' DB_TIMEOUT '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' env_config . loadConfig '  , replacementLoadConfig )  ; %NWL%account_db_facade . __set__ (  ' mongodb . MongoClient '  , mock_mongo_client )  ; %NWL%var createAccountDBPool = account_db_facade . __get__ (  ' createAccountDBPool '  )  ; %NWL%var createLoggingDBPool = account_db_facade . __get__ (  ' createLoggingDBPool '  )  ; %NWL%var accountDBPool = account_db_facade . __get__ (  ' accountDBPool '  )  ; %NWL%8
, util = require (  ' util '  )%NWL%, stream = require (  ' stream '  )%NWL%, qs = require (  ' querystring '  )%NWL%, mimetypes = require (  '  .  / mimetypes '  )%NWL%, oauth = require (  '  .  / oauth '  )%NWL%, uuid = require (  '  .  / uuid '  )%NWL%, ForeverAgent = require (  '  .  / forever '  )%NWL%, Cookie = require (  '  .  / vendor / cookie '  )%NWL%, CookieJar = require (  '  .  / vendor / cookie / jar '  )%NWL%, cookieJar = new CookieJar%NWL%, tunnel = require (  '  .  / tunnel '  )%NWL%3
var iota5 = this . _iota5 ; %NWL%var iota6 = this . _iota6 ; %NWL%var iota7 = this . _iota7 ; %NWL%var iota8 = this . _iota8 ; %NWL%var iota9 = this . _iota9 ; %NWL%var iota10 = this . _iota10 ; %NWL%var iota11 = this . _iota11 ; %NWL%var R0_1 = this . _R0_1 ; %NWL%var R1_1 = this . _R1_1 ; %NWL%var R2_1 = this . _R2_1 ; %NWL%var R3_1 = this . _R3_1 ; %NWL%0
var count = c . length >  > 3 ; %NWL%var pos = 0 ; %NWL%var o =  {  }  ; %NWL%var isCBC =  ( mode =  = dojox . crypto . cipherModes . CBC )  ; %NWL%var vector =  { left : iv . left||null , right : iv . right||null }  ; %NWL%for ( var i = 0 ; i < count ; i +  +  )  {%NWL%o . left = c [ pos ]  * POW24|c [ pos + 1 ]  * POW16|c [ pos + 2 ]  * POW8|c [ pos + 3 ]  ; %NWL%o . right = c [ pos + 4 ]  * POW24|c [ pos + 5 ]  * POW16|c [ pos + 6 ]  * POW8|c [ pos + 7 ]  ; %NWL%if ( isCBC )  {%NWL%var left = o . left ; %NWL%var right = o . right ; %NWL%9
face = faceuv [ 0 ]  ; %NWL%uv = faceuv [ 1 ]  ; %NWL%st = UVToST ( uv )  ; %NWL%ij = STToIJ ( st , level )  ; %NWL%return S2 . S2Cell . FromFaceIJ ( face , ij , level )  ;%NWL%}%NWL%}  ; %NWL%var face = this . face ; %NWL%var i = this . ij [ 0 ]  ; %NWL%var j = this . ij [ 1 ]  ; %NWL%var level = this . level ; %NWL%7
this . $main = this . $ (  '  . todo - app - main '  )  ; %NWL%Todos . on (  ' add '  , this . addOne , this )  ; %NWL%Todos . on (  ' reset '  , this . addAll , this )  ; %NWL%Todos . on (  ' change : completed '  , this . filterOne , this )  ; %NWL%Todos . on (  " filter "  , this . filterAll , this )  ; %NWL%Todos . on (  ' all '  , this . render , this )  ; %NWL%Todos . fetch (  )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var completed = Todos . completed (  )  . length ; %NWL%var remaining = Todos . remaining (  )  . length ; %NWL%9
$ . each ( $ . spin , function ( k , v )  {%NWL%opt [ k ]  =  ( typeof o [ k ] ! =  ' undefined ' ? o [ k ]  : v )  ;%NWL%}  )  ; %NWL%var txt = $ ( this )  ; %NWL%var spinBtnImage = opt . imageBasePath + opt . spinBtnImage ; %NWL%var btnSpin = new Image (  )  ; %NWL%btnSpin . src = spinBtnImage ; %NWL%var spinUpImage = opt . imageBasePath + opt . spinUpImage ; %NWL%var btnSpinUp = new Image (  )  ; %NWL%btnSpinUp . src = spinUpImage ; %NWL%var spinDownImage = opt . imageBasePath + opt . spinDownImage ; %NWL%4
}  )  ; %NWL%define (  ' ace / mode / sh_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
}  )  ; %NWL%it (  ' reads custom local attributes from parents '  , function (  )  {%NWL%document . body . innerHTML =%NWL%'  < div class =  " instanthangouts "  '  +%NWL%' hangout_type =  " first_hangout_type "  '  +%NWL%' publisher_id =  " first_publisher_id "  '  +%NWL%' render =  " hangout "  '  +%NWL%' room_id =  " first_room_id "  '  +%NWL%' topic =  " first_topic "  '  +%NWL%' widget_size =  " first_widget_size "  '  +%NWL%' width =  " first_width "  '  +%NWL%4
inputs =  { name :  '  '  }  ;%NWL%}%NWL%this . dialog . show ( inputs )  ; %NWL%this . dialog . getElementById (  " name "  )  . focus (  )  ;%NWL%}  ; %NWL%InsertAnchor . prototype . apply = function (  )%NWL%{%NWL%var editor = this . editor ; %NWL%var param = this . dialog . hide (  )  ; %NWL%var anchor = param [  ' name '  ]  ; %NWL%var a = this . a ; %NWL%7
var EventPropagators = require (  ' EventPropagators '  )  ; %NWL%var React = require (  ' React '  )  ; %NWL%var ReactElement = require (  ' ReactElement '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactCompositeComponent = require (  ' ReactCompositeComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactUpdates = require (  ' ReactUpdates '  )  ; %NWL%var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%0
this . m02_ +  = tx . m02_ * m0 + tx . m12_ * m1 ; %NWL%m0 = this . m10_ ; %NWL%m1 = this . m11_ ; %NWL%this . m10_ = tx . m00_ * m0 + tx . m10_ * m1 ; %NWL%this . m11_ = tx . m01_ * m0 + tx . m11_ * m1 ; %NWL%this . m12_ +  = tx . m02_ * m0 + tx . m12_ * m1 ; %NWL%return this ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . preConcatenate = function ( tx )  {%NWL%var m0 = this . m00_ ; %NWL%var m1 = this . m10_ ; %NWL%9
this . and = function ( anotherMatcher )  {%NWL%var all = JsHamcrest . Matchers . allOf ( this , anotherMatcher )  ; %NWL%return new JsHamcrest . CombinableMatcher (  {%NWL%matches : all . matches ,%NWL%describeTo : function ( description )  {%NWL%description . appendDescriptionOf ( all )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%this . or = function ( anotherMatcher )  {%NWL%var any = JsHamcrest . Matchers . anyOf ( this , anotherMatcher )  ; %NWL%1
clearInterval ( timers [ room ]  )  ;%NWL%}%NWL%emitToRoom ( room ,  ' leave '  ,  {%NWL%user : user%NWL%}  )  ; %NWL%enemies . unattack ( users . get ( user )  , room )  ; %NWL%socket . leave ( room )  ;%NWL%}  ; %NWL%handlers . move = function ( data )  {%NWL%var user = data . user ; %NWL%var room = data . room ; %NWL%9
}  )  ;%NWL%}%NWL%evt . emit (  " got_object_explorer "  , tmp )  ;%NWL%}  ,%NWL%html_loader : function ( options , evt )  {%NWL%var data = options . data ; %NWL%var tmp =  {%NWL%' children '  :  [  ]  ,%NWL%' err_code '  : null%NWL%}  ; %NWL%var filepath = options . filepath ; %NWL%5
}  ,%NWL%renderCount : function ( context , count )  {%NWL%var content = this . get (  ' content '  )  ; %NWL%var finishedTasksCount = content . get (  ' finishedTasksCount '  )  ; %NWL%var leftTasksCount = content . get (  ' leftTasksCount '  )  ; %NWL%if ( finishedTasksCount > 0 )  {%NWL%var percentComplete = Math . round ( 100 * finishedTasksCount /  ( finishedTasksCount + leftTasksCount )  )  ; %NWL%context . begin (  ' div '  )  . addClass (  ' progress - percent '  )  . text ( percentComplete +  ' % '  )  . end (  )%NWL%. begin (  ' div '  )  . addClass (  ' progress - bar '  )  . begin (  ' div '  )  . addClass (  ' progress - bar - inner '  )%NWL%. addStyle (  {  ' width '  : percentComplete +  ' px '  }  )  . end (  )  . end (  )  ; %NWL%var finishedEffort = content . get (  ' finishedEffort '  )  ; %NWL%3
score = 0 ;%NWL%}%NWL%this . setData (  {%NWL%score : score ,%NWL%total : total%NWL%}  )  ; %NWL%this . save (  )  ;%NWL%}%NWL%scoreBoard . save = function (  )  {%NWL%var score = this . get (  ' score '  )  ; %NWL%var total = this . get (  ' total '  )  ; %NWL%9
+  '    /  /  / _ /  /  /   /  / _ / _ \\ / _ /  \\ / _ / \\__ / \\ \n '%NWL%+  '   /  /  / __\\ /  /   /  / ____ / \\  _ / \\ / __\\ \\ \n '%NWL%+  '   /  /  / _____ /   /  / \\____\\ /    / _ / _ / \\ \\ \\ \n '%NWL%+  '   /  /  /     /  /  / ______   /  /  /  \\ \\ \\ \n '%NWL%+  '   /  /  /     /  /  / _______\\  /  /  /   / _ /  /  \n '%NWL%+  '  \\ / _ /    \\ / __________ /  \\ / _ /  \\_\\ /  \n '%NWL%)  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%7
var demo = demos [ j ]  ; %NWL%populateDemo ( demo )  ;%NWL%}%NWL%}%NWL%if ( section . demo )  {%NWL%populateDemo ( section . demo )  ;%NWL%}%NWL%if ( section . extensions )  {%NWL%var exts = section . extensions ; %NWL%for ( var j = 0 ; j < exts . length ; j +  +  )  {%NWL%var ext = exts [ j ]  ; %NWL%0
handlers . disconnect = function (  )  {%NWL%users . logout (  {%NWL%user : socket . user%NWL%}  )  ; %NWL%emitToAll (  ' leave '  ,  {%NWL%user : socket . user%NWL%}  )  ;%NWL%}  ; %NWL%handlers . gameOver = function ( data )  {%NWL%var room = data . room ; %NWL%var user = data . user ; %NWL%9
keyboardHeight = inputWindowManager . getHeight (  )  ;%NWL%}%NWL%var form = viewId . getElementsByTagName (  ' form '  )  ; %NWL%var height =  ( window . innerHeight - keyboardHeight - StatusBar . height )  ; %NWL%height -  = softwareButtonManager . height ; %NWL%viewId . style . height = height +  ' px '  ; %NWL%if ( form && viewId . clientHeight > 0 )  {%NWL%var input = viewId . getElementsByTagName (  ' input '  )  [ 0 ]  ; %NWL%var header = viewId . getElementsByTagName (  ' gaia - header '  )  [ 0 ]  ; %NWL%var headerSubtitle = viewId . getElementsByTagName (  ' gaia - subheader '  )  [ 0 ]  ; %NWL%var menu = viewId . getElementsByTagName (  ' menu '  )  [ 0 ]  ; %NWL%7
this . selected = false ; %NWL%this . button . deselect (  )  ;%NWL%} else {%NWL%this . selected = true ; %NWL%this . button . select (  )  ;%NWL%}%NWL%this . mouse . setEventMode ( this . selected ? " pan "  :  "  "  )  ;%NWL%}  ,%NWL%onPanDrag : function ( obj )  {%NWL%var x = obj . x - obj . last . x ; %NWL%var y = obj . y - obj . last . y ; %NWL%9
forEach ( cells , function ( cell , i )  {%NWL%if ( !cell . error )  {%NWL%sum +  = cell . speed ; %NWL%length +  +  ; %NWL%speeds [ i ]  = cell . speed ;%NWL%}%NWL%else speeds [ i ]  = 99999999999999999999999 ;%NWL%}  )  ; %NWL%var avg = sum / length ; %NWL%var min = Math . min . apply ( this , speeds )  ; %NWL%var max = Math . max . apply ( this , speeds )  ; %NWL%9
var EE = require (  ' events '  )  . EventEmitter%NWL%var path = require (  ' path '  )%NWL%var assert = require (  ' assert '  )%NWL%var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%var isAbsolute = common . isAbsolute%NWL%var setopts = common . setopts%NWL%var ownProp = common . ownProp%NWL%var inflight = require (  ' inflight '  )%NWL%1
ctx . fillStyle =  ' #FF0000 '  ; %NWL%ctx . fillRect ( simpleMotionDetector . averageX . getValue (  )  - cubeWidth * 0 . 5 , simpleMotionDetector . averageY . getValue (  )  , cubeWidth * 1 . 5 , cubeHeight * 0 . 5 )  ; %NWL%ctx . fillRect ( simpleMotionDetector . averageX . getValue (  )  , simpleMotionDetector . averageY . getValue (  )  - cubeHeight * 0 . 5 , cubeWidth * 0 . 5 , cubeHeight * 1 . 5 )  ;%NWL%}%NWL%SimpleMotionDetector . prototype . updateCameraPosition = function (  )  {%NWL%var distanceFromMiddleX = this . averageX . getValue (  )  * PIXELS_HORIZONTAL / WIDTH - PIXELS_HORIZONTAL / 2 ; %NWL%var alpha = this . amplificationAlpha * Math . asin ( distanceFromMiddleX / PIXELS_HORIZONTAL )  + Math . PI / 180 * this . offsetAlpha ; %NWL%var distanceFromMiddleY =  ( PIXELS_VERTICAL / 2 - this . averageY . getValue (  )  / HEIGHT * PIXELS_VERTICAL )  ; %NWL%var gamma = this . amplificationGamma * Math . asin ( distanceFromMiddleY / PIXELS_VERTICAL )  + Math . PI / 180 * this . offsetGamma ; %NWL%var x = camera . position . x ; %NWL%var z = camera . position . z ; %NWL%9
if ( rootNode . children . length =  =  = 0 )  { return ;  }%NWL%let tree = this . get (  ' tree '  )  ; %NWL%let nodes = tree . nodes ( rootNode )  . slice ( 1 )  ;  /  / Skip root node%NWL%let labelsWidth = this . get (  ' labelsWidth '  )  ; %NWL%let leftPadding = this . get (  ' contentMargin . left '  ) || 0 ; %NWL%let svg = this . get (  ' svg '  )  ; %NWL%let rows = svg . select (  '  . rows '  )  ; %NWL%let labels = svg . select (  '  . labels '  )  ; %NWL%let collapsable = this . get (  ' collapsable '  )  ; %NWL%let scrubbable = this . get (  ' scrubbable '  )  ; %NWL%let brushable = this . get (  ' brushable '  )  ; %NWL%1
function LocalTableRegister ( name )  {%NWL%util . assert ( this && ( this instanceof LocalTableRegister )%NWL%,  " LocalTableRegister constructor :  : error - not called properly "%NWL%)  ; %NWL%SegRegister . call ( this , name , 6 )  ;%NWL%}%NWL%util . inherit ( LocalTableRegister , SegRegister )  ;  /  / Inheritance%NWL%util . extend ( LocalTableRegister . prototype ,  {%NWL%reset : function ( raw )  {%NWL%var selector = this . selector ; %NWL%var cache = this . cache ; %NWL%9
this . instances = null ; %NWL%this . dispatcher = null ;%NWL%}%NWL%}  ,%NWL%resolve :  {%NWL%value : function resolve ( obj )  {%NWL%if ( !obj . constructor )  {%NWL%throw new Error (  " Cannot resolve object "  )  ;%NWL%}%NWL%var id = obj . constructor . id ; %NWL%var type = obj . constructor . type ; %NWL%9
const ASS_CONTRACTID =%NWL%" @mozilla . org / appshell / appShellService ; 1 "  ; %NWL%const RDFS_CONTRACTID =%NWL%" @mozilla . org / rdf / rdf - service ; 1 "  ; %NWL%const NS_ERROR_MODULE_NETWORK_BASE = 0x804b0000 ; %NWL%const NS_ERROR_NO_CONTENT = NS_ERROR_MODULE_NETWORK_BASE + 17 ; %NWL%const nsIWindowMediator  = Components . interfaces . nsIWindowMediator ; %NWL%const nsICmdLineHandler  = Components . interfaces . nsICmdLineHandler ; %NWL%const nsICategoryManager = Components . interfaces . nsICategoryManager ; %NWL%const nsIURIContentListener = Components . interfaces . nsIURIContentListener ; %NWL%const nsIURILoader   = Components . interfaces . nsIURILoader ; %NWL%6
ctx . moveTo ( 0 , 0 )  ; %NWL%ctx . lineTo ( w * 0 . 5 , l )  ; %NWL%ctx . lineTo ( w , 0 )  ; %NWL%ctx . fillStyle = color ; %NWL%ctx . fill (  )  ; %NWL%return new PIXI . Texture . fromCanvas ( canv )  ;%NWL%}%NWL%function renderSprite ( i )  {%NWL%var sprite = sprites [ i ]  ; %NWL%var x = xFunc ( i )  ; %NWL%var y = yFunc ( i )  ; %NWL%9
var conditions = Utils . sanitizeConditions ( this , args )  ; %NWL%self . addInternal (  ' having '  , conditions )  ; %NWL%return self ;%NWL%}%NWL%}  ; %NWL%exports . definition =  {%NWL%mixinCallback : function (  )  {%NWL%var self = this ; %NWL%this . beforeFind ( function ( query , next )  {%NWL%var group = this . getInternal (  ' group '  )  ; %NWL%var select = this . getInternal (  ' select '  )  ; %NWL%9
alias :  ' c '%NWL%, default :  ' utf - 8 '%NWL%, describe :  ' file encoding type '%NWL%}%NWL%}  ; %NWL%exports . run = function ( options )  {%NWL%var source = options . src ; %NWL%var dest = options . dest ; %NWL%var igts = options . igts ; %NWL%var sizeLimit = options . limit ; %NWL%var output = options . output ; %NWL%7
if ( !OB . MainView . TabSet . removeTabs ( OB . MainView . TabSet . tabs )  )  {%NWL%vmgr . inStateHandling = false ; %NWL%return ;%NWL%}%NWL%vmgr . views . cache =  [  ]  ; %NWL%requestViewsRestoreState = function ( rpcResponse )  {%NWL%var clientContext = rpcResponse . clientContext ; %NWL%var currentIndex = clientContext . currentIndex ; %NWL%var data = clientContext . data ; %NWL%var newState = clientContext . newState ; %NWL%var tabsLength = clientContext . tabsLength ; %NWL%7
var w = canvas . width , h = canvas . height ; %NWL%if ( this . _w! =  = w || this . _h! =  = h )  {%NWL%this . _syncViewport ( w , h )  ; %NWL%this . _w = w ; %NWL%this . _h = h ;%NWL%}%NWL%}  ,%NWL%_syncViewport : function ( w , h )  {%NWL%var gl = this . gl ; %NWL%var shader = this . shader ; %NWL%var buffer = this . buffer ; %NWL%8
this . angle = angle ; %NWL%var sin = Math . sin ( angle )  ,%NWL%cos = Math . cos ( angle )  ; %NWL%this . rotationMatrix =  [ cos ,  - sin , sin , cos ]  ; %NWL%this . yStretch = 1 / Math . cos ( pitch / 180 * Math . PI )  ; %NWL%this . yStretch = Math . pow ( this . yStretch , 1 . 3 )  ;%NWL%}  ; %NWL%CollisionTile . prototype . placeFeature = function ( feature )  {%NWL%var minPlacementScale = this . minScale ; %NWL%var rotationMatrix = this . rotationMatrix ; %NWL%var yStretch = this . yStretch ; %NWL%9
}%NWL%}  ; %NWL%Thrift . inherits ( EDAMSystemException , Thrift . TException )  ; %NWL%EDAMSystemException . prototype . name =  ' EDAMSystemException '  ; %NWL%EDAMSystemException . prototype . read = function ( input )  {%NWL%input . readStructBegin (  )  ; %NWL%while ( true )%NWL%{%NWL%var ret = input . readFieldBegin (  )  ; %NWL%var fname = ret . fname ; %NWL%var ftype = ret . ftype ; %NWL%9
var NodeGit = require (  "  .  .  /  "  )  ; %NWL%var Blob = NodeGit . Blob ; %NWL%var Checkout = NodeGit . Checkout ; %NWL%var Commit = NodeGit . Commit ; %NWL%var normalizeOptions = NodeGit . Utils . normalizeOptions ; %NWL%var Reference = NodeGit . Reference ; %NWL%var Remote = NodeGit . Remote ; %NWL%var Repository = NodeGit . Repository ; %NWL%var Revwalk = NodeGit . Revwalk ; %NWL%var Status = NodeGit . Status ; %NWL%var StatusFile = NodeGit . StatusFile ; %NWL%1
var DefinePlugin = require (  "  .  / DefinePlugin "  )  ; %NWL%var MovedToPluginWarningPlugin = require (  "  .  / MovedToPluginWarningPlugin "  )  ; %NWL%var TemplatedPathPlugin = require (  "  .  / TemplatedPathPlugin "  )  ; %NWL%var WarnCaseSensitiveModulesPlugin = require (  "  .  / WarnCaseSensitiveModulesPlugin "  )  ; %NWL%var LoaderPlugin = require (  "  .  / dependencies / LoaderPlugin "  )  ; %NWL%var CommonJsPlugin = require (  "  .  / dependencies / CommonJsPlugin "  )  ; %NWL%var AMDPlugin = require (  "  .  / dependencies / AMDPlugin "  )  ; %NWL%var LabeledModulesPlugin = require (  "  .  / dependencies / LabeledModulesPlugin "  )  ; %NWL%var RequireContextPlugin = require (  "  .  / dependencies / RequireContextPlugin "  )  ; %NWL%var RequireEnsurePlugin = require (  "  .  / dependencies / RequireEnsurePlugin "  )  ; %NWL%var RequireIncludePlugin = require (  "  .  / dependencies / RequireIncludePlugin "  )  ; %NWL%4
}  )  ; %NWL%it (  ' multiedit3 '  , function (  )  {%NWL%var rand = function ( max , min )  {%NWL%min =  ( typeof min ! =  =  ' undefined '  ) ? min : 0 ; %NWL%max = max || Math . pow ( 2 , 26 )  ; %NWL%return parseInt ( Math . random (  )  *  ( max - min )  , 10 )  + min ;%NWL%}  ; %NWL%var MAX = 500 ; %NWL%var MIN = 100 ; %NWL%var weak = c . Strength . weak ; %NWL%var medium = c . Strength . medium ; %NWL%9
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
const { add , remove , iterator }  = require (  "  .  .  / lang / weak - set "  )  ; %NWL%let getTargetWindow = method (  " getTargetWindow "  )  ; %NWL%getTargetWindow . define ( function ( target )  {%NWL%if ( target instanceof Ci . nsIDOMWindow )%NWL%return target ; %NWL%if ( target instanceof Ci . nsIDOMDocument )%NWL%return target . defaultView || null ; %NWL%return null ;%NWL%}  )  ; %NWL%exports . getTargetWindow = getTargetWindow ; %NWL%let attachTo = method (  " attachTo "  )  ; %NWL%1
return null ; %NWL%if ( shape . nodeName ! =  " g " && shape . nodeName ! =  " image "  )  {%NWL%var fill =  Graphic . VMLRenderer . createNode (  " v : fill "  )  ; %NWL%fill . on =  " false "  ; %NWL%node . appendChild ( fill )  ; %NWL%node . fill = fill ; %NWL%var stroke =  Graphic . VMLRenderer . createNode (  " v : stroke "  )  ; %NWL%stroke . on =  " false "  ; %NWL%node . appendChild ( stroke )  ; %NWL%node . stroke = stroke ; %NWL%var skew =  Graphic . VMLRenderer . createNode (  " v : skew "  )  ; %NWL%2
var show = $typeahead . show ; %NWL%$typeahead . show = function (  )  {%NWL%show (  )  ; %NWL%setTimeout ( function (  )  {%NWL%$typeahead . $element . on (  ' mousedown '  , $typeahead . $onMouseDown )  ; %NWL%if ( options . keyboard )  {%NWL%element . on (  ' keydown '  , $typeahead . $onKeyDown )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%var hide = $typeahead . hide ; %NWL%0
id : 103 ,%NWL%from_node : 97 , from :  ' out '  ,%NWL%to_node : 34 , to :  ' in4 '%NWL%}  ; %NWL%var connection_103 = nodegraph . createConnectionFromObject ( connection_103_data )  ; %NWL%var connection_120_data =  {%NWL%id : 120 ,%NWL%from_node : 104 , from :  ' out '  ,%NWL%to_node : 55 , to :  ' material '%NWL%}  ; %NWL%var connection_120 = nodegraph . createConnectionFromObject ( connection_120_data )  ; %NWL%4
elements [ 0 ]  = velements [ 0 ]  ; %NWL%elements [ 1 ]  = velements [ 1 ]  ; %NWL%elements [ 2 ]  = velements [ 2 ]  ; %NWL%return this ;%NWL%}  ,%NWL%add : function ( v )  {%NWL%var elements = this . elements ; %NWL%var velements = v . elements ; %NWL%elements [ 0 ]  +  = velements [ 0 ]  ; %NWL%elements [ 1 ]  +  = velements [ 1 ]  ; %NWL%elements [ 2 ]  +  = velements [ 2 ]  ; %NWL%8
}  ,%NWL%" object "  :  {%NWL%" is typeOf object matcher "  : function (  )  {%NWL%var object = sinon . match . object ; %NWL%assert ( sinon . match . isMatcher ( object )  )  ; %NWL%assert . equals ( object . toString (  )  ,  " typeOf ( \ " object\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" func "  :  {%NWL%" is typeOf function matcher "  : function (  )  {%NWL%var func = sinon . match . func ; %NWL%3
}  ; %NWL%__exports__ . createFrame = createFrame ; %NWL%return __exports__ ;%NWL%}  )  ( __module2__ , __module4__ )  ; %NWL%var __module5__ =  ( function ( __dependency1__ , __dependency2__ , __dependency3__ )  {%NWL%" use strict "  ; %NWL%var __exports__ =  {  }  ; %NWL%var Utils = __dependency1__ ; %NWL%var Exception = __dependency2__ ; %NWL%var COMPILER_REVISION = __dependency3__ . COMPILER_REVISION ; %NWL%var REVISION_CHANGES = __dependency3__ . REVISION_CHANGES ; %NWL%9
var propEventType = thin . ui . PropertyPane . Property . EventType ; %NWL%var proppane = thin . ui . getComponent (  ' proppane '  )  ; %NWL%var baseGroup = proppane . addGroup ( thin . t (  ' property_group_basis '  )  )  ; %NWL%var leftInputProperty = new thin . ui . PropertyPane . NumberInputProperty ( thin . t (  ' field_left_position '  )  )  ; %NWL%var leftInput = leftInputProperty . getValueControl (  )  ; %NWL%leftInput . getNumberValidator (  )  . setAllowDecimal ( true , 1 )  ; %NWL%leftInputProperty . addEventListener ( propEventType . CHANGE ,%NWL%this . setLeftForPropertyUpdate , false , this )  ; %NWL%proppane . addProperty ( leftInputProperty , baseGroup ,  ' left '  )  ; %NWL%var topInputProperty = new thin . ui . PropertyPane . NumberInputProperty ( thin . t (  ' field_top_position '  )  )  ; %NWL%var topInput = topInputProperty . getValueControl (  )  ; %NWL%4
html . appendChild ( script )  ; %NWL%var head   = doc . createElement (  " head "  )  ; %NWL%var head   = html . appendChild ( head )  ; %NWL%var meta   = doc . createElement (  " meta "  )  ; %NWL%meta . setAttribute (  " http - equiv "  ,  " Content - Type "  )  ; %NWL%meta . setAttribute (  " content "  ,  " text / html ; charset = UTF - 8 "  )  ; %NWL%head . appendChild ( meta )  ; %NWL%var title  = doc . createElement (  " title "  )%NWL%title . appendChild ( doc . createTextNode (  " hc_staff "  )  )  ; %NWL%var title  = head . appendChild ( title )  ; %NWL%var body   = doc . createElement (  " body "  )  ; %NWL%1
touchHandler : this . touchHandler%NWL%}  )  ; %NWL%this . map = map ; %NWL%this . _makeLayers (  )  ;%NWL%}  ,%NWL%_makeLayers : function (  )  {%NWL%var n = this . domNode ; %NWL%var layers = query (  "  >  . layer "  , n )  ; %NWL%array . forEach ( layers , function ( l )  {%NWL%var type = l . getAttribute (  " type "  )  ; %NWL%var name = l . getAttribute (  " name "  )  ; %NWL%9
h2 . appendChild ( document . createTextNode (  ' Preview '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%outputCanvas = document . createElement (  ' canvas '  )  ; %NWL%outputCanvas . appendChild ( document . createTextNode (  ' This application requires HTML5 support .  '  )  )  ; %NWL%outputCanvas . width = 0 ; %NWL%outputCanvas . height = 0 ; %NWL%div . appendChild ( outputCanvas )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%8
mapListenersAndEventsToStore ( this . __tuxxStoreMixinProps , false )  ;%NWL%}  ;%NWL%}%NWL%return storeConnections ;%NWL%}  ; %NWL%var mapListenersAndEventsToStore = function ( storeConfig , addOrRemoveListener )  {%NWL%addOrRemoveListener = addOrRemoveListener ? ' addChangeListener '  :  ' removeChangeListener '  ; %NWL%var store = storeConfig . store ; %NWL%var listener = storeConfig . listener ; %NWL%var listenerIsArray = Array . isArray ( listener )  ; %NWL%var event = storeConfig . event ; %NWL%8
var self = this ; %NWL%layers . eachLayer ( function ( layer )  {%NWL%self . dataLayer = layer . toGeoJSON (  )  ; %NWL%self . drawnItems . addLayer ( layer )  ;%NWL%}  )  ;%NWL%}  ,%NWL%submitForm : function ( e )  {%NWL%var message = null ; %NWL%var query =  {  }  ; %NWL%var start = $ (  ' #start - date - filter '  )  . val (  )  ; %NWL%var end = $ (  ' #end - date - filter '  )  . val (  )  ; %NWL%9
if ( cluster . isMaster )  {%NWL%for ( var i = 0 ; i < numCPUs ; i +  +  )  {%NWL%cluster . fork (  )  ;%NWL%}%NWL%cluster . on (  ' exit '  , function ( worker , code , signal )  {%NWL%console . log (  ' worker '  + worker . pid +  ' died '  )  ;%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%9
WebDeveloper . Overlay . Cookies . toggleCookies = function (  )%NWL%{%NWL%var menu = $ ( this )  ; %NWL%WebDeveloper . Overlay . toggleContentSetting (  " cookies "  , menu ,  " http :  /  *  "  )  ;%NWL%}  ; %NWL%WebDeveloper . Overlay . Cookies . validateAddDialog = function (  )%NWL%{%NWL%var expires  = $ (  " #add - cookie - expires "  )  ; %NWL%var host   = $ (  " #add - cookie - host "  )  ; %NWL%var hostValue = host . val (  )  . trim (  )  ; %NWL%var name   = $ (  " #add - cookie - name "  )  ; %NWL%7
var gulp = require (  ' gulp '  )  ; %NWL%var gulpPlugins = require (  ' gulp - load - plugins '  )  (  )  ; %NWL%var shell = require (  ' gulp - shell '  )  ; %NWL%var runSequence = require (  ' run - sequence '  )  ; %NWL%var madge = require (  ' madge '  )  ; %NWL%var merge = require (  ' merge '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var gulpTraceur = require (  '  .  / tools / transpiler / gulp - traceur '  )  ; %NWL%var clean = require (  '  .  / tools / build / clean '  )  ; %NWL%var transpile = require (  '  .  / tools / build / transpile '  )  ; %NWL%var html = require (  '  .  / tools / build / html '  )  ; %NWL%8
reposition : function ( coords )  {%NWL%coords = coords || ( this . target && this . target . offsetHeight )%NWL%? this . target . getCoordinates ( this . box . getOffsetParent (  )  )%NWL% :  { top : window . getScrollTop (  )  , left : 0 , width : 40 , height : 40 }  ; %NWL%this . box . setStyles ( coords )  ; %NWL%this . fireEvent (  ' reposition '  ,  [ coords , this . box , this . target ]  )  ;%NWL%}  ,%NWL%setOptions : function ( options )  {%NWL%if ( options )  {%NWL%if ( options . url ) options . url = Swiff . Uploader . qualifyPath ( options . url )  ; %NWL%if ( options . buttonImage ) options . buttonImage = Swiff . Uploader . qualifyPath ( options . buttonImage )  ; %NWL%9
this . _cfgRadius = config [  " radius "  ]  ;%NWL%}%NWL%}  ; %NWL%var defaultRadius = HeatmapConfig . defaultRadius ; %NWL%Store . prototype =  {%NWL%_organiseData : function ( dataPoint , forceRender )  {%NWL%var x = dataPoint [ this . _xField ]  ; %NWL%var y = dataPoint [ this . _yField ]  ; %NWL%var radi = this . _radi ; %NWL%var store = this . _data ; %NWL%var max = this . _max ; %NWL%8
; %NWL%var DOCUMENT_INSERT =  " DOCUMENT_INSERT "  ; %NWL%var DOCUMENT_DELETE =  " DOCUMENT_DELETE "  ; %NWL%var DOCUMENT_ELEMENT_INSERT =  " DOCUMENT_ELEMENT_INSERT "  ; %NWL%var DOCUMENT_ELEMENT_DELETE =  " DOCUMENT_ELEMENT_DELETE "  ; %NWL%var WAVELET_ADD_PARTICIPANT =  " WAVELET_ADD_PARTICIPANT "  ; %NWL%var WAVELET_REMOVE_PARTICIPANT =  " WAVELET_REMOVE_PARTICIPANT "  ; %NWL%var WAVELET_APPEND_BLIP =  " WAVELET_APPEND_BLIP "  ; %NWL%var BLIP_CREATE_CHILD =  " BLIP_CREATE_CHILD "  ; %NWL%var BLIP_DELETE =  " BLIP_DELETE "  ; %NWL%var DOCUMENT_ELEMENT_DELTA =  " DOCUMENT_ELEMENT_DELTA "  ; %NWL%1
worker . on (  " terminate "  , function (  )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%return worker ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / css_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var ReactReconciler = require (  ' ReactReconciler '  )  ; %NWL%var ReactUpdateQueue = require (  ' ReactUpdateQueue '  )  ; %NWL%var ReactUpdates = require (  ' ReactUpdates '  )  ; %NWL%var emptyObject = require (  ' emptyObject '  )  ; %NWL%var containsNode = require (  ' containsNode '  )  ; %NWL%var getReactRootElementInContainer = require (  ' getReactRootElementInContainer '  )  ; %NWL%var instantiateReactComponent = require (  ' instantiateReactComponent '  )  ; %NWL%var invariant = require (  ' invariant '  )  ; %NWL%var setInnerHTML = require (  ' setInnerHTML '  )  ; %NWL%var shouldUpdateReactComponent = require (  ' shouldUpdateReactComponent '  )  ; %NWL%var warning = require (  ' warning '  )  ; %NWL%0
}  )  ; %NWL%var StartsWith = declare (  " dojox . grid . enhanced . plugins . filter . StartsWith "  , exprs . _BiOpExpr ,  {%NWL%_name :  " startsWith "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var left_res = String ( left_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%var right_res = String ( right_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%return new exprs . BooleanExpr ( left_res . substring ( 0 , right_res . length )  =  = right_res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var EndsWith = declare (  " dojox . grid . enhanced . plugins . filter . EndsWith "  , exprs . _BiOpExpr ,  {%NWL%1
var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%var event = _dereq_ (  '  .  / event '  )  ; %NWL%var html = _dereq_ (  '  .  / html '  )  ; %NWL%var selector = _dereq_ (  '  .  / selector '  )  ; %NWL%var selector_extra = _dereq_ (  '  .  / selector_extra '  )  ; %NWL%if ( selector ! =  = undefined )  {%NWL%$ = selector . $ ; %NWL%$ . matches = selector . matches ; %NWL%api . find = selector . find ;%NWL%}%NWL%var mode = _dereq_ (  '  .  / mode '  )  ; %NWL%0
}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var libmysql = require (  ' mysql - libmysqlclient '  )  . createConnectionSync (  )  ; %NWL%var mysql2  = require (  '  .  .  /  .  .  '  )  ; %NWL%var mysql  = require (  ' mysql '  )  ; %NWL%var mariasql = require (  ' mariasql '  )  ; %NWL%var async  = require (  ' async '  )  ; %NWL%var Mapper  = require (  ' mapper '  )  ; %NWL%var jade  = require (  ' jade '  )  ; %NWL%var fs   = require (  ' fs '  )  ; %NWL%1
var a = $ (  '  < a /  >  '  )%NWL%. text ( opts . headerText ( i , heading , $h )  )%NWL%. attr (  ' href '  ,  ' # '  + anchorName )%NWL%. bind (  ' click '  , function ( e )  {%NWL%$ ( window )  . unbind (  ' scroll '  , highlightOnScroll )  ; %NWL%scrollTo ( e , function (  )  {%NWL%$ ( window )  . bind (  ' scroll '  , highlightOnScroll )  ;%NWL%}  )  ; %NWL%el . trigger (  ' selected '  , $ ( this )  . attr (  ' href '  )  )  ;%NWL%}  )  ; %NWL%var li = $ (  '  < li /  >  '  )%NWL%0
ctx . drawImage ( img , frameSize , frameSize , width , height )  ; %NWL%ctx . strokeRect ( frameSize - 8 , frameSize -  8 , width + 16 , height + 16 )  ; %NWL%frameSize = frameSize ; %NWL%imgWidth = width ; %NWL%imgHeight = height ; %NWL%document . getElementById (  " title "  )  . value =  "  "  ; %NWL%document . getElementById (  " comment "  )  . value =  "  "  ;%NWL%}%NWL%function updateText (  )  {%NWL%var title = document . getElementById (  " title "  )  . value ; %NWL%var comment = document . getElementById (  " comment "  )  . value ; %NWL%9
var path = require (  " path "  )%NWL%var port = exports . port = 1337%NWL%exports . registry =  " http :  /  / localhost :  "  + port%NWL%process . env . npm_config_loglevel =  " error "%NWL%var npm_config_cache = path . resolve ( __dirname ,  " npm_cache "  )%NWL%process . env . npm_config_cache = exports . npm_config_cache = npm_config_cache%NWL%process . env . npm_config_userconfig = exports . npm_config_userconfig = path . join ( __dirname ,  " fixtures "  ,  " config "  ,  " userconfig "  )%NWL%process . env . npm_config_globalconfig = exports . npm_config_globalconfig = path . join ( __dirname ,  " fixtures "  ,  " config "  ,  " globalconfig "  )%NWL%process . env . random_env_var =  " foo "%NWL%var bin = exports . bin = require . resolve (  "  .  .  / bin / npm - cli . js "  )%NWL%var once = require (  " once "  )%NWL%0
this . selectedChunks = selectedChunks ;%NWL%}%NWL%}%NWL%module . exports = CommonsChunkPlugin ; %NWL%CommonsChunkPlugin . prototype . apply = function ( compiler )  {%NWL%var chunkNames = this . chunkNames ; %NWL%var filenameTemplate = this . filenameTemplate ; %NWL%var minChunks = this . minChunks ; %NWL%var selectedChunks = this . selectedChunks ; %NWL%var async = this . async ; %NWL%var minSize = this . minSize ; %NWL%5
}  )  ;%NWL%}  )  ; %NWL%myApp . onPageInit (  ' pull - to - refresh '  , function ( page )  {%NWL%var songs =  [  ' Yellow Submarine '  ,  ' Don\ ' t Stop Me Now '  ,  ' Billie Jean '  ,  ' Californication '  ]  ; %NWL%var authors =  [  ' Beatles '  ,  ' Queen '  ,  ' Michael Jackson '  ,  ' Red Hot Chili Peppers '  ]  ; %NWL%var ptrContent = $$ ( page . container )  . find (  '  . pull - to - refresh - content '  )  ; %NWL%ptrContent . on (  ' refresh '  , function ( e )  {%NWL%setTimeout ( function (  )  {%NWL%var picURL =  ' http :  /  / lorempixel . com / 88 / 88 / abstract /  '  + Math . round ( Math . random (  )  * 10 )  ; %NWL%var song = songs [ Math . floor ( Math . random (  )  * songs . length )  ]  ; %NWL%var author = authors [ Math . floor ( Math . random (  )  * authors . length )  ]  ; %NWL%9
items . eq ( index )  [ 0 ]  . focus (  )  ;%NWL%}  ; %NWL%var show = $dropdown . show ; %NWL%$dropdown . show = function (  )  {%NWL%show (  )  ; %NWL%setTimeout ( function (  )  {%NWL%options . keyboard && $dropdown . $element . on (  ' keydown '  , $dropdown . $onKeyDown )  ; %NWL%bodyEl . on (  ' click '  , onBodyClick )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var hide = $dropdown . hide ; %NWL%2
else {%NWL%if ( endAngle < startAngle )%NWL%range = startAngle - endAngle ; %NWL%else%NWL%range = 360 -  ( endAngle - startAngle )  ;%NWL%}%NWL%return range ;%NWL%}  ,%NWL%_angleInRange : function ( value )  {%NWL%var startAngle = this . _mod360 ( this . startAngle )  ; %NWL%var endAngle = this . _mod360 ( this . endAngle )  ; %NWL%9
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function (  )  {%NWL%var command = protocol . keys (  ' \uE007 '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . data ,  '  {  " value "  :  [  " \\ue007 "  ]  }  '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testLog : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var GenericArtifactFilter = Packages . org . wso2 . carbon . governance . api . generic . GenericArtifactFilter ; %NWL%var ByteArrayInputStream = Packages . java . io . ByteArrayInputStream ; %NWL%var QName = Packages . javax . xml . namespace . QName ; %NWL%var IOUtils = Packages . org . apache . commons . io . IOUtils ; %NWL%var PrivilegedCarbonContext = Packages . org . wso2 . carbon . context . PrivilegedCarbonContext ;  /  / Used regard tenant details%NWL%var CarbonContext = Packages . org . wso2 . carbon . context . CarbonContext ; %NWL%var MultitenantConstants = Packages . org . wso2 . carbon . utils . multitenancy . MultitenantConstants ; %NWL%var List = java . util . List ; %NWL%var Map = java . util . Map ; %NWL%var ArrayList = java . util . ArrayList ; %NWL%var HashMap = java . util . HashMap ; %NWL%7
}  ; %NWL%var destroy = $modal . destroy ; %NWL%$modal . destroy = function (  )  {%NWL%destroy (  )  ; %NWL%if ( backdropElement )  {%NWL%backdropElement . off (  ' click '  )%NWL%backdropElement . remove (  )  ; %NWL%backdropElement = null ;%NWL%}%NWL%}  ; %NWL%var show = $modal . show ; %NWL%1
var imageData = $image . cropper (  ' getImageData '  )  ; %NWL%$image . cropper (  ' move '  , 10 , 10 )  ; %NWL%assert . deepEqual ( $image . cropper (  ' getImageData '  )  , imageData )  ;%NWL%}  )  ; %NWL%QUnit . test (  ' methods . disable : zoom '  , function ( assert )  {%NWL%var ratio = cropper . image . ratio ; %NWL%$image . cropper (  ' zoom '  , 0 . 5 )  ; %NWL%assert . equal ( cropper . image . ratio , ratio )  ;%NWL%}  )  ; %NWL%QUnit . test (  ' methods . disable : rotate '  , function ( assert )  {%NWL%var rotate = cropper . image . rotate ; %NWL%5
id : 167 ,%NWL%from_node : 126 , from :  ' out '  ,%NWL%to_node : 158 , to :  ' y '%NWL%}  ; %NWL%var connection_167 = nodegraph . createConnectionFromObject ( connection_167_data )  ; %NWL%var connection_168_data =  {%NWL%id : 168 ,%NWL%from_node : 158 , from :  ' xyz '  ,%NWL%to_node : 143 , to :  ' rotation '%NWL%}  ; %NWL%var connection_168 = nodegraph . createConnectionFromObject ( connection_168_data )  ; %NWL%4
params . comments . $ne [ 0 ]  . should . eql ( castedComment )  ; %NWL%params . strings . $ne . should . be . instanceof ( Array )  ; %NWL%params . strings . $ne [ 0 ]  . should . eql (  ' Hi there '  )  ; %NWL%params . numbers . $ne . should . be . instanceof ( Array )  ; %NWL%params . numbers . $ne [ 0 ]  . should . eql ( 10000 )  ;%NWL%}  ,%NWL%' Querying a subdocument array with $ne : null should not throw '  : function (  )  {%NWL%var query = new Query (  )  ; %NWL%var db = start (  )  ; %NWL%var Product = db . model (  ' Product '  )  ; %NWL%var Comment = db . model (  ' Comment '  )  ; %NWL%9
var jsdom = require (  ' jsdom '  )  ; %NWL%var citeprocnode =  {  }  ; %NWL%citeprocnode . createEngine = function ( sys , style , lang , forceLang )  {%NWL%var CSL_NODEJS = require (  "  .  / csl_nodejs_jsdom "  )  . CSL_NODEJS_JSDOM ; %NWL%var xmlParsing = new CSL_NODEJS (  )  ; %NWL%var CSL = require (  "  .  / citeprocmodule "  )  . CSL ; %NWL%var citeproc = new CSL . Engine ( sys , style , lang , forceLang )  ; %NWL%return citeproc ;%NWL%}  ; %NWL%citeprocnode . retrieveLocale = function ( language )  {%NWL%var fs = require (  ' fs '  )  ; %NWL%0
var firstPass = true ; %NWL%self . markers = $ . map ( self . markers , function ( value , key )  {%NWL%return {%NWL%lat : key . split (  '  ;  '  )  [ 0 ]  ,%NWL%lon : key . split (  '  ;  '  )  [ 1 ]  ,%NWL%title : value . join (  '  ,  '  )%NWL%}  ;%NWL%}  )  ; %NWL%for ( var i = 0 ; i < self . markers . length ; i +  +  )  {%NWL%var lat = parseFloat ( self . markers [ i ]  . lat )  ; %NWL%var lon = parseFloat ( self . markers [ i ]  . lon )  ; %NWL%9
else {%NWL%todos . push ( exportedTODO )%NWL%}%NWL%}  )%NWL%return doing . concat ( todos )  . concat ( dones )  . join (  ' \n\n '  )%NWL%}%NWL%var breaks =  /  < br >  / g%NWL%var spaces =  / &nbsp ;  / g%NWL%var newlines =  / \n / g%NWL%var lt =  / &lt ;  / g%NWL%var gt =  / &gt ;  / g%NWL%9
soundManager . add (  ' explode '  , 1 )  ; %NWL%soundManager . add (  ' pocket '  , 2 )  ; %NWL%soundManager . add (  ' quietball '  , 2 )  ; %NWL%soundManager . add (  ' quietwall '  , 2 )  ; %NWL%soundManager . add (  ' typing '  , 1 )  ; %NWL%soundManager . add (  ' wall '  , 3 )  ; %NWL%var overlay = $ (  ' #overlay '  )  ; %NWL%var start = $ (  ' #start '  )  ; %NWL%var startmessage = $ (  ' #startmessage '  )  ; %NWL%var resume = $ (  ' #resume '  )  ; %NWL%var gameover = $ (  ' #gameover '  )  ; %NWL%6
if ( !data || !range )  { return [  ]  ;  }%NWL%return this . _drawGenes ( range , data , slide || 0 , zoom || 1 )  ;%NWL%}  ; %NWL%epiviz . plugins . charts . GenesTrack . prototype . _drawGenes = function ( range , data , slide , zoom )  {%NWL%var Axis = epiviz . ui . charts . Axis ; %NWL%var start = range . start (  )  ; %NWL%var end = range . end (  )  ; %NWL%var width = this . width (  )  ; %NWL%var height = this . height (  )  ; %NWL%var margins = this . margins (  )  ; %NWL%var measurements = this . measurements (  )  ; %NWL%7
req2 . onsuccess =  ( function (  )  {%NWL%this . _telephonyDefaultServiceId =%NWL%req2 . result [  ' ril . telephony . defaultServiceId '  ] || 0 ; %NWL%this . updateConnStates (  )  ;%NWL%}  )  . bind ( this )  ;%NWL%}  )  . bind ( this )  ;%NWL%}  ; %NWL%LockScreenConnInfoManagerPrototype . _createConnStateElement =%NWL%function lscs_createConnStateElement (  )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%var span = document . createElement (  ' span '  )  ; %NWL%9
var methods = require (  ' methods '  )  ; %NWL%var Stream = require (  ' stream '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var extend = require (  ' extend '  )  ; %NWL%var Part = require (  '  .  / part '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var qs = require (  ' qs '  )  ; %NWL%var zlib = require (  ' zlib '  )  ; %NWL%0
var entities = _ . values ( this . entities )  ; %NWL%var entitiesLen = entities . length ; %NWL%_ . each ( entities , function ( entity )  {%NWL%entity . tick (  )  ;%NWL%}  )  ; %NWL%var loopCount = this . loopCount ; %NWL%for ( var i = 0 ; i < loopCount ; i +  +  )  {%NWL%for ( var aCount = 0 ; aCount < entitiesLen ; aCount +  +  )  {%NWL%var a = entities [ aCount ]  ; %NWL%for ( var bCount = aCount + 1 ; bCount < entitiesLen ; bCount +  +  )  {%NWL%var b = entities [ bCount ]  ; %NWL%8
}%NWL%}%NWL%}  ; %NWL%Long . prototype . shiftRightUnsigned = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
goog . inherits ( ol . interaction . Select , ol . interaction . Interaction )  ; %NWL%ol . interaction . Select . prototype . getFeatures = function (  )  {%NWL%return this . featureOverlay_ . getFeatures (  )  ;%NWL%}  ; %NWL%ol . interaction . Select . handleEvent = function ( mapBrowserEvent )  {%NWL%if ( !this . condition_ ( mapBrowserEvent )  )  {%NWL%return true ;%NWL%}%NWL%var add = this . addCondition_ ( mapBrowserEvent )  ; %NWL%var remove = this . removeCondition_ ( mapBrowserEvent )  ; %NWL%var toggle = this . toggleCondition_ ( mapBrowserEvent )  ; %NWL%8
var TemplatedPathPlugin = require (  "  .  / TemplatedPathPlugin "  )  ; %NWL%var WarnCaseSensitiveModulesPlugin = require (  "  .  / WarnCaseSensitiveModulesPlugin "  )  ; %NWL%var LoaderPlugin = require (  "  .  / dependencies / LoaderPlugin "  )  ; %NWL%var CommonJsPlugin = require (  "  .  / dependencies / CommonJsPlugin "  )  ; %NWL%var AMDPlugin = require (  "  .  / dependencies / AMDPlugin "  )  ; %NWL%var LabeledModulesPlugin = require (  "  .  / dependencies / LabeledModulesPlugin "  )  ; %NWL%var RequireContextPlugin = require (  "  .  / dependencies / RequireContextPlugin "  )  ; %NWL%var RequireEnsurePlugin = require (  "  .  / dependencies / RequireEnsurePlugin "  )  ; %NWL%var RequireIncludePlugin = require (  "  .  / dependencies / RequireIncludePlugin "  )  ; %NWL%var RemoveParentModulesPlugin = require (  "  .  / optimize / RemoveParentModulesPlugin "  )  ; %NWL%var RemoveEmptyChunksPlugin = require (  "  .  / optimize / RemoveEmptyChunksPlugin "  )  ; %NWL%9
}  ; %NWL%var path_subpage = function (  )  {%NWL%return location . hash || '  /  '  ;%NWL%}  ; %NWL%var get_data = function (  )  {%NWL%var page = path_page (  )  ,%NWL%data = $ . cookie ( page )  ; %NWL%return data || {  }  ;%NWL%}  ; %NWL%var get_table = function ( index )  {%NWL%var subpage = path_subpage (  )  ,%NWL%5
+  ' Please check the confirmation below in order to continue '%NWL%$ ( document . createElement (  ' div '  )  )  . html ( message )  . appendTo ( error )%NWL%$ (  ' #board - grid - modal div [ data - role =  " main "  ]  '  )  . append ( error )%NWL%return%NWL%}%NWL%var getValue = function ( element )  {%NWL%if (  [  ' none '  ,  ' small '  ,  ' medium '  ,  ' large '  ]  . indexOf ( element . val (  )  )  =  =  - 1 ) return ' none '%NWL%return element . val (  )%NWL%}%NWL%var position = getValue ( $ (  '  . grid - position '  )  )%NWL%var size  = getValue ( $ (  '  . grid - size '  )  )%NWL%9
sendRespOrDoCallback ( err , req , res , value , postCallback )  ;%NWL%}%NWL%}  )  ;%NWL%}%NWL%function queueDataFromCacheOrSendRequestByReqObj ( reqObj )%NWL%{%NWL%var req = reqObj [  ' req '  ]  ; %NWL%var res = reqObj [  ' res '  ]  ; %NWL%var jobType = reqObj [  ' jobType '  ]  ; %NWL%var jobName = reqObj [  ' jobName '  ]  ; %NWL%var reqUrl = reqObj [  ' reqUrl '  ]  ; %NWL%7
var row = Ti . UI . createTableViewRow ( jsonConcat (  {%NWL%hasChild : true , height :  ' auto '  ,%NWL%selectionStyle : selstyle ,%NWL%touchEnabled : true ,%NWL%className :  ' control '%NWL%}  , ob )  )  ; %NWL%return row ;%NWL%}%NWL%exports . section = function ( name , xob , xob1 , xob2 )  {%NWL%var ob =  ( xob ) ? xob :  {  }  ; %NWL%var ob1 =  ( xob1 ) ? xob1 :  {  }  ; %NWL%9
)  . segments (  )%NWL%)  . attr (  {%NWL%x : x ,%NWL%y : y%NWL%}  )  ;%NWL%}  ; %NWL%var PI = Math . PI ; %NWL%var PI2 = PI * 2 ; %NWL%var sin = Math . sin ; %NWL%var cos = Math . cos ; %NWL%var abs = Math . abs ; %NWL%6
dayToCellOffsets : null ,  /  / maps days offsets from grid ' s start date , to cell offsets%NWL%rowEls : null ,  /  / set of fake row elements%NWL%dayEls : null ,  /  / set of whole - day elements comprising the row ' s background%NWL%helperEls : null ,  /  / set of cell skeleton elements for rendering the mock event " helper "%NWL%constructor : function (  )  {%NWL%Grid . apply ( this , arguments )  ; %NWL%this . cellDuration = moment . duration ( 1 ,  ' day '  )  ;  /  / for Grid system%NWL%}  ,%NWL%renderDates : function ( isRigid )  {%NWL%var view = this . view ; %NWL%var rowCnt = this . rowCnt ; %NWL%9
}%NWL%else if ( v . isObject ( value )  )  {%NWL%for ( attr in value ) return ; %NWL%return message ;%NWL%}%NWL%}  ,%NWL%length : function ( value , options )  {%NWL%if ( !v . isDefined ( value )  ) return ; %NWL%var is = options . is%NWL%, maximum = options . maximum%NWL%, minimum = options . minimum%NWL%9
!function ( _e )  { var e = function (  )  { return _e (  )  [  " default "  ]  }  ; if (  " object "  =  = typeof exports ) module . exports = e (  )  ; else if (  " function "  =  = typeof define&&define . amd ) define ( e )  ; else { var f ;  " undefined " ! = typeof window?f = window :  " undefined " ! = typeof global?f = global :  " undefined " ! = typeof self&& ( f = self )  , f . $ = e (  )  }  }  ( function (  )  { var define , module , exports ; return ( function e ( t , n , r )  { function s ( o , u )  { if ( !n [ o ]  )  { if ( !t [ o ]  )  { var a = typeof require =  =  " function " &&require ; if ( !u&&a ) return a ( o , !0 )  ; if ( i ) return i ( o , !0 )  ; throw new Error (  " Cannot find module '  "  + o +  "  '  "  )  } var f = n [ o ]  =  { exports :  {  }  }  ; t [ o ]  [ 0 ]  . call ( f . exports , function ( e )  { var n = t [ o ]  [ 1 ]  [ e ]  ; return s ( n?n : e )  }  , f , f . exports , e , t , n , r )  } return n [ o ]  . exports } var i = typeof require =  =  " function " &&require ; for ( var o = 0 ; o < r . length ; o +  +  ) s ( r [ o ]  )  ; return s }  )  (  { 1 :  [ function ( _dereq_ , module , exports )  {%NWL%" use strict "  ; %NWL%var __moduleName =  " src / api "  ; %NWL%var extend = _dereq_ (  '  .  / util '  )  . extend ; %NWL%var api =  {  }  ,%NWL%apiNodeList =  {  }  ,%NWL%$ =  {  }  ; %NWL%var array = _dereq_ (  '  .  / array '  )  ; %NWL%var attr = _dereq_ (  '  .  / attr '  )  ; %NWL%var className = _dereq_ (  '  .  / class '  )  ; %NWL%var dom = _dereq_ (  '  .  / dom '  )  ; %NWL%7
}  ; %NWL%var inputData = JSON . parse ( fs . readFileSync ( process . argv [ 2 ]  ,  " utf8 "  )  )  ; %NWL%for ( x in defaults )  {%NWL%if ( ! ( x in inputData )  )%NWL%inputData [ x ]  = defaults [ x ]  ;%NWL%}%NWL%inputData . L28 = 0 ; %NWL%inputData . L29 = 0 ; %NWL%for ( var i = 1 ; i <  = 3 ;  +  + i )  {%NWL%var L26 =  " L26_ "  + i ; %NWL%var L27 =  " L27_ "  + i ; %NWL%9
' use strict '  ; %NWL%var isPro = require (  '  .  .  / libs / debug '  )  . isPro ; %NWL%var isDev = require (  '  .  .  / libs / debug '  )  . isDev ; %NWL%var isDbg = require (  '  .  .  / libs / debug '  )  . isDbg ; %NWL%var async = require (  ' async '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var pageMetadata = require (  '  .  .  / libs / templateHelpers '  )  . pageMetadata ; %NWL%var Group = require (  '  .  .  / models / group '  )  . Group ; %NWL%var modelParser = require (  '  .  .  / libs / modelParser '  )  ; %NWL%var modelQuery = require (  '  .  .  / libs / modelQuery '  )  ; %NWL%var getDefaultPagination = require (  '  .  .  / libs / templateHelpers '  )  . getDefaultPagination ; %NWL%6
} else {%NWL%async . eachSeries ( dirs . reverse (  )  , mkdir , callback )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%Client . prototype . write = function ( options , callback )  {%NWL%var destination = options . destination ; %NWL%destination = unixy ( destination )  ; %NWL%var attrs = options . attrs ; %NWL%var content = options . content ; %NWL%7
var node = document . createElement (  ' div '  )  ; %NWL%node . innerHTML =  '  < li >  < em > foo <  / em >  <  / li >  '  ; %NWL%Assert . areEqual ( node . getElementsByTagName (  ' em '  )  [ 0 ]  , $ (  ' li em '  , node , true )  ,  ' off - dom : li em '  )  ; %NWL%Assert . isNull ( $ (  ' div li em '  , node , true )  ,  ' off - dom : div li em '  )  ; %NWL%ArrayAssert . itemsAreEqual (  [  ]  , $ (  ' body p '  , document . body )  ,  " $ (  ' body p '  , document . body )  "  )  ; %NWL%ArrayAssert . itemsAreEqual (  [  ]  , $ (  ' #root - test li '  , Y . Dom . get (  ' nth - test '  )  )  ,  ' id selector w / root false pos '  )  ;%NWL%}  ,%NWL%testNthType : function (  )  {%NWL%var all = Y . Dom . get (  ' nth - test '  )  . getElementsByTagName (  ' li '  )  ; %NWL%var odd = Y . Dom . getElementsByClassName (  ' odd '  ,  ' li '  ,  ' nth - test '  )  ; %NWL%var even = Y . Dom . getElementsByClassName (  ' even '  ,  ' li '  ,  ' nth - test '  )  ; %NWL%9
var game_id = get_menu_value (  ' fe_cu_game '  )  ; %NWL%xml . game = game_id ; %NWL%stags . push (  ' game_ '  + get_url_friendly_title ( game_id )  )  ; %NWL%var os = get_menu_value (  ' fe_cu_os '  )  ; %NWL%var browser = get_menu_value (  ' fe_cu_browser '  )  ; %NWL%xml . software = os +  '  ,  '  + browser ; %NWL%stags . push (  ' software_ '  + get_url_friendly_title ( os +  '  ,  '  + browser )  )  ; %NWL%var subject = $ (  ' fe_cu_subject '  )  . value ; %NWL%if ( !subject ) return bad_field (  ' fe_cu_subject '  ,  " Please enter a subject for your message .  "  )  ; %NWL%xml . summary = subject ; %NWL%var body = $ (  ' fe_cu_body '  )  . value ; %NWL%7
if ( hasRelationParam )  {%NWL%return RELATION_MODE ;%NWL%}%NWL%if ( hasRelatedParam )  {%NWL%return RELATED_MODE ;%NWL%}%NWL%throw Kapow ( 400 ,  ' Unable to determine mode based on `request . params` keys .  '  )  ;%NWL%}  ; %NWL%RequestHandler . prototype . create = function create ( request )  {%NWL%var adapter = this . adapter ; %NWL%var method = this . method ; %NWL%9
num = num | ( num >  >  > 16 )  ; %NWL%return ( num + 1 )  ;%NWL%}  ,%NWL%ajax : function utilitiesAjaxFn ( params )  {%NWL%var requestText =  "  "  ; %NWL%var method = params . method ; %NWL%var data = params . data || {  }  ; %NWL%var encrypted = params . encrypt ; %NWL%var signature = null ; %NWL%var url = params . url ; %NWL%var requestHandler = params . requestHandler ; %NWL%5
caches [ cache . type ]  . put ( cacheKey , JSON . stringify ( response )  , cache . time )  ;%NWL%}%NWL%function Sync ( method , collection , opts )%NWL%{%NWL%if (  ' read ' ! =  = method )  {%NWL%console . debug (  ' PiwikApiAdapter supports only reading '  )  ; %NWL%return ;%NWL%}%NWL%var settings = collection . config . settings ; %NWL%var params  = collection . config . defaultParams ; %NWL%var cache  = collection . config . cache ; %NWL%8
return res . json ( 409 ,  {%NWL%status :  ' error '  ,%NWL%reason : util . format (  ' claim code `%s` has already been used '  , code )  ,%NWL%code : code%NWL%}  )  ; %NWL%cb ( badge )  ;%NWL%}  )  ;%NWL%}  ; %NWL%function tryAwardingBadge ( opts , res , successCb )  {%NWL%const badge = opts . badge ; %NWL%const email = opts . email ; %NWL%9
y2 = ey2 > y2 ? ey2 : y2 ;%NWL%}%NWL%}%NWL%}  /  / edges%NWL%if ( styleEnabled )  {%NWL%var style = ele . _private . style ; %NWL%var rstyle = ele . _private . rstyle ; %NWL%var label = style [  ' content '  ]  . strValue ; %NWL%var fontSize = style [  ' font - size '  ]  ; %NWL%var halign = style [  ' text - halign '  ]  ; %NWL%var valign = style [  ' text - valign '  ]  ; %NWL%9
function read ( fname )  {%NWL%return fs . readFileSync ( file ( fname )  )  ;%NWL%}%NWL%var key1 = read (  ' agent1 - key . pem '  )  ; %NWL%var cert1 = read (  ' agent1 - cert . pem '  )  ; %NWL%var key2 = read (  ' agent2 - key . pem '  )  ; %NWL%var cert2 = read (  ' agent2 - cert . pem '  )  ; %NWL%var key3 = read (  ' agent3 - key . pem '  )  ; %NWL%var cert3 = read (  ' agent3 - cert . pem '  )  ; %NWL%var ca1 = read (  ' ca1 - cert . pem '  )  ; %NWL%var ca2 = read (  ' ca2 - cert . pem '  )  ; %NWL%9
}%NWL%settings . disableTimeRanges = settings . disableTimeRanges . sort ( function ( a , b )  {%NWL%return a [ 0 ]  - b [ 0 ]  ;%NWL%}  )  ;%NWL%}%NWL%return settings ;%NWL%}%NWL%function _render ( self )%NWL%{%NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
assertExpr (  "  ( x / y )  "  , binExpr (  "  /  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % y )  "  , binExpr (  " % "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | y )  "  , binExpr (  " | "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%8
var tag = tpl . find (  '  [ name = tag ]  '  )  . value ; %NWL%Meteor . call (  ' addHostTag '  , projectId , hostId , tag , function ( err )  {%NWL%if ( err )  {%NWL%return Alerts . insert (  {  " class "  :  " alert - error "  ,  " strong "  :  " Error "  ,  " message "  : err . reason }  )  ;%NWL%}%NWL%return tpl . find (  '  [ name = tag ]  '  )  . value =  '  '  ;%NWL%}  )  ;%NWL%}  ,%NWL%' click #remove - tags '  : function (  )  {%NWL%var projectId = Session . get (  ' projectId '  )  ; %NWL%var hostId = Session . get (  ' hostId '  )  ; %NWL%9
' width '  :  ' 100% '%NWL%}  )  ; %NWL%viewport . append ( el )  ; %NWL%scrollBarWidth = viewport . width (  )  - el . width (  )  ; %NWL%el . remove (  )  ; %NWL%return scrollBarWidth ;%NWL%}%NWL%function isInViewport ( element , options )  {%NWL%var boundingRect  = element . getBoundingClientRect (  )  ; %NWL%var top    = boundingRect . top ; %NWL%var bottom   = boundingRect . bottom ; %NWL%9
}  )  ; %NWL%this . canvas . setWidth ( this . image . getWidth (  )  )  ; %NWL%this . canvas . setHeight ( this . image . getHeight (  )  )  ; %NWL%this . canvas . add ( this . image )  ; %NWL%this . canvas . centerObject ( this . image )  ; %NWL%this . image . setCoords (  )  ; %NWL%return this ;%NWL%}  ,%NWL%createFabricImage : function ( imgElement )  {%NWL%var width = imgElement . width ; %NWL%var height = imgElement . height ; %NWL%9
case 8 : %NWL%if ( doGetCaretPosition ( $input [ 0 ]  )  =  =  = 0 )  {%NWL%var prev = $inputWrapper . prev (  )  ; %NWL%if ( prev )  {%NWL%self . remove ( prev . data (  ' item '  )  )  ;%NWL%}%NWL%}%NWL%break ; %NWL%case 46 : %NWL%if ( doGetCaretPosition ( $input [ 0 ]  )  =  =  = 0 )  {%NWL%var next = $inputWrapper . next (  )  ; %NWL%2
}%NWL%}%NWL%}%NWL%}  ; %NWL%function pluginFunFactory ( funName )  {%NWL%return function (  )  {%NWL%var names =  [  ]  ; %NWL%var promises =  [  ]  ; %NWL%for ( var i = 0 ; i < this . pluginConfs . length ;  +  + i )  {%NWL%var pluginConf = this . pluginConfs [ i ]  ; %NWL%var pluginObj = this . pluginObjs [ i ]  ; %NWL%9
var obj = $ ( this )  ; %NWL%var value =  '  '  ; %NWL%var is_number =  /  [ 0 - 9 ]  /  ; %NWL%if ( obj . is (  ' input '  )  )%NWL%value = obj . val (  )  ; %NWL%else%NWL%value = obj . html (  )  ; %NWL%var prefix = options . prefix ; %NWL%var suffix = options . suffix ; %NWL%var centsSeparator = options . centsSeparator ; %NWL%var thousandsSeparator = options . thousandsSeparator ; %NWL%7
var oldWidth = field . style . width ; %NWL%var oldHeight = field . style . height ; %NWL%goog . style . setStyle ( field ,  ' visibility '  ,  ' hidden '  )  ; %NWL%var startDiv = dh . createDom ( goog . dom . TagName . DIV ,%NWL%{  ' style '  :  ' height : 0 ; clear : both '  ,  ' innerHTML '  :  ' &nbsp ;  '  }  )  ; %NWL%var endDiv = startDiv . cloneNode ( true )  ; %NWL%field . insertBefore ( startDiv , field . firstChild )  ; %NWL%goog . dom . appendChild ( field , endDiv )  ; %NWL%var contentBox = goog . style . getContentBoxSize ( field )  ; %NWL%var width = contentBox . width ; %NWL%var height = contentBox . height ; %NWL%9
if ( this . childrenJson )  {%NWL%this . defaultChildrenFromJson ( this . childrenJson )  ; %NWL%delete this . childrenJson ; %NWL%delete this . pendingLoadChildren ; %NWL%console . log (  " Now To Load Children Of "  + this . name )  ; %NWL%if ( this . scaleInfo )  {%NWL%this . scaleForDensity ( this . scaleInfo . sizeScale , this . scaleInfo . lcdDensity , true )  ;%NWL%}%NWL%var wm = this . getWindowManager (  )  ; %NWL%var oldConfig = wm . oldConfig ; %NWL%var deviceConfig = wm . deviceConfig ; %NWL%9
actual . should . deep . equal ( expected )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%specify (  " Scale 2 . svg to 180% "  , function ( done )  {%NWL%svg2png ( relative (  " images / 2 . svg "  )  , relative (  " images / 2 - actual . png "  )  , 1 . 8 , function ( err )  {%NWL%if ( err )  {%NWL%return done ( err )  ;%NWL%}%NWL%var expected = fs . readFileSync ( relative (  " images / 2 - expected . png "  )  )  ; %NWL%var actual = fs . readFileSync ( relative (  " images / 2 - actual . png "  )  )  ; %NWL%9
var replyDoc = ltx . parse ( reply . toString (  )  )  ; %NWL%var entries = replyDoc . getChildrenByFilter ( function ( c )  {%NWL%return typeof c ! =  ' string ' &&%NWL%c . getName (  )  =  =  ' subscription ' && c . getNS (  )  =  = ns ;%NWL%}  , true )  ; %NWL%var subscriptions =  [  ]  ; %NWL%entries . forEach ( function ( entry )  {%NWL%var subscription = entry . attr (  ' subscription '  )  ; %NWL%var response =  { subscription : subscription }  ; %NWL%if ( target =  =  ' user '  )  {%NWL%var node = entry . attr (  ' node '  )  ; %NWL%7
SocialCalc . SpreadsheetViewer . prototype . SizeSSDiv = function (  )  { return SocialCalc . SizeSSDiv ( this )  ;  }  ; %NWL%SocialCalc . SpreadsheetViewer . prototype . DecodeSpreadsheetSave =%NWL%function ( str )  { return SocialCalc . SpreadsheetViewerDecodeSpreadsheetSave ( this , str )  ;  }  ; %NWL%SocialCalc . SpreadsheetViewer . prototype . ParseSheetSave = function ( str )  { return this . sheet . ParseSheetSave ( str )  ;  }  ; %NWL%SocialCalc . InitializeSpreadsheetViewer = function ( spreadsheet , node , height , width , spacebelow )  {%NWL%var scc = SocialCalc . Constants ; %NWL%var SCLoc = SocialCalc . LocalizeString ; %NWL%var SCLocSS = SocialCalc . LocalizeSubstrings ; %NWL%var html , child , i , vname , v , style , button , bele ; %NWL%var tabs = spreadsheet . tabs ; %NWL%var views = spreadsheet . views ; %NWL%9
zoom : 1 ,%NWL%columns :  [  ' model . name '  ,  ' from '  ,  ' to '  ]  ,%NWL%treeTableColumns :  [  ' from '  ,  ' to '  ]  ,%NWL%columnsHeaders :  {  ' model . name '  :  ' Name '  ,  ' from '  :  ' From '  ,  ' to '  :  ' To '  }  ,%NWL%columnsClasses :  {  ' model . name '  :  ' gantt - column - name '  ,  ' from '  :  ' gantt - column - from '  ,  ' to '  :  ' gantt - column - to '  }  ,%NWL%columnsFormatters :  {%NWL%' from '  : function ( from )  {%NWL%return from ! =  = undefined ? from . format (  ' lll '  )  : undefined ;%NWL%}  ,%NWL%' to '  : function ( to )  {%NWL%return to ! =  = undefined ? to . format (  ' lll '  )  : undefined ; %NWL%7
worker . on (  " error "  , function ( e )  {%NWL%session . setAnnotations (  [ e . data ]  )  ;%NWL%}  )  ; %NWL%worker . on (  " ok "  , function ( e )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%worker . on (  " highlight "  , function ( tokens )  {%NWL%var firstRow = 0 ; %NWL%var lastRow = session . getLength (  )  - 1 ; %NWL%var lines = tokens . data . lines ; %NWL%var states = tokens . data . states ; %NWL%9
media :  '  < img width =  " 44 " height =  " 44 " style =  " border - radius : 100% " src =  " http :  /  / lorempixel . com / output / people - q - c - 100 - 100 - 9 . jpg "  >  '  ,%NWL%onClose : function (  )  {%NWL%myApp . alert (  ' Notification closed '  )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%myApp . onPageInit (  ' login - screen - embedded '  , function ( page )  {%NWL%$$ ( page . container )  . find (  '  . list - button '  )  . on (  ' click '  , function (  )  {%NWL%var username = $$ ( page . container )  . find (  ' input [ name =  " username "  ]  '  )  . val (  )  ; %NWL%var password = $$ ( page . container )  . find (  ' input [ name =  " password "  ]  '  )  . val (  )  ; %NWL%9
return formData ;%NWL%}  ; %NWL%app . formFromJSON = function ( form , formData )  {%NWL%form = $ ( form )  ; %NWL%if ( form . length ! =  = 1 ) return false ; %NWL%var skipTypes =  [  ' submit '  ,  ' image '  ,  ' button '  ,  ' file '  ]  ; %NWL%var skipNames =  [  ]  ; %NWL%form . find (  ' input , select , textarea '  )  . each ( function (  )  {%NWL%var input = $ ( this )  ; %NWL%var name = input . attr (  ' name '  )  ; %NWL%var type = input . attr (  ' type '  )  ; %NWL%9
Thread . where (  { title_like :  ' delete '  }  )  . count (  )  . exec ( function ( result )  {%NWL%result . should . be . equal ( 0 )  ; %NWL%next (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' delets all records of a relation '  , function ( next )  {%NWL%store . ready ( function (  )  {%NWL%var Thread = store . Model (  ' Thread '  )  ; %NWL%var Post = store . Model (  ' Post '  )  ; %NWL%9
} else {%NWL%_t . _transformToBatch = cc . AffineTransformConcat ( _t . nodeToParentTransform (  )  , locParent . _transformToBatch )  ;%NWL%}%NWL%var locTransformToBatch = _t . _transformToBatch ; %NWL%var rect = _t . _rect ; %NWL%var x1 = _t . _offsetPosition . x ; %NWL%var y1 = _t . _offsetPosition . y ; %NWL%var x2 = x1 + rect . width ; %NWL%var y2 = y1 + rect . height ; %NWL%var x = locTransformToBatch . tx ; %NWL%var y = locTransformToBatch . ty ; %NWL%9
if ( nextBodyEnd =  =  = closest )%NWL%return [ closest ,  ' bodyEnd '  ]  ; %NWL%if ( nextSpecial =  =  = closest )%NWL%return [ closest ,  ' special '  ]  ;%NWL%}%NWL%function tokenize ( context )  {%NWL%var chunk = context . chunk ; %NWL%var tokenized =  [  ]  ; %NWL%var newToken ; %NWL%var value ; %NWL%var addSourceMap = context . addSourceMap ; %NWL%6
var summary = googleStore . getValues ( items [ 0 ]  ,  " unescapedUrl "  )  ; %NWL%t . assertTrue ( dojo . isArray ( summary )  )  ; %NWL%var url = googleStore . getValues ( items [ 0 ]  ,  " url "  )  ; %NWL%t . assertTrue ( dojo . isArray ( url )  )  ; %NWL%var published = googleStore . getValues ( items [ 0 ]  ,  " visibleUrl "  )  ; %NWL%t . assertTrue ( dojo . isArray ( published )  )  ; %NWL%var updated = googleStore . getValues ( items [ 0 ]  ,  " cacheUrl "  )  ; %NWL%t . assertTrue ( dojo . isArray ( updated )  )  ; %NWL%var title = googleStore . getValues ( items [ 0 ]  ,  " title "  )  ; %NWL%t . assertTrue ( dojo . isArray ( title )  )  ; %NWL%var titleNoFormatting = googleStore . getValues ( items [ 0 ]  ,  " titleNoFormatting "  )  ; %NWL%2
beta = 1 ;%NWL%}%NWL%else {%NWL%var c = 4 * m * pi * dampingRatio / period ; %NWL%var k = 4 * m * pi * pi /  ( period * period )  ; %NWL%gamma = 1 /  ( c + dt * k )  ; %NWL%beta  = dt * k /  ( c + dt * k )  ;%NWL%}%NWL%var x = p . x ; %NWL%var y = p . y ; %NWL%var z = p . z ; %NWL%8
}%NWL%if ( now ! = null )  {%NWL%$ (  " #posttitle "  )  . val ( now . title )  ; %NWL%$ (  " #postpath "  )  . val ( now . path )  ; %NWL%$ (  " #postdate "  )  . val ( now . date )  ; %NWL%$ (  " #posttags "  )  . val ( now . tags )  ; %NWL%$ (  " #loading "  )  . show (  )  ; %NWL%repo . read (  " master "  , now . path , function ( err , data )  {%NWL%$ (  " #loading "  )  . hide (  )  ; %NWL%var content = data . match ( contentpattern )  [ 1 ]  ; %NWL%var md = data . match ( mdpattern )  [ 1 ]  ; %NWL%9
this . render (  )%NWL%handleCurrentTab (  )%NWL%}  ,%NWL%updateSplitPanelVisibility : function (  )  {%NWL%var appview = this . get (  ' appview '  )%NWL%this . splitPanel . set (  ' visible '  , this . get (  ' selected '  ) && !appview . isPopupVisible (  )  )%NWL%}  ,%NWL%color : function (  )  {%NWL%var appview = this . get (  ' appview '  )%NWL%var config = appview . app . config%NWL%var runner = this . get (  ' runner '  )%NWL%4
var open = require (  ' gulp - open '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var stylish = require (  ' jshint - stylish '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var connectLivereload = require (  ' connect - livereload '  )  ; %NWL%var opn = require (  ' opn '  )  ; %NWL%var karma = require (  ' karma '  )  . server ; %NWL%var header = require (  ' gulp - header '  )  ; %NWL%0
document . getElementById (  ' bordercolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bordercolor_pick '  ,  ' bordercolor '  )  ; %NWL%document . getElementById (  ' bgcolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bgcolor_pick '  ,  ' bgcolor '  )%NWL%var inst = ed ; %NWL%var tdElm = ed . dom . getParent ( ed . selection . getStart (  )  ,  " td , th "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = ed . dom . parseStyle ( ed . dom . getAttrib ( tdElm ,  " style "  )  )  ; %NWL%var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = ed . dom . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = ed . dom . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%9
var id = feature . properties . gx_id ; %NWL%var tr = $ (  '  < tr /  >  '  )  ; %NWL%var td = $ (  '  < td /  >  '  )  ; %NWL%var tdHref = $ (  '  < a /  >  '  ,  {%NWL%text :  ' show '%NWL%}  )  . click ( function (  )  {%NWL%GME . zoomToFeature ( id )  ;%NWL%}  )  ; %NWL%td . appendTo ( tr )  ; %NWL%tdHref . appendTo ( td )  ; %NWL%var td = $ (  '  < td /  >  '  )  ; %NWL%1
}%NWL%return { left : l , top : t }  ;%NWL%}%NWL%_ . requestFrame = function (  )  {%NWL%var request = window . requestAnimationFrame ||%NWL%window . webkitRequestAnimationFrame ||%NWL%window . mozRequestAnimationFrame||%NWL%function ( callback )  {%NWL%setTimeout ( callback , 16 )%NWL%}%NWL%var cancel = window . cancelAnimationFrame ||%NWL%4
this . _x = x ; %NWL%return this . value ;%NWL%}  ; %NWL%$ . process = function ( cell )  {%NWL%var wave = this . wave ; %NWL%var radtoinc = this . _radtoinc ; %NWL%var phase , x = this . _x ; %NWL%var index , frac , x0 , x1 , dx = this . frequency * this . _coeff ; %NWL%var i , imax = this . step ; %NWL%if ( this . feedback )  {%NWL%var lastouts = this . _lastouts ; %NWL%5
" dialog . alert "  ,  " settings "%NWL%]  ; %NWL%main . provides =  [  " clipboard "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var c9 = imports . c9 ; %NWL%var ui = imports . ui ; %NWL%var Plugin = imports . Plugin ; %NWL%var menus = imports . menus ; %NWL%var settings = imports . settings ; %NWL%var commands = imports . commands ; %NWL%5
}  )  ; %NWL%it (  ' should join two classes together '  , function (  )  {%NWL%var aaa =  ' aaa '  ; %NWL%var bbb =  ' bbb '  ; %NWL%expect ( joinClasses ( aaa , bbb )  )  . toEqual (  ' aaa bbb '  )  ;%NWL%}  )  ; %NWL%it (  ' should join many classes together '  , function (  )  {%NWL%var aaa =  ' aaa '  ; %NWL%var bbb =  ' bbb '  ; %NWL%var ccc =  ' ccc '  ; %NWL%var ddd =  ' ddd '  ; %NWL%2
compiler . apply (%NWL%new WebWorkerTemplatePlugin ( options . output )  ,%NWL%new FunctionModulePlugin ( options . output )  ,%NWL%new NodeSourcePlugin ( options . node )  ,%NWL%new LoaderTargetPlugin (  " webworker "  )%NWL%)  ; %NWL%break ; %NWL%case " node "  : %NWL%case " async - node "  : %NWL%var NodeTemplatePlugin = require (  "  .  / node / NodeTemplatePlugin "  )  ; %NWL%var NodeTargetPlugin = require (  "  .  / node / NodeTargetPlugin "  )  ; %NWL%9
Dom . get ( this . id +  '  - 2 -  '  + field +  '  - ok '  )  . onclick = function ( ev )%NWL%{%NWL%var fieldName = this . id . replace ( me . id +  '  - 2 -  '  ,  '  '  )  . replace (  '  - ok '  ,  '  '  )  ; %NWL%me . onExtConfigOk ( fieldName )  ;%NWL%}  ;%NWL%}  ,%NWL%onExtConfigOk : function ( field )%NWL%{%NWL%var url = Dom . get ( this . id +  '  - 2 -  '  + field +  '  - url '  )  . value ; %NWL%var root = Dom . get ( this . id +  '  - 2 -  '  + field +  '  - root '  )  . value ; %NWL%var label = Dom . get ( this . id +  '  - 2 -  '  + field +  '  - label '  )  . value ; %NWL%8
self . offsets . push ( this [ 0 ]  )%NWL%self . targets . push ( this [ 1 ]  )%NWL%}  )%NWL%}%NWL%, process : function (  )  {%NWL%var scrollTop = this . $scrollElement . scrollTop (  )  + this . options . offset%NWL%, scrollHeight = this . $scrollElement [ 0 ]  . scrollHeight || this . $body [ 0 ]  . scrollHeight%NWL%, maxScroll = scrollHeight - this . $scrollElement . height (  )%NWL%, offsets = this . offsets%NWL%, targets = this . targets%NWL%, activeTarget = this . activeTarget%NWL%8
var $animate ; %NWL%var $parentSelector = this . parentSelector ,%NWL%loadingBarContainer = angular . element ( this . loadingBarTemplate )  ,%NWL%loadingBar = loadingBarContainer . find (  ' div '  )  . eq ( 0 )  ,%NWL%spinner = angular . element ( this . spinnerTemplate )  ; %NWL%var incTimeout ,%NWL%completeTimeout ,%NWL%started = false ,%NWL%status = 0 ; %NWL%var includeSpinner = this . includeSpinner ; %NWL%var includeBar = this . includeBar ; %NWL%9
var app = require (  '  .  / app . js '  )  ; %NWL%exports . app = app ; %NWL%var core = require (  '  .  / core . js '  )  ; %NWL%exports . core = core ; %NWL%var engine = require (  '  .  / engine . js '  )  ; %NWL%exports . engine = engine ; %NWL%var services = require (  '  .  / services . js '  )  ; %NWL%exports . services = services ; %NWL%var util = require (  '  .  / util . js '  )  ; %NWL%exports . util = util ; %NWL%var install = require (  '  .  / install . js '  )  ; %NWL%0
var html = _dereq_ (  '  .  / html '  )  ; %NWL%var selector = _dereq_ (  '  .  / selector '  )  ; %NWL%var selector_extra = _dereq_ (  '  .  / selector_extra '  )  ; %NWL%if ( selector ! =  = undefined )  {%NWL%$ = selector . $ ; %NWL%$ . matches = selector . matches ; %NWL%api . find = selector . find ;%NWL%}%NWL%var mode = _dereq_ (  '  .  / mode '  )  ; %NWL%extend ( $ , mode )  ; %NWL%var noconflict = _dereq_ (  '  .  / noconflict '  )  ; %NWL%0
{ tag :  " span "  , name :  " personName "  }%NWL%]  }%NWL%]  }%NWL%]  ,%NWL%create : function (  )  {%NWL%this . inherited ( arguments )  ; %NWL%this . $ . repeater . setCount ( this . people . length )  ;%NWL%}  ,%NWL%setupItem : function ( inSender , inEvent )  {%NWL%var index = inEvent . index ; %NWL%var item = inEvent . item ; %NWL%9
}  )  ; %NWL%assert . equal ( actual . source , null )  ; %NWL%assert . equal ( actual . line , null )  ; %NWL%assert . equal ( actual . column , null )  ;%NWL%}  )  ; %NWL%exports [  ' test . fromStringWithSourceMap (  )  '  ]  = forEachNewline ( function ( assert , util , nl )  {%NWL%var testCode = util . testGeneratedCode . replace (  / \n / g , nl )  ; %NWL%var node = SourceNode . fromStringWithSourceMap ( testCode , new SourceMapConsumer ( util . testMap )  )  ; %NWL%var result = node . toStringWithSourceMap (  { file :  ' min . js '  }  )  ; %NWL%var map = result . map ; %NWL%var code = result . code ; %NWL%9
_processRawXmlTree : function ( rawXmlTree )  {%NWL%this . _loadFinished = true ; %NWL%this . _xmlData = rawXmlTree ; %NWL%var headNodes = rawXmlTree . getElementsByTagName (  ' head '  )  ; %NWL%var headNode = headNodes [ 0 ]  ; %NWL%if ( headNode )  {%NWL%this . _removeChildNodesThatAreNotElementNodes ( headNode )  ; %NWL%this . _metadataNodes = headNode . childNodes ;%NWL%}%NWL%var bodyNodes = rawXmlTree . getElementsByTagName (  ' body '  )  ; %NWL%var bodyNode = bodyNodes [ 0 ]  ; %NWL%4
var animated = new Ext . Resizable (  ' animated '  ,  {%NWL%width : 200 ,%NWL%pinned : true ,%NWL%height : 100 ,%NWL%minWidth : 100 ,%NWL%minHeight : 50 ,%NWL%animate : true ,%NWL%easing :  ' backIn '  ,%NWL%duration :  . 6%NWL%}  )  ; %NWL%var wrapped = new Ext . Resizable (  ' wrapped '  ,  {%NWL%0
self . offsets . push ( this [ 0 ]  )%NWL%self . targets . push ( this [ 1 ]  )%NWL%}  )%NWL%}%NWL%ScrollSpy . prototype . process = function (  )  {%NWL%var scrollTop  = this . $scrollElement . scrollTop (  )  + this . options . offset%NWL%var scrollHeight = this . $scrollElement [ 0 ]  . scrollHeight || this . $body [ 0 ]  . scrollHeight%NWL%var maxScroll  = scrollHeight - this . $scrollElement . height (  )%NWL%var offsets   = this . offsets%NWL%var targets   = this . targets%NWL%var activeTarget = this . activeTarget%NWL%8
} else {%NWL%async . eachSeries ( dirs . reverse (  )  , mkdir , callback )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%Client . prototype . write = function ( options , callback )  {%NWL%var destination = options . destination ; %NWL%destination = unixy ( destination )  ; %NWL%var attrs = options . attrs ; %NWL%var content = options . content ; %NWL%7
skip ( 10 )  ; %NWL%assertEquals (%NWL%' SELECT Employee . firstName , Employee . lastName , Job . title '  +%NWL%' FROM Employee , Job '  +%NWL%' WHERE Employee . jobId = Job . id '  +%NWL%' ORDER BY Employee . id ASC '  +%NWL%' LIMIT 20 '  +%NWL%' SKIP 10 ;  '  ,%NWL%query . toSql (  )  )  ; %NWL%var j1 = j . as (  ' j1 '  )  ; %NWL%var j2 = j . as (  ' j2 '  )  ; %NWL%9
}%NWL%}  ; %NWL%var MuseumLiveManager = WEBLAB . namespace (  " WEBLAB . orchestra "  )  . MuseumLiveManager ; %NWL%var Timer = WEBLAB . namespace (  " WEBLAB . orchestra . timer "  )  . Timer ; %NWL%var Player = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . Player ; %NWL%var TutorialPlayer = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player "  )  . TutorialPlayer ; %NWL%var Point = WEBLAB . namespace (  " WEBLAB . utils . math "  )  . Point ; %NWL%var StandAloneCopyGenerator = WEBLAB . namespace (  " WEBLAB . orchestra . ui . player . copy "  )  . StandAloneCopyGenerator ; %NWL%var OrchestraCopyIds = WEBLAB . namespace (  " WEBLAB . common . constants "  )  . OrchestraCopyIds ; %NWL%var TutorialEventTypes = WEBLAB . namespace (  " WEBLAB . orchestra . constants "  )  . TutorialEventTypes ; %NWL%var PlayerChangeEventTypes = WEBLAB . namespace (  " WEBLAB . orchestra . constants "  )  . PlayerChangeEventTypes ; %NWL%9
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdLocation (  ' TEST_ELEMENT '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / location '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdLocationInView : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
function getTriggers ( trigger )  {%NWL%var show = trigger || options . trigger || defaultTriggerShow ; %NWL%var hide = triggerMap [ show ] || show ; %NWL%return {%NWL%show : show ,%NWL%hide : hide%NWL%}  ;%NWL%}%NWL%var directiveName = snake_case ( type )  ; %NWL%var startSym = $interpolate . startSymbol (  )  ; %NWL%var endSym = $interpolate . endSymbol (  )  ; %NWL%9
scope . showAM = !!formats [ 2 ]  ; %NWL%scope . isAM =  ( $timepicker . $date || hours [ midIndex ]  . date )  . getHours (  )  < 12 ; %NWL%$timepicker . $isBuilt = true ;%NWL%}  ; %NWL%$timepicker . $isSelected = function ( date , index )  {%NWL%if ( !$timepicker . $date )%NWL%return false ; %NWL%else if ( index =  =  = 0 )  {%NWL%return date . getHours (  )  =  =  = $timepicker . $date . getHours (  )  ;%NWL%} else if ( index =  =  = 1 )  {%NWL%return date . getMinutes (  )  =  =  = $timepicker . $date . getMinutes (  )  ; %NWL%8
}  ; %NWL%this . update = function ( config )  {%NWL%var emptyAnno =  { className :  "  "  }  ; %NWL%var html =  [  ]  ; %NWL%var i = config . firstRow ; %NWL%var lastRow = config . lastRow ; %NWL%var fold = this . session . getNextFoldLine ( i )  ; %NWL%var foldStart = fold ? fold . start . row : Infinity ; %NWL%var foldWidgets = this . $showFoldWidgets && this . session . foldWidgets ; %NWL%var breakpoints = this . session . $breakpoints ; %NWL%var decorations = this . session . $decorations ; %NWL%9
}%NWL%break ; %NWL%case ' getCompleteMarketPricesCompressed '  : %NWL%var completeMarketPrices = result . completeMarketPrices ; %NWL%if ( typeof ( completeMarketPrices )  =  =  =  ' string '  )  {%NWL%var data = decompressGetCompleteMarketPricesCompressed ( completeMarketPrices )  ; %NWL%result . completeMarketPrices = data ;%NWL%}%NWL%break ; %NWL%case ' getMarketTradedVolumeCompressed '  : %NWL%var tradedVolume = result . tradedVolume ; %NWL%3
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . status ( function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / status '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testSubmit : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var _     = require (  " lodash "  )  ; %NWL%var ChainFind   = require (  "  .  / ChainFind "  )  ; %NWL%var Instance    = require (  "  .  / Instance "  )  . Instance ; %NWL%var LazyLoad    = require (  "  .  / LazyLoad "  )  ; %NWL%var ManyAssociation  = require (  "  .  / Associations / Many "  )  ; %NWL%var OneAssociation  = require (  "  .  / Associations / One "  )  ; %NWL%var ExtendAssociation = require (  "  .  / Associations / Extend "  )  ; %NWL%var Property    = require (  "  .  / Property "  )  ; %NWL%var Singleton   = require (  "  .  / Singleton "  )  ; %NWL%var Utilities   = require (  "  .  / Utilities "  )  ; %NWL%var Validators   = require (  "  .  / Validators "  )  ; %NWL%1
for ( var i = 0 ; i < vectors . length ; i +  +  )  {%NWL%var msgbits = h . toBits ( vectors [ i ]  . msg )  ; %NWL%var d = bn . fromBits ( h . toBits ( vectors [ i ]  . d )  )  ; %NWL%var x = bn . fromBits ( h . toBits ( vectors [ i ]  . Qx )  )  ; %NWL%var y = bn . fromBits ( h . toBits ( vectors [ i ]  . Qy )  )  ; %NWL%var k = bn . fromBits ( h . toBits ( vectors [ i ]  . k )  )  ; %NWL%var r = bn . fromBits ( h . toBits ( vectors [ i ]  . R )  )  ; %NWL%var s = bn . fromBits ( h . toBits ( vectors [ i ]  . S )  )  ; %NWL%keys = sjcl . ecc . ecdsa . generateKeys ( curvenum , 0 , d )  ; %NWL%var pub = keys . pub ; %NWL%var sec = keys . sec ; %NWL%9
forceOAuthUI_successHandler , forceOAuthUI_errorHandler , SFConfig . proxyUrl )  ;%NWL%}%NWL%}  )  ; %NWL%angular . module (  ' AngularForceObjectFactory '  ,  [  ]  )  . factory (  ' AngularForceObjectFactory '  , function ( SFConfig , AngularForce )  {%NWL%function AngularForceObjectFactory ( params )  {%NWL%params = params || {  }  ; %NWL%var type = params . type ; %NWL%var fields = params . fields ; %NWL%var where = params . where ; %NWL%var limit = params . limit ; %NWL%var orderBy = params . orderBy ; %NWL%6
var nodes = cluster . nodes ( data )  ,%NWL%links = cluster . links ( nodes )  ; %NWL%var link = g . selectAll (  "  . link "  )%NWL%. data ( links )%NWL%. enter (  )  . append (  " path "  )%NWL%. attr (  " class "  ,  " link "  )%NWL%. style (  " fill "  ,  " none "  )%NWL%. style (  " stroke "  ,  " #cccccc "  )%NWL%. style (  " stroke - width "  ,  " 1px "  )%NWL%. attr (  " d "  , diagonal )  ; %NWL%var node = g . selectAll (  "  . node "  )%NWL%2
}  ; %NWL%this . _conn . onmessage = function ( e )  {%NWL%var msg = parseMultiplexData ( e . data )  ; %NWL%if ( !msg )  {%NWL%log (  " Invalid multiplex packet received from server "  )  ; %NWL%self . _conn . close (  )  ; %NWL%return ;%NWL%}%NWL%var id = msg . id ; %NWL%var method = msg . method ; %NWL%var payload = msg . payload ; %NWL%8
assertEquals ( 1 , results . length )  ; %NWL%var retrievedRow = results [ 0 ]  ; %NWL%assertEquals (%NWL%' Region '  + String ( rowCount - 1 )  ,%NWL%retrievedRow . payload (  )  [  ' name '  ]  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%lf . testing . SmokeTester . prototype . testTransaction = function (  )  {%NWL%var rows = this . generateSampleRows_ (  )  ; %NWL%var r = this . r_ ; %NWL%var db = this . db_ ; %NWL%9
url : null ,%NWL%leftMargin : 0 ,%NWL%starWidth : 17 ,%NWL%starMargin : 4 ,%NWL%scale : 5 ,%NWL%snap : 1%NWL%}  ,%NWL%initialize : function ( options )  {%NWL%this . setOptions ( options )  ; %NWL%var activeColor = this . options . activeColor ; %NWL%var votedColor  = this . options . votedColor ; %NWL%9
}%NWL%}%NWL%}  ; %NWL%AuthenticationResult . prototype =  {  }  ; %NWL%AuthenticationResult . prototype . read = function ( input )  {%NWL%input . readStructBegin (  )  ; %NWL%while ( true )%NWL%{%NWL%var ret = input . readFieldBegin (  )  ; %NWL%var fname = ret . fname ; %NWL%var ftype = ret . ftype ; %NWL%9
if ( needle . indexOf ( haystack_of_substrings [ i ]  . trim (  )  ) ! =  - 1 ) return true ;%NWL%}%NWL%return false ;%NWL%}%NWL%}%NWL%SlimStat . add_event ( window ,  ' load '  , function (  )  {%NWL%if ( typeof SlimStatParams . disable_outbound_tracking =  =  ' undefined '  )  {%NWL%all_links = document . getElementsByTagName (  " a "  )  ; %NWL%var extensions_to_track =  ( typeof SlimStatParams . extensions_to_track ! =  ' undefined ' && SlimStatParams . extensions_to_track . length > 0 ) ? SlimStatParams . extensions_to_track . split (  '  ,  '  )  :  [  ]  ; %NWL%var to_ignore =  ( typeof SlimStatParams . outbound_classes_rel_href_to_ignore ! =  ' undefined ' && SlimStatParams . outbound_classes_rel_href_to_ignore . length > 0 ) ? SlimStatParams . outbound_classes_rel_href_to_ignore . split (  '  ,  '  )  :  [  ]  ; %NWL%var to_not_track =  ( typeof SlimStatParams . outbound_classes_rel_href_to_not_track ! =  ' undefined ' && SlimStatParams . outbound_classes_rel_href_to_not_track . length > 0 ) ? SlimStatParams . outbound_classes_rel_href_to_not_track . split (  '  ,  '  )  :  [  ]  ; %NWL%9
return func . apply ( null , slice . call ( arguments , 1 )  )  ;%NWL%}%NWL%return new UGen ( name )  ;%NWL%}  ; %NWL%cc . global [ name ]  = ugenInterface ; %NWL%cc . global [ name ]  [  " new "  ]  = ugenInterface ;%NWL%}%NWL%Object . keys ( spec )  . forEach ( function ( key )  {%NWL%if ( key . charAt ( 0 )  =  =  =  " $ "  )  {%NWL%var defaults = spec [ key ]  . defaults ; %NWL%var ctor  = spec [ key ]  . ctor ; %NWL%9
textArea . style . cssText =  ' position : absolute ; left :  - 100% '  ; %NWL%document . body . appendChild ( textArea )  ; %NWL%textArea . value = str ; %NWL%textArea . select (  )  ; %NWL%document . execCommand (  ' copy '  )  ; %NWL%document . body . removeChild ( textArea )  ;%NWL%}%NWL%var canvasUtils =  {%NWL%appendImageToCanvas : function ( argObj )  {%NWL%var scale = argObj . scale || 1 . 0 ; %NWL%var zoom = argObj . zoom || 1 . 0 ; %NWL%9
assertArrayEquals (  [  " x "  ,  " y "  ,  " zoom "  ]  , props (  { x : 1 , y : 2 , zoom : 3 }  )  )  ; %NWL%assertEquals ( 0 , props (  [  ]  )  . length )  ; %NWL%assertEquals ( 1 , props (  [ 1 ]  )  . length )  ; %NWL%assertEquals ( 2 , props (  [ 1 , 2 ]  )  . length )  ; %NWL%assertArrayEquals (  [  " 0 "  ]  , props (  [ 1 ]  )  )  ; %NWL%assertArrayEquals (  [  " 0 "  ,  " 1 "  ]  , props (  [ 1 , 2 ]  )  )  ; %NWL%assertArrayEquals (  [  " 0 "  ,  " 1 "  ,  " 2 "  ]  , props (  [ 1 , 2 , 3 ]  )  )  ; %NWL%var o =  {  }  ; %NWL%var a =  [  ]  ; %NWL%let i =  " outer_i "  ; %NWL%let s =  " outer_s "  ; %NWL%9
t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " updated "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " category "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " id "  )  )  ; %NWL%t . assertTrue ( !atomStore . hasAttribute ( items [ 0 ]  ,  " foo "  )  )  ; %NWL%t . assertTrue ( !atomStore . hasAttribute ( items [ 0 ]  ,  " bar "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " summary "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " content "  )  )  ; %NWL%t . assertTrue ( atomStore . hasAttribute ( items [ 0 ]  ,  " title "  )  )  ; %NWL%var summary = atomStore . getValue ( items [ 0 ]  ,  " summary "  )  ; %NWL%var content = atomStore . getValue ( items [ 0 ]  ,  " content "  )  ; %NWL%var title = atomStore . getValue ( items [ 0 ]  ,  " title "  )  ; %NWL%8
var qsRe =  /  ( page|returnSizes )  =  [ ^&? ]  + \&? / g ; %NWL%var qs = pageObject . pageLocation . search . replace ( qsRe ,  '  '  )  ; %NWL%var pinnedClass = !batchEmpty && OP . Batch . exists ( item . id ) ? ' pinned '  :  '  '  ; %NWL%var imageContainer = $ (  '  < div class =  " imageContainer photo - id -  '  + item . id +  '  '  + pinnedClass +  '  "  /  >  '  )  ; %NWL%var isFirstItemInResponse = typeof ( item . totalRows )  =  =  =  ' number '  ; %NWL%imageContainer . attr (  " data - waypoint - page "  , currentPage )  ; %NWL%if ( isFirstItemInResponse )%NWL%imageContainer . addClass (  ' first - in - response '  )  ; %NWL%var pathKey =  ' path '  + configuration [  ' thumbnailSize '  ]  ; %NWL%var defaultWidthValue = configuration [  ' defaultWidthValue '  ]  ; %NWL%var defaultHeightValue = configuration [  ' defaultHeightValue '  ]  ; %NWL%9
networkMagic : 0x0b110907 ,%NWL%port : 18333 ,%NWL%dnsSeeds :  [%NWL%' testnet - seed . bitcoin . petertodd . org '  ,%NWL%' testnet - seed . bluematt . me '  ,%NWL%' testnet - seed . alexykot . me '  ,%NWL%' testnet - seed . bitcoin . schildbach . de '%NWL%]  ,%NWL%}  )  ; %NWL%var livenet = getNetwork (  ' livenet '  )  ; %NWL%var testnet = getNetwork (  ' testnet '  )  ; %NWL%9
return this . to%NWL%}  ,%NWL%getBy : function (  )  {%NWL%if ( this . test . typeOf ( this . by )  =  =  ' Function '  )%NWL%return this . by . call ( this . test , this )%NWL%else%NWL%return this . by%NWL%}  ,%NWL%process : function (  )  {%NWL%var test = this . test ; %NWL%var next = this . next ; %NWL%9
log . error ( pkg . _id +  "  .  "  + stage ,  " continuing anyway "  )%NWL%return cb (  )%NWL%}%NWL%cb ( er )%NWL%}  )%NWL%}%NWL%function runHookLifecycle ( pkg , env , wd , unsafe , cb )  {%NWL%var stage = env . npm_lifecycle_event%NWL%, hook = path . join ( npm . dir ,  "  . hooks "  , stage )%NWL%, user = unsafe ? null : npm . config . get (  " user "  )%NWL%, group = unsafe ? null : npm . config . get (  " group "  )%NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
id : 86 ,%NWL%from_node : 77 , from :  ' xyz '  ,%NWL%to_node : 25 , to :  ' position '%NWL%}  ; %NWL%var connection_86 = nodegraph . createConnectionFromObject ( connection_86_data )  ; %NWL%var connection_96_data =  {%NWL%id : 96 ,%NWL%from_node : 87 , from :  ' xyz '  ,%NWL%to_node : 55 , to :  ' rotation '%NWL%}  ; %NWL%var connection_96 = nodegraph . createConnectionFromObject ( connection_96_data )  ; %NWL%4
" stroke - width "  :  " 1 . 5px "  }  )  ; %NWL%PE3 [ 2 ]  [ 1 ]  [ 0 ]  = g . addEdge ( P [ 1 ]  [ 4 ]  , C [ 2 ]  )  . css (  {  " stroke "  :  " SlateGray "  ,%NWL%" stroke - width "  :  " 1 . 5px "  }  )  ; %NWL%PE3 [ 2 ]  [ 1 ]  [ 1 ]  = g . addEdge ( C [ 2 ]  , P [ 1 ]  [ 5 ]  )  . css (  {  " stroke "  :  " SlateGray "  ,%NWL%" stroke - width "  :  " 1 . 5px "  }  )  ; %NWL%PE3 [ 2 ]  [ 2 ]  [ 0 ]  = g . addEdge ( C [ 2 ]  , P [ 3 ]  [ 4 ]  )  . css (  {  " stroke "  :  " SlateGray "  ,%NWL%" stroke - width "  :  " 1 . 5px "  }  )  ; %NWL%PE3 [ 2 ]  [ 2 ]  [ 1 ]  = g . addEdge ( P [ 3 ]  [ 5 ]  , C [ 2 ]  )  . css (  {  " stroke "  :  " SlateGray "  ,%NWL%" stroke - width "  :  " 1 . 5px "  }  )  ; %NWL%for ( var i = 0 ; i < 3 ; i +  +  )  {%NWL%for ( var j = 0 ; j < 3 ; j +  +  )  {%NWL%9
if ( 2 =  = arguments . length )  {%NWL%if (  ' number '  =  = typeof arguments [ 1 ]  )  {%NWL%this . statusCode = arguments [ 1 ]  ;%NWL%} else {%NWL%this . statusCode = obj ; %NWL%obj = arguments [ 1 ]  ;%NWL%}%NWL%}%NWL%var app = this . app ; %NWL%var replacer = app . get (  ' json replacer '  )  ; %NWL%var spaces = app . get (  ' json spaces '  )  ; %NWL%9
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
job . _state = hash . state ; %NWL%job . _error = hash . error ; %NWL%job . created_at = hash . created_at ; %NWL%job . promote_at = hash . promote_at ; %NWL%job . updated_at = hash . updated_at ; %NWL%job . failed_at = hash . failed_at ; %NWL%job . duration = hash . duration ; %NWL%job . _removeOnComplete = hash . removeOnComplete ; %NWL%try {%NWL%if ( hash . data ) job . data = JSON . parse ( hash . data )  ; %NWL%if ( hash . result ) job . result = JSON . parse ( hash . result )  ; %NWL%9
Components . utils . import (  " resource :  /  / gre / modules / XPCOMUtils . jsm "  )  ; %NWL%Components . utils . import (  " resource :  /  / gre / modules / Services . jsm "  )  ; %NWL%Components . utils . import (  " resource :  /  / app / modules / urlHelper . jsm "  )  ; %NWL%const nsISupports    = Components . interfaces . nsISupports ; %NWL%const nsIBrowserDOMWindow  = Components . interfaces . nsIBrowserDOMWindow ; %NWL%const nsIBrowserHandler   = Components . interfaces . nsIBrowserHandler ; %NWL%const nsIBrowserHistory   = Components . interfaces . nsIBrowserHistory ; %NWL%const nsIChannel    = Components . interfaces . nsIChannel ; %NWL%const nsICommandLine   = Components . interfaces . nsICommandLine ; %NWL%const nsICommandLineHandler  = Components . interfaces . nsICommandLineHandler ; %NWL%const nsIContentHandler   = Components . interfaces . nsIContentHandler ; %NWL%3
return this%NWL%}%NWL%$ ( document )  . on (  ' click . bs . collapse . data - api '  ,  '  [ data - toggle = collapse ]  '  , function ( e )  {%NWL%var $this  = $ ( this )  , href%NWL%var target  = $this . attr (  ' data - target '  )%NWL%|| e . preventDefault (  )%NWL%|| ( href = $this . attr (  ' href '  )  ) && href . replace (  /  .  *  ( ? = # [ ^\s ]  + $ )  /  ,  '  '  )  /  / strip for ie7%NWL%var $target = $ ( target )%NWL%var data  = $target . data (  ' bs . collapse '  )%NWL%var option  = data ? ' toggle '  : $this . data (  )%NWL%var parent  = $this . attr (  ' data - parent '  )%NWL%4
greaterThan :  "  "  ,%NWL%lowerThan :  "  "  ,%NWL%group :  "  "  ,%NWL%decimal :  "  "  ,%NWL%pattern :  " # , ##0 . ### "  ,%NWL%isWrong : false ,%NWL%regExpGen : function (  )  { return this . generateRegExp (  )  . regexp ;  }  ,%NWL%generateRegExp : function ( options )  {%NWL%options = options || {  }  ; %NWL%var pattern = this . pattern ; %NWL%var group = this . group ; %NWL%9
]  , mediaTypes = keySet ( mediaTypes_ )  ; %NWL%var mediaFeatures_ =  [%NWL%" width "  ,  " min - width "  ,  " max - width "  ,  " height "  ,  " min - height "  ,  " max - height "  ,%NWL%" device - width "  ,  " min - device - width "  ,  " max - device - width "  ,  " device - height "  ,%NWL%" min - device - height "  ,  " max - device - height "  ,  " aspect - ratio "  ,%NWL%" min - aspect - ratio "  ,  " max - aspect - ratio "  ,  " device - aspect - ratio "  ,%NWL%" min - device - aspect - ratio "  ,  " max - device - aspect - ratio "  ,  " color "  ,  " min - color "  ,%NWL%" max - color "  ,  " color - index "  ,  " min - color - index "  ,  " max - color - index "  ,%NWL%" monochrome "  ,  " min - monochrome "  ,  " max - monochrome "  ,  " resolution "  ,%NWL%" min - resolution "  ,  " max - resolution "  ,  " scan "  ,  " grid "%NWL%]  , mediaFeatures = keySet ( mediaFeatures_ )  ; %NWL%0
no_internet . show (  )  ;%NWL%}  ; %NWL%xhr . onload = function (  )  {%NWL%try {%NWL%var newsitems = JSON . parse ( this . responseText )  . features ; %NWL%for ( var i = 0 ; i < newsitems . length ; i +  +  )  {%NWL%var raw_location = newsitems [ i ]  . geometry . coordinates ; %NWL%var clean_location = raw_location . toString (  )  ; %NWL%var location = clean_location . split (  '  ,  '  )  ; %NWL%var type = newsitems [ i ]  . properties . type ; %NWL%var title = newsitems [ i ]  . properties . title ; %NWL%9
const nsISupportsString   = Components . interfaces . nsISupportsString ; %NWL%const nsIURIFixup    = Components . interfaces . nsIURIFixup ; %NWL%const nsIWebNavigation   = Components . interfaces . nsIWebNavigation ; %NWL%const nsIWindowMediator   = Components . interfaces . nsIWindowMediator ; %NWL%const nsIWindowWatcher   = Components . interfaces . nsIWindowWatcher ; %NWL%const nsICategoryManager  = Components . interfaces . nsICategoryManager ; %NWL%const nsIWebNavigationInfo  = Components . interfaces . nsIWebNavigationInfo ; %NWL%const nsIBrowserSearchService = Components . interfaces . nsIBrowserSearchService ; %NWL%const nsICommandLineValidator = Components . interfaces . nsICommandLineValidator ; %NWL%const nsIXULAppInfo    = Components . interfaces . nsIXULAppInfo ; %NWL%const nsIObserver    = Components . interfaces . nsIObserver ; %NWL%0
{%NWL%consumes :  [  " Plugin "  ,  " tabManager "  ,  " preferences "  ,  " settings "  ,  " ui "  ,  " util "  ,  " commands "  ,  " preferences . general "  ]  ,%NWL%provides :  [  ]  ,%NWL%setup : main%NWL%}%NWL%]  , architect )  ; %NWL%function main ( options , imports , register )  {%NWL%var tabs = imports . tabManager ; %NWL%var ui = imports . ui ; %NWL%var prefs = imports . preferences ; %NWL%var settings = imports . settings ; %NWL%8
check = makeCheck ( check )  ; %NWL%var prev = token . prev ; %NWL%while ( prev && check ( prev )  )  {%NWL%remove ( prev )  ; %NWL%prev = prev . prev ;%NWL%}%NWL%}%NWL%exports . removeAdjacentAfter = removeAdjacentAfter ; %NWL%function removeAdjacentAfter ( token , check )  {%NWL%check = makeCheck ( check )  ; %NWL%var next = token . next ; %NWL%1
}%NWL%}  )  ; %NWL%var addField = React . createClass (  { displayName :  ' addField '  ,%NWL%mixins :  [ CreateFieldsMixin ]  ,%NWL%getInitialState : function (  )  {%NWL%return { fields : this . props . fields , generatedFields :  [  ]  , bulletGroup : this . props . fieldCount }  ;%NWL%}  ,%NWL%generateFields : function ( fields , bulletGroup )  {%NWL%var bulletId  = this . state . generatedFields . length * this . props . fieldCount ; %NWL%var updateValues = this . props . updateValues ; %NWL%var id = this . props . id ; %NWL%9
)  ; %NWL%if ( itemsAdded )%NWL%{%NWL%this . needsRedraw = true ;%NWL%}%NWL%}%NWL%RSSCanvasProgram . prototype . addItem = function ( item )%NWL%{%NWL%var title = item . find (  ' title '  )  . text (  )  ; %NWL%var link = item . find (  ' link '  )  . text (  )  ; %NWL%var description = item . find (  ' description '  )  . text (  )  ; %NWL%8
} else {%NWL%button . top = 5 ; %NWL%button . width = 300 ; %NWL%button . height = 30 ; %NWL%tableViewOptions . top = 45 ; %NWL%win . add ( button )  ;%NWL%}%NWL%var tableview = Titanium . UI . createTableView ( tableViewOptions )  ; %NWL%function showClickEventInfo ( e , islongclick )  {%NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%9
this . _installs [ this . _currentInstall ]  . removeListener ( this )  ; %NWL%this . _installs [ this . _currentInstall ]  . cancel (  )  ;%NWL%}  ,%NWL%onDownloadStarted : function ( aInstall )  {%NWL%var strings = document . getElementById (  " updateStrings "  )  ; %NWL%var label = strings . getFormattedString (  " downloadingPrefix "  ,  [ aInstall . name ]  )  ; %NWL%var actionItem = document . getElementById (  " actionItem "  )  ; %NWL%actionItem . value = label ;%NWL%}  ,%NWL%onDownloadProgress : function ( aInstall )  {%NWL%var downloadProgress = document . getElementById (  " downloadProgress "  )  ; %NWL%6
var uvs = this . uvs ; %NWL%var length = vertices . length / 2 ; %NWL%this . count +  +  ; %NWL%for ( var i = 0 ; i < length - 2 ; i +  +  )  {%NWL%var index = i * 2 ; %NWL%this . _renderCanvasDrawTriangle ( context , vertices , uvs , index ,  ( index + 2 )  ,  ( index + 4 )  )  ;%NWL%}%NWL%}  ; %NWL%PIXI . Strip . prototype . _renderCanvasTriangles = function ( context )%NWL%{%NWL%var vertices = this . vertices ; %NWL%0
app . get (  '  /  : id /  : revision / edit? '  , function ( req , res , next )  {%NWL%var script = req . script ; %NWL%var host = req . host ; %NWL%res . render (  ' home '  ,  {%NWL%script : JSON . stringify ( script . toJSON (  )  )  ,%NWL%title : host%NWL%}  )  ;%NWL%}  )  ; %NWL%app . get (  '  /  : id '  , function ( req , res , next )  {%NWL%var id = req . params . id ; %NWL%var script = req . script ; %NWL%2
return result ;%NWL%}  ,%NWL%setOneToOneProjection : function (  )  {%NWL%var gl = this . gl ; %NWL%var width = gl . viewportWidth ; %NWL%var height = gl . viewportHeight ; %NWL%var halfWidth =  ( width / 2 )  ; %NWL%var halfHeight =  ( height / 2 )  ; %NWL%gl . viewport ( 0 , 0 , width , height )  ; %NWL%var pointWidth = this . pointWidth ; %NWL%var pointHeight = this . pointHeight ; %NWL%3
}  )  ; %NWL%return ;%NWL%}%NWL%var source = req . body . source ; %NWL%if ( !source || typeof ( req . body . options ) ! =  =  " string "  )  {%NWL%return next ( new Error (  " Bad request "  )  )  ;%NWL%}%NWL%var options = req . body . options . split (  '  '  )  . filter ( function ( x )  {%NWL%return x ! =  =  "  "  ;%NWL%}  )  ; %NWL%var filters = req . body . filters ; %NWL%3
}  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var dump = function ( tvar )  {%NWL%fs . writeFileSync (  "  .  / dump . json "  , JSON . stringify ( tvar )  )  ;%NWL%}%NWL%var gulp = require (  ' gulp '  )  ; %NWL%var htmlmin = require (  ' gulp - htmlmin '  )  ; %NWL%var ngmin = require (  ' gulp - ngmin '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var clean = require (  ' gulp - clean '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%6
}%NWL%if ( !goog . isObject ( data ) || !data [ goog . messaging . PortChannel . FLAG ]  )  {%NWL%return ;%NWL%}%NWL%if ( browserEvent . origin &&%NWL%!this . checkMessageOrigin ( browserEvent . origin )  )  {%NWL%return ;%NWL%}%NWL%if ( this . validateMessage_ ( data )  )  {%NWL%var serviceName = data [  ' serviceName '  ]  ; %NWL%var payload = data [  ' payload '  ]  ; %NWL%9
$form . find (  '  . errormessage '  )  . css (  ' visibility '  ,  ' hidden '  )  ; %NWL%if ( isValidPassword ( pass ) && pass =  =  = pass_repeat )  {%NWL%$form . find (  '  . submit '  )  . removeClass (  ' disabled '  )  ;%NWL%} else {%NWL%$form . find (  '  . submit '  )  . addClass (  ' disabled '  )  ;%NWL%}%NWL%}  ; %NWL%var testChangePasswordSubmitEnable = function (  )  {%NWL%var $form = $ (  ' #changepassword_form '  )  ; %NWL%var oldpass = $form . find (  '  . oldpass '  )  . val (  )  ; %NWL%var pass = $form . find (  '  . pass '  )  . val (  )  ; %NWL%9
}%NWL%req . session . loggedIn = true ; %NWL%req . session . accountId = account . _id ; %NWL%res . send ( account . _id )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%app . post (  '  / register '  , function ( req , res )  {%NWL%var firstName = req . param (  ' firstName '  ,  '  '  )  ; %NWL%var lastName = req . param (  ' lastName '  ,  '  '  )  ; %NWL%var email = req . param (  ' email '  , null )  ; %NWL%var password = req . param (  ' password '  , null )  ; %NWL%9
this . close ( e )  ;%NWL%}  )  ;%NWL%}%NWL%e = e || $ . Event (  )  ; %NWL%e . type =  " onBeforeLoad "  ; %NWL%$self . trigger ( e )  ; %NWL%if ( e . isDefaultPrevented (  )  )  { return self ;  }%NWL%opened = true ; %NWL%if ( expose )  { overlay . expose (  )  . load ( e )  ;  }%NWL%var top = conf . top ; %NWL%var left = conf . left ; %NWL%9
console . error (  " skipping test , because windows and shebangs "  )%NWL%return%NWL%}%NWL%var common = require (  "  .  .  / common - tap . js "  )%NWL%var mr = require (  " npm - registry - mock "  )%NWL%var test = require (  " tap "  )  . test%NWL%var npm = require . resolve (  "  .  .  /  .  .  / bin / npm - cli . js "  )%NWL%var node = process . execPath%NWL%var rimraf = require (  " rimraf "  )%NWL%var spawn = require (  " child_process "  )  . spawn%NWL%var fs = require (  " fs "  )%NWL%8
, hyperquest = require (  ' hyperquest '  )%NWL%, config = require (  '  .  / config . json '  )%NWL%, plot_config = require (  '  .  / plot_config . json '  )%NWL%, T = new Twit (  {%NWL%consumer_key : config . twitter_consumer_key%NWL%, consumer_secret : config . twitter_consumer_secret%NWL%, access_token : config . twitter_access_token%NWL%, access_token_secret : config . twitter_access_token_secret%NWL%}  )%NWL%, csv = require (  ' csv '  )%NWL%, request = require (  ' request '  )%NWL%0
var R2_1 = this . _R2_1 ; %NWL%var R3_1 = this . _R3_1 ; %NWL%var R0_0 = this . _R0_0 ; %NWL%var R1_0 = this . _R1_0 ; %NWL%var R2_0 = this . _R2_0 ; %NWL%var R3_0 = this . _R3_0 ; %NWL%var R4_0 = this . _R4_0 ; %NWL%var R5_0 = this . _R5_0 ; %NWL%var R6_0 = this . _R6_0 ; %NWL%var R7_0 = this . _R7_0 ; %NWL%var R8_0 = this . _R8_0 ; %NWL%0
}  ; %NWL%p . destroy = function (  )  {%NWL%if ( !this . shape )  { return ;  }%NWL%this . shape . remove ( this . rectShape )  ; %NWL%this . shape . remove ( this . labelShape )  ; %NWL%this . figure . group . remove ( this . shape )  ; %NWL%this . shape = this . rectShape = this . labelShape = null ;%NWL%}  ; %NWL%p . getBBox = function (  )  {%NWL%var x = Math . min ( this . start . x , this . end . x )  ; %NWL%var y = Math . min ( this . start . y , this . end . y )  ; %NWL%9
expect ( cache . count )  . toBe ( 3 )  ; %NWL%expect ( evicted . length )  . toBe ( 0 )  ; %NWL%var d = cache . get (  ' d '  )  ; %NWL%expect ( evicted )  . toEqual (  [  ' evict : a =  { a }  '  ]  )  ; %NWL%expect ( d )  . toBe (  '  { d }  '  )  ; %NWL%expect ( cache . count )  . toBe ( 3 )  ; %NWL%expect ( dump (  )  )  . toBe (  ' 3 , d =  { d }  , c =  { c }  , b =  { b }  '  )  ;%NWL%}  )  ; %NWL%it (  ' should remove everything on clear '  , function (  )  {%NWL%var a = cache . get (  ' a '  )  ; %NWL%var b = cache . get (  ' b '  )  ; %NWL%2
if ( dojo . type =  = type )  {%NWL%dojo . coords = this . _initCoordinates ( dojo . node )  ;%NWL%}%NWL%}  , this )  ; %NWL%this . _dojoList = dojoList ;%NWL%}  ,%NWL%_getHoverDojoArea : function ( coords )  {%NWL%this . _oldDojoArea = this . _currentDojoArea ; %NWL%this . _currentDojoArea = null ; %NWL%var x = coords . x ; %NWL%var y = coords . y ; %NWL%9
} else if ( typeof enumValues [ 0 ]  =  =  " boolean "  )  {%NWL%var text =  ( enumValues [ 0 ] ? " true "  :  " false "  )  ; %NWL%element . innerHTML =  '  < span class =  " json - boolean -  '  + text +  '  "  >  '  + text +  '  <  / span >  '  ;%NWL%} else {%NWL%element . innerHTML =  '  < span class =  " json - raw "  >  '  + escapeHtml ( JSON . stringify ( enumValues [ 0 ]  )  )  +  '  <  / span >  '  ;%NWL%}%NWL%return ;%NWL%}%NWL%var select = document . createElement (  " select "  )  ; %NWL%for ( var i = 0 ; i < enumValues . length ; i +  +  )  {%NWL%var option = document . createElement (  " option "  )  ; %NWL%8
if ( key ! =  =  ' icon '  )  {%NWL%lineOptions [ key ]  = this . options [ key ]  ;%NWL%}%NWL%}%NWL%var calloutLine = new L . CalloutLine ( this . _latlng , lineOptions )  ; %NWL%this . addLayer ( calloutLine )  ; %NWL%return calloutLine ;%NWL%}  ,%NWL%addIcon : function ( direction , position )  {%NWL%var size = this . options . size ; %NWL%var icon = this . options . icon ; %NWL%9
return frame ;%NWL%}  ; %NWL%__exports__ . createFrame = createFrame ;%NWL%}  )  ; %NWL%define (%NWL%' handlebars / runtime '  ,  [  "  .  / utils "  ,  "  .  / exception "  ,  "  .  / base "  ,  " exports "  ]  ,%NWL%function ( __dependency1__ , __dependency2__ , __dependency3__ , __exports__ )  {%NWL%var Utils = __dependency1__ ; %NWL%var Exception = __dependency2__ [  " default "  ]  ; %NWL%var COMPILER_REVISION = __dependency3__ . COMPILER_REVISION ; %NWL%var REVISION_CHANGES = __dependency3__ . REVISION_CHANGES ; %NWL%9
loadtype  :  ' GET '  ,%NWL%loadtext  :  ' Loading .  .  .  '  ,%NWL%placeholder :  ' Click to edit '  ,%NWL%loaddata  :  {  }  ,%NWL%submitdata :  {  }%NWL%}  ; %NWL%if ( options )  {%NWL%$ . extend ( settings , options )  ;%NWL%}%NWL%var plugin  = $ . editable . types [ settings . type ]  . plugin || function (  )  {  }  ; %NWL%var submit  = $ . editable . types [ settings . type ]  . submit || function (  )  {  }  ; %NWL%9
log . info (  ' Player '  + pc +  ' collided with physics changer '  + this . tsid )  ; %NWL%if ( this . state =  = 0 )  {%NWL%log . info (  ' Physics changer '  + this . tsid +  ' disabled .  '  )  ; %NWL%return ;%NWL%}%NWL%var gravity = this . getInstanceProp (  ' gravity '  )  ; %NWL%var vx_max = this . getInstanceProp (  ' vx_max '  )  ; %NWL%var vy_max = this . getInstanceProp (  ' vy_max '  )  ; %NWL%var vy_jump = this . getInstanceProp (  ' vy_jump '  )  ; %NWL%var vx_accel_add_in_floor = this . getInstanceProp (  ' vx_accel_add_in_floor '  )  ; %NWL%var vx_accel_add_in_air = this . getInstanceProp (  ' vx_accel_add_in_air '  )  ; %NWL%5
assert . equal ( lines [ 4 ]  . origin (  )  , Diff . LINE . ADDITION )  ; %NWL%assert . equal ( lines [ 4 ]  . contentLen (  )  , 162 )  ;%NWL%}  )  ; %NWL%it (  " can diff the workdir with index "  , function (  )  {%NWL%var patches = this . workdirDiff . patches (  )  ; %NWL%assert . equal ( patches . length , 3 )  ; %NWL%assert ( patches [ 2 ]  . isUntracked (  )  )  ; %NWL%var oldFile = patches [ 2 ]  . delta . oldFile (  )  ; %NWL%assert . equal ( oldFile . path (  )  ,  " wddiff . txt "  )  ; %NWL%assert . equal ( oldFile . size (  )  , 0 )  ; %NWL%var newFile = patches [ 2 ]  . delta . newFile (  )  ; %NWL%7
var container = document . createElement (  ' div '  )  ; %NWL%var resizeEvent = function (  )  {%NWL%var style =  ' position : relative ;  '  ;%NWL%[%NWL%' margin - top '  ,  ' margin - left '  ,  ' margin - right '  ,  ' margin - bottom '%NWL%]  . forEach ( function ( item )  {%NWL%style +  = item +  '  :  '  +%NWL%getCSSProperty ( element , container , item )  +  '  ;  '  ;%NWL%}  )  ; %NWL%var width = getCSSProperty ( element , container ,  ' width '  )  ; %NWL%var height = getCSSProperty ( element , container ,  ' height '  )  ; %NWL%9
generator . setSourceContent ( sourceFile , content )  ;%NWL%}%NWL%}  )  ; %NWL%return generator ;%NWL%}  ; %NWL%SourceMapGenerator . prototype . addMapping =%NWL%function SourceMapGenerator_addMapping ( aArgs )  {%NWL%var generated = util . getArg ( aArgs ,  ' generated '  )  ; %NWL%var original = util . getArg ( aArgs ,  ' original '  , null )  ; %NWL%var source = util . getArg ( aArgs ,  ' source '  , null )  ; %NWL%var name = util . getArg ( aArgs ,  ' name '  , null )  ; %NWL%8
var logout    = require (  "  .  / controllers / logout "  )  ; %NWL%var company    = require (  "  .  / controllers / company "  )  ; %NWL%var authUser    = require (  "  .  / controllers / authUser "  )  ; %NWL%var giftCategory   = require (  "  .  / controllers / giftCategory "  )  ; %NWL%var stockInType   = require (  "  .  / controllers / stockInType "  )  ; %NWL%var gift     = require (  "  .  / controllers / gift "  )  ; %NWL%var paymentType   = require (  "  .  / controllers / paymentType "  )  ; %NWL%var stockIn    = require (  "  .  / controllers / stockIn "  )  ; %NWL%var stockOut    = require (  "  .  / controllers / stockOut "  )  ; %NWL%var inventory   = require (  "  .  / controllers / inventory "  )  ; %NWL%var limitation   = require (  "  .  / controllers / limitation "  )  ; %NWL%0
var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = ed . dom . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = ed . dom . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var bordercolor = convertRGBToHex ( getStyle ( tdElm ,  ' bordercolor '  ,  ' borderLeftColor '  )  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( tdElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var className = ed . dom . getAttrib ( tdElm ,  ' class '  )  ; %NWL%var backgroundimage = getStyle ( tdElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  [  ' \ "  ] ? (  [ ^ ' \ "  ]  *  )  [  ' \ "  ] ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ; %NWL%var id = ed . dom . getAttrib ( tdElm ,  ' id '  )  ; %NWL%var lang = ed . dom . getAttrib ( tdElm ,  ' lang '  )  ; %NWL%1
res . render (  " login "  ,  {%NWL%res : res%NWL%, sessionCode : sessionCode%NWL%, error : error }  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%this . process_loginHandler = function ( req , res )  {%NWL%var sessionCode = req . param (  " ses "  , null )  ; %NWL%var username = req . param (  " username "  , null )  ; %NWL%var password = req . param (  " password "  , null )  ; %NWL%9
]  , mediaTypes = keySet ( mediaTypes_ )  ; %NWL%var mediaFeatures_ =  [%NWL%" width "  ,  " min - width "  ,  " max - width "  ,  " height "  ,  " min - height "  ,  " max - height "  ,%NWL%" device - width "  ,  " min - device - width "  ,  " max - device - width "  ,  " device - height "  ,%NWL%" min - device - height "  ,  " max - device - height "  ,  " aspect - ratio "  ,%NWL%" min - aspect - ratio "  ,  " max - aspect - ratio "  ,  " device - aspect - ratio "  ,%NWL%" min - device - aspect - ratio "  ,  " max - device - aspect - ratio "  ,  " color "  ,  " min - color "  ,%NWL%" max - color "  ,  " color - index "  ,  " min - color - index "  ,  " max - color - index "  ,%NWL%" monochrome "  ,  " min - monochrome "  ,  " max - monochrome "  ,  " resolution "  ,%NWL%" min - resolution "  ,  " max - resolution "  ,  " scan "  ,  " grid "%NWL%]  , mediaFeatures = keySet ( mediaFeatures_ )  ; %NWL%0
onUpdateFinished : function ( aAddon , status )  {%NWL%if ( aAddon . active )%NWL%AddonManagerPrivate . removeStartupChange (  " disabled "  , aAddon . id )  ; %NWL%if ( status ! = AddonManager . UPDATE_STATUS_NO_ERROR )%NWL%gUpdateWizard . errorItems . push ( aAddon )  ;%NWL%+  + this . _completeCount ; %NWL%var updateStrings = document . getElementById (  " updateStrings "  )  ; %NWL%var status = document . getElementById (  " versioninfo . status "  )  ; %NWL%var statusString = updateStrings . getFormattedString (  " statusPrefix "  ,  [ aAddon . name ]  )  ; %NWL%status . setAttribute (  " value "  , statusString )  ; %NWL%var progress = document . getElementById (  " versioninfo . progress "  )  ; %NWL%7
this . i2e02 = ti2 [ 2 ]  ; %NWL%this . i2e10 = ti2 [ 3 ]  ; %NWL%this . i2e11 = ti2 [ 4 ]  ; %NWL%this . i2e12 = ti2 [ 5 ]  ; %NWL%this . i2e20 = ti2 [ 6 ]  ; %NWL%this . i2e21 = ti2 [ 7 ]  ; %NWL%this . i2e22 = ti2 [ 8 ]  ; %NWL%var frequency = this . limitMotor . frequency ; %NWL%var enableSpring = frequency > 0 ; %NWL%var enableLimit = this . lowerLimit <  = this . upperLimit ; %NWL%var angle = this . limitMotor . angle ; %NWL%7
}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%7
var input =  ' subarray ' in src ?%NWL%src . subarray ( srcOffset , srcOffset + this . numComps )  : %NWL%Array . prototype . slice . call ( src , srcOffset , srcOffset + this . numComps )  ; %NWL%var tinted = this . tintFn ( input )  ; %NWL%this . base . getRgbItem ( tinted , 0 , dest , destOffset )  ;%NWL%}  ,%NWL%getRgbBuffer : function AlternateCS_getRgbBuffer ( src , srcOffset , count ,%NWL%dest , destOffset , bits ,%NWL%alpha01 )  {%NWL%var tintFn = this . tintFn ; %NWL%var base = this . base ; %NWL%9
webGL . data . push ( webGLData )  ;%NWL%}%NWL%}%NWL%webGLData . dirty = true ; %NWL%return webGLData ;%NWL%}  ; %NWL%PIXI . WebGLGraphics . buildRectangle = function ( graphicsData , webGLData )%NWL%{%NWL%var rectData = graphicsData . shape ; %NWL%var x = rectData . x ; %NWL%var y = rectData . y ; %NWL%9
changeNode1 . receive (  { pay :  { load :  " changeMe "  }  }  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' #change '  , function (  )  {%NWL%it (  ' changes the value of the message property '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " changeNode1 "  ,  " type "  :  " change "  ,  " action "  :  " change "  ,  " property "  :  " payload "  ,  " from "  :  " Hello "  ,  " to "  :  " Goodbye "  ,  " reg "  : false ,  " name "  :  " changeNode "  ,  " wires "  :  [  [  " helperNode1 "  ]  ]  }  ,%NWL%{ id :  " helperNode1 "  , type :  " helper "  , wires :  [  ]  }  ]  ; %NWL%helper . load ( changeNode , flow , function (  )  {%NWL%var changeNode1 = helper . getNode (  " changeNode1 "  )  ; %NWL%var helperNode1 = helper . getNode (  " helperNode1 "  )  ; %NWL%9
function cloneDate ( date )  {%NWL%return new Date (  + date )  ;%NWL%}%NWL%function cloneArray ( arr )  {%NWL%return arr . slice (  )  ;%NWL%}%NWL%module . exports = clone ;%NWL%}  ,  {  "  .  .  / object / mixIn "  : 18 ,  "  .  / isPlainObject "  : 11 ,  "  .  / kindOf "  : 12 }  ]  , 7 :  [ function ( _dereq_ , module , exports )  {%NWL%var clone = _dereq_ (  '  .  / clone '  )  ; %NWL%var forOwn = _dereq_ (  '  .  .  / object / forOwn '  )  ; %NWL%var kindOf = _dereq_ (  '  .  / kindOf '  )  ; %NWL%8
}%NWL%var UserStorage_store_result = function ( args )  {%NWL%}%NWL%UserStorage_store_result . prototype =  {  }%NWL%UserStorage_store_result . prototype . read = function ( input )  {%NWL%var ret = input . readStructBegin (  )%NWL%while ( 1 )%NWL%{%NWL%var ret = input . readFieldBegin (  )%NWL%var fname = ret . fname%NWL%var ftype = ret . ftype%NWL%9
this . left = start - this . width / 2 ;%NWL%}%NWL%box . style . left = this . left +  ' px '  ; %NWL%line . style . left =  ( start - this . props . line . width / 2 )  +  ' px '  ; %NWL%dot . style . left =  ( start - this . props . dot . width / 2 )  +  ' px '  ;%NWL%}  ; %NWL%BoxItem . prototype . repositionY = function (  )  {%NWL%var orientation = this . options . orientation ; %NWL%var box = this . dom . box ; %NWL%var line = this . dom . line ; %NWL%var dot = this . dom . dot ; %NWL%8
pointer . animate (  {%NWL%opacity : 1 ,%NWL%paddingTop : 0%NWL%}  , MOVE_TIME )  . delay ( PAUSE_TIME )  . fadeOut ( function (  )  {%NWL%pointer . remove (  )  ;%NWL%}  )  ;%NWL%}%NWL%return function ErrorHelp ( options )  {%NWL%var self =  {  }  ; %NWL%var codeMirror = options . codeMirror ; %NWL%var template = options . template ; %NWL%9
var assert = require (  " assert "  )  ; %NWL%var fs = require (  " fs "  )  ; %NWL%var networking = require (  "  .  .  / lib / networking "  )  ; %NWL%var helpers = require (  "  .  .  / lib / helpers "  )  ; %NWL%var logging = require (  "  .  .  / lib / logging "  )  ; %NWL%var config = require (  "  .  .  / lib / config "  )  ; %NWL%var skins = require (  "  .  .  / lib / skins "  )  ; %NWL%var cache = require (  "  .  .  / lib / cache "  )  ; %NWL%var server = require (  "  .  .  / lib / server "  )  ; %NWL%var cleaner = require (  "  .  .  / lib / cleaner "  )  ; %NWL%var request = require (  " request "  )  ; %NWL%0
id : 24 ,%NWL%from_node : 14 , from :  ' out '  ,%NWL%to_node : 1 , to :  ' scene '%NWL%}  ; %NWL%var connection_24 = nodegraph . createConnectionFromObject ( connection_24_data )  ; %NWL%var connection_42_data =  {%NWL%id : 42 ,%NWL%from_node : 25 , from :  ' out '  ,%NWL%to_node : 34 , to :  ' in5 '%NWL%}  ; %NWL%var connection_42 = nodegraph . createConnectionFromObject ( connection_42_data )  ; %NWL%4
settings . audioEnabled = true ;%NWL%}%NWL%}  , this )  ; %NWL%var soundBtn = new cc . Menu ( toggler )  ; %NWL%soundBtn . setPosition ( cc . p ( winSize . width - 50 , winSize . height - 45 )  )  ; %NWL%this . addChild ( soundBtn )  ; %NWL%this . scheduleUpdate (  )  ;%NWL%}  ,%NWL%update : function ( dt )  {%NWL%var statistics = this . statistics ; %NWL%var indicators = this . indicators ; %NWL%9
Session . set (  " createCoords "  ,  { x : x , y : y }  )  ; %NWL%Session . set (  " createError "  , null )  ; %NWL%Session . set (  " showCreateDialog "  , true )  ;%NWL%}  ; %NWL%Template . page . showCreateDialog = function (  )  {%NWL%return Session . get (  " showCreateDialog "  )  ;%NWL%}  ; %NWL%Template . createDialog . events (  {%NWL%' click . save '  : function ( event , template )  {%NWL%var title = template . find (  "  . title "  )  . value ; %NWL%var description = template . find (  "  . description "  )  . value ; %NWL%9
, t = true%NWL%, ie =  / msie / i . test ( ua )%NWL%, chrome =  / chrome / i . test ( ua )%NWL%, phantom =  / phantom / i . test ( ua )%NWL%, safari =  / safari / i . test ( ua ) && !chrome && !phantom%NWL%, iphone =  / iphone / i . test ( ua )%NWL%, ipad =  / ipad / i . test ( ua )%NWL%, touchpad =  / touchpad / i . test ( ua )%NWL%, android =  / android / i . test ( ua )%NWL%, opera =  / opera / i . test ( ua )%NWL%, firefox =  / firefox / i . test ( ua )%NWL%2
if ( nconfError )  {%NWL%logger . error ( nconfError )  ;%NWL%}%NWL%var port = nconf . get (  ' http : port '  )  ; %NWL%var expressModule = require (  ' express '  )  ; %NWL%var express  = expressModule (  )  ; %NWL%var httpServer  = require (  ' http '  )  . createServer ( express )  ; %NWL%var io    = require (  ' socket . io '  )  . listen ( httpServer ,  { log : false }  )  ; %NWL%var Underscore  = require (  ' underscore '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var reactify  = require (  ' reactify '  )  ; %NWL%9
totalDuration +  = totalDayDuration ; %NWL%totalDayDuration = 0 ;%NWL%}%NWL%}  )  ; %NWL%out +  =  '  < h3 > Total :  '  + computeDuration ( totalDuration )  +  '  ,  (  '  + computeHourDuration ( totalDuration )  +  ' h )  <  / h3 >  '  ;%NWL%}%NWL%return out ;%NWL%}  ; %NWL%printTaskTime = function ( taskTime )  {%NWL%var start = moment ( taskTime . start )  . format ( Session . get (  ' timeFormat '  )  )  ; %NWL%var end = moment ( taskTime . end )  . format ( Session . get (  ' timeFormat '  )  )  ; %NWL%9
if ( self . replset . auth . length (  )  =  = 0 ) return _callback ( null )  ; %NWL%if ( self . replset . auth . length (  )  > 0 )  {%NWL%var pending = self . replset . auth . length (  )  ; %NWL%var connections = _server . allRawConnections (  )  ; %NWL%var pendingAuthConn = connections . length ; %NWL%var connectionFunction = function ( _auth , _connection , __callback )  {%NWL%var pending = _auth . length (  )  ; %NWL%for ( var j = 0 ; j < pending ; j +  +  )  {%NWL%var _auth = _auth . get ( j )  ; %NWL%var username = _auth . username ; %NWL%var password = _auth . password ; %NWL%9
}%NWL%if ( this . graph . background ! = null )%NWL%{%NWL%node . setAttribute (  ' background '  , this . graph . background )  ;%NWL%}%NWL%return node ;%NWL%}  ; %NWL%Editor . prototype . updateGraphComponents = function (  )%NWL%{%NWL%var graph = this . graph ; %NWL%var outline = this . outline ; %NWL%9
var minDistNormal = intersectConvex_minDistNormal ; %NWL%var normal = intersectConvex_normal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var faceList =  ( options && options . faceList ) || null ; %NWL%var faces = shape . faces ,%NWL%vertices = shape . vertices ,%NWL%normals = shape . faceNormals ; %NWL%var direction = this . _direction ; %NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%9
var height = this . piskelController . getHeight (  )  ,%NWL%width = this . piskelController . getWidth (  )  ; %NWL%if ( sizeInput =  =  = this . widthInput )  {%NWL%this . heightInput . value = Math . round ( value * height / width )  ;%NWL%} else if ( sizeInput =  =  = this . heightInput )  {%NWL%this . widthInput . value = Math . round ( value * width / height )  ;%NWL%}%NWL%}  ; %NWL%ns . ResizeController . prototype . resizeFrame_ = function ( frame )  {%NWL%var width = parseInt ( this . widthInput . value , 10 )  ; %NWL%var height = parseInt ( this . heightInput . value , 10 )  ; %NWL%9
var merge = require (  ' utils - merge '  )  ; %NWL%var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%var send = require (  ' send '  )  ; %NWL%var extname = path . extname ; %NWL%var mime = send . mime ; %NWL%var resolve = path . resolve ; %NWL%8
var https = require (  ' https '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var assert = require (  ' assert - plus '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var once = require (  ' once '  )  ; %NWL%var spdy = require (  ' spdy '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var dtrace = require (  '  .  / dtrace '  )  ; %NWL%var errors = require (  '  .  / errors '  )  ; %NWL%var formatters = require (  '  .  / formatters '  )  ; %NWL%8
var executionId = nextId ; %NWL%var args = arguments ; %NWL%var before = dispatcher . before ; %NWL%while ( before )  {%NWL%args = before . advice . apply ( this , args ) || args ; %NWL%before = before . next ;%NWL%}%NWL%if ( dispatcher . around )  {%NWL%var results = dispatcher . around . advice ( this , args )  ;%NWL%}%NWL%var after = dispatcher . after ; %NWL%2
var tagParents = node . getRelatedNodes (  ' tag '  ,  ' incoming '  )  ; %NWL%return (  ( pathParents . indexOf ( parentNode ) ! =  - 1 ) || ( tagParents . indexOf ( parentNode ) ! =  - 1 )  )  ;%NWL%}  ,%NWL%hide : function (  )  {%NWL%mediaDetails . contentElement . empty (  )  ; %NWL%element . hide (  )  ; %NWL%restoreState (  )  ;%NWL%}  ,%NWL%handleMediaElementMetadata : function ( event , link )  {%NWL%var mediaelement = link . data (  ' mediaelement '  )  ; %NWL%var mediaDetails = link . data (  ' mediaDetails '  )  ; %NWL%9
} else {%NWL%notesPanel . style . display =  " none "  ; %NWL%for ( v = 0 ; v < icons . length ; v +  +  )  {%NWL%icons [ v ]  . style . display =  " none "  ;%NWL%}%NWL%}%NWL%resizePanels (  )  ;%NWL%}%NWL%function toggleBiblio (  )  {%NWL%var bibPanel = document . getElementById (  " bibPanel "  )  ; %NWL%var bibToggle = document . getElementById (  " bibToggle "  )  ; %NWL%9
buffer . write (  " Int16 "  ,  (  ( verts [ i + 2 ]  - vertScale [ 5 ]  )  / vertScale [ 2 ]  * 32766 ) |0 )  ;%NWL%}%NWL%var total = verts . length / 3 ; %NWL%for ( var i = 0 ; i < total ; i +  +  )  {%NWL%var normal =  [ normals [ i * 3 ]  , normals [ i * 3 + 1 ]  , normals [ i * 3 + 2 ]  ]  ; %NWL%var enc = this . encodeNormal ( normal )  ; %NWL%buffer . write (  " Int8 "  , enc , 2 )  ;%NWL%}%NWL%if ( flag & FLAGS . TANGENTS )  {%NWL%for ( var i = 0 ; i < total ; i +  +  )  {%NWL%var tangent =  [ tangents [ i * 3 ]  , tangents [ i * 3 + 1 ]  , tangents [ i * 3 + 2 ]  ]  ; %NWL%4
delete b2j [ elt ]  ;%NWL%}%NWL%}%NWL%}%NWL%this . isbjunk = difflib . __isindict ( junkdict )  ; %NWL%this . isbpopular = difflib . __isindict ( populardict )  ;%NWL%}%NWL%this . find_longest_match = function ( alo , ahi , blo , bhi )  {%NWL%var a = this . a ; %NWL%var b = this . b ; %NWL%var b2j = this . b2j ; %NWL%8
var _Infinity  = g . Infinity ; %NWL%var Math_min  = g . Math . min ; %NWL%var Math_LN10  = g . Math . LN10 ; %NWL%var _Array   = g . Array ; %NWL%var _parseFloat = g . parseFloat ; %NWL%var _concat  = uncurry ( _Array . prototype . concat )  ; %NWL%var _join   = uncurry ( _Array . prototype . join )  ; %NWL%var _substring  = uncurry ( g . String . prototype . substring )  ; %NWL%var ExactRational    = plugins . get (  " ExactRational "  )  ; %NWL%var ExactInteger    = plugins . get (  " ExactInteger "  )  ; %NWL%var nativeToExactInteger  = plugins . get (  " nativeToExactInteger "  )  ; %NWL%8
this . routes . search3 = function ( req , res , callback )  {%NWL%self . routes . search2 ( req , res , callback ,  { id3 : true }  )  ;%NWL%}  ; %NWL%this . routes . search2 = function ( req , res , callback , options )  {%NWL%options = options || { child : true }  ; %NWL%var error = null ; %NWL%var query = req . query . query || null ; %NWL%var artistCount = Math . max ( req . query . artistCount || 20 , 1 )  ; %NWL%var artistOffset = Math . max ( req . query . artistOffset || 0 , 0 )  ; %NWL%var albumCount = Math . max ( req . query . albumCount || 20 , 1 )  ; %NWL%var albumOffset = Math . max ( req . query . albumOffset || 0 , 0 )  ; %NWL%8
var command = protocol . setAlertText (  ' prompt text to set '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . data ,  '  {  " text "  :  " prompt text to set "  }  '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / alert_text '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testCookieGet : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
}  ,%NWL%_colorize : function (  )  {%NWL%var x = this . _renderBoundaries [ 0 ]  ; %NWL%var y = this . _renderBoundaries [ 1 ]  ; %NWL%var width = this . _renderBoundaries [ 2 ]  - x ; %NWL%var height = this . _renderBoundaries [ 3 ]  - y ; %NWL%var maxWidth = this . _width ; %NWL%var maxHeight = this . _height ; %NWL%var opacity = this . _opacity ; %NWL%var maxOpacity = this . _maxOpacity ; %NWL%var minOpacity = this . _minOpacity ; %NWL%8
isLoaded : false ,%NWL%isUpdating : false ,%NWL%store : null ,%NWL%objectAtContent : function ( index )  {%NWL%var content = get ( this ,  ' content '  )  ; %NWL%return content . objectAt ( index )  ;%NWL%}  ,%NWL%update : function (  )  {%NWL%if ( get ( this ,  ' isUpdating '  )  )  { return ;  }%NWL%var store = get ( this ,  ' store '  )  ; %NWL%var type = get ( this ,  ' type '  )  ; %NWL%4
Model . prototype [  ' viewType '  ]  = null ; %NWL%Model . prototype [  ' stencilViewType '  ]  = null ; %NWL%Model [  ' extend '  ]  = function ( opt_object )  {%NWL%var newType = Extendable [  ' extend '  ]  . call ( this , opt_object )  ; %NWL%var newTypePrototype = newType . prototype ; %NWL%var thisPrototype = this . prototype ; %NWL%var name = thisPrototype [  ' name '  ]  ; %NWL%var newName = newTypePrototype [  ' name '  ]  ; %NWL%if ( name && newName && newName ! =  = name )%NWL%newTypePrototype [  ' name '  ]  = name +  '  .  '  + newName ; %NWL%var viewType = thisPrototype [  ' viewType '  ]  ; %NWL%6
var treeMatcher = require (  '  .  / tree - matcher '  )  ; %NWL%var map = require (  '  .  / utils '  )  . map ; %NWL%var eachk = require (  '  .  / utils '  )  . eachk ; %NWL%var deref = require (  '  .  / utils '  )  . deref ; %NWL%var when = require (  ' when '  )  ; %NWL%var jsonMerge = require (  '  .  / json - merge '  )  ; %NWL%var getDirectory = require (  '  .  / utils '  )  . getDirectory ; %NWL%var orMap = require (  '  .  / utils '  )  . orMap ; %NWL%var ork = require (  '  .  / utils '  )  . ork ; %NWL%var getScriptTags = require (  '  .  / script - tag - finder '  )  . getScriptTags ; %NWL%var getScriptCode = require (  '  .  / script - tag - finder '  )  . getScriptCode ; %NWL%9
}%NWL%}  )  ; %NWL%if ( settings . equalize_on_stack =  =  = false )  {%NWL%if ( isStacked ) return ;%NWL%}  ; %NWL%var heights = vals . map ( function (  )  { return $ ( this )  . outerHeight ( false )  }  )  . get (  )  ; %NWL%if ( settings . use_tallest )  {%NWL%var max = Math . max . apply ( null , heights )  ; %NWL%vals . css (  ' height '  , max )  ;%NWL%} else {%NWL%var min = Math . min . apply ( null , heights )  ; %NWL%7
, hotCoreServerLogger = require (  ' hotCoreServerLogger '  )%NWL%, logger = hotCoreServerLogger%NWL%, htmlToText = require (  ' html - to - text '  )%NWL%, mimelib = require (  " mimelib "  )%NWL% ; %NWL%var pollingInProgress =  {  }  ; %NWL%var lastPolling =  {  }  ; %NWL%var tlf = hotCoreTransport . transportLayerFunctions ; %NWL%var logLine = tlf . logLine ; %NWL%var formatError = tlf . formatError ; %NWL%var changeMessageStatus = tlf . changeMessageStatus ; %NWL%8
var Zip  = require (  ' adm - zip '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var fireUtil = require (  '  .  / firebase - util . js '  )  ; %NWL%var wrench = require (  ' wrench '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var cloudStorage = require (  '  .  / cloudStorage . js '  )  ; %NWL%var backupExtractor = require (  '  .  / backupExtractor . js '  )  ; %NWL%var temp = require (  ' temp '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%1
Blockly . getRelativeXY_ = function ( element )  {%NWL%var xy =  { x : 0 , y : 0 }  ; %NWL%var x = element . getAttribute (  ' x '  )  ; %NWL%if ( x )  {%NWL%xy . x = parseInt ( x , 10 )  ;%NWL%}%NWL%var y = element . getAttribute (  ' y '  )  ; %NWL%if ( y )  {%NWL%xy . y = parseInt ( y , 10 )  ;%NWL%}%NWL%var transform = element . getAttribute (  ' transform '  )  ; %NWL%2
return callback ( err )  ;%NWL%}%NWL%return callback ( null , MessageBoxConstants . deleteTypes . HARD )  ;%NWL%}  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%var _hardDelete = function ( message , callback )  {%NWL%var messageBoxId = message . messageBoxId ; %NWL%var createdTimestamp = message . created ; %NWL%var threadKey = message . threadKey ; %NWL%8
EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var multi = new Multi ( app )  ,%NWL%controllerCtor = app . controller . constructor ,%NWL%httpMethods = app . controller . httpMethods ; %NWL%var total = 0 ;  /  / counter for controller tests%NWL%var CONTROLLER_TESTS = false ; %NWL%multi . on (  ' pre_exec '  , app . backupFilters )  ; %NWL%multi . on (  ' post_exec '  , app . restoreFilters )  ; %NWL%var IncomingMessage = http . IncomingMessage ; %NWL%var ServerResponse = http . ServerResponse ; %NWL%9
}  , this )  ; %NWL%for ( var sym in required )  {%NWL%var val = required [ sym ]  ; %NWL%if ( ! ( sym in given_args )  )  {%NWL%throw new Error (  " option '  "  + sym +  "  ' must be specified "  )  ;%NWL%}%NWL%}%NWL%for ( var sym in given_args )  {%NWL%var given_data = given_args [ sym ]  ; %NWL%var arg = given_data . arg ; %NWL%var params = given_data . params ; %NWL%9
api . browser =  {%NWL%name : browser ,%NWL%version : version%NWL%}  ; %NWL%api . browser [ browser ]  = true ; %NWL%for ( var i = 0 , l = conf . browsers . length ; i < l ; i +  +  )  {%NWL%for ( var key in conf . browsers [ i ]  )  {%NWL%if ( browser =  =  = key )  {%NWL%pushClass ( key )  ; %NWL%var min = conf . browsers [ i ]  [ key ]  . min ; %NWL%var max = conf . browsers [ i ]  [ key ]  . max ; %NWL%9
var scissorTest = defaultValue ( rs . scissorTest ,  {  }  )  ; %NWL%var scissorTestRectangle = defaultValue ( scissorTest . rectangle ,  {  }  )  ; %NWL%var depthRange = defaultValue ( rs . depthRange ,  {  }  )  ; %NWL%var depthTest = defaultValue ( rs . depthTest ,  {  }  )  ; %NWL%var colorMask = defaultValue ( rs . colorMask ,  {  }  )  ; %NWL%var blending = defaultValue ( rs . blending ,  {  }  )  ; %NWL%var blendingColor = defaultValue ( blending . color ,  {  }  )  ; %NWL%var stencilTest = defaultValue ( rs . stencilTest ,  {  }  )  ; %NWL%var stencilTestFrontOperation = defaultValue ( stencilTest . frontOperation ,  {  }  )  ; %NWL%var stencilTestBackOperation = defaultValue ( stencilTest . backOperation ,  {  }  )  ; %NWL%var sampleCoverage = defaultValue ( rs . sampleCoverage ,  {  }  )  ; %NWL%0
goog . provide (  ' goog . labs . net . webChannel . WireV8 '  )  ; %NWL%goog . require (  ' goog . asserts '  )  ; %NWL%goog . require (  ' goog . json '  )  ; %NWL%goog . require (  ' goog . json . EvalJsonProcessor '  )  ; %NWL%goog . require (  ' goog . structs '  )  ; %NWL%goog . labs . net . webChannel . WireV8 = function (  )  {%NWL%this . parser_ = new goog . json . EvalJsonProcessor ( null , true )  ;%NWL%}  ; %NWL%goog . scope ( function (  )  {%NWL%var WireV8 = goog . labs . net . webChannel . WireV8 ; %NWL%var Wire = goog . labs . net . webChannel . Wire ; %NWL%9
if ( !this . Get (  ' chart . labels '  )  )  {%NWL%return ;%NWL%}%NWL%var context  = this . context ; %NWL%var radius  = this . radius ; %NWL%var text_size  = this . Get (  ' chart . text . size '  )  ; %NWL%var text_font  = this . Get (  ' chart . text . font '  )  ; %NWL%var units_post = this . Get (  ' chart . units . post '  )  ; %NWL%var units_pre  = this . Get (  ' chart . units . pre '  )  ; %NWL%var centerx  = this . centerx ; %NWL%var centery  = this . centery ; %NWL%3
}%NWL%BatchWriter . prototype . write = function (  )  {%NWL%if ( !this . queries || ! ( this . queries . length > 0 )  )  {%NWL%throw new TypeError ( util . format (  ' Invalid queries provided %s '  , this . queries )  )  ;%NWL%}%NWL%var frameWriter = new FrameWriter ( types . opcodes . batch , this . streamId )  ; %NWL%frameWriter . writeByte ( this . type )  ; %NWL%frameWriter . writeShort ( this . queries . length )  ; %NWL%this . queries . forEach ( function ( item , index )  {%NWL%var query = item && item . query ; %NWL%var params = item && item . params ; %NWL%9
endContainer = tmpary [ 0 ]  , endOffset = tmpary [ 1 ]  ;%NWL%}%NWL%}%NWL%return [ startContainer , startOffset , endContainer , endOffset ]  ;%NWL%}  ,%NWL%setRange : function ( range , startContainer ,%NWL%startOffset , endContainer , endOffset , collapsed )  {%NWL%var start = dijit . range . ie . setEndPoint ( range , startContainer , startOffset )  ; %NWL%range . setEndPoint (  ' StartToStart '  , start )  ; %NWL%if ( !collapsed )  {%NWL%var end = dijit . range . ie . setEndPoint ( range , endContainer , endOffset )  ; %NWL%7
delta = 1000 / 60 ;%NWL%}%NWL%time +  = delta ; %NWL%var multiplier = delta / that . settings . aliveDivider ; %NWL%for ( i = 0 ; i < that . array . length ;  +  + i )  {%NWL%var obj = that . array [ i ]  ; %NWL%var c = obj . c ; %NWL%var alivetime = obj . alivetime ; %NWL%var tree = obj . tree ; %NWL%var lightHouse = obj . lightHouse ; %NWL%var maxHeight = obj . maxHeight ; %NWL%6
elem . classList . add (  " extraActions "  )  ;  /  / $NON - NLS - 0$%NWL%}%NWL%_self . parentNode . insertBefore ( elem , _self . parentNode . firstChild )  ; %NWL%_self [ id ]  = elem ;%NWL%}%NWL%}  )  ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var fileActionsScope = this . fileActionsScope ; %NWL%var editActionsScope = this . editActionsScope ; %NWL%var viewActionsScope = this . viewActionsScope ; %NWL%var toolsActionsScope = this . toolsActionsScope ; %NWL%6
goog . asserts . assert ( goog . isDef ( this . imageWidth_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . opacity_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . originX_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . originY_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . rotateWithView_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . rotation_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . scale_ )  )  ; %NWL%goog . asserts . assert ( goog . isDef ( this . width_ )  )  ; %NWL%var anchorX = this . anchorX_ ; %NWL%var anchorY = this . anchorY_ ; %NWL%var height = this . height_ ; %NWL%8
}%NWL%_delegateClose ( e )  {%NWL%if ( this . _matches ( e , this . $$ . close )  )  {%NWL%e . preventDefault (  )  ; %NWL%return this . close (  )  ;%NWL%}%NWL%}%NWL%_events (  )  {%NWL%let _closeKeyHandler = this . _closeKeyHandler . bind ( this )  ; %NWL%let _outsideClickHandler = this . _outsideClickHandler . bind ( this )  ; %NWL%let _delegateOpen = this . _delegateOpen . bind ( this )  ; %NWL%8
this . tgtParent = tgtParent ; %NWL%this . srcParent = srcParent ; %NWL%this . tgtBefore = tgtBefore ; %NWL%this . tgtAfter = tgtAfter ; %NWL%this . lastKeptTgtNode = null ; %NWL%this . lastKeptSrcNode = null ;%NWL%}  ; %NWL%Patcher . prototype . match = function (%NWL%tgtNode , srcNode , copyCallback , onlyAdvance )  {%NWL%var lastKeptTgt = this . lastKeptTgtNode ; %NWL%var lastKeptSrc = this . lastKeptSrcNode ; %NWL%9
this . area_search (  )  ;%NWL%} else%NWL%this . area_select ( begin , length )  ;%NWL%}  ; %NWL%EditArea . prototype . area_replace = function (  )  {%NWL%this . area_search (  " replace "  )  ;%NWL%}  ; %NWL%EditArea . prototype . area_replace_all = function (  )  {%NWL%var base_text = this . textarea . value ; %NWL%var search = _$ (  " area_search "  )  . value ; %NWL%var replace = _$ (  " area_replace "  )  . value ; %NWL%9
var BUGNUMBER = 578700 ; %NWL%var summary =  ' TypedObjects : indexed properties are illegal in a StructType '  ; %NWL%var ArrayType = TypedObject . ArrayType ; %NWL%var StructType = TypedObject . StructType ; %NWL%var uint8 = TypedObject . uint8 ; %NWL%var uint16 = TypedObject . uint16 ; %NWL%var uint32 = TypedObject . uint32 ; %NWL%var uint8Clamped = TypedObject . uint8Clamped ; %NWL%var int8 = TypedObject . int8 ; %NWL%var int16 = TypedObject . int16 ; %NWL%var int32 = TypedObject . int32 ; %NWL%2
fonts :  [  " STIXGeneral - bold "  ,  " STIXNonUnicode - bold "  ,  " STIXGeneral "  ,  " STIXSizeOneSym "  ]  , offsetN : 0xE263 ,%NWL%remap :  { 0xE264 : 0xE267 , 0xE265 : 0xE26B , 0xE266 : 0xE26F , 0xE267 : 0xE273 ,%NWL%0xE268 : 0xE277 , 0xE269 : 0xE27B , 0xE26A : 0xE27F , 0xE26B : 0xE283 ,%NWL%0xE26C : 0xE287 }%NWL%}  ;%NWL%}%NWL%}  )  ; %NWL%MathJax . Hub . Register . StartupHook (  " SVG Jax Ready "  , function (  )  {%NWL%var SVG = MathJax . OutputJax . SVG ; %NWL%var FONTS = SVG . FONTDATA . FONTS ; %NWL%var VARIANT = SVG . FONTDATA . VARIANT ; %NWL%9
chart . data (  ' chartOptions '  , options )  ; %NWL%chart . appendTo ( document . body )  ; %NWL%chart . css (  {%NWL%height : size . height ,%NWL%width : size . width%NWL%}  )  ; %NWL%var $canvas = chart . find (  ' canvas '  )  ; %NWL%var timeout =  - 1 ; %NWL%function resize (  )  {%NWL%var height = chart . height (  )  ; %NWL%var width = chart . width (  )  ; %NWL%9
var newAmount = parseFloat ( amountExchange / price )  . toFixed ( 6 )  . replace (  / 0 + $ /  ,  '  '  )  ; %NWL%if ( newAmount =  =  " NaN "  )%NWL%return ; %NWL%$ (  ' #amount '  )  . val ( newAmount )  ;%NWL%}  )  ;%NWL%}  ; %NWL%coinpunk . controllers . Addresses . prototype . drawRequestQR = function ( address )  {%NWL%var uri = URI (  { protocol :  ' bitcoin '  , path : address }  )  ; %NWL%var amount = $ (  ' #amount '  )  . val (  )  ; %NWL%var label = $ (  ' #label '  )  . val (  )  ; %NWL%var message = $ (  ' #message '  )  . val (  )  ; %NWL%8
}  )  ; %NWL%it (  ' inconsistent4 '  , function (  )  {%NWL%var solver = new c . SimplexSolver (  )  ; %NWL%var x = new c . Variable (  { name :  ' x '  }  )  ; %NWL%var y = new c . Variable (  { name :  ' y '  }  )  ; %NWL%solver . addConstraint ( new c . Equation ( x , 10 )  )  ; %NWL%solver . addConstraint ( new c . Equation ( x , y )  )  ; %NWL%assert . throws ( solver . addConstraint . bind ( solver , new c . Equation ( y , 5 )  )  , c . RequiredFailure )  ;%NWL%}  )  ; %NWL%it (  ' multiedit '  , function (  )  {%NWL%var x = new c . Variable (  { name :  ' x '  }  )  ; %NWL%4
}  ,%NWL%items : function (  )  {%NWL%return scope . spyElems ;  /  / return a list of dom items to be used to build menu%NWL%}%NWL%}  )  ; %NWL%var spyElems = scope . spyElems ; %NWL%var topmargin = scope . topmargin | 0 ; %NWL%var w = angular . element ( $window )  ; %NWL%w . on (  ' scroll '  , function (  )  {%NWL%var highlightSpy = null ; %NWL%var spies = scope . spies ; %NWL%5
this . env . options . angularDeps =  " \n  "  + angMods . join (  "  , \n  "  )  +  " \n "  ;%NWL%}%NWL%cb (  )  ;%NWL%}  . bind ( this )  )  ;%NWL%}  ; %NWL%Generator . prototype . readIndex = function readIndex (  )  {%NWL%this . indexFile = this . engine ( this . read (  '  .  .  /  .  .  / templates / common / index . html '  )  , this )  ;%NWL%}  ; %NWL%Generator . prototype . useSass = function useSass (  )  {%NWL%var sass = this . sass ; %NWL%var scss = this . scss ; %NWL%9
function SourceMapDevToolPlugin ( sourceMapFilename , sourceMappingURLComment , moduleFilenameTemplate , fallbackModuleFilenameTemplate )  {%NWL%this . sourceMapFilename = sourceMapFilename ; %NWL%this . sourceMappingURLComment = sourceMappingURLComment =  =  = false ? false : sourceMappingURLComment || " \n /  / # sourceMappingURL =  [ url ]  "  ; %NWL%this . moduleFilenameTemplate = moduleFilenameTemplate || " webpack :  /  /  /  [ resourcePath ]  "  ; %NWL%this . fallbackModuleFilenameTemplate = fallbackModuleFilenameTemplate || " webpack :  /  /  /  [ resourcePath ] ? [ hash ]  "  ;%NWL%}%NWL%module . exports = SourceMapDevToolPlugin ; %NWL%SourceMapDevToolPlugin . prototype . apply = function ( compiler )  {%NWL%var sourceMapFilename = this . sourceMapFilename ; %NWL%var sourceMappingURLComment = this . sourceMappingURLComment ; %NWL%var moduleFilenameTemplate = this . moduleFilenameTemplate ; %NWL%8
var R18_0 = this . _R18_0 ; %NWL%var R19_0 = this . _R19_0 ; %NWL%var dline0 = this . _dline0 ; %NWL%var dline1 = this . _dline1 ; %NWL%var dline2 = this . _dline2 ; %NWL%var dline3 = this . _dline3 ; %NWL%var dline4 = this . _dline4 ; %NWL%var dline5 = this . _dline5 ; %NWL%var dline6 = this . _dline6 ; %NWL%var dline7 = this . _dline7 ; %NWL%var dline8 = this . _dline8 ; %NWL%0
}  ; %NWL%ret . toString = function (  )  {%NWL%return fn . toString (  )  ;%NWL%}  ; %NWL%return ret ;%NWL%}%NWL%}%NWL%function ignore ( predicateFn )  {%NWL%var describe = wrap ( exports . xdescribe , exports . describe )  ; %NWL%describe . only = wrap ( exports . xdescribe , exports . describe . only )  ; %NWL%var it = wrap ( exports . xit , exports . it )  ; %NWL%8
)  ;%NWL%}  )  ;%NWL%} catch ( e )  {%NWL%return res . json (  { failure : e }  )  ;%NWL%}%NWL%}  )  ; %NWL%router . post (  '  / move '  , function ( req , res , next )  {%NWL%try {%NWL%var chat_id = req . body . id ; %NWL%var password = req . body . password ; %NWL%var chat_room = req . body . chat_room ; %NWL%9
soundManager . add (  ' cuestick '  , 1 )  ; %NWL%soundManager . add (  ' deactivate '  , 1 )  ; %NWL%soundManager . add (  ' explode '  , 1 )  ; %NWL%soundManager . add (  ' pocket '  , 2 )  ; %NWL%soundManager . add (  ' quietball '  , 2 )  ; %NWL%soundManager . add (  ' quietwall '  , 2 )  ; %NWL%soundManager . add (  ' typing '  , 1 )  ; %NWL%soundManager . add (  ' wall '  , 3 )  ; %NWL%var overlay = $ (  ' #overlay '  )  ; %NWL%var start = $ (  ' #start '  )  ; %NWL%var startmessage = $ (  ' #startmessage '  )  ; %NWL%8
map :  {%NWL%'  /  / faa '  :  '  *  '%NWL%}%NWL%}  }  ,%NWL%]  ,%NWL%log :  ' silent '  ,%NWL%errhandler : fin%NWL%}  )%NWL%var foo = si . make (  ' foo '  )%NWL%foo . a = 1%NWL%var bar = si . make (  ' bar '  )%NWL%8
}%NWL%catch ( exc )  {%NWL%}%NWL%}  ,%NWL%}  )  ; %NWL%var PropRep = React . createFactory ( React . createClass (%NWL%{%NWL%displayName :  " PropRep "  ,%NWL%render : function (  )  {%NWL%var object = this . props . object ; %NWL%var mode = this . props . mode ; %NWL%9
_attributes :  [  " title "  ,  " titleNoFormatting "  ,  " content "  ,  " url "  ,  " published "  ,  " publisher "  ,%NWL%" duration "  ,  " tbWidth "  ,  " tbHeight "  ,  " tbUrl "  ,  " playUrl "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var NewsSearchStore = declare (  " dojox . data . GoogleNewsSearchStore "  , SearchStore ,  {%NWL%_type :  " news "  ,%NWL%_attributes :  [  " title "  ,  " titleNoFormatting "  ,  " content "  ,  " url "  ,  " unescapedUrl "  ,  " publisher "  ,%NWL%" clusterUrl "  ,  " location "  ,  " publishedDate "  ,  " relatedStories "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var BookSearchStore = declare (  " dojox . data . GoogleBookSearchStore "  , SearchStore ,  {%NWL%4
var buildDate =  ' 20140606 '  ; %NWL%module . exports . buildDate = buildDate ; %NWL%var ASTBase = require (  '  .  / ASTBase '  )  ; %NWL%var Grammar = require (  '  .  / Grammar '  )  ; %NWL%var Lexer = require (  '  .  / Lexer '  )  ; %NWL%var NameDeclaration = require (  '  .  / NameDeclaration '  )  ; %NWL%var Validate = require (  '  .  / Validate '  )  ; %NWL%var log = require (  '  .  / log '  )  ; %NWL%var debug = log . debug ; %NWL%var Environment = require (  '  .  / Environment '  )  ; %NWL%var Producer_js = require (  '  .  / Producer_js '  )  ; %NWL%2
"  ' height =  '  "  + this . height +%NWL%( this . walkableMap? (  "  ' walkableMap =  '  "  + this . walkableMap . name )  :  "  "  )  +%NWL%( this . mapScale! = 4? (  "  ' mapScale =  '  "  + this . mapScale )  :  "  "  )  +%NWL%"  '  >  "  )  ; %NWL%output = output . concat (  " \n < paths >  "  )  ; %NWL%for ( var i = 0 ; i < this . walkables . length ; i +  +  )  {%NWL%var walkable = this . walkables [ i ]  ; %NWL%output = output . concat (  " \n < walkable path =  '  "  + walkable . name +  "  '  /  >  "  )  ;%NWL%}%NWL%for ( var i = 0 ; i < this . unwalkables . length ; i +  +  )  {%NWL%var unwalkable = this . unwalkables [ i ]  ; %NWL%6
for ( var i = 0 ; i < array . length ; i +  +  )  {%NWL%if ( obj =  =  = array [ i ]  ) return i ;%NWL%}%NWL%return - 1 ;%NWL%}%NWL%window . browserTrigger = function browserTrigger ( element , eventType , eventData )  {%NWL%if ( element && !element . nodeName ) element = element [ 0 ]  ; %NWL%if ( !element ) return ; %NWL%eventData = eventData || {  }  ; %NWL%var keys = eventData . keys ; %NWL%var x = eventData . x ; %NWL%9
cellDef . get = dojo . getObject ( get )  ;%NWL%}%NWL%var sortDesc = d . trim ( d . attr ( node ,  " sortDesc "  ) || "  "  )  ; %NWL%if ( sortDesc )  {%NWL%cellDef . sortDesc = ! ( sortDesc . toLowerCase (  )  =  =  " false "  )  ;%NWL%}%NWL%var value = d . trim ( d . attr ( node ,  " loadingText "  ) ||d . attr ( node ,  " defaultValue "  ) || "  "  )  ; %NWL%if ( value )  {%NWL%cellDef . defaultValue = value ;%NWL%}%NWL%var editable = d . trim ( d . attr ( node ,  " editable "  ) || "  "  )  ; %NWL%2
}%NWL%this . jukebox . play ( _music )  ;%NWL%}  ,%NWL%leave : function (  )  {%NWL%lychee . game . State . prototype . leave . call ( this )  ; %NWL%this . input . unbind (  ' touch '  , _on_touch , this )  ;%NWL%}  ,%NWL%update : function ( clock , delta )  {%NWL%lychee . game . State . prototype . update . call ( this , clock , delta )  ; %NWL%var jukebox  = this . jukebox ; %NWL%var renderer  = this . renderer ; %NWL%9
}%NWL%if ( from < now && now < to )  {%NWL%ret +  =  '  < div style =  " background - color : white ; right : 0 ; width :  '  +  ( to - now )  / duration * 100 +  ' % "  >  <  / div >  '  ;%NWL%}%NWL%ret +  =  '  <  / div >  '  ; %NWL%return ret ;%NWL%}%NWL%var uptimeBarTag = function ( args )  {%NWL%var from = args . from ; %NWL%var to = args . to ; %NWL%var origin = args . origin ; %NWL%8
fs . writeFileSync (  "  .  / dump . json "  , JSON . stringify ( tvar )  )  ;%NWL%}%NWL%var gulp = require (  ' gulp '  )  ; %NWL%var htmlmin = require (  ' gulp - htmlmin '  )  ; %NWL%var ngmin = require (  ' gulp - ngmin '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var clean = require (  ' gulp - clean '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var replace = require (  ' gulp - replace '  )  ; %NWL%3
}  )  ;%NWL%}  )  ;%NWL%} else {%NWL%callback (  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ,%NWL%newFromContextMenu : function ( info , tab )  {%NWL%chrome . storage . local . get (  [  " projects "  ,  " active "  ]  , function ( items )  {%NWL%var projects = items [  " projects "  ]  ; %NWL%var active = items [  " active "  ]  ; %NWL%9
}%NWL%if ( !this . initialConfig . layer &&%NWL%map && map . events &&%NWL%layer && layer . map )  {%NWL%map . removeLayer ( layer )  ;%NWL%}%NWL%}  ,%NWL%onMapPanelDestroy : function (  )  {%NWL%this . tearDown (  )  ; %NWL%var map = this . map ; %NWL%var control = this . control ; %NWL%9
}%NWL%}%NWL%}  ; %NWL%Long . prototype . shiftRightUnsigned = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
this . _enabledStyleNeedsUpdate = true ;%NWL%}%NWL%}  ,%NWL%_doUpdateEnabledStyle : function (  )  {%NWL%var isEnabled = this . get (  ' isEnabled '  )  ; %NWL%this . $ (  )  . toggleClass (  ' disabled '  , !isEnabled )  ; %NWL%this . $ (  )  . attr (  ' aria - disabled '  , !isEnabled ? true : null )  ; %NWL%this . _enabledStyleNeedsUpdate = false ;%NWL%}  ,%NWL%_parentDidEnableInPane : function (  )  {%NWL%var enabledState = this . get (  ' enabledState '  )  ; %NWL%4
for ( var i = 0 ; i < chartClasses . length ;  +  + i )  {%NWL%if ( chartClasses [ i ]  . match (  / ^render - to -  ( ? : line|spline|area|stack|bar|column|pie )  - chart$ /  )  )  {%NWL%return chartClasses [ i ]  . replace (  / ^render - to -  / g ,  "  "  )  . replace (  /  - chart$ / g ,  "  "  )  ;%NWL%}%NWL%}%NWL%}%NWL%HighTables . renderCharts = renderChartsFromConfigs ; %NWL%HighTables . renderChart = function ( chart )  {%NWL%var chartType = getChartType ( chart )  ; %NWL%var engine  = chartConfigs [ chartType ]  . engine ; %NWL%var options  = chartConfigs [ chartType ]  . options ; %NWL%9
var settings = imports . settings ; %NWL%var tabs = imports . tabManager ; %NWL%var uCaseFirst = require (  " c9 / string "  )  . uCaseFirst ; %NWL%function Panel ( developer , deps , options )  {%NWL%var plugin = new Plugin ( developer , deps )  ; %NWL%var emit = plugin . getEmitter (  )  ; %NWL%var autohide = options . autohide || false ; %NWL%var index = options . index || 100 ; %NWL%var buttonCSSClass = options . buttonCSSClass ; %NWL%var panelCSSClass = options . panelCSSClass ; %NWL%var caption = options . caption ; %NWL%8
var h1 = document . createElement (  ' h1 '  )  ; %NWL%h1 . innerHTML =  " Your code :  "  ; %NWL%div . appendChild ( h1 )  ; %NWL%var pre = document . createElement (  ' pre '  )  ; %NWL%if ( pre . innerText ! =  = undefined )  {%NWL%pre . innerText = s ;%NWL%} else {%NWL%pre . textContent = s ;%NWL%}%NWL%div . appendChild ( pre )  ; %NWL%var button = document . createElement (  ' button '  )  ; %NWL%0
if ( pwstrength > 100 )  {%NWL%pwstrength = 100 ;%NWL%}%NWL%var mymeter = document . getElementById (  ' pwmeter '  )  ; %NWL%mymeter . value = pwstrength ; %NWL%return ;%NWL%}%NWL%function checkPasswords (  )%NWL%{%NWL%var pw1 = document . getElementById (  ' pw1 '  )  . value ; %NWL%var pw2 = document . getElementById (  ' pw2 '  )  . value ; %NWL%9
var readBrewAction = require (  '  .  / actions / brew / readBrew '  )  ; %NWL%var findBrewLogAction = require (  '  .  / actions / logs / findBrew '  )  ; %NWL%var findOneBrewLogAction = require (  '  .  / actions / logs / findOneBrew '  )  ; %NWL%Context . registerStore ( require (  '  .  / stores / ApplicationStore '  )  )  ; %NWL%Context . registerStore ( require (  '  .  / stores / BrewStore '  )  )  ; %NWL%Context . registerStore ( require (  '  .  / stores / BrewerStore '  )  )  ; %NWL%Context . registerStore ( require (  '  .  / stores / LogStore '  )  )  ; %NWL%function App ( options )  {%NWL%options = options || {  }  ; %NWL%var initialState = options . initialState ; %NWL%var fetcher = options . fetcher ; %NWL%9
}%NWL%if ( diff ! = 0 )  {%NWL%return diff ;%NWL%}%NWL%}%NWL%return 0 ;%NWL%}  ,%NWL%fit : function ( blocks )  {%NWL%var n , node , block , len = blocks . length ; %NWL%var w = len > 0 ? blocks [ 0 ]  . w : 0 ; %NWL%var h = len > 0 ? blocks [ 0 ]  . h : 0 ; %NWL%9
var tempnoise =  [  ]  ;  /  /  [ this . n_size_sq * this . noise_frames ]%NWL%var temp ; %NWL%var i ; %NWL%var frame ; %NWL%var v ; %NWL%var u ; %NWL%var	v0 , v1 , v2 , u0 , u1 , u2 , f ; %NWL%var n_size_sq = this . n_size_sq ; %NWL%var noise_frames = this . noise_frames ; %NWL%var n_size = this . n_size ; %NWL%var n_size_m1 = this . n_size_m1 ; %NWL%7
e . stopPropagation (  )  ;%NWL%}  )  ; %NWL%jQuery (  ' body '  )  . append ( layer )  . bind (  ' click '  , function ( e )  {%NWL%if ( that . visible && ! ( e . target =  =  = that . get (  ' target '  )  [ 0 ] || jQuery . contains ( that . get (  ' target '  )  [ 0 ]  , e . target )  )  )  {%NWL%that . hide (  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%CreateLayer . prototype . handleMouseOver = function ( e , table )  {%NWL%var rowId = e . data . rowId ; %NWL%var colId = e . data . colId ; %NWL%9
var discussionLib = require (  '  .  / discussion '  )  ; %NWL%var execQueryTask = require (  '  .  .  / libs / tasks '  )  . execQueryTask ; %NWL%var countTask = require (  '  .  .  / libs / tasks '  )  . countTask ; %NWL%var statusCodePage = require (  '  .  .  / libs / templateHelpers '  )  . statusCodePage ; %NWL%var pageMetadata = require (  '  .  .  / libs / templateHelpers '  )  . pageMetadata ; %NWL%var orderDir = require (  '  .  .  / libs / templateHelpers '  )  . orderDir ; %NWL%exports . list = function ( aReq , aRes , aNext )  {%NWL%var authedUser = aReq . session . user ; %NWL%var type = aReq . params . type ; %NWL%var username = aReq . params . username ; %NWL%var scriptname = aReq . params . scriptname ; %NWL%8
}%NWL%if ( submitterSelectionDisplayNames . length ! =  = 0 && submitterSelectionDisplayNames . indexOf ( submitterName )  =  =  =  - 1 ) return ; %NWL%var attributeFilterCriteria = this . get (  ' _attributeFilterCriteria '  )  ; %NWL%var type = task . get (  ' type '  )  ; %NWL%if ( attributeFilterCriteria . indexOf ( type )  =  =  =  - 1 ) return ; %NWL%var priority = task . get (  ' priority '  )  ; %NWL%if ( attributeFilterCriteria . indexOf ( priority )  =  =  =  - 1 ) return ; %NWL%var developmentStatus = task . get (  ' developmentStatus '  )  ; %NWL%if ( attributeFilterCriteria . indexOf ( developmentStatus )  =  =  =  - 1 ) return ; %NWL%if ( developmentStatus =  =  = CoreTasks . STATUS_DONE )  {%NWL%var validation = task . get (  ' validation '  )  ; %NWL%3
}  ; %NWL%__exports__ . createFrame = createFrame ; %NWL%return __exports__ ;%NWL%}  )  ( __module2__ , __module4__ )  ; %NWL%var __module5__ =  ( function ( __dependency1__ , __dependency2__ , __dependency3__ )  {%NWL%" use strict "  ; %NWL%var __exports__ =  {  }  ; %NWL%var Utils = __dependency1__ ; %NWL%var Exception = __dependency2__ ; %NWL%var COMPILER_REVISION = __dependency3__ . COMPILER_REVISION ; %NWL%var REVISION_CHANGES = __dependency3__ . REVISION_CHANGES ; %NWL%9
var express = require (  ' express '  )  ; %NWL%var colors = require (  ' colors '  )  ; %NWL%var Zip  = require (  ' adm - zip '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var fireUtil = require (  '  .  / firebase - util . js '  )  ; %NWL%var wrench = require (  ' wrench '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var cloudStorage = require (  '  .  / cloudStorage . js '  )  ; %NWL%var backupExtractor = require (  '  .  / backupExtractor . js '  )  ; %NWL%9
, setupAndroidBootstrap = gruntHelpers . setupAndroidBootstrap%NWL%, setupAndroidApp = gruntHelpers . setupAndroidApp%NWL%, buildAndroidBootstrap = gruntHelpers . buildAndroidBootstrap%NWL%, buildSelendroidServer = gruntHelpers . buildSelendroidServer%NWL%, buildAndroidApp = gruntHelpers . buildAndroidApp%NWL%, buildSelendroidAndroidApp = gruntHelpers . buildSelendroidAndroidApp%NWL%, fixSelendroidAndroidManifest = gruntHelpers . fixSelendroidAndroidManifest%NWL%, installAndroidApp = gruntHelpers . installAndroidApp%NWL%, generateServerDocs = gruntHelpers . generateServerDocs%NWL%, generateAppiumIo = gruntHelpers . generateAppiumIo%NWL%, setDeviceConfigVer = gruntHelpers . setDeviceConfigVer%NWL%0
}%NWL%}  ,  {%NWL%upsert : false%NWL%}  , function (  )  {%NWL%process . abort (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%var PluginTest = models . PluginTest ; %NWL%var PageTestLog = models . PageTestLog ; %NWL%var TestUrlsSet = models . TestUrlsSet ; %NWL%var TestingProgress = models . TestingProgress ; %NWL%7
newNotes = newNotes . innerHTML ;%NWL%} else {%NWL%newNotes =  ' No notes for this step '  ;%NWL%}%NWL%var notes = consoleWindow . document . getElementById (  ' notes '  )  ; %NWL%notes . innerHTML = newNotes ; %NWL%notes . scrollTop = 0 ; %NWL%var baseURL = document . URL . substring ( 0 , document . URL . search (  ' # /  '  )  )  ; %NWL%var slideSrc = baseURL +  ' # '  + document . querySelector (  '  . active '  )  . id ; %NWL%var preSrc = baseURL +  ' # '  + nextStep (  )  . id ; %NWL%var slideView = consoleWindow . document . getElementById (  ' slideView '  )  ; %NWL%4
function ( convexHull , GameCore , ResourceManager , keys , utils , Box , Rectangle , Polygon , MulitPolygon , Circle , DNDFileController , on , dom , lang )  {%NWL%var SCALE = 30 ; %NWL%var NULL_CENTER =  { x : null , y : null }  ; %NWL%var MAX_POLY_SIDES = 10 ; %NWL%var POINT_RADIUS = 4 ; %NWL%var DYNAMIC_COLOR =  ' rgba ( 0 , 255 , 0 , 0 . 4 )  '  ; %NWL%var ZONE_COLOR =  ' rgba ( 255 , 0 , 0 , 0 . 2 )  '  ; %NWL%var canvas = dom . byId (  ' canvas '  )  ; %NWL%var gravityXField = dom . byId (  ' gravityX '  )  ; %NWL%var gravityYField = dom . byId (  ' gravityY '  )  ; %NWL%var undoBtn = dom . byId (  ' undoBtn '  )  ; %NWL%7
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
isFitWidth : true%NWL%}  )  ;%NWL%}  ,%NWL%unrender : function (  )  {%NWL%$ ( this . el )  . masonry (  ' destroy '  )  . detach (  )  ;%NWL%}  ,%NWL%account : function ( e )  {%NWL%e . preventDefault (  )  ; %NWL%var username = this . $ (  ' input [ name = username ]  '  )  . val (  )  ; %NWL%var email = this . $ (  ' input [ name = email ]  '  )  . val (  )  ; %NWL%var password = this . $ (  ' input [ name = password ]  '  )  . val (  )  ; %NWL%8
if ( i ! =  = 0 )  {%NWL%result +  =  "  "  ;  /  / $NON - NLS - 0$%NWL%}%NWL%result +  = getUserKeyStrokeString ( keys [ i ]  )  ;%NWL%}%NWL%return result ;%NWL%}%NWL%function getUserText ( options )  {%NWL%var id = options . id ; %NWL%var refNode = options . refNode ; %NWL%var hideRefNode = options . hideRefNode ; %NWL%8
stream . _handle . unref (  )  ;%NWL%}%NWL%break ; %NWL%case ' FILE '  : %NWL%var fs = require (  ' fs '  )  ; %NWL%stream = new fs . SyncWriteStream ( fd ,  { autoClose : false }  )  ; %NWL%stream . _type =  ' fs '  ; %NWL%break ; %NWL%case ' PIPE '  : %NWL%case ' TCP '  : %NWL%var net = require (  ' net '  )  ; %NWL%4
var loggingDBPool = account_db_facade . __get__ (  ' loggingDBPool '  )  ; %NWL%accountDBPool . drain ( function (  )  { accountDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%loggingDBPool . drain ( function (  )  { loggingDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%module . exports =  {%NWL%setUp : function ( callback )  {%NWL%account_db_facade . __set__ (  ' accountDBPool '  , createAccountDBPool (  )  )  ; %NWL%account_db_facade . __set__ (  ' loggingDBPool '  , createLoggingDBPool (  )  )  ; %NWL%callback (  )  ;%NWL%}  ,%NWL%tearDown : function ( callback )  {%NWL%var accountDBPool = account_db_facade . __get__ (  ' accountDBPool '  )  ; %NWL%0
}  ; %NWL%var toTutorial = exports . toTutorial = function ( tutorial , content , missingOpts )  {%NWL%if ( !tutorial )  {%NWL%require (  ' jsdoc / util / logger '  )  . error ( new Error (  ' Missing required parameter : tutorial '  )  )  ; %NWL%return null ;%NWL%}%NWL%var node = tutorials . getByName ( tutorial )  ; %NWL%if ( !node )  {%NWL%missingOpts = missingOpts || {  }  ; %NWL%var tag = missingOpts . tag ; %NWL%var classname = missingOpts . classname ; %NWL%9
}%NWL%else {%NWL%value = parseFloat ( value )  ;%NWL%}%NWL%return value ;%NWL%}%NWL%function setNumberFieldValue ( field , value )  {%NWL%if ( !isNaN ( value )  )  {%NWL%value = parseFloat ( value )  ; %NWL%var min  = field . getAttribute (  " data - min "  )  ; %NWL%var max  = field . getAttribute (  " data - max "  )  ; %NWL%9
var Q = require (  ' q '  )  ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var cheerio = require (  ' cheerio '  )  ; %NWL%var domSerializer = require (  ' dom - serializer '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var crc = require (  " crc "  )  ; %NWL%var links = require (  '  .  / links '  )  ; %NWL%var imgUtils = require (  '  .  / images '  )  ; %NWL%var fs = require (  '  .  / fs '  )  ; %NWL%8
tokens . forEach ( addToAllByRangeStart )  ; %NWL%comments . forEach ( addToAllByRangeStart )  ; %NWL%return Object . keys ( all )%NWL%. map ( function ( k )  { return all [ k ]  ;  }  )  ;%NWL%}%NWL%function redeyed ( code , config , opts )  {%NWL%opts = opts || {  }  ; %NWL%code = code . replace (  / ^\#\! .  *  /  ,  '  '  )  ; %NWL%var ast = esprima . parse ( code ,  { tokens : true , comment : true , range : true , tolerant : true }  )%NWL%, tokens = ast . tokens%NWL%, comments = ast . comments%NWL%9
Session . set (  ' timeSpent '  , data )  ;%NWL%}%NWL%return data ;%NWL%}  )  ;%NWL%}  , 1000 )  ; %NWL%return doingInterval ;%NWL%}  ; %NWL%makeTime = function ( totalTime )  {%NWL%var duration = moment . duration ( totalTime )  ; %NWL%var seconds = addZero ( duration . seconds (  )  )  ; %NWL%var minutes = addZero ( duration . minutes (  )  )  ; %NWL%9
}  ,%NWL%tileWorldY : function ( tileX , tileY )  {%NWL%return ( tileX + tileY - 1 )  * this . tileMap . tileHeight / 2 ;%NWL%}  ,%NWL%tileScreenY : function ( tileX , tileY )  {%NWL%return this . screenY ( this . tileWorldY ( tileX , tileY )  )  ;%NWL%}  ,%NWL%worldTileX : function ( worldX , worldY )  {%NWL%var screenWidth = this . scene . viewPort . w ; %NWL%var tileWidth = this . tileMap . tileWidth ; %NWL%var tileHeight = this . tileMap . tileHeight ; %NWL%9
var DETECT_BLOB_SUPPORT_STORE = idbConstants . DETECT_BLOB_SUPPORT_STORE ; %NWL%var DOC_STORE = idbConstants . DOC_STORE ; %NWL%var LOCAL_STORE = idbConstants . LOCAL_STORE ; %NWL%var META_STORE = idbConstants . META_STORE ; %NWL%var applyNext = idbUtils . applyNext ; %NWL%var compactRevs = idbUtils . compactRevs ; %NWL%var decodeDoc = idbUtils . decodeDoc ; %NWL%var decodeMetadata = idbUtils . decodeMetadata ; %NWL%var encodeMetadata = idbUtils . encodeMetadata ; %NWL%var fetchAttachmentsIfNecessary = idbUtils . fetchAttachmentsIfNecessary ; %NWL%var idbError = idbUtils . idbError ; %NWL%4
}  ; %NWL%function isElement ( o )  {%NWL%return (%NWL%typeof HTMLElement =  =  =  " object " ? o instanceof HTMLElement :  /  / DOM2%NWL%o && typeof o =  =  =  " object " && o . nodeType =  =  = 1 && typeof o . nodeName =  =  =  " string "%NWL%)  ;%NWL%}%NWL%var lastTime = 0 ; %NWL%var prefixes =  ' webkit moz ms o '  . split (  '  '  )  ; %NWL%var requestAnimationFrame = window . requestAnimationFrame ; %NWL%var cancelAnimationFrame = window . cancelAnimationFrame ; %NWL%9
}%NWL%return modifiedContents ;%NWL%}%NWL%i18nUtil . makeFlatBundleContents = function ( prefix , prefixPath , srcFileName )  {%NWL%var bundleParts = i18nUtil . getBundlePartsFromFileName ( prefix , prefixPath , srcFileName )  ; %NWL%if ( !bundleParts )  {%NWL%return null ;%NWL%}%NWL%var moduleName = bundleParts . moduleName ; %NWL%var bundleName = bundleParts . bundleName ; %NWL%var localeName = bundleParts . localeName ; %NWL%8
element . addClass ( placement )  ; %NWL%element . css (  {%NWL%top : popupPosition . top ! =  = undefined ? popupPosition . top +  ' px '  :  ' initial '  ,%NWL%left : popupPosition . left ! =  = undefined ? popupPosition . left +  ' px '  :  ' initial '  ,%NWL%right : popupPosition . right ! =  = undefined ? popupPosition . right +  ' px '  :  ' initial '  ,%NWL%display :  ' block '  ,%NWL%maxHeight : maxHeight%NWL%}  )  ; %NWL%var header = element . find (  '  . popover - title '  )  ; %NWL%var content = element . find (  '  . popover - content '  )  ; %NWL%var footer = element . find (  '  . popover - footer '  )  ; %NWL%9
' use strict '  ; %NWL%var should = require (  ' should '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var Url = require (  ' url '  )  ; %NWL%var MemCache = require (  ' volos - cache - memory '  )  ; %NWL%var REDIRECT_URL =  ' http :  /  / example . org '  ; %NWL%exports . verifyOauth = function ( config )  {%NWL%var oauth = config . oauth ; %NWL%var creator = config . fixtureCreator ; %NWL%var validUserCreds = config . validUserCreds ; %NWL%8
this . suite . slow ( slow )  ; %NWL%return this ;%NWL%}  ; %NWL%Mocha . prototype . asyncOnly = function (  )  {%NWL%this . options . asyncOnly = true ; %NWL%return this ;%NWL%}  ; %NWL%Mocha . prototype . run = function ( fn )  {%NWL%if ( this . files . length ) this . loadFiles (  )  ; %NWL%var suite = this . suite ; %NWL%var options = this . options ; %NWL%9
TabTie . superclass . init . call ( this , notes , text )  ; %NWL%this . render_options . cp1 = 9 ; %NWL%this . render_options . cp2 = 11 ; %NWL%this . render_options . y_shift = 3 ; %NWL%this . setNotes ( notes )  ;%NWL%}  ,%NWL%draw : function (  )  {%NWL%if ( !this . context )%NWL%throw new Vex . RERR (  " NoContext "  ,  " No context to render tie .  "  )  ; %NWL%var first_note = this . first_note ; %NWL%var last_note = this . last_note ; %NWL%9
}%NWL%}  )  ;%NWL%}  ; %NWL%Template . contact . events (  {%NWL%' success . form . bv form '  : function ( event , template )  {%NWL%console . log (  ' clicked submit '  )  ; %NWL%$ (  ' button [ type = submit ]  '  )  . prop (  ' disabled '  , true )  ; %NWL%event . preventDefault (  )  ; %NWL%var name = template . find (  ' input [ name = name ]  '  )  . value ; %NWL%var email = template . find (  ' input [ name = email ]  '  )  . value ; %NWL%var phone = template . find (  ' input [ name = phone ]  '  )  . value ; %NWL%9
}%NWL%if ( members . globals . length )  { generate (  ' Global '  ,  [  { kind :  ' globalobj '  }  ]  , globalUrl )  ;  }%NWL%var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%9
var Resolver = require (  " enhanced - resolve / lib / Resolver "  )  ; %NWL%var NormalModuleFactory = require (  "  .  / NormalModuleFactory "  )  ; %NWL%var ContextModuleFactory = require (  "  .  / ContextModuleFactory "  )  ; %NWL%var NullFactory = require (  "  .  / NullFactory "  )  ; %NWL%var ModuleDependency = require (  "  .  / dependencies / ModuleDependency "  )  ; %NWL%var SingleEntryDependency = require (  "  .  / dependencies / SingleEntryDependency "  )  ; %NWL%var CommonJsRequireDependency = require (  "  .  / dependencies / CommonJsRequireDependency "  )  ; %NWL%var RequireResolveDependency = require (  "  .  / dependencies / RequireResolveDependency "  )  ; %NWL%var RequireResolveHeaderDependency = require (  "  .  / dependencies / RequireResolveHeaderDependency "  )  ; %NWL%var RequireEnsureDependency = require (  "  .  / dependencies / RequireEnsureDependency "  )  ; %NWL%var RequireEnsureItemDependency = require (  "  .  / dependencies / RequireEnsureItemDependency "  )  ; %NWL%4
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
renderItem : function ( itemValue )  {%NWL%if ( this . list && this . list . renderItem )  {%NWL%return this . list . renderItem ( itemValue )  ;%NWL%} else {%NWL%return "  < div >  "  + itemValue +  "  <  / div >  "  ;%NWL%}%NWL%}  ,%NWL%showBottomLoader : function ( show )  {%NWL%if ( show )  {%NWL%var offset = this . container . offset (  )  ; %NWL%var width = this . container . width (  )  ; %NWL%9
var conn , child = this . getChildren (  )  [ 0 ]  ; %NWL%var setSeparator = dojo . hitch ( this , function (  )  {%NWL%if ( conn )  {%NWL%this . disconnect ( conn )  ;%NWL%}%NWL%delete conn ; %NWL%var item = child . items [ 0 ]  ; %NWL%if ( item )  {%NWL%var store = this . store ; %NWL%var parent = store . getValue ( item , this . parentAttr )  ; %NWL%var path = store . getValue ( item , this . pathAttr )  ; %NWL%9
var fs = require (  ' fs '  )%NWL%var helper = require (  '  .  / lib / phantomjs '  )%NWL%var http = require (  ' http '  )%NWL%var kew = require (  ' kew '  )%NWL%var ncp = require (  ' ncp '  )%NWL%var npmconf = require (  ' npmconf '  )%NWL%var mkdirp = require (  ' mkdirp '  )%NWL%var path = require (  ' path '  )%NWL%var rimraf = require (  ' rimraf '  )  . sync%NWL%var url = require (  ' url '  )%NWL%var util = require (  ' util '  )%NWL%0
var isLeaf = treeRequest . get (  ' isLeaf '  )  ; %NWL%var enableCheckSelection = treeRequest . get (  ' enableCheckedItems '  )  ; %NWL%var nodeToAppendTo = treeRequest . get (  ' nodeToAppendTo '  )  ; %NWL%var nodeType = treeRequest . get (  ' nodeType '  )  ; %NWL%var expanded = treeRequest . get (  ' expanded '  )  ; %NWL%var expandable = treeRequest . get (  ' expandable '  )  ; %NWL%var callbackFunc = treeRequest . get (  ' callbackFunc '  )  ; %NWL%var callbackScope = treeRequest . get (  ' callbackScope '  )  ; %NWL%var removeParentWhenNoChildrenExist = treeRequest . get (  ' removeParentWhenNoChildrenExist '  )  ; %NWL%var includeToolTip = treeRequest . get (  ' includeToolTip '  )  ; %NWL%var toolTipFieldName = treeRequest . get (  ' toolTipFieldName '  )  ; %NWL%0
var PostBook = require (  "  .  .  /  .  .  / libs / post - book "  )  ; %NWL%var PostSocai = require (  "  .  .  /  .  .  / libs / post - socai "  )  ; %NWL%var arrayfuncs = require (  "  .  .  /  .  .  / libs / array - funcs "  )  ; %NWL%var Vatvao = require (  "  .  .  /  .  .  / models / vatvao "  )  ; %NWL%var Vatra = require (  "  .  .  /  .  .  / models / vatra "  )  ; %NWL%var Vsocai = require (  "  .  .  /  .  .  / models / vsocai "  )  ; %NWL%var socai = require (  "  .  .  /  .  .  / models / socai "  )  ; %NWL%var dvcs = require (  "  .  .  /  .  .  / models / dvcs "  )  ; %NWL%var account = require (  "  .  .  /  .  .  / models / account "  )  ; %NWL%var dmdt = require (  "  .  .  /  .  .  / models / dmdt "  )  ; %NWL%var customer = require (  "  .  .  /  .  .  / models / customer "  )  ; %NWL%6
var trade_flow = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_trade "  )  . data (  )  . abbrv ; %NWL%var country_origin = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_country_origin "  )  . data (  )  . abbrv ; %NWL%var country_dest = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_country_dest "  )  . data (  )  . abbrv ; %NWL%var product =  " show "  ; %NWL%var sub_heading =  " Top Products "  ; %NWL%break ; %NWL%case " cspy "  : %NWL%var trade_flow = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_trade "  )  . data (  )  . abbrv ; %NWL%var country_origin = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_country_origin "  )  . data (  )  . abbrv ; %NWL%var country_dest =  " show "  ; %NWL%var product = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_product "  )  . data (  )  . abbrv ; %NWL%1
array [ i ]  +  = buffer [  ( bufferPos - offsetSamples + bufferLength ) % bufferLength ]  ; %NWL%bufferPos =  ( bufferPos + 1 ) % bufferLength ;%NWL%}%NWL%this . bufferPos = bufferPos ;%NWL%}  ; %NWL%jfxr . Synth . BitCrush = function ( sound , array )  {%NWL%}  ; %NWL%jfxr . Synth . BitCrush . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%var numSamples = array . length ; %NWL%var bitCrush = sound . bitCrush . value ; %NWL%var bitCrushSweep = sound . bitCrushSweep . value ; %NWL%9
this . phase = 0 ; %NWL%this . prevPhase = 0 ;%NWL%}  ; %NWL%jfxr . Synth . Generator . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%var sampleRate = sound . sampleRate . value ; %NWL%var harmonics = sound . harmonics . value ; %NWL%var harmonicsFalloff = sound . harmonicsFalloff . value ; %NWL%var firstHarmonicAmp = this . firstHarmonicAmp ; %NWL%var oscillators = this . oscillators ; %NWL%var random = new jfxr . Random ( 0x3cf78ba3 )  ; %NWL%var phase = this . phase ; %NWL%7
marginTop : 10 ,%NWL%marginBottom : 3 ,%NWL%height : 10 ,%NWL%x : Ember . computed (  ' xMin '  ,  ' xScale '  , function (  )  {%NWL%var xScale = this . get (  ' xScale '  )  ; %NWL%var xMin = this . get (  ' xMin '  )  ; %NWL%return xScale ( xMin )  ;%NWL%}  )  ,%NWL%width : Ember . computed (  ' xScale '  ,  ' xMin '  ,  ' xMax '  , function (  )  {%NWL%var xScale = this . get (  ' xScale '  )  ; %NWL%var xMax = this . get (  ' xMax '  )  ; %NWL%4
goog . require (  ' goog . events . EventType '  )  ; %NWL%goog . require (  ' goog . events . KeyCodes '  )  ; %NWL%goog . require (  ' goog . object '  )  ; %NWL%goog . require (  ' goog . ui . Component '  )  ; %NWL%goog . require (  ' soy '  )  ; %NWL%goog . scope ( function (  )  {%NWL%var ext = e2e . ext ; %NWL%var ui = e2e . ext . ui ; %NWL%var constants = e2e . ext . constants ; %NWL%var templates = e2e . ext . ui . templates . webview ; %NWL%var utils = e2e . ext . utils ; %NWL%7
if ( typeof module ! =  ' undefined '  ) module . exports = definition ( name , context )  ; %NWL%else if ( typeof define =  =  ' function ' && typeof define . amd  =  =  ' object '  ) define ( definition )  ; %NWL%else context [ name ]  = definition ( name , context )  ;%NWL%}  (  ' bean '  , this , function ( name , context )  {%NWL%var win    = window%NWL%, old    = context [ name ]%NWL%, namespaceRegex =  /  [ ^\ .  ]  *  ( ? = \ .  .  *  ) \ . | .  *  /%NWL%, nameRegex   =  / \ .  .  *  /%NWL%, addEvent   =  ' addEventListener '%NWL%, attachEvent  =  ' attachEvent '%NWL%, removeEvent  =  ' removeEventListener '%NWL%8
var input = document . createElement (  " input "  )  ; %NWL%doh . t ( dojo . attr ( input ,  " tabIndex "  )  <  = 0 )  ; %NWL%dojo . attr ( input ,  " tabIndex "  ,  - 1 )  ; %NWL%doh . is (  - 1 , dojo . attr ( input ,  " tabIndex "  )  )  ; %NWL%dojo . attr ( input ,  " tabIndex "  , 0 )  ; %NWL%doh . is ( 0 , dojo . attr ( input ,  " tabIndex "  )  )  ; %NWL%dojo . attr ( input ,  " tabIndex "  , 1 )  ; %NWL%doh . is ( 1 , dojo . attr ( input ,  " tabIndex "  )  )  ;%NWL%}  ,%NWL%function removeTabindexFromDiv ( t )  {%NWL%var div = document . createElement (  " div "  )  ; %NWL%0
out . renderDustBody ( bodies . block , context )  ;%NWL%}  ; %NWL%return params ;%NWL%}  ,%NWL%render : function ( input , out )  {%NWL%var widgetsContext = raptorWidgets . getWidgetsContext ( out )  ; %NWL%var tagName = input . tagName || ' div '  ; %NWL%var widgetConfig = input . config ; %NWL%var assignedId = input . assignedId ; %NWL%var modulePath = input . module ; %NWL%var renderBody = input . renderBody ; %NWL%8
var events = require (  ' events '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var params = require (  '  .  / params '  )  ; %NWL%var envConf = require (  '  .  .  / config / environment '  )  ; %NWL%var config = require (  '  .  .  / config / configuration '  )  ; %NWL%var database = require (  '  .  .  / config / database '  )  ; %NWL%var middleware = require (  '  .  .  / config / middleware '  )  ; %NWL%var session = require (  '  .  .  / config / session '  )  ; %NWL%var Resource = require (  '  .  / router '  )  . Resource ; %NWL%var locales = require (  '  .  / locales '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%0
return new WrappedRange (%NWL%startPoint . node ,%NWL%startPoint . offset ,%NWL%endPoint . node ,%NWL%endPoint . offset%NWL%)  ;%NWL%}  ; %NWL%this . nodes = function ( pred , options )  {%NWL%pred = pred || func . ok ; %NWL%var includeAncestor = options && options . includeAncestor ; %NWL%var fullyContains = options && options . fullyContains ; %NWL%9
main . consumes =  [%NWL%" Plugin "  ,  " proc "  ,  " c9 "  ,  " pubsub "  ,  " auth "%NWL%]  ; %NWL%main . provides =  [  " plugin . installer "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Plugin = imports . Plugin ; %NWL%var c9 = imports . c9 ; %NWL%var proc = imports . proc ; %NWL%var auth = imports . auth ; %NWL%var pubsub = imports . pubsub ; %NWL%6
setup : expect . html . mocked%NWL%}  ,%NWL%{%NWL%consumes :  [  " DockableLayout "  ,  " DockableWidget "  ,  " DockableAbsoluteRenderer "  ]  ,%NWL%provides :  [  ]  ,%NWL%setup : main%NWL%}%NWL%]  , architect )  ; %NWL%function main ( options , imports , register )  {%NWL%var DockableLayout = imports . DockableLayout ; %NWL%var DockableWidget = imports . DockableWidget ; %NWL%9
var request = require (  " request "  )  ; %NWL%var loop = require (  "  .  .  / loop "  )  ; %NWL%var apiPrefix = loop . apiPrefix ; %NWL%var apiRouter = loop . apiRouter ; %NWL%var hmac = require (  "  .  .  / loop / hmac "  )  ; %NWL%var errors = require (  "  .  .  / loop / errno . json "  )  ; %NWL%var getMiddlewares = require (  "  .  / support "  )  . getMiddlewares ; %NWL%var expectFormattedError = require (  "  .  / support "  )  . expectFormattedError ; %NWL%var attachOrCreateOAuthHawkSession = loop . auth . attachOrCreateOAuthHawkSession ; %NWL%var statsdClient = loop . statsdClient ; %NWL%var conf = loop . conf ; %NWL%2
if ( config . backgroundColor )  {%NWL%this . canvas . style . backgroundColor = config . backgroundColor ;%NWL%}%NWL%this . _opacity =  ( config . opacity || 0 )  * 255 ; %NWL%this . _maxOpacity =  ( config . maxOpacity || config . defaultMaxOpacity )  * 255 ; %NWL%this . _minOpacity =  ( config . minOpacity || config . defaultMinOpacity )  * 255 ; %NWL%this . _useGradientOpacity = !!config . useGradientOpacity ;%NWL%}  ,%NWL%_drawAlpha : function ( data )  {%NWL%var min = this . _min = data . min ; %NWL%var max = this . _max = data . max ; %NWL%9
const parser   = require (  "  .  / parser "  )  ; %NWL%const path    = require (  " path "  )  ; %NWL%const person   = require (  "  .  / person "  )  . person ; %NWL%const server   = require (  "  .  / server "  )  . server ; %NWL%const trailing   = require (  "  .  / message "  )  . trailing ; %NWL%const COMMAND   = constants . COMMAND ; %NWL%const ERROR   = constants . ERROR ; %NWL%const EVENT   = constants . EVENT ; %NWL%const LEVEL   = constants . LEVEL ; %NWL%const MODE    = constants . MODE ; %NWL%const NODE    = constants . NODE ; %NWL%5
var core = breeze . core ; %NWL%var EntityQuery = breeze . EntityQuery ; %NWL%var MetadataStore = breeze . MetadataStore ; %NWL%var EntityManager = breeze . EntityManager ; %NWL%var EntityKey = breeze . EntityKey ; %NWL%var DataType = breeze . DataType ; %NWL%var FilterQueryOp = breeze . FilterQueryOp ; %NWL%var Predicate = breeze . Predicate ; %NWL%var QueryOptions = breeze . QueryOptions ; %NWL%var FetchStrategy = breeze . FetchStrategy ; %NWL%var MergeStrategy = breeze . MergeStrategy ; %NWL%0
var oldWidth = field . style . width ; %NWL%var oldHeight = field . style . height ; %NWL%goog . style . setStyle ( field ,  ' visibility '  ,  ' hidden '  )  ; %NWL%var startDiv = dh . createDom ( goog . dom . TagName . DIV ,%NWL%{  ' style '  :  ' height : 0 ; clear : both '  ,  ' innerHTML '  :  ' &nbsp ;  '  }  )  ; %NWL%var endDiv = startDiv . cloneNode ( true )  ; %NWL%field . insertBefore ( startDiv , field . firstChild )  ; %NWL%goog . dom . appendChild ( field , endDiv )  ; %NWL%var contentBox = goog . style . getContentBoxSize ( field )  ; %NWL%var width = contentBox . width ; %NWL%var height = contentBox . height ; %NWL%9
radius : 25 ,%NWL%ratio : 1 . 5%NWL%}  ,%NWL%initialize : function (  )  {%NWL%var url = App . BASE +  '  / issues_involvement '  ; %NWL%var cb = this . drawIssuesInvolvement . bind ( this )  ; %NWL%App . utils . httpGet ( url , cb , displayFailMessage )  ;%NWL%}  ,%NWL%drawIssuesInvolvement : function ( json )  {%NWL%var width = this . $el . width (  )  ; %NWL%var height = this . $el . height (  )  ; %NWL%9
ctx . fillRect ( simpleMotionDetector . averageX . getValue (  )  - cubeWidth * 0 . 5 , simpleMotionDetector . averageY . getValue (  )  , cubeWidth * 1 . 5 , cubeHeight * 0 . 5 )  ; %NWL%ctx . fillRect ( simpleMotionDetector . averageX . getValue (  )  , simpleMotionDetector . averageY . getValue (  )  - cubeHeight * 0 . 5 , cubeWidth * 0 . 5 , cubeHeight * 1 . 5 )  ;%NWL%}%NWL%SimpleMotionDetector . prototype . updateCameraPosition = function (  )  {%NWL%var distanceFromMiddleX = this . averageX . getValue (  )  * PIXELS_HORIZONTAL / WIDTH - PIXELS_HORIZONTAL / 2 ; %NWL%var alpha = this . amplificationAlpha * Math . asin ( distanceFromMiddleX / PIXELS_HORIZONTAL )  + Math . PI / 180 * this . offsetAlpha ; %NWL%var distanceFromMiddleY =  ( PIXELS_VERTICAL / 2 - this . averageY . getValue (  )  / HEIGHT * PIXELS_VERTICAL )  ; %NWL%var gamma = this . amplificationGamma * Math . asin ( distanceFromMiddleY / PIXELS_VERTICAL )  + Math . PI / 180 * this . offsetGamma ; %NWL%var x = camera . position . x ; %NWL%var z = camera . position . z ; %NWL%var y = camera . position . y ; %NWL%8
var employees =  [  ]  ; %NWL%var addresses =  [  ]  ; %NWL%var names  =  [  ]  ; %NWL%var positions =  [  ]  ; %NWL%var genders  =  [  ]  ; %NWL%var ids   =  [  ]  ; %NWL%var salaries  =  [  ]  ; %NWL%for ( var i = 0 ; i < 5 ; i +  +  )%NWL%{%NWL%var employee = doc . createElement (  " employee "  )  ; %NWL%var address  = doc . createElement (  " address "  )  ; %NWL%9
var utils = require (  '  .  / utils '  )  ; %NWL%var vec = utils . vec ; %NWL%var arr = utils . arr ; %NWL%var weapon_descriptions = require (  '  .  / weapon_descriptions '  )  ; %NWL%var combatracer = require (  '  .  / combatracer '  )  ; %NWL%var car_descriptions = require (  '  .  / car_descriptions '  )  ; %NWL%var cars = require (  '  .  / cars '  )  ; %NWL%var weapons = require (  '  .  / weapons '  )  ; %NWL%var animation = require (  '  .  / animation '  )  ; %NWL%var props = require (  '  .  / props '  )  ; %NWL%var settings = require (  '  .  / settings '  )  ; %NWL%3
{  ' x '  : this . right ,  ' y '  : this . top }  , source , dest )  ; %NWL%this . left  = Math . min ( ll . x , ul . x )  ; %NWL%this . bottom = Math . min ( ll . y , lr . y )  ; %NWL%this . right  = Math . max ( lr . x , ur . x )  ; %NWL%this . top  = Math . max ( ul . y , ur . y )  ; %NWL%return this ;%NWL%}  ,%NWL%wrapDateLine : function ( maxExtent , options )  {%NWL%options = options || {  }  ; %NWL%var leftTolerance = options . leftTolerance || 0 ; %NWL%var rightTolerance = options . rightTolerance || 0 ; %NWL%9
var _ = require (  ' lodash '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var cheerio = require (  ' cheerio '  )  ; %NWL%var domSerializer = require (  ' dom - serializer '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var crc = require (  " crc "  )  ; %NWL%var links = require (  '  .  / links '  )  ; %NWL%var imgUtils = require (  '  .  / images '  )  ; %NWL%var fs = require (  '  .  / fs '  )  ; %NWL%var batch = require (  '  .  / batch '  )  ; %NWL%7
}  ,%NWL%unGroup : function (  )  {%NWL%if ( Y . Lang . isValue ( this . selectedGroup )  )  {%NWL%var selGroup = this . selectedGroup ; %NWL%this . deselectGroup (  )  ; %NWL%selGroup . unGroup (  )  ;%NWL%}%NWL%}  ,%NWL%setGroupOptions : function (  )  {%NWL%var containerUIMap = this . display . containerUIMap ; %NWL%var groupUIMap = this . display . groupUIMap ; %NWL%9
sendStart +  = request . timing . sslEnd - request . timing . sslStart ; %NWL%addRow ( WebInspector . UIString (  " Sending "  )  ,  " sending "  , request . timing . sendStart , request . timing . sendEnd )  ; %NWL%addRow ( WebInspector . UIString (  " Waiting "  )  ,  " waiting "  , request . timing . sendEnd , request . timing . receiveHeadersEnd )  ; %NWL%addRow ( WebInspector . UIString (  " Receiving "  )  ,  " receiving "  ,  ( request . responseReceivedTime - request . timing . requestTime )  * 1000 ,  ( request . endTime - request . timing . requestTime )  * 1000 )  ; %NWL%const chartWidth = 200 ; %NWL%var total =  ( request . endTime - request . timing . requestTime )  * 1000 ; %NWL%var scale = chartWidth / total ; %NWL%for ( var i = 0 ; i < rows . length ;  +  + i )  {%NWL%var tr = document . createElement (  " tr "  )  ; %NWL%tableElement . appendChild ( tr )  ; %NWL%var td = document . createElement (  " td "  )  ; %NWL%8
}%NWL%}%NWL%}  ; %NWL%var next_k = function ( inNumSamples )  {%NWL%var out = this . outputs [ 0 ]  ; %NWL%var leftIn  = this . inputs [ 0 ]  ; %NWL%var rightIn = this . inputs [ 1 ]  ; %NWL%var nextPos  = this . inputs [ 2 ]  [ 0 ]  ; %NWL%var nextLevel = this . inputs [ 3 ]  [ 0 ]  ; %NWL%var leftAmp  = this . _leftAmp ; %NWL%var rightAmp  = this . _rightAmp ; %NWL%9
var self = $ ( this )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%if ( list && list . is (  '  : visible '  )  )  {%NWL%return ;%NWL%}%NWL%var seconds = _time2int ( this . value )  ; %NWL%if ( seconds =  =  = null )  {%NWL%self . trigger (  ' timeFormatError '  )  ; %NWL%return ;%NWL%}%NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%1
}%NWL%object . __defineGetter__ ( oldName , getter )  ;%NWL%}%NWL%function extractCallbackArgument ( args )%NWL%{%NWL%var lastArgument = args [ args . length - 1 ]  ; %NWL%return typeof lastArgument =  =  =  " function " ? lastArgument : undefined ;%NWL%}%NWL%var AuditCategory = declareInterfaceClass ( AuditCategoryImpl )  ; %NWL%var AuditResult = declareInterfaceClass ( AuditResultImpl )  ; %NWL%var Button = declareInterfaceClass ( ButtonImpl )  ; %NWL%8
}%NWL%}  )  ; %NWL%if ( mapData . features . length > 1 )  {%NWL%self . addLegend ( mapData , map )  ;%NWL%}%NWL%return featureLayer ;%NWL%}  ; %NWL%TileMap . prototype . shadedCircleMarkers = function ( map , mapData )  {%NWL%var self = this ; %NWL%var min = mapData . properties . allmin ; %NWL%var max = mapData . properties . allmax ; %NWL%9
}  ; %NWL%this . displayLoginPage = function ( req , res , next )  {%NWL%return res . render (  " login "  ,  {%NWL%userName :  "  "  ,%NWL%password :  "  "  ,%NWL%loginError :  "  "%NWL%}  )  ;%NWL%}  ; %NWL%this . handleLoginRequest = function ( req , res , next )  {%NWL%var userName = req . body . userName ; %NWL%var password = req . body . password ; %NWL%9
' use strict '  ; %NWL%var dargs = require (  ' dargs '  )  ; %NWL%module . exports = function ( grunt )  {%NWL%var path = require (  ' path '  )  ; %NWL%grunt . registerMultiTask (  ' haml '  ,  ' Compile Haml to HTML '  , function (  )  {%NWL%var options = this . options (  )  ; %NWL%var cb = this . async (  )  ; %NWL%grunt . verbose . writeflags ( options ,  ' Options '  )  ; %NWL%var bundleExec = options . bundleExec ; %NWL%delete options . bundleExec ; %NWL%var encoding = options . encoding ; %NWL%8
var swig = require (  ' swig '  )  ; %NWL%var subdomainOffset = process . env . SUBDOMAIN_OFFSET || 0 ; %NWL%var secrets = require (  '  .  / config / secrets '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var favicon = require (  ' serve - favicon '  )  ; %NWL%var logger = require (  ' morgan '  )  ; %NWL%var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var session = require (  ' express - session '  )  ; %NWL%var MongoStore = require (  ' connect - mongo '  )  (  { session : session }  )  ; %NWL%var mongoose = require (  ' mongoose '  )  ; %NWL%var passport = require (  ' passport '  )  ; %NWL%0
var currentLoadingStatePercentage = 0 ; %NWL%var firstTimeHide = true ; %NWL%var isShowed = true ; %NWL%var loadingStateText ; %NWL%var loadingStateStroke = null ; %NWL%var loadingMsg = document [  ' getElementById '  ]  (  " loadingMsg "  )  ; %NWL%if ( loadingMsg )  {%NWL%loadingMsg [  ' style '  ]  [  ' zIndex '  ]  =  " 9999 "  ; %NWL%loadingStateText = document [  ' getElementById '  ]  (  ' loadingStateText '  )  ;%NWL%}%NWL%var globalBackground = document [  ' getElementById '  ]  (  " globalBackground "  )  ; %NWL%5
var policy = policy || {  }  ; %NWL%var entitlement = entitlement || {  }  ;%NWL%( function (  )  {%NWL%var log = new Log (  )  ; %NWL%var PEPProxy = Packages . org . wso2 . carbon . identity . entitlement . proxy . PEPProxy ; %NWL%var PEPProxyConfig = Packages . org . wso2 . carbon . identity . entitlement . proxy . PEPProxyConfig ; %NWL%var Attribute = Packages . org . wso2 . carbon . identity . entitlement . proxy . Attribute ; %NWL%var AXIOMUtil = Packages . org . apache . axiom . om . util . AXIOMUtil ; %NWL%var OMElement = Packages . org . apache . axiom . om . OMElement ; %NWL%var QName = Packages . javax . xml . namespace . QName ; %NWL%var ProxyConstants = Packages . org . wso2 . carbon . identity . entitlement . proxy . ProxyConstants ; %NWL%4
return shape ;%NWL%}  , this )  ;%NWL%}  ; %NWL%_ . extend ( Starfield . prototype ,  {%NWL%_opacity : 0 . 0 ,%NWL%enableSoundAnalysis : true ,%NWL%update : function ( frequencies , length )  {%NWL%var ox = this . camera . translation . _x / this . camera . zoom ; %NWL%var oy = this . camera . translation . _y / this . camera . zoom ; %NWL%var width = this . two . width ; %NWL%var height = this . two . height ; %NWL%9
var Token = require (  " express - hawkauth "  )  . Token ; %NWL%var request = require (  " request "  )  ; %NWL%var loop = require (  "  .  .  / loop "  )  ; %NWL%var apiPrefix = loop . apiPrefix ; %NWL%var apiRouter = loop . apiRouter ; %NWL%var hmac = require (  "  .  .  / loop / hmac "  )  ; %NWL%var errors = require (  "  .  .  / loop / errno . json "  )  ; %NWL%var getMiddlewares = require (  "  .  / support "  )  . getMiddlewares ; %NWL%var expectFormattedError = require (  "  .  / support "  )  . expectFormattedError ; %NWL%var attachOrCreateOAuthHawkSession = loop . auth . attachOrCreateOAuthHawkSession ; %NWL%var statsdClient = loop . statsdClient ; %NWL%3
}  )  ;%NWL%}  ; %NWL%this . stop = function (  )  {%NWL%[  ]  . forEach . call ( self . container . querySelectorAll (  '  . track '  )  , function ( track )  {%NWL%track . style . webkitAnimationPlayState =  ' paused '  ; %NWL%track . style . animationPlayState =  ' paused '  ;%NWL%}  )  ;%NWL%}  ; %NWL%this . update = function ( ship )  {%NWL%var x = ship . x *  - 0 . 3 ; %NWL%var y = ship . y *  - 0 . 3 ; %NWL%9
var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  ,  [  ]  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%var mappings = util . getArg ( sourceMap ,  ' mappings '  )  ; %NWL%var file = util . getArg ( sourceMap ,  ' file '  , null )  ; %NWL%7
if ( err . stack )  {%NWL%res . write (  "  "  + err . stack )  ;%NWL%}%NWL%res . end (  )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}%NWL%exports . install = function ( app , filesystem )  {%NWL%var getUserHome = filesystem . getUserHome ; %NWL%var isDirectory = filesystem . isDirectory ; %NWL%9
var stop = stops [ i ]  ; %NWL%colors . push ( stop . offset * expansion + shift +  '  '  + stop . color )  ;%NWL%}%NWL%lineStr . push (  '  < g_vml_ : fill type =  "  '  , fillStyle . type_ ,  '  "  '  ,%NWL%' method =  " none " focus =  " 100% "  '  ,%NWL%' color =  "  '  , color1 ,  '  "  '  ,%NWL%' color2 =  "  '  , color2 ,  '  "  '  ,%NWL%' colors =  "  '  , colors . join (  '  ,  '  )  ,  '  "  '  ,%NWL%' opacity =  "  '  , opacity2 ,  '  "  '  ,%NWL%' g_o_ : opacity2 =  "  '  , opacity1 ,  '  "  '  ,%NWL%' angle =  "  '  , angle ,  '  "  '  ,%NWL%6
req . body =  "  "  ; %NWL%req . _bodyEof = true ; %NWL%if ( next ) next (  )  ;%NWL%}  ; %NWL%function readBody ( req , res , next )  {%NWL%if ( req . _bodyEof ! =  = undefined ) return next ? next (  )  : null ; %NWL%req . _bodyEof = false ; %NWL%var data =  "  "  ; %NWL%var databuf ; %NWL%var readBinary = req . restiq . _opts . readBinary ; %NWL%var readImmediate = req . restiq . _opts . readImmediate ; %NWL%9
" string "  : exprs . StringExpr ,%NWL%" boolean "  : exprs . BooleanExpr ,%NWL%" date "  : exprs . DateExpr ,%NWL%" time "  : exprs . TimeExpr%NWL%}  ,%NWL%defaultArgs :  {%NWL%" boolean "  :  {%NWL%" falseValue "  :  " false "  ,%NWL%" convert "  : function ( dataValue , args )  {%NWL%var falseValue = args . falseValue ; %NWL%var trueValue = args . trueValue ; %NWL%9
this . _yField = config [  ' yField '  ] || config . defaultYField ; %NWL%this . _valueField = config [  ' valueField '  ] || config . defaultValueField ; %NWL%if ( config [  " radius "  ]  )  {%NWL%this . _cfgRadius = config [  " radius "  ]  ;%NWL%}%NWL%}  ; %NWL%var defaultRadius = HeatmapConfig . defaultRadius ; %NWL%Store . prototype =  {%NWL%_organiseData : function ( dataPoint , forceRender )  {%NWL%var x = dataPoint [ this . _xField ]  ; %NWL%var y = dataPoint [ this . _yField ]  ; %NWL%9
if ( c . m_next )  {%NWL%c . m_next . m_prev = c . m_prev ;%NWL%}%NWL%if ( c =  = this . m_world . m_contactList )  {%NWL%this . m_world . m_contactList = c . m_next ;%NWL%}%NWL%if ( c . GetManifoldCount (  )  > 0 )  {%NWL%var body1 = c . m_shape1 . m_body ; %NWL%var body2 = c . m_shape2 . m_body ; %NWL%var node1 = c . m_node1 ; %NWL%var node2 = c . m_node2 ; %NWL%9
}  ; %NWL%feature . listen = function ( cmdName , options )  {%NWL%var library = feature . libraries [  ( options && options . library ) || feature . defaultLibrary ]  ; %NWL%return fluentSubscriberFactory ( cmdName , library . evtListenerFactory )  ;%NWL%}  ; %NWL%feature . setup = function ( struct , builder , options )  {%NWL%var library = feature . libraries [ options . library || feature . defaultLibrary ]  ; %NWL%var sendCommand = options . sendCommand || library . sendCommand ; %NWL%var publishEvent = options . publishEvent || library . publishEvent ; %NWL%var destroyCmdHandler = options . destroyCmdHandler || library . destroyCmdHandler ; %NWL%var destroyListenerHandler = options . destroyListenerHandler || library . destroyListenerHandler ; %NWL%7
var sliced = mapping . slice ( this , start , end )  ; %NWL%if ( sliced )  {%NWL%newMappings . push ( sliced )  ;%NWL%}%NWL%}  , this )  ;%NWL%}%NWL%return lines ;%NWL%}  ; %NWL%function sliceInfo ( info , startCol , endCol )  {%NWL%var sliceStart = info . sliceStart ; %NWL%var sliceEnd = info . sliceEnd ; %NWL%9
var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%var event = _dereq_ (  '  .  / event '  )  ; %NWL%var html = _dereq_ (  '  .  / html '  )  ; %NWL%var selector = _dereq_ (  '  .  / selector '  )  ; %NWL%var selector_extra = _dereq_ (  '  .  / selector_extra '  )  ; %NWL%if ( selector ! =  = undefined )  {%NWL%$ = selector . $ ; %NWL%$ . matches = selector . matches ; %NWL%api . find = selector . find ;%NWL%}%NWL%var mode = _dereq_ (  '  .  / mode '  )  ; %NWL%0
var defaults =  {%NWL%moveDragger : false ,%NWL%callback : true%NWL%}  ; %NWL%var options = $ . extend ( defaults , options )  ; %NWL%var $this = $ ( this )  ; %NWL%var scrollToPos ; %NWL%var mCustomScrollBox = $this . find (  "  . mCustomScrollBox "  )  ; %NWL%var mCSB_container = mCustomScrollBox . children (  "  . mCSB_container "  )  ; %NWL%if ( !$ ( document )  . data (  " mCS - is - touch - device "  )  )  {%NWL%var mCSB_draggerContainer = $this . find (  "  . mCSB_draggerContainer "  )  ; %NWL%7
sld . namedLayers [ name ]  =  { name : name , userStyles :  [  ]  }  ; %NWL%var symbolizer = this . selectionSymbolizer ; %NWL%var geometryAttribute = geometryAttributes [ i ]  ; %NWL%if ( geometryAttribute . type . indexOf (  ' Polygon '  )  >  = 0 )  {%NWL%symbolizer =  { Polygon : this . selectionSymbolizer [  ' Polygon '  ]  }  ;%NWL%} else if ( geometryAttribute . type . indexOf (  ' LineString '  )  >  = 0 )  {%NWL%symbolizer =  { Line : this . selectionSymbolizer [  ' Line '  ]  }  ;%NWL%} else if ( geometryAttribute . type . indexOf (  ' Point '  )  >  = 0 )  {%NWL%symbolizer =  { Point : this . selectionSymbolizer [  ' Point '  ]  }  ;%NWL%}%NWL%var filter = filters [ i ]  ; %NWL%2
var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%var displayed = solver . displayed ; %NWL%var id = solver . id ; %NWL%var timeStep = solver . timeStep ; %NWL%var userTimeStep = solver . userTimeStep ; %NWL%1
promise . then ( null , handler2 )  ; %NWL%promise . then ( null , handler3 )  ; %NWL%promise . then ( null , function (  )  {%NWL%sinon . assert . callOrder ( handler1 , handler2 , handler3 )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " even when one handler is added inside another handler "  , function (  )  {%NWL%testRejected ( dummy , function ( promise , done )  {%NWL%var handler1 = sinon . spy ( function handler1 (  )  {  }  )  ; %NWL%var handler2 = sinon . spy ( function handler2 (  )  {  }  )  ; %NWL%9
fn : this . _continueCallingFilters ,%NWL%args : args ,%NWL%scope : this%NWL%}  )  ;%NWL%} else {%NWL%this . _continueCallingFilters ( null , args )  ;%NWL%}%NWL%}  ,%NWL%_continueCallingFilters : function ( unused , args )  {%NWL%var filters = args . filters ; %NWL%var request = args . request ; %NWL%9
Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%var displayed = solver . displayed ; %NWL%var id = solver . id ; %NWL%var timeStep = solver . timeStep ; %NWL%2
, spawn = require (  ' child_process '  )  . spawn%NWL%, path = require (  ' path '  )%NWL%, Batch = require (  ' batch '  )%NWL%, fs = require (  ' fs '  )%NWL%, http = require (  ' http '  )%NWL%, url = require (  ' url '  )%NWL%, assert = require (  ' assert '  )%NWL%, querystring = require (  ' querystring '  )%NWL%, superagent = require (  ' superagent '  )%NWL%, EventSource = require (  ' eventsource '  )%NWL%, s3 = require (  ' s3 '  )%NWL%1
var is_number =  /  [ 0 - 9 ]  /  ; %NWL%if ( obj . is (  ' input '  )  )%NWL%value = obj . val (  )  ; %NWL%else%NWL%value = obj . html (  )  ; %NWL%var prefix = options . prefix ; %NWL%var suffix = options . suffix ; %NWL%var centsSeparator = options . centsSeparator ; %NWL%var thousandsSeparator = options . thousandsSeparator ; %NWL%var limit = options . limit ; %NWL%var centsLimit = options . centsLimit ; %NWL%5
var assert = require (  ' assert '  )  ; %NWL%var connect = require (  ' connect '  )  ; %NWL%var di = require (  ' di '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var prism = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var testUtils = require (  '  .  .  / test - utils '  )  ; %NWL%var deleteMock = testUtils . deleteMock ; %NWL%var onEnd = testUtils . onEnd ; %NWL%var httpGet = testUtils . httpGet ; %NWL%8
force : true ,%NWL%debug : true ,%NWL%compiler :  {%NWL%sourceMap : true%NWL%}%NWL%}%NWL%}%NWL%}  ; %NWL%var express = require (  ' express '  )  ; %NWL%var application = express (  )  ; %NWL%var helmet = require (  ' helmet '  )  ; %NWL%8
, mkdirp = require (  ' mkdirp '  )%NWL%, join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var debug = options . debug ; %NWL%var src = options . src ; %NWL%8
geometry : geometry ,%NWL%jsonMaterials : jsonMaterials%NWL%}  ; %NWL%var val = me . geometries [ model ]  . geometry ; %NWL%if ( clone ) val = val . clone (  )  ; %NWL%readyFunc ( val , me . geometries [ model ]  . jsonMaterials )  ;%NWL%}  , null )  ;%NWL%}  ,%NWL%ProcessMesh : function ( options )  {%NWL%var geometry = options . geometry ; %NWL%var jsonMaterials = options . jsonMaterials ; %NWL%9
return options ;%NWL%}%NWL%module . exports . parseFile = function ( filepath , options )  {%NWL%var filepath = path . resolve ( filepath )  ; %NWL%var options = processOptions ( options )  ; %NWL%var graph = new Graph ( options . loadPaths )  ; %NWL%graph . addFile ( filepath )  ; %NWL%return graph ;%NWL%}  ; %NWL%module . exports . parseDir = function ( dirpath , options )  {%NWL%var dirpath = path . resolve ( dirpath )  ; %NWL%3
var lastWhitespaceIndex = abbreviated . substring ( 0 , length - 1 )  . lastIndexOf (  '  '  )  ; %NWL%abbreviated = encodeURIComponent ( abbreviated . substring ( 0 , lastWhitespaceIndex )  )  +  " \u2026 "  ; %NWL%return abbreviated ;%NWL%}%NWL%function getMeta ( name )  {%NWL%var metaContent = $ (  ' meta [ name =  "  '  + name +  '  "  ]  '  )  . attr (  ' content '  )  ; %NWL%return metaContent || '  '  ;%NWL%}%NWL%function getTweetText (  )  {%NWL%var title = getMeta (  ' DC . title '  )  ; %NWL%var creator = getMeta (  ' DC . creator '  )  ; %NWL%9
wificheck . onclick = function ( event )  {%NWL%grey_out_wifi_conf ( !event . target . checked )  ;%NWL%}%NWL%}%NWL%var wifi_encryption = document . getElementById (  " wifi_encryption "  )  ; %NWL%if ( wifi_encryption )  {%NWL%wifi_encryption . onchange = function ( event )  {%NWL%onchange_security ( event . target )  ;%NWL%}%NWL%}%NWL%var confpassword = document . getElementById (  " confpassword "  )  ; %NWL%4
elts [ i ]  . style . display = vis ;%NWL%}%NWL%}%NWL%}  ; %NWL%Sidebar . prototype . init = function (  )%NWL%{%NWL%var imgDir = GRAPH_IMAGE_PATH ; %NWL%var dir = STENCIL_PATH ; %NWL%var signs = this . signs ; %NWL%var mockups = this . mockups ; %NWL%var ee = this . ee ; %NWL%8
{%NWL%res . json (  { error :  ' missing initiating user name '  }  )  ; %NWL%return ;%NWL%}%NWL%else if ( !fields . new_user )%NWL%{%NWL%res . json (  { error :  ' missing target user name '  }  )  ; %NWL%return ;%NWL%}%NWL%var orig_user = mod_mgr_util . appendMailServer ( fields . orig_user )  ; %NWL%var new_user  = mod_mgr_util . appendMailServer ( fields . new_user )  ; %NWL%9
fallbackImgPath : fallbackImgURL ,%NWL%width : elementPixelWidth ,%NWL%height : elementPixelHeight ,%NWL%params : resrcPathParams ,%NWL%server : resrcServer%NWL%}  ;%NWL%}  ; %NWL%var replaceElementSrc = function ( elem )  {%NWL%var resrcObj = getResrcImageObject ( elem )  ; %NWL%var resrcImgPath = resrcObj . resrcImgPath ; %NWL%var fallbackImgPath = resrcObj . fallbackImgPath ; %NWL%9
serialize : function (  )  {%NWL%var data = lychee . ui . Entity . prototype . serialize . call ( this )  ; %NWL%data [  ' constructor '  ]  =  ' game . entity . Circle '  ; %NWL%data [  ' arguments '  ]  [ 1 ]  =  ' #MAIN '  ; %NWL%return data ;%NWL%}  ,%NWL%render : function ( renderer , offsetX , offsetY )  {%NWL%var alpha  = this . alpha ; %NWL%var position = this . position ; %NWL%var radius  = this . radius ; %NWL%var color  = this . color ; %NWL%7
analyser . getByteTimeDomainData ( freqByteData )  ; %NWL%break ;%NWL%}%NWL%this . drawGL (  )  ;%NWL%}%NWL%AnalyserView . prototype . drawGL = function (  )  {%NWL%var canvas = this . canvas ; %NWL%var gl = this . gl ; %NWL%var vbo = this . vbo ; %NWL%var vboTexCoordOffset = this . vboTexCoordOffset ; %NWL%var sonogram3DVBO = this . sonogram3DVBO ; %NWL%6
else%NWL%matchesCountSpan . textContent = WebInspector . UIString (  "  ( %d matches )  "  , searchMatchesCount )  ; %NWL%this . listItemElement . appendChild ( matchesCountSpan )  ; %NWL%if ( this . expanded )%NWL%this . _updateMatchesUI (  )  ;%NWL%}  ,%NWL%_appendSearchMatches : function ( fromIndex , toIndex )%NWL%{%NWL%var searchResult = this . _searchResult ; %NWL%var uiSourceCode = searchResult . uiSourceCode ; %NWL%var searchMatches = searchResult . searchMatches ; %NWL%9
deferClearer ( this . currentTimeout )%NWL%if ( !ignoreCallback ) this . callback . call ( this . scope || this )%NWL%}  ,%NWL%doSteps : function ( steps , callback , scope )  {%NWL%this . currentTimeout = null%NWL%var me    = this%NWL%var deferer  = this . deferer%NWL%var step   = steps . shift (  )%NWL%if ( step )  {%NWL%var processor   = step . processor || this . processor%NWL%var processorScope  = step . processorScope || this . processorScope%NWL%9
' orion / git / gitPreferenceStorage '  ,%NWL%' orion / git / logic / gitCommon '  ,%NWL%' orion / Deferred '  ,%NWL%' orion / objects '%NWL%]  , function ( messages , mCommandRegistry , GitPreferenceStorage , mGitCommon , Deferred , objects )  {%NWL%var handleGitServiceResponse = mGitCommon . handleGitServiceResponse ; %NWL%var gatherSshCredentials = mGitCommon . gatherSshCredentials ; %NWL%return function ( dependencies )  {%NWL%var serviceRegistry = dependencies . serviceRegistry ; %NWL%var commandService = dependencies . commandService ; %NWL%var tags = dependencies . tags ; %NWL%8
this . getIdentity = null ;%NWL%}%NWL%if ( !features [  " dojo . data . api . Write "  ]  )  {%NWL%this . put = this . add = null ;%NWL%}%NWL%}  ,%NWL%idProperty :  " id "  ,%NWL%store : null ,%NWL%_objectConverter : function ( callback )  {%NWL%var store = this . store ; %NWL%var idProperty = this . idProperty ; %NWL%9
var bodyParser = require (  ' body - parser '  )  ; %NWL%var passport = require (  ' passport '  )  ; %NWL%var methodOverride = require (  ' method - override '  )  ; %NWL%var libs = process . cwd (  )  +  '  / libs /  '  ; %NWL%require ( libs +  ' auth / auth '  )  ; %NWL%var config = require (  '  .  / config '  )  ; %NWL%var log = require (  '  .  / log '  )  ( module )  ; %NWL%var oauth2 = require (  '  .  / auth / oauth2 '  )  ; %NWL%var api = require (  '  .  / routes / api '  )  ; %NWL%var users = require (  '  .  / routes / users '  )  ; %NWL%var articles = require (  '  .  / routes / articles '  )  ; %NWL%8
)  )  {%NWL%var start = elem . getAttribute (  " marker - start "  )  ; %NWL%var mid = elem . getAttribute (  " marker - mid "  )  ; %NWL%var end = elem . getAttribute (  " marker - end "  )  ; %NWL%cur_line = elem ; %NWL%$ ( elem )%NWL%. data (  " start_off "  , !!start )%NWL%. data (  " end_off "  , !!end )  ; %NWL%if ( elem . tagName =  =  " line " && mid )  {%NWL%var x1 = elem . getAttribute (  ' x1 '  )  - 0 ; %NWL%var x2 = elem . getAttribute (  ' x2 '  )  - 0 ; %NWL%9
" use strict "  ; %NWL%module . exports = function ( Promise ,%NWL%PromiseArray ,%NWL%apiRejection ,%NWL%tryConvertToPromise ,%NWL%INTERNAL )  {%NWL%var ASSERT = require (  "  .  / assert . js "  )  ; %NWL%var async = require (  "  .  / async . js "  )  ; %NWL%var util = require (  "  .  / util . js "  )  ; %NWL%var tryCatch = util . tryCatch ; %NWL%var errorObj = util . errorObj ; %NWL%9
HexToHSB = function ( hex )  {%NWL%return RGBToHSB ( HexToRGB ( hex )  )  ;%NWL%}  ,%NWL%RGBToHSB = function ( rgb )  {%NWL%var hsb =  {%NWL%h : 0 ,%NWL%s : 0 ,%NWL%b : 0%NWL%}  ; %NWL%var min = Math . min ( rgb . r , rgb . g , rgb . b )  ; %NWL%var max = Math . max ( rgb . r , rgb . g , rgb . b )  ; %NWL%9
this . $textbox . attr (  ' placeholder '  , value )  ;%NWL%}  ,%NWL%scroll_to_bottom : function (  )  {%NWL%this . $textbox . scrollTop ( this . $textbox [ 0 ]  . scrollHeight )  ;%NWL%}  ,%NWL%update : function ( options )  {%NWL%if ( options =  =  = undefined || options . updated_view ! = this )  {%NWL%this . $textbox . val ( this . model . get (  ' value '  )  )  ; %NWL%var disabled = this . model . get (  ' disabled '  )  ; %NWL%this . $textbox . prop (  ' disabled '  , disabled )  ; %NWL%var description = this . model . get (  ' description '  )  ; %NWL%8
}  , descriptor )%NWL%project . getFile ( src , function ( err , file )  {%NWL%if ( err ) return cb&&cb ( err )%NWL%file . set ( JSON . stringify ( descriptor )  )%NWL%cb ( null , src )%NWL%}  )%NWL%}  )%NWL%}  ,%NWL%updateChunkReferences : function ( chunkId , newChunkId , chunk )  {%NWL%var setup = chunk . context . setup%NWL%var fileObject = chunk . context . fileObject%NWL%9
this . step = this . step - 1 ; %NWL%this . showStep (  )  ;%NWL%}  ,%NWL%generateURL : function (  )  {%NWL%var chans = this . chanBox . value ; %NWL%var nick = this . nicknameBox . value ; %NWL%var prompt = this . connectdialogr . checked && chans ! =  "  " && nick ! =  "  "  ; %NWL%var colors = this . coloroptr . checked ; %NWL%var fg = this . fgColor . value ; %NWL%var sec = this . secColor . value ; %NWL%var bg = this . bgColor . value ; %NWL%8
const Person   = require (  "  .  / person "  )  . Person ; %NWL%const Server   = require (  "  .  / server "  )  . Server ; %NWL%const channel   = require (  "  .  / channel "  )  . channel ; %NWL%const constants  = require (  "  .  / constants "  )  ; %NWL%const fs    = require (  " fs "  )  ; %NWL%const handlers   = require (  "  .  / handlers "  )  ; %NWL%const id    = require (  "  .  / util "  )  . id ; %NWL%const logger   = require (  "  .  / logger "  )  ; %NWL%const message   = require (  "  .  / message "  )  . message ; %NWL%const net    = require (  " net "  )  ; %NWL%const parser   = require (  "  .  / parser "  )  ; %NWL%3
}%NWL%var isBoolean = module . exports . isBoolean = function ( arg , allowNull )  {%NWL%if ( null =  = arg )  {%NWL%return true =  = allowNull ;%NWL%}%NWL%return arg instanceof Boolean || typeof arg =  =  " boolean "  ;%NWL%}%NWL%var isObject = module . exports . isObject = function ( arg , allowNull )  {%NWL%return instanceOf ( arg , Object , allowNull )  ;%NWL%}%NWL%var isArray = module . exports . isArray = function ( arg , allowNull )  {%NWL%1
max : function ( attr )  {%NWL%var attrs = _ . pluck ( this . get (  ' variations '  )  , attr )  ; %NWL%if ( attrs . length > 0 )  {%NWL%return _ ( attrs )  . compact (  )  . max (  )  ;%NWL%}%NWL%return this . get ( attr )  ;%NWL%}  ,%NWL%range : function ( attr )  {%NWL%if ( attr =  =  =  ' sale_price '  )  {%NWL%var min = _ . min (  [ this . min (  ' sale_price '  )  , this . min (  ' price '  )  ]  )  ; %NWL%var max = _ . max (  [ this . max (  ' sale_price '  )  , this . max (  ' price '  )  ]  )  ; %NWL%9
}  )  ;%NWL%}  ,%NWL%findOneByName : function ( req , res , cb )  {%NWL%var name = req . params . name ; %NWL%var query =  { name : name }  ; %NWL%Beer . findOne ( query , function ( err , data )  {%NWL%cb ( err , data , res )  ;%NWL%}  )  ;%NWL%}  ,%NWL%update : function ( req , res , cb )  {%NWL%var id = req . params . id ; %NWL%3
}%NWL%}  ; %NWL%Thrift . inherits ( EDAMNotFoundException , Thrift . TException )  ; %NWL%EDAMNotFoundException . prototype . name =  ' EDAMNotFoundException '  ; %NWL%EDAMNotFoundException . prototype . read = function ( input )  {%NWL%input . readStructBegin (  )  ; %NWL%while ( true )%NWL%{%NWL%var ret = input . readFieldBegin (  )  ; %NWL%var fname = ret . fname ; %NWL%var ftype = ret . ftype ; %NWL%9
A : function ( d , l )  { return l . A [ d . getDay (  )  ]  ;  }  ,%NWL%b : function ( d , l )  { return l . b [ d . getMonth (  )  ]  ;  }  ,%NWL%B : function ( d , l )  { return l . B [ d . getMonth (  )  ]  ;  }  ,%NWL%C : function ( d )  { return xPad ( parseInt ( d . getFullYear (  )  / 100 , 10 )  , 0 )  ;  }  ,%NWL%d :  [  " getDate "  ,  " 0 "  ]  ,%NWL%e :  [  " getDate "  ,  "  "  ]  ,%NWL%g : function ( d )  { return xPad ( parseInt ( Dt . formats . G ( d ) %100 , 10 )  , 0 )  ;  }  ,%NWL%G : function ( d )  {%NWL%var y = d . getFullYear (  )  ; %NWL%var V = parseInt ( Dt . formats . V ( d )  , 10 )  ; %NWL%var W = parseInt ( Dt . formats . W ( d )  , 10 )  ; %NWL%9
" use strict "  ; %NWL%var invariant = require (  ' invariant '  )  ; %NWL%var DOMPropertyInjection =  {%NWL%MUST_USE_ATTRIBUTE : 0x1 ,%NWL%MUST_USE_PROPERTY : 0x2 ,%NWL%HAS_SIDE_EFFECTS : 0x4 ,%NWL%HAS_BOOLEAN_VALUE : 0x8 ,%NWL%HAS_POSITIVE_NUMERIC_VALUE : 0x10 ,%NWL%injectDOMPropertyConfig : function ( domPropertyConfig )  {%NWL%var Properties = domPropertyConfig . Properties || {  }  ; %NWL%var DOMAttributeNames = domPropertyConfig . DOMAttributeNames || {  }  ; %NWL%9
}%NWL%}  )  ;%NWL%}%NWL%function getBoard (  )  {%NWL%var game = $ . cookie (  " game "  )  ; %NWL%var board_margin = 5 ; %NWL%$ . getJSON (  "  / games /  "  + enc ( game )  +  "  / dimensions "  , function ( data )  {%NWL%var dimensions = data ; %NWL%var top = dimensions . top - board_margin ; %NWL%var bottom = dimensions . bottom + board_margin ; %NWL%var left = dimensions . left - board_margin ; %NWL%8
bounce . pause (  )  ; %NWL%var crash = this . sounds [  " crash "  ]  ; %NWL%crash . play (  )  ;%NWL%}%NWL%}%NWL%Car . prototype . bounce = function (  )%NWL%{%NWL%this . animateBounce ( true )  ; %NWL%if ( this . sounds )%NWL%{%NWL%var bounce = this . sounds [  " bounce "  ]  ; %NWL%1
oae . api . i18n . translate (  ' __MSG__COULD_NOT_SIGN_INTO_TENANT__ '  ,  ' tenants '  )  ,%NWL%' error '  )  ;%NWL%} else {%NWL%oae . api . util . template (  )  . render ( $ (  ' #tenants - login - template '  , $rootel )  , data , $ (  ' #tenants - login - container '  , $rootel )  )  ; %NWL%$ (  ' #tenants - login - form '  )  . submit (  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%var createTenant = function (  )  {%NWL%var alias = $ . trim ( $ (  ' #tenants - create - alias '  , $rootel )  . val (  )  )  ; %NWL%var displayName = $ . trim ( $ (  ' #tenants - create - displayName '  , $rootel )  . val (  )  )  ; %NWL%9
" float depth = depthRGB . r / 3 .  + depthRGB . g / 3 .  + depthRGB . b / 3 .  ;  "  ,%NWL%" if ( depthRGB . a =  = 0 . 0 ) depth = 1 .  ;  "  ,%NWL%" vec3 rndVec = texture2D ( tNoise , vUv * vec2 ( 300 . 0 , 200 . 0 )  )  . rgb * vec3 ( 0 . 2 )  ;  "  ,%NWL%" float ao =  ( 1 . 0 )  ;  "  ,%NWL%" vec3 rndUv = vec3 ( 0 . 0 )  ;  "  ,%NWL%" if ( ssao =  = 1 . 0 && depth ! = 1 .  )  {  "  ,%NWL%" ao = 0 . 0 ;  "  ,%NWL%" for ( int i = 1 ; i < 42 ; i +  +  )  {  "  ,%NWL%" rndUv = vec3 ( vUv , depth )  + ssaoRad * reflect ( samplerSphere [ i ]  . xyz , normal . xyz )  ;  "  ,%NWL%" vec4 rndDepthRGB = texture2D ( tDepth , rndUv . xy )  ;  "  ,%NWL%" float rndDepth = rndDepthRGB . r / 3 .  + rndDepthRGB . g / 3 .  + rndDepthRGB . b / 3 .  ;  "  ,%NWL%0
}%NWL%}%NWL%}  ; %NWL%addReplacement (  ' selectmenu '  ,  ' mobileSelectmenu '  , uiSelect )  ; %NWL%addReplacement (  ' selectmenu '  ,  ' uiSelectmenu '  , uiSelect )  ; %NWL%function find ( context )  {%NWL%$ (  ' select : not (  . ui - select - nativeonly )  , input [ type =  " radio "  ]  , input [ type =  " checkbox "  ]  '  , context )  . each ( find . detectReplacement )  ;%NWL%}%NWL%find . register = function ( elem , data , pluginDescriptor , plugin )  {%NWL%var shadow = typeof pluginDescriptor . shadow =  =  ' string ' ? data [ pluginDescriptor . shadow ]  : pluginDescriptor . shadow ( data , elem )  ; %NWL%var shadowFocus = typeof pluginDescriptor . shadowFocus =  =  ' string ' ? data [ pluginDescriptor . shadowFocus ]  : pluginDescriptor . shadowFocus ( data , elem )  ; %NWL%9
const message   = require (  "  .  / message "  )  . message ; %NWL%const net    = require (  " net "  )  ; %NWL%const parser   = require (  "  .  / parser "  )  ; %NWL%const path    = require (  " path "  )  ; %NWL%const person   = require (  "  .  / person "  )  . person ; %NWL%const server   = require (  "  .  / server "  )  . server ; %NWL%const trailing   = require (  "  .  / message "  )  . trailing ; %NWL%const COMMAND   = constants . COMMAND ; %NWL%const ERROR   = constants . ERROR ; %NWL%const EVENT   = constants . EVENT ; %NWL%const LEVEL   = constants . LEVEL ; %NWL%7
createHTMLDocument : function createHTMLDocument ( titleText )  {%NWL%var address = null ; %NWL%if ( currentlyExecutingScript )%NWL%address = currentlyExecutingScript . ownerDocument . _address%NWL%var d = new impl . Document ( true , address )  ; %NWL%d . appendChild ( new impl . DocumentType (  " html "  )  )  ; %NWL%var html = d . createElement (  " html "  )  ; %NWL%d . appendChild ( html )  ; %NWL%var head = d . createElement (  " head "  )  ; %NWL%html . appendChild ( head )  ; %NWL%var title = d . createElement (  " title "  )  ; %NWL%6
return ;%NWL%}%NWL%var world = null ; %NWL%var maxX = scene . w >  > 1 ; %NWL%var maxY = scene . h >  > 1 ; %NWL%var minX =  - scene . w >  > 1 ; %NWL%var minY =  - scene . h >  > 1 ; %NWL%var fps = scene . fps ? scene . fps : 30 ; %NWL%var allowSleep = scene . allowSleep ? scene . allowSleep : true ; %NWL%var gravityX = scene . gravityX ? scene . gravityX : 0 ; %NWL%var gravityY = scene . gravityY ? scene . gravityY : 0 ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
}%NWL%function queueDataFromCacheOrSendRequestByReqObj ( reqObj )%NWL%{%NWL%var req = reqObj [  ' req '  ]  ; %NWL%var res = reqObj [  ' res '  ]  ; %NWL%var jobType = reqObj [  ' jobType '  ]  ; %NWL%var jobName = reqObj [  ' jobName '  ]  ; %NWL%var reqUrl = reqObj [  ' reqUrl '  ]  ; %NWL%var defCallback = reqObj [  ' defCallback '  ]  ; %NWL%var jobRunCount = reqObj [  ' jobRunCount '  ]  ; %NWL%var firstRunDelay = reqObj [  ' firstRunDelay '  ]  ; %NWL%4
goog . require (  ' goog . ui . tree . BaseNode '  )  ; %NWL%goog . require (  ' goog . ui . tree . TreeControl '  )  ; %NWL%goog . require (  ' goog . ui . tree . TreeNode '  )  ; %NWL%var stubs = new goog . testing . PropertyReplacer (  )  ; %NWL%function setUp (  )  {%NWL%stubs . set ( goog . html . legacyconversions ,  ' ALLOW_LEGACY_CONVERSIONS '  , true )  ;%NWL%}%NWL%function testAdd (  )  {%NWL%var node1 = new goog . ui . tree . TreeNode (  ' node1 '  )  ; %NWL%var node2 = new goog . ui . tree . TreeNode (  ' node2 '  )  ; %NWL%var node3 = new goog . ui . tree . TreeNode (  ' node3 '  )  ; %NWL%8
var underscore = require (  " underscore "  )  ; %NWL%module . exports = function ( condition , fn )  {%NWL%if ( !condition || !condition . ngay || !condition . id_app )  {%NWL%fn ( new Error (  " ngay and id_app parameter required "  )  )  ; %NWL%return ;%NWL%}%NWL%var tk = condition . tk ; %NWL%if ( !tk )  {%NWL%tk =  "  "  ;%NWL%}%NWL%var bu_tru = condition . bu_tru ; %NWL%6
var storage = require (  '  .  / lib / storage '  )  ; %NWL%app . use ( storage )  ; %NWL%var parser = require (  '  .  / lib / parser '  )  ; %NWL%app . use ( parser )  ; %NWL%var healthRecord = require (  '  .  / lib / record '  )  ; %NWL%app . use ( healthRecord )  ; %NWL%var merges = require (  '  .  / lib / merge '  )  ; %NWL%app . use ( merges )  ; %NWL%var match = require (  '  .  / lib / match '  )  ; %NWL%app . use ( match )  ; %NWL%var notification = require (  '  .  / lib / notification '  )  ; %NWL%0
}  )  ;%NWL%}  )  ; %NWL%it (  ' should support an include with multiple different association types '  , function (  )  {%NWL%var User = this . sequelize . define (  ' User '  ,  {  }  )%NWL%, Product = this . sequelize . define (  ' Product '  ,  {%NWL%title : DataTypes . STRING%NWL%}  )%NWL%, Tag = this . sequelize . define (  ' Tag '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, Price = this . sequelize . define (  ' Price '  ,  {%NWL%4
DygraphCanvasRenderer . _drawStyledLine = function ( e ,%NWL%color , strokeWidth , strokePattern , drawPoints ,%NWL%drawPointCallback , pointSize )  {%NWL%var g = e . dygraph ; %NWL%var stepPlot = g . getBooleanOption (  " stepPlot "  , e . setName )  ; %NWL%if ( !Dygraph . isArrayLike ( strokePattern )  )  {%NWL%strokePattern = null ;%NWL%}%NWL%var drawGapPoints = g . getBooleanOption (  ' drawGapEdgePoints '  , e . setName )  ; %NWL%var points = e . points ; %NWL%var setName = e . setName ; %NWL%9
, https = require (  " https "  )%NWL%, underscore = require (  ' underscore '  )%NWL%, logutils = require (  '  .  / src / serverroot / utils / log . utils '  )%NWL%, cluster = require (  ' cluster '  )%NWL%, axon = require (  ' axon '  )%NWL%, producerSock = axon . socket (  ' push '  )%NWL%, redisSub = require (  '  .  / src / serverroot / web / core / redisSub '  )%NWL%, global = require (  '  .  / src / serverroot / common / global '  )%NWL%, redis = require (  " redis "  )%NWL%, eventEmitter = require (  ' events '  )  . EventEmitter%NWL%, async = require (  ' async '  )%NWL%1
,  " jsBeginBlock "%NWL%,  " jsBeginGroup "%NWL%,  " anchor "%NWL%,  " default "%NWL%]  )  ; %NWL%target . prototype . onToken = function ( token )  {%NWL%var AnchorEscapeContext = require (  '  .  / AnchorEscapeContext '  )  ; %NWL%var AnchorInlineContext = require (  '  .  / AnchorInlineContext '  )  ; %NWL%var AnchorBlockContext = require (  '  .  / AnchorBlockContext '  )  ; %NWL%var AnchorGroupContext = require (  '  .  / AnchorGroupContext '  )  ; %NWL%var JsWhileContext = require (  '  .  / JsWhileContext '  )  ; %NWL%6
this . _x = x ; %NWL%this . value = cell [ cell . length - 1 ]  ;%NWL%}  ; %NWL%$ . processWithPhaseArray = function ( cell , phases )  {%NWL%var wave = this . wave ; %NWL%var radtoinc = this . _radtoinc ; %NWL%var phase , x = this . _x ; %NWL%var index , frac , x0 , x1 , dx = this . frequency * this . _coeff ; %NWL%var i , imax = this . step ; %NWL%if ( this . feedback )  {%NWL%var lastouts = this . _lastouts ; %NWL%5
}  ,%NWL%select_all : false%NWL%}  , 1 . 0 )  ; %NWL%var _input =  [  ]  ; %NWL%var _output =  [  ]  ; %NWL%var _type ; %NWL%NpcStore . init = function init (  )%NWL%{%NWL%var ui    = this . ui ; %NWL%var InputWindow  = ui . find (  '  . InputWindow '  )  ; %NWL%var OutputWindow = ui . find (  '  . OutputWindow '  )  ; %NWL%9
" use strict "  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var parseUrl = require (  ' url '  )  . parse ; %NWL%var resolveUrl = require (  ' url '  )  . resolve ; %NWL%var Q = require (  ' q '  )  ; %NWL%var Class = require (  ' capsela - util '  )  . Class ; %NWL%var Pipe = require (  ' capsela - util '  )  . Pipe ; %NWL%var HttpClient = require (  '  .  / HttpClient '  )  . HttpClient ; %NWL%var Request = require (  '  .  / Request '  )  . Request ; %NWL%var Cookie = require (  '  .  / Cookie '  )  . Cookie ; %NWL%8
params . push (  " path =  "  + encodeURIComponent ( options . path )  )  ;%NWL%}%NWL%if ( options . since )  {%NWL%var since = options . since ; %NWL%if ( since . constructor =  =  = Date )  {%NWL%since = since . toISOString (  )  ;%NWL%}%NWL%params . push (  " since =  "  + encodeURIComponent ( since )  )  ;%NWL%}%NWL%if ( options . until )  {%NWL%var until = options . until ; %NWL%3
mrc . removeCommandListener ( REMOTE_CONTROLS . PREVIOUS , previousListener )  ; %NWL%assert . equal ( mrc . _commandListeners [ REMOTE_CONTROLS . PREVIOUS ]  . length , 0 )  ;%NWL%}  )  ; %NWL%mrc . addCommandListener ( REMOTE_CONTROLS . PREVIOUS , previousListener )  ; %NWL%mrc . _commandHandler ( AVRCP . PREVIOUS_PRESS )  ; %NWL%assert . ok ( previousListener . calledOnce )  ;%NWL%}  )  ; %NWL%test (  ' AVRCP . FAST_FORWARD_PRESS '  , function (  )  {%NWL%var seekpressListener = this . sinon . spy ( function ( event )  {%NWL%var command = event . detail . command ; %NWL%var direction = event . detail . direction ; %NWL%9
h : y2 - y1%NWL%}  ;%NWL%}  ,%NWL%boundingBox : function ( options )  {%NWL%var eles = this ; %NWL%var cy = eles . _private . cy ; %NWL%var cy_p = cy . _private ; %NWL%var styleEnabled = cy_p . styleEnabled ; %NWL%options = options || {  }  ; %NWL%var includeNodes = options . includeNodes =  =  = undefined ? true : options . includeNodes ; %NWL%var includeEdges = options . includeEdges =  =  = undefined ? true : options . includeEdges ; %NWL%9
{%NWL%var data = this . __data ; %NWL%var hash = widget . $$hash ; %NWL%var visible ; %NWL%if ( widget . isExcluded (  )  )%NWL%{%NWL%visible = false ;%NWL%}%NWL%else%NWL%{%NWL%var parent = widget . $$parent ; %NWL%2
var Ray_intersectSphere_normal = vec2 . create (  )  ; %NWL%Ray . prototype . intersectCircle = function ( shape , angle , position , body )  {%NWL%var from = this . from ,%NWL%to = this . to ,%NWL%r = shape . radius ; %NWL%var a = Math . pow ( to [ 0 ]  - from [ 0 ]  , 2 )  + Math . pow ( to [ 1 ]  - from [ 1 ]  , 2 )  ; %NWL%var b = 2 *  (  ( to [ 0 ]  - from [ 0 ]  )  *  ( from [ 0 ]  - position [ 0 ]  )  +  ( to [ 1 ]  - from [ 1 ]  )  *  ( from [ 1 ]  - position [ 1 ]  )  )  ; %NWL%var c = Math . pow ( from [ 0 ]  - position [ 0 ]  , 2 )  + Math . pow ( from [ 1 ]  - position [ 1 ]  , 2 )  - Math . pow ( r , 2 )  ; %NWL%var delta = Math . pow ( b , 2 )  - 4 * a * c ; %NWL%var intersectionPoint = Ray_intersectSphere_intersectionPoint ; %NWL%var normal = Ray_intersectSphere_normal ; %NWL%9
if ( cursor . fn )  {%NWL%buffer = cursor . fn . call ( self , scope , buffer )  ;%NWL%}%NWL%cursor = cursor . next ;%NWL%}%NWL%}%NWL%return buffer ;%NWL%}  ,%NWL%macro : function ( scope , option , buffer )  {%NWL%var hash = option . hash ; %NWL%var params = option . params ; %NWL%9
this . resetState (  )  ;%NWL%}  ,%NWL%resetState : function resetState (  )  {%NWL%this . state =  {%NWL%target : null%NWL%}%NWL%}  ,%NWL%searchInputChanged : function searchInputChanged (  )  {%NWL%var self   = this ; %NWL%var search  = this . get (  ' searchInput '  )  . getInput (  )  ; %NWL%var replace  = this . get (  ' replaceInput '  )  . getInput (  )  ; %NWL%9
resultName : resultName ,%NWL%nextLoc : nextLoc%NWL%}  ; %NWL%return ContinueSentinel ;%NWL%}%NWL%}  ;%NWL%}  )  . apply ( this , Function (  " return [ this , function GeneratorFunction (  )  {  }  ]  "  )  (  )  )  ; %NWL%var dirname = require (  ' path '  )  . dirname ; %NWL%var join = require (  ' path '  )  . join ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var cp = require (  ' cp '  )  ; %NWL%9
handleAuthenticate : function ( account , callback )  {%NWL%if ( !account )  {%NWL%return console . error (  ' attempting to trigger reauth without an account '  )  ;%NWL%}%NWL%if ( !account . error || account . error . count ! =  = 1 )  {%NWL%return nextTick ( callback )  ;%NWL%}%NWL%var lock = navigator . requestWakeLock (  ' cpu '  )  ; %NWL%var l10n = navigator . mozL10n ; %NWL%var title = l10n . get (  ' notification - error - sync - title '  )  ; %NWL%var description = l10n . get (  ' notification - error - sync - description '  )  ; %NWL%9
transclude ( scope , function ( clone )  {%NWL%element . append ( clone )  ;%NWL%}  )  ;%NWL%}  ,%NWL%controller :  [  ' $scope '  ,  ' $element '  ,  ' $attrs '  , function ( $scope , $element , $attrs )  {%NWL%var chart ; %NWL%var id =  ( Math . random (  )  * 1e9 )  . toString ( 36 )  . replace (  "  .  "  ,  " _ "  )  ; %NWL%$element . append (  '  < div class =  " dimple - graph " id =  " dng -  '  + id +  '  "  >  <  / div >  '  )  ; %NWL%this . _createChart = function (  )  {%NWL%var width = $attrs . width ? $attrs . width :  ' 100% '  ; %NWL%var height = $attrs . height ? $attrs . height :  ' 100% '  ; %NWL%9
exports . setup = function ( app )  {%NWL%app . get (  '  / most_active '  ,%NWL%session . provider ,%NWL%getMostActive )  ;%NWL%}  ; %NWL%function getMostActive ( req , res )  {%NWL%var params = url . parse ( req . url , true )  . query%NWL%, max = params . max%NWL%, index = params . index%NWL%, domain = params . domain%NWL%, period = params . period%NWL%7
server . close (  )  ; %NWL%if ( self . _state . isPrimary ( server )  )  {%NWL%self . _state . master =  = null ; %NWL%self . _serverState = ReplSet . REPLSET_READ_ONLY ; %NWL%delete self . _state . addresses [ server . name ]  ;%NWL%} else if ( self . _state . isSecondary ( server )  )  {%NWL%delete self . _state . secondaries [ server . name ]  ; %NWL%delete self . _state . addresses [ server . name ]  ;%NWL%}%NWL%var host = server . socketOptions . host ; %NWL%var port = server . socketOptions . port ; %NWL%9
return {%NWL%started : true%NWL%}  ;%NWL%}  ,%NWL%mouseMove : function ( opts )  {%NWL%var mode = canv . getMode (  )  ; %NWL%if ( mode ! =  = mode_id )  { return ;  }%NWL%var zoom = canv . getZoom (  )  ; %NWL%var evt = opts . event ; %NWL%var x = opts . mouse_x / zoom ; %NWL%var y = opts . mouse_y / zoom ; %NWL%9
}%NWL%}%NWL%}  ; %NWL%new Twitter . Ajax ( url , parameters )  . request (  )  ;%NWL%}%NWL%Twitter . PublicTimeline = function ( params )  {%NWL%if ( typeof params . update =  =  " string "  )  {%NWL%params . update = document . getElementById ( params . update )  ;%NWL%}%NWL%var update = params . update ; %NWL%var since = params . since ; %NWL%9
query . toString = function (  )  {%NWL%return query . toString (  )  ;%NWL%}  ; %NWL%return query ;%NWL%}  )  ( function ( request )  {%NWL%var config = _ . cloneDeep ( this . config )  ; %NWL%var query = request . query ; %NWL%var include = query . include ; %NWL%var filter = query . filter ; %NWL%var fields = query . fields ; %NWL%var sort = query . sort ; %NWL%7
var slice = _dereq_ (  "  .  .  / slice "  )  ; %NWL%function pass ( value )  {%NWL%return value ;%NWL%}%NWL%function storage ( options )  {%NWL%var split_key = options . keys . split_key ; %NWL%var merge_key = options . keys . merge_key ; %NWL%var copy = options . keys . copy ; %NWL%var new_node = options . keys . new_node ; %NWL%var new_dump = options . keys . new_dump ; %NWL%var min_depth = options . keys . min_depth ; %NWL%5
exports . editTaskComment = function ( req , res )  {%NWL%var id = req . id ; %NWL%var iid = req . iid ; %NWL%delete req . body . _id ; %NWL%delete req . body . _csrf ; %NWL%req . tasks . update (  { _id : id ,  ' comments . id '  : iid }  ,  { $set :  {  ' comments . $ '  : req . body }  }  , function ( err , result )  {%NWL%handleResult ( err , res , result , req . tasks , id )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . deleteTaskComment = function ( req , res )  {%NWL%var id = req . id ; %NWL%2
testKeysUnicode : function ( test )  {%NWL%var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function (  )  {%NWL%var command = protocol . keys (  ' \uE007 '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . data ,  '  {  " value "  :  [  " \\ue007 "  ]  }  '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testLog : function ( test )  {%NWL%var client = this . client ; %NWL%1
accountOrdersRequest . request (  )  ;%NWL%}  )  ; %NWL%return promise . then ( getAccountOrders )  ;%NWL%}%NWL%function getParsedOrders ( offers )  {%NWL%return _ . reduce ( offers , function ( orders , off )  {%NWL%var sequence = off . seq ; %NWL%var type = off . flags & ripple . Remote . flags . offer . Sell ? ' sell '  :  ' buy '  ; %NWL%var passive =  ( off . flags & ripple . Remote . flags . offer . Passive ) ! =  = 0 ; %NWL%var taker_gets = utils . parseCurrencyAmount ( off . taker_gets )  ; %NWL%var taker_pays = utils . parseCurrencyAmount ( off . taker_pays )  ; %NWL%9
}%NWL%}%NWL%}  ; %NWL%exports . Timestamp . prototype . shiftRightUnsigned = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
accountDBPool . drain ( function (  )  { accountDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%loggingDBPool . drain ( function (  )  { loggingDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%module . exports =  {%NWL%setUp : function ( callback )  {%NWL%account_db_facade . __set__ (  ' accountDBPool '  , createAccountDBPool (  )  )  ; %NWL%account_db_facade . __set__ (  ' loggingDBPool '  , createLoggingDBPool (  )  )  ; %NWL%callback (  )  ;%NWL%}  ,%NWL%tearDown : function ( callback )  {%NWL%var accountDBPool = account_db_facade . __get__ (  ' accountDBPool '  )  ; %NWL%var loggingDBPool = account_db_facade . __get__ (  ' loggingDBPool '  )  ; %NWL%9
doh . is ( 1 , dojo . attr ( input ,  " tabIndex "  )  )  ;%NWL%}  ,%NWL%function removeTabindexFromDiv ( t )  {%NWL%var div = document . createElement (  " div "  )  ; %NWL%dojo . attr ( div ,  " tabIndex "  , 1 )  ; %NWL%doh . is ( 1 , dojo . attr ( div ,  " tabIndex "  )  )  ; %NWL%dojo . removeAttr ( div ,  " tabIndex "  )  ; %NWL%doh . is ( null , dojo . attr ( div ,  " tabIndex "  )  )  ;%NWL%}  ,%NWL%function removeDisabledFromInput ( t )  {%NWL%var input = document . createElement (  " input "  )  ; %NWL%3
var util = require (  ' util '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var bitcore = require (  ' bitcore '  )  ; %NWL%var Key = bitcore . Key ; %NWL%var sha256 = bitcore . util . sha256 ; %NWL%var Message = bitcore . Message ; %NWL%var ECIES = bitcore . ECIES ; %NWL%var SecureRandom = bitcore . SecureRandom ; %NWL%var crypto = require (  ' crypto '  )  ; %NWL%var AESSocket = require (  '  .  / AESSocket '  )  ; %NWL%var shastring = require (  '  .  / shastring '  )  ; %NWL%9
)  ;%NWL%}  )  ; %NWL%grunt . registerTask (  " config : copy "  , function ( target , suffix )  {%NWL%var arrayOfFiles =  [  ]  ; %NWL%var versionSuffix = grunt . template . process (  "  < % = versionSuffix % >  "  )  ; %NWL%suffix = suffix || "  "  ; %NWL%var versionSuffixRE = new RegExp ( grunt . template . process (  "  < % = versionSuffix % >  "  )  ,  " g "  )  ; %NWL%var suffixRE = new RegExp (  "  (  ( \ . min ) ?\ .  ( js|css|map )  ) $ "  ,  " g "  )  ; %NWL%var blobRE = new RegExp (  " \\ *  "  ,  " g "  )  ; %NWL%var cwd = grunt . template . process (  "  < % = copy .  "  + target +  "  . files . cwd % >  "  )  ; %NWL%var src = grunt . template . process (  "  < % = copy .  "  + target +  "  . files . src % >  "  )  ; %NWL%9
var ReactDOMForm = require (  "  .  / ReactDOMForm "  )  ; %NWL%var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%var ReactDOMSelect = require (  "  .  / ReactDOMSelect "  )  ; %NWL%var ReactDOMTextarea = require (  "  .  / ReactDOMTextarea "  )  ; %NWL%var ReactInstanceHandles = require (  "  .  / ReactInstanceHandles "  )  ; %NWL%var ReactMount = require (  "  .  / ReactMount "  )  ; %NWL%var SelectEventPlugin = require (  "  .  / SelectEventPlugin "  )  ; %NWL%var ServerReactRootIndex = require (  "  .  / ServerReactRootIndex "  )  ; %NWL%var SimpleEventPlugin = require (  "  .  / SimpleEventPlugin "  )  ; %NWL%0
var color = 255 - Math . round ( opacity * 255 )  ; %NWL%$pIndicator . show (  )  . css (  {%NWL%left : w / 2 * vnorm . x + w / 2 ,%NWL%top : h / 2 * vnorm . y + h / 2 ,%NWL%background :  " rgb (  "  + color +  "  ,  "  + color +  "  ,  "  + color +  "  )  "%NWL%}  )  ;%NWL%}%NWL%function calculateZoomCenterPoint (  )  {%NWL%var cy = $container . cytoscape (  " get "  )  ; %NWL%var pan = cy . pan (  )  ; %NWL%var zoom = cy . zoom (  )  ; %NWL%9
, wrap : newWrap }%NWL%installOne ( target , where , newContext , cb )%NWL%}  , cb )%NWL%}  )%NWL%}  )%NWL%}%NWL%function targetResolver ( where , context , deps )  {%NWL%var alreadyInstalledManually = context . explicit ? [  ]  : null%NWL%, nm = path . resolve ( where ,  " node_modules "  )%NWL%, parent = context . parent%NWL%, wrap = context . wrap%NWL%9
nodeRenderTitle : function ( ctx , title )  {%NWL%var node = ctx . node ,%NWL%extOpts = ctx . options . childcounter ,%NWL%count = node . countChildren ( extOpts . deep )  ; %NWL%this . _super ( ctx , title )  ; %NWL%if (  ( count || ! extOpts . hideZeros ) && ( !node . isExpanded (  ) || !extOpts . hideExpanded )  )  {%NWL%$ (  " span . fancytree - icon "  , node . span )  . append ( $ (  "  < span class =  ' fancytree - childcounter '  /  >  "  )  . text ( count )  )  ;%NWL%}%NWL%}  ,%NWL%nodeSetExpanded : function ( ctx , flag )  {%NWL%var tree = ctx . tree ,%NWL%1
this . map . elementArrClicked = true ;%NWL%}  ,%NWL%scope : this%NWL%}  ; %NWL%this . callbackInstance = new aria . utils . Callback ( this . jsonHandler )  ;%NWL%}  ,%NWL%$prototype :  {%NWL%runTemplateTest : function (  )  {%NWL%var mydiv1 = aria . utils . Dom . getElementById (  ' mydiv1 '  )  ; %NWL%var mydiv2 = aria . utils . Dom . getElementById (  ' mydiv2 '  )  ; %NWL%var mydiv3 = aria . utils . Dom . getElementById (  ' mydiv3 '  )  ; %NWL%8
params . push (  " path =  "  + encodeURIComponent ( options . path )  )  ;%NWL%}%NWL%if ( options . since )  {%NWL%var since = options . since ; %NWL%if ( since . constructor =  =  = Date )  {%NWL%since = since . toISOString (  )  ;%NWL%}%NWL%params . push (  " since =  "  + encodeURIComponent ( since )  )  ;%NWL%}%NWL%if ( options . until )  {%NWL%var until = options . until ; %NWL%3
function escapeRegExp ( str )  {%NWL%return str . replace (  /  [ \ - \ [ \ ] \ / \ { \ } \ ( \ ) \ * \ + \?\ . \\\^\$\| ]  / g ,  " \\$& "  )  ;%NWL%}%NWL%function getRandomLetter (  )  {%NWL%var possible =  " ABCDEFGHIJKLMNOPQRSTUVWXYZ "  ; %NWL%return possible . charAt ( Math . floor ( Math . random (  )  * possible . length )  )  ;%NWL%}%NWL%this . routes . getRandomSongs = function ( req , res , callback )  {%NWL%var size = Math . max ( Math . min ( req . query . size || 10 , 500 )  , 1 )  ; %NWL%var fromYear = req . query . fromYear || null ; %NWL%var toYear = req . query . toYear || null ; %NWL%9
this . x2 +  = dx ; %NWL%this . y1 +  = dy ; %NWL%this . y2 +  = dy ; %NWL%return this ;%NWL%}  ; %NWL%CollisionCoords . prototype . update = function ( obj )%NWL%{%NWL%if (  " x1 " in obj ) this . x1 = obj [  " x1 "  ]  ; %NWL%if (  " x2 " in obj ) this . x1 = obj [  " x2 "  ]  ; %NWL%if (  " y1 " in obj ) this . x1 = obj [  " y1 "  ]  ; %NWL%if (  " y2 " in obj ) this . x1 = obj [  " y2 "  ]  ; %NWL%7
ROOT_TYPE : null ,%NWL%_getUIEventNode : function (  )  {%NWL%var root = this . get (  " root "  )  ,%NWL%returnVal ; %NWL%if ( root )  {%NWL%returnVal = root . get (  " boundingBox "  )  ;%NWL%}%NWL%return returnVal ;%NWL%}  ,%NWL%next : function ( circular )  {%NWL%var parent = this . get (  " parent "  )  ,%NWL%2
this . fill (  ' timing - function '  , splited [ 2 ]  )%NWL%} else if ( length =  = 4 )  {%NWL%this . fill (  ' property '  , splited [ 0 ]  )%NWL%this . fill (  ' duration '  , splited [ 1 ]  )%NWL%this . fill (  ' timing - function '  , splited [ 2 ]  )%NWL%this . fill (  ' delay '  , splited [ 3 ]  )%NWL%}%NWL%}%NWL%this . collect = function ( self )  {%NWL%var name = self . name%NWL%var attrs = self . attrs%NWL%9
" use strict "  ; %NWL%var events = require (  ' events '  )%NWL%, async = require (  ' async '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, util = require (  ' util '  )%NWL%, layouts = require (  '  .  / layouts '  )%NWL%, levels = require (  '  .  / levels '  )%NWL%, loggerModule = require (  '  .  / logger '  )%NWL%, LoggingEvent = loggerModule . LoggingEvent%NWL%, Logger = loggerModule . Logger%NWL%9
( function (  )  {%NWL%var dd = dojox . dtl ; %NWL%var ddtl = dd . tag . loader ; %NWL%ddtl . BlockNode = dojo . extend ( function ( name , nodelist )  {%NWL%this . name = name ; %NWL%this . nodelist = nodelist ;  /  / Can be overridden%NWL%}  ,%NWL%{%NWL%render : function ( context , buffer )  {%NWL%var name = this . name ; %NWL%var nodelist = this . nodelist ; %NWL%9
sendError ( res , 404 )  ; %NWL%return ;%NWL%}%NWL%else if ( err )  {%NWL%sendError ( res , 500 )  ; %NWL%throw err ;%NWL%}%NWL%user = createUser ( doc )  ; %NWL%req . body = req . body || {  }  ; %NWL%var code = req . body . code ; %NWL%var uri = req . body . uri ; %NWL%9
function range_array_loop_object_firstSubRule ( start , end )  {%NWL%this . idx =  - 1%NWL%this . length = 1%NWL%this . next = lastSubRule%NWL%this . start = start%NWL%this . end = end%NWL%}%NWL%range_array_loop_object_firstSubRule . prototype . test = function ( buf , offset )  {%NWL%var isString = typeof buf =  =  =  ' string '%NWL%var start = this . start%NWL%var end = this . end%NWL%9
$container_settings_info . find (  ' form fieldset '  )  . append (%NWL%'  < input type =  " checkbox " name =  " perma_status_facebook " id =  " perma_status_facebook "  '%NWL%+ perma_status_facebook +  '  /  >  < label for =  " perma_status_facebook "  >  '%NWL%+ options . services . facebook . display_name +  '  <  / label >  '%NWL%)  ;%NWL%}%NWL%if ( twitter_on && twitter_perma )  {%NWL%var perma_status_twitter = cookies . socialSharePrivacy_twitter =  =  =  ' perma_on ' ? checked :  '  '  ; %NWL%$container_settings_info . find (  ' form fieldset '  )  . append (%NWL%'  < input type =  " checkbox " name =  " perma_status_twitter " id =  " perma_status_twitter "  '%NWL%+ perma_status_twitter +  '  /  >  < label for =  " perma_status_twitter "  >  '%NWL%2
, gruntHelpers = require (  '  .  / grunt - helpers . js '  )%NWL%, authorize = gruntHelpers . authorize%NWL%, tail = gruntHelpers . tail%NWL%, buildApp = gruntHelpers . buildApp%NWL%, buildSafariLauncherApp = gruntHelpers . buildSafariLauncherApp%NWL%, signApp = gruntHelpers . signApp%NWL%, setupAndroidBootstrap = gruntHelpers . setupAndroidBootstrap%NWL%, setupAndroidApp = gruntHelpers . setupAndroidApp%NWL%, buildAndroidBootstrap = gruntHelpers . buildAndroidBootstrap%NWL%, buildSelendroidServer = gruntHelpers . buildSelendroidServer%NWL%, buildAndroidApp = gruntHelpers . buildAndroidApp%NWL%1
}  ; %NWL%if ( options )  {%NWL%$ . extend ( settings , options )  ;%NWL%}%NWL%var plugin  = $ . editable . types [ settings . type ]  . plugin || function (  )  {  }  ; %NWL%var submit  = $ . editable . types [ settings . type ]  . submit || function (  )  {  }  ; %NWL%var buttons  = $ . editable . types [ settings . type ]  . buttons%NWL%|| $ . editable . types [  ' defaults '  ]  . buttons ; %NWL%var content  = $ . editable . types [ settings . type ]  . content%NWL%|| $ . editable . types [  ' defaults '  ]  . content ; %NWL%var element  = $ . editable . types [ settings . type ]  . element%NWL%6
, createPacketBuffer = protocol . createPacketBuffer%NWL%, compressPacketBuffer = protocol . compressPacketBuffer%NWL%, oldStylePacket = protocol . oldStylePacket%NWL%, newStylePacket = protocol . newStylePacket%NWL%, parsePacket = protocol . parsePacket%NWL%, parsePacketData = protocol . parsePacketData%NWL%, parseNewStylePacket = protocol . parseNewStylePacket%NWL%, packetIds = protocol . packetIds%NWL%, packetNames = protocol . packetNames%NWL%, states = protocol . states%NWL%, debug = protocol . debug%NWL%0
}  ; %NWL%Thrift . inherits ( EDAMUserException , Thrift . TException )  ; %NWL%EDAMUserException . prototype . name =  ' EDAMUserException '  ; %NWL%EDAMUserException . prototype . read = function ( input )  {%NWL%input . readStructBegin (  )  ; %NWL%while ( true )%NWL%{%NWL%var ret = input . readFieldBegin (  )  ; %NWL%var fname = ret . fname ; %NWL%var ftype = ret . ftype ; %NWL%var fid = ret . fid ; %NWL%8
var http = require (  ' http '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var assert = require (  ' assert - plus '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var once = require (  ' once '  )  ; %NWL%var spdy = require (  ' spdy '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var dtrace = require (  '  .  / dtrace '  )  ; %NWL%var errors = require (  '  .  / errors '  )  ; %NWL%9
expect ( optionsButton . getText (  )  )  . toContain (  ' Hide Options '  )  ;%NWL%}  )  ; %NWL%describe (  " page size "  , function (  )  {%NWL%var pageSizeInput = page . on . list . options . pageSizeInput (  )  ;  /  / get element%NWL%beforeEach ( function (  )  {%NWL%optionsButton . click (  )  ;%NWL%}  )  ; %NWL%it (  " should not change "  , function (  )  {%NWL%pageSizeInput . clear (  )  ; %NWL%pageSizeInput . sendKeys ( 1 )  ; %NWL%var pageSizeMessage = page . on . list . options . pageSizeMessage (  )  ;  /  / get element%NWL%3
}%NWL%}%NWL%return a ;%NWL%}  , setAxesRanges : function (  )  {%NWL%var ranges =  {  }  ; %NWL%var axes =  {  }  ; %NWL%for ( var i = 0 ; i < this . plots . length ; i +  +  )  {%NWL%var plot = this . plots [ i ]  ; %NWL%var ranges = plot . getRanges (  )  ; %NWL%var x = ranges . x ; %NWL%var y = ranges . y ; %NWL%9
}%NWL%}%NWL%}%NWL%return definition ;%NWL%}%NWL%SchemaProcessor . prototype . build_attribute = function ( node , definition )  {%NWL%var ref = node . getAttribute (  " ref "  )  ; %NWL%if ( ref )  {%NWL%this . addReference ( definition , ref )  ;%NWL%} else {%NWL%var type = node . getAttribute (  " type "  )  ; %NWL%6
}%NWL%}  )  ; %NWL%return false ;%NWL%}%NWL%return true ;%NWL%}  ,%NWL%setPlanNotesButtonIcon : function (  )  {%NWL%var me = this ; %NWL%var contactNotes = me . currentMapPlan . get (  " contactNotes "  )  ; %NWL%var studentNotes = me . currentMapPlan . get (  " studentNotes "  )  ; %NWL%var academicGoals = me . currentMapPlan . get (  " academicGoals "  )  ; %NWL%8
}%NWL%Vector . prototype . getNorm = function (  )  {%NWL%return Math . sqrt ( this . getEnergy (  )  )  ;%NWL%}%NWL%Vector . prototype . normalize = function (  )  {%NWL%var norm = this . getNorm (  )  ; %NWL%return Vector ( this . x / norm , this . y / n )  ;%NWL%}%NWL%Math . hypot = function ( v1 , v2 )  {%NWL%var x = v1 . x - v2 . x ; %NWL%var y = v1 . y - v2 . y ; %NWL%9
var nduid ; %NWL%for ( p in response )  {%NWL%if ( p =  =  " com . palm . properties . nduid "  )  { nduid = response [ p ]  ;  }%NWL%}%NWL%this . nduid = nduid ;%NWL%}%NWL%var galx = Mojo . Model . decrypt ( this . nduid , galxEnc )  ; %NWL%var sid = Mojo . Model . decrypt ( this . nduid , sidEnc )  ; %NWL%var hsid = Mojo . Model . decrypt ( this . nduid , hsidEnc )  ; %NWL%var lsid = Mojo . Model . decrypt ( this . nduid , lsidEnc )  ; %NWL%var ssid = Mojo . Model . decrypt ( this . nduid , ssidEnc )  ; %NWL%6
. attr (  " class "  ,  " axis "  )%NWL%. call ( d3 . svg . axis (  )  . scale ( pScale )  . orient ( axis )  . ticks ( vAxisTicks )  )%NWL%. attr (  " transform "  ,  " translate (  "  + translate +  "  , 0 )  "  )  ; %NWL%break ;%NWL%}%NWL%}  ; %NWL%this . update = function (  )  {%NWL%this . data . shift (  )  ; %NWL%this . data . push ( getData (  )  )  ; %NWL%var xScale = this . xScale ; %NWL%var yScale = this . yScale ; %NWL%9
var express = require (  ' express '  )  ; %NWL%var sys = require (  ' sys '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var mongo = require (  ' mongodb '  )  ; %NWL%var ObjectID = mongo . ObjectID ; %NWL%var BSON = require (  ' mongodb '  )  . BSONPure ; %NWL%var async = require (  ' async '  )  ; %NWL%var extend = require (  ' extend '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%0
$ ( document )  . on (  " pageshow "  ,  " #Stats "  , function (  )  {%NWL%var donorsDataCache =  [  ]  ; %NWL%var labelsDataCache =  [  ]  ; %NWL%function drawPieChart ( chartContainer , chartData , chartLegendData )  {%NWL%while ( chartContainer . firstChild )  {%NWL%chartContainer . removeChild ( chartContainer . firstChild )  ;%NWL%}%NWL%var namespace =  " http :  /  / www . w3 . org / 2000 / svg "  ; %NWL%var colorScheme =  [  " #2F69BF "  ,  " #A2BF2F "  ,  " #BF5A2F "  ,  " #BFA22F "  ,  " #772FBF "  ,  " #2F94BF "  ,  " #c3d4db "  ]  ; %NWL%var width = $ ( window )  . width (  )  ; %NWL%var height = $ ( window )  . height (  )  ; %NWL%9
var length = vertices . length / 2 ; %NWL%this . count +  +  ; %NWL%for ( var i = 0 ; i < length - 2 ; i +  +  )  {%NWL%var index = i * 2 ; %NWL%this . _renderCanvasDrawTriangle ( context , vertices , uvs , index ,  ( index + 2 )  ,  ( index + 4 )  )  ;%NWL%}%NWL%}  ; %NWL%PIXI . Strip . prototype . _renderCanvasTriangles = function ( context )%NWL%{%NWL%var vertices = this . vertices ; %NWL%var uvs = this . uvs ; %NWL%9
function queueDataFromCacheOrSendRequestByReqObj ( reqObj )%NWL%{%NWL%var req = reqObj [  ' req '  ]  ; %NWL%var res = reqObj [  ' res '  ]  ; %NWL%var jobType = reqObj [  ' jobType '  ]  ; %NWL%var jobName = reqObj [  ' jobName '  ]  ; %NWL%var reqUrl = reqObj [  ' reqUrl '  ]  ; %NWL%var defCallback = reqObj [  ' defCallback '  ]  ; %NWL%var jobRunCount = reqObj [  ' jobRunCount '  ]  ; %NWL%var firstRunDelay = reqObj [  ' firstRunDelay '  ]  ; %NWL%var nextRunDelay = reqObj [  ' nextRunDelay '  ]  ; %NWL%3
body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var localAABB = intersectTrimesh_localAABB ; %NWL%var localDirection = intersectTrimesh_localDirection ; %NWL%3
this . tabs [ 0 ]  . once (  ' open '  , function (  )  {%NWL%tty . emit (  ' open window '  , self )  ; %NWL%self . emit (  ' open '  )  ;%NWL%}  )  ;%NWL%}%NWL%inherits ( Window , EventEmitter )  ; %NWL%Window . prototype . bind = function (  )  {%NWL%var self = this%NWL%, el = this . element%NWL%, bar = this . bar%NWL%, grip = this . grip%NWL%9
}  ; %NWL%this . fire = function ( oEvtArgs )  {%NWL%var args =  [ sEvtName , oEvtSource , oEvtArgs ]  ; %NWL%for ( var i = 0 ; i < handlers . length ; i +  +  )  {%NWL%handlers [ i ]  . handler . apply ( handlers [ i ]  . context , args )  ;%NWL%}%NWL%}  ;%NWL%}  ; %NWL%mxn . Invoker = function ( aobj , asClassName , afnApiIdGetter )  {%NWL%var obj = aobj ; %NWL%var sClassName = asClassName ; %NWL%9
document . execCommand (  ' copy '  )  ; %NWL%document . body . removeChild ( textArea )  ;%NWL%}%NWL%var canvasUtils =  {%NWL%appendImageToCanvas : function ( argObj )  {%NWL%var scale = argObj . scale || 1 . 0 ; %NWL%var zoom = argObj . zoom || 1 . 0 ; %NWL%var canvasData = argObj . canvasData ; %NWL%var imageSrc = argObj . imageSrc ; %NWL%var pageHeight = argObj . pageHeight * zoom ; %NWL%var imageHeight = argObj . imageHeight ; %NWL%7
var ReactContext = require (  ' ReactContext '  )  ; %NWL%var ReactCurrentOwner = require (  ' ReactCurrentOwner '  )  ; %NWL%var ReactDOM = require (  ' ReactDOM '  )  ; %NWL%var ReactDOMComponent = require (  ' ReactDOMComponent '  )  ; %NWL%var ReactDefaultInjection = require (  ' ReactDefaultInjection '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactPropTypes = require (  ' ReactPropTypes '  )  ; %NWL%var ReactServerRendering = require (  ' ReactServerRendering '  )  ; %NWL%0
this . outerPrint . runAction ( cc . RotateBy . create ( 0 . 6 ,  - 360 )  )  ; %NWL%this . outerPrint . runAction ( cc . ScaleTo . create ( 0 . 6 , 0 . 1 )  )  ; %NWL%this . outerPrint . runAction ( cc . FadeOut . create ( 0 . 6 )  )  ; %NWL%this . innerPrint . runAction ( cc . RotateBy . create ( 0 . 6 , 360 )  )  ; %NWL%this . innerPrint . runAction ( cc . ScaleTo . create ( 0 . 6 , 0 . 1 )  )  ; %NWL%this . innerPrint . runAction ( cc . FadeOut . create ( 0 . 6 )  )  ; %NWL%this . createSprites (  )  ;%NWL%}  ,%NWL%landed : function ( character )  {%NWL%var x = character . getPosition (  )  . x ; %NWL%var y = character . getPosition (  )  . y ; %NWL%9
var arrow = new Element (  " div "  ,  { className :  " xarrow "  }  )  . insert (  '  < b class =  " a1 "  >  <  / b >  < b class =  " a2 "  >  <  / b >  < b class =  " a3 "  >  <  / b >  < b class =  " a4 "  >  <  / b >  < b class =  " a5 "  >  <  / b >  < b class =  " a6 "  >  <  / b >  '  )  ; %NWL%var top = new Element (  " div "  ,  { className :  " xtop "  }  )  . insert (%NWL%new Element (  " div "  ,  { className :  " xb1 "  , style :  " background - color :  "  + this . options . borderColor +  "  ;  "  }  )%NWL%)  . insert (%NWL%new Element (  " div "  ,  { className :  " xb2 "  , style :  " background - color :  "  + this . options . backgroundColor +  "  ; border - color :  "  + this . options . borderColor +  "  ;  "  }  )%NWL%)  . insert (%NWL%new Element (  " div "  ,  { className :  " xb3 "  , style :  " background - color :  "  + this . options . backgroundColor +  "  ; border - color :  "  + this . options . borderColor +  "  ;  "  }  )%NWL%)  . insert (%NWL%new Element (  " div "  ,  { className :  " xb4 "  , style :  " background - color :  "  + this . options . backgroundColor +  "  ; border - color :  "  + this . options . borderColor +  "  ;  "  }  )%NWL%)  ; %NWL%var bottom = new Element (  " div "  ,  { className :  " xbottom "  }  )  . insert (%NWL%1
. call ( d3 . svg . axis (  )  . scale ( pScale )  . orient ( axis )  . ticks ( vAxisTicks )  )%NWL%. attr (  " transform "  ,  " translate (  "  + translate +  "  , 0 )  "  )  ; %NWL%break ;%NWL%}%NWL%}  ; %NWL%this . update = function (  )  {%NWL%this . data . shift (  )  ; %NWL%this . data . push ( getData (  )  )  ; %NWL%var xScale = this . xScale ; %NWL%var yScale = this . yScale ; %NWL%var height = this . height ; %NWL%8
}  , 30 )  )  ; %NWL%return preventDefault . apply ( this , arguments )  ;%NWL%}  ; %NWL%e . isDefaultPrevented = function (  )  {%NWL%return !! ( isDefaultPrevented . apply ( this , arguments ) || $ . data ( e . target , e . type +  ' DefaultPrevented '  ) || false )  ;%NWL%}  ; %NWL%e . _isPolyfilled = true ;%NWL%}%NWL%}  ; %NWL%var modules = webshims . modules ; %NWL%var support = webshims . support ; %NWL%9
var cache = exports . managers =  {  }  ; %NWL%function lookup ( uri , opts )  {%NWL%if ( typeof uri =  =  ' object '  )  {%NWL%opts = uri ; %NWL%uri = undefined ;%NWL%}%NWL%opts = opts || {  }  ; %NWL%var parsed = url ( uri )  ; %NWL%var source = parsed . source ; %NWL%var id = parsed . id ; %NWL%var path = parsed . path ; %NWL%8
var deployTemplates = require (  ' deployment / templates '  )  ; %NWL%var deployServices = require (  ' deployment / services '  )  ; %NWL%var deployFiles = require (  ' deployment / files '  )  ; %NWL%var deployConstants = require (  ' deployment / constants '  )  ; %NWL%var serviceManagement = require (  ' service_management '  )  ; %NWL%var manifest = require (  ' manifest '  )  ; %NWL%var manifestConstants = require (  ' manifest / constants '  )  ; %NWL%var config = require (  ' util / config '  )  ; %NWL%var fsutil = require (  ' util / fs '  )  ; %NWL%var flowctrl = require (  ' util / flow_control '  )  ; %NWL%var misc = require (  ' util / misc '  )  ; %NWL%7
, file_ex_codes =  (%NWL%" NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR "%NWL%+  " NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR "%NWL%)  . split (  "  "  )%NWL%, file_ex_code = file_ex_codes . length%NWL%, real_URL = view . URL || view . webkitURL || view%NWL%, real_create_object_URL = real_URL . createObjectURL%NWL%, real_revoke_object_URL = real_URL . revokeObjectURL%NWL%, URL = real_URL%NWL%, btoa = view . btoa%NWL%, atob = view . atob%NWL%9
var bibPanel = document . getElementById (  " bibPanel "  )  ; %NWL%var bibToggle = document . getElementById (  " bibToggle "  )  ; %NWL%if ( bibPanel . style . display ! =  " none "  )  {%NWL%bibPanel . style . display =  " none "  ;%NWL%} else {%NWL%bibPanel . style . display =  " block "  ;%NWL%}%NWL%resizePanels (  )  ;%NWL%}%NWL%function hideNotesPanel ( panel )  {%NWL%var notesPanel = document . getElementById (  " notesPanel "  )  ; %NWL%0
promise . then ( null , handler3 )  ; %NWL%promise . then ( null , function (  )  {%NWL%sinon . assert . callOrder ( handler1 , handler2 , handler3 )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " even when one handler is added inside another handler "  , function (  )  {%NWL%testRejected ( dummy , function ( promise , done )  {%NWL%var handler1 = sinon . spy ( function handler1 (  )  {  }  )  ; %NWL%var handler2 = sinon . spy ( function handler2 (  )  {  }  )  ; %NWL%var handler3 = sinon . spy ( function handler3 (  )  {  }  )  ; %NWL%8
var row = spriteRows [ i ]  ; %NWL%var dx = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . x '  )  . value ) || 0 , 0 )  , 255 )  - 8 ; %NWL%var dy = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . y '  )  . value ) || 0 , 0 )  , 255 )  - 16 ; %NWL%var tile = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . tile '  )  . value ) || 0 , 0 )  , Math . min ( Math . floor ( inputCanvas . width / 8 )  * Math . floor ( inputCanvas . height / 8 )  - 1 ,  255 )  )  ; %NWL%var pal = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . pal '  )  . value ) || 0 , 0 )  , Math . min ( palettes . length , 7 )  )  ; %NWL%var hflip = row . querySelector (  '  . hflip '  )  . checked ; %NWL%var vflip = row . querySelector (  '  . vflip '  )  . checked ; %NWL%var sx = tile * 8 % inputCanvas . width ; %NWL%var sy = Math . floor ( tile * 8 / inputCanvas . width )  * 8 ; %NWL%for ( var y = 0 ; y < 8 ; y +  +  )  {%NWL%for ( var x = 0 ; x < 8 ; x +  +  )  {%NWL%9
media :  '  < img width =  " 44 " height =  " 44 " style =  " border - radius : 100% " src =  " http :  /  / lorempixel . com / output / people - q - c - 100 - 100 - 9 . jpg "  >  '  ,%NWL%onClose : function (  )  {%NWL%myApp . alert (  ' Notification closed '  )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%myApp . onPageInit (  ' login - screen - embedded '  , function ( page )  {%NWL%$$ ( page . container )  . find (  '  . list - button '  )  . on (  ' click '  , function (  )  {%NWL%var username = $$ ( page . container )  . find (  ' input [ name =  " username "  ]  '  )  . val (  )  ; %NWL%var password = $$ ( page . container )  . find (  ' input [ name =  " password "  ]  '  )  . val (  )  ; %NWL%9
var requestOutputHandler = requestOutput . createHandler ( this )  ; %NWL%catalog . registerExtension (  ' addedRequestOutput '  , requestOutputHandler )  ;%NWL%}  ; %NWL%exports . CliInputView . prototype =  {%NWL%elementAppended : function (  )  {%NWL%this . checkSize (  )  ;%NWL%}  ,%NWL%getOrientation : function (  )  {%NWL%var className = this . element . className ; %NWL%var north =  / \bnorth\b /  . test ( className )  ; %NWL%var south =  / \bsouth\b /  . test ( className )  ; %NWL%9
for ( var method in methods ) klass . prototype [ method ]  = methods [ method ]%NWL%}%NWL%return klass%NWL%}%NWL%var TestRunner = inherit ( ConsoleTestRunner , function ( _super )  {%NWL%AutoRunner . RUNNERS . guggenheim = this%NWL%return {%NWL%_makeResult : function (  )  { return new TestResult ( this . logger )  }%NWL%}%NWL%}  )%NWL%var TestResult = inherit ( ConsoleTestResult , function ( _super )  {%NWL%4
}%NWL%dispatcher . target = target ;%NWL%}%NWL%var results = advise (  ( dispatcher || existing )  , type , advice , receiveArguments )  ; %NWL%advice = null ; %NWL%return results ;%NWL%}  ;%NWL%}%NWL%var after = aspect (  " after "  )  ; %NWL%var before = aspect (  " before "  )  ; %NWL%var around = aspect (  " around "  )  ; %NWL%8
int32 [ 2 ]  = cc . lang . sampleRate ; %NWL%int32 [ 3 ]  = array . length ; %NWL%for ( var i = 0 ; i < array . length ;  +  + i )  {%NWL%f32 [ i + 4 ]  = array [ i ]  ;%NWL%}%NWL%assert . deepEqual ( cc . lang . sendToServer . result ,  [ uint8 ]  )  ;%NWL%}  )  ; %NWL%describe (  "  * read "  , function (  )  {%NWL%var uint8 = new Uint8Array ( C . SET_BUFFER_HEADER_SIZE + 8 * 4 )  ; %NWL%var int16 = new Uint16Array ( uint8 . buffer )  ; %NWL%var int32 = new Uint32Array ( uint8 . buffer )  ; %NWL%9
menuObject . setAttribute (  " style "  , menuTranslate )  ; %NWL%menuObject . style . width = width +  ' px '  ;%NWL%}%NWL%self . previousWidth = window . innerWidth ;%NWL%}  , 300 )  ;%NWL%}%NWL%JBackbone . prototype . goToPage = function ( nextPage , config )  {%NWL%if ( !config ) config =  {  }  ; %NWL%if ( typeof config . addToHistory =  =  =  ' undefined '  ) config . addToHistory = true ; %NWL%if ( typeof config . resetHistory =  =  =  ' undefined '  ) config . resetHistory = false ; %NWL%if ( typeof config . closeMenu =  =  =  ' undefined '  ) config . closeMenu = true ; %NWL%8
if (  ' OPTIONS '  =  = req . method )  {%NWL%res . send ( 200 )  ;%NWL%}%NWL%else {%NWL%next (  )  ;%NWL%}%NWL%}  ; %NWL%app . use ( allowCrossDomain )  ; %NWL%app . post (  '  / login '  , function ( req , resp )  {%NWL%var name = req . param (  ' name '  )  ; %NWL%var password = req . param (  ' password '  )  ; %NWL%9
description :  ' Done .  '%NWL%}  ,%NWL%}  ,%NWL%fn : function ( inputs , exits )  {%NWL%var util = require (  ' util '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var debug = require (  ' debug '  )  (  ' treeline '  )  ; %NWL%var Urls = require (  ' machinepack - urls '  )  ; %NWL%var thisPack = require (  '  .  .  /  '  )  ; %NWL%var npm = require (  ' machinepack - npm '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%4
Object . keys ( changeSet )  . forEach ( function ( key )  {%NWL%if ( key . indexOf (  ' setConfig '  )  >  - 1 )  {%NWL%changeSet [ key ]  . command . args [ 1 ]  [ fieldName ]  = value ;%NWL%}%NWL%}  )  ; %NWL%var conflictedFields = model . get (  ' _conflictedFields '  )  ; %NWL%conflictedFields . splice (%NWL%conflictedFields . indexOf ( fieldName )  , 1 )  ; %NWL%model . set (  ' _conflictedFields '  , conflictedFields )  ; %NWL%if ( envConfig [ fieldName ]  =  =  = value )  {%NWL%var dirtyFields = model . get (  ' _dirtyFields '  )  ; %NWL%5
var fs = require (  ' fs '  )%NWL%var minimatch = require (  ' minimatch '  )%NWL%var Minimatch = minimatch . Minimatch%NWL%var inherits = require (  ' inherits '  )%NWL%var EE = require (  ' events '  )  . EventEmitter%NWL%var path = require (  ' path '  )%NWL%var assert = require (  ' assert '  )%NWL%var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%9
this . _selectedUID = viewUID ; %NWL%var client = this . _client ; %NWL%if ( client && client . isConnected (  )  )  {%NWL%client . sendEvent (  ' SET_SELECTED '  ,  { uid : viewUID }  )  ;%NWL%}%NWL%}  ; %NWL%var PERIOD = 8000 ; %NWL%this . tick = function (  )  {%NWL%if ( !this . _node )  { return ;  }%NWL%this . _node . refresh (  )  ; %NWL%var highlight = this . _highlight ; %NWL%1
id : 156 ,%NWL%from_node : 143 , from :  ' out '  ,%NWL%to_node : 34 , to :  ' in1 '%NWL%}  ; %NWL%var connection_156 = nodegraph . createConnectionFromObject ( connection_156_data )  ; %NWL%var connection_157_data =  {%NWL%id : 157 ,%NWL%from_node : 134 , from :  ' out '  ,%NWL%to_node : 143 , to :  ' geometry '%NWL%}  ; %NWL%var connection_157 = nodegraph . createConnectionFromObject ( connection_157_data )  ; %NWL%4
return url +  ' ?t = 20130202 '%NWL%}%NWL%}%NWL%]%NWL%}  )%NWL%define ( function ( require )  {%NWL%var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var data = seajs . data%NWL%test . assert ( data . map . length =  =  = 6 , data . map . length )%NWL%var a = require (  '  .  / a '  )%NWL%var b = require (  '  .  / b '  )%NWL%9
var ConstPlugin = require (  "  .  / ConstPlugin "  )  ; %NWL%var RequireJsStuffPlugin = require (  "  .  / RequireJsStuffPlugin "  )  ; %NWL%var NodeStuffPlugin = require (  "  .  / NodeStuffPlugin "  )  ; %NWL%var CompatibilityPlugin = require (  "  .  / CompatibilityPlugin "  )  ; %NWL%var DefinePlugin = require (  "  .  / DefinePlugin "  )  ; %NWL%var MovedToPluginWarningPlugin = require (  "  .  / MovedToPluginWarningPlugin "  )  ; %NWL%var TemplatedPathPlugin = require (  "  .  / TemplatedPathPlugin "  )  ; %NWL%var WarnCaseSensitiveModulesPlugin = require (  "  .  / WarnCaseSensitiveModulesPlugin "  )  ; %NWL%var LoaderPlugin = require (  "  .  / dependencies / LoaderPlugin "  )  ; %NWL%var CommonJsPlugin = require (  "  .  / dependencies / CommonJsPlugin "  )  ; %NWL%var AMDPlugin = require (  "  .  / dependencies / AMDPlugin "  )  ; %NWL%8
process . exit ( 1 )  ;%NWL%}%NWL%var jobListenerReadyQ =  {  }  ; %NWL%var jobListenerReadyQEvent = new eventEmitter (  )  ; %NWL%jobsApi . kue = kue ; %NWL%jobsApi . storeQ =  {  }  ; %NWL%kue . redis . createClient = function (  )%NWL%{%NWL%var server_port =  ( config . redis_server_port ) ?%NWL%config . redis_server_port : global . DFLT_REDIS_SERVER_PORT ; %NWL%var server_ip =  ( config . redis_server_ip ) ?%NWL%8
module . prototype =  {%NWL%constructor : module ,%NWL%getDevicesByRegisteredDate : function ( ctx )  {%NWL%var zeros =  ' 00 : 00 : 00 '  ; %NWL%var ends =  ' 23 : 59 : 59 '  ; %NWL%if ( typeof ctx . startDate =  =  ' undefined ' || ctx . startDate =  = null || ctx . startDate =  =  "  "  )  {%NWL%ctx . startDate =  " 2013 - 01 - 01 "  ;%NWL%}%NWL%var startDate = ctx . startDate + zeros ; %NWL%var endDate =  '  '  ; %NWL%if ( typeof ctx . endDate =  =  ' undefined ' || ctx . endDate =  = null || ctx . endDate =  =  "  "  )  {%NWL%5
this . transform ( parentOperation . spawn (  {%NWL%op :  ' remove '  ,%NWL%path :  [ linkSchema . model , value ,  ' __rev '  , linkPath ]%NWL%}  )  )  ;%NWL%}%NWL%}  ,%NWL%_transformRelatedInverseLinks : function ( operation )  {%NWL%var _this = this ; %NWL%var op = operation . op ; %NWL%var path = operation . path ; %NWL%var value = operation . value ; %NWL%9
Ext . extend ( MainPanel , Ext . TabPanel ,  {%NWL%initEvents : function (  )  {%NWL%MainPanel . superclass . initEvents . call ( this )  ; %NWL%this . body . on (  ' click '  , this . onClick , this )  ;%NWL%}  ,%NWL%onClick : function ( e , target )  {%NWL%if ( target = e . getTarget (  ' a : not (  . exi )  '  , 3 )  )  {%NWL%var cls = Ext . fly ( target )  . getAttributeNS (  ' ext '  ,  ' cls '  )  ; %NWL%e . stopEvent (  )  ; %NWL%if ( cls )  {%NWL%var member = Ext . fly ( target )  . getAttributeNS (  ' ext '  ,  ' member '  )  ; %NWL%7
var EnterLeaveEventPlugin = require (  "  .  / EnterLeaveEventPlugin "  )  ; %NWL%var MobileSafariClickEventPlugin = require (  "  .  / MobileSafariClickEventPlugin "  )  ; %NWL%var ReactEventTopLevelCallback = require (  "  .  / ReactEventTopLevelCallback "  )  ; %NWL%var ReactDOM = require (  "  .  / ReactDOM "  )  ; %NWL%var ReactDOMButton = require (  "  .  / ReactDOMButton "  )  ; %NWL%var ReactDOMForm = require (  "  .  / ReactDOMForm "  )  ; %NWL%var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%var ReactDOMSelect = require (  "  .  / ReactDOMSelect "  )  ; %NWL%var ReactDOMTextarea = require (  "  .  / ReactDOMTextarea "  )  ; %NWL%0
}  ;%NWL%}  )  ; %NWL%return new Gradient ( ret , angle , arr )  ;%NWL%} catch ( e )  {%NWL%return false ;%NWL%}%NWL%}%NWL%function getColorArray ( ctx )  {%NWL%var imageData = ctx . getImageData ( 0 , 0 , ctx . canvas . width , ctx . canvas . height )  ; %NWL%var width = imageData . width ; %NWL%var height = imageData . height ; %NWL%9
return sentinel3 ;%NWL%}  )  . then ( function ( value )  {%NWL%assert . strictEqual ( value , sentinel3 )  ; %NWL%semiDone (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " `onFulfilled` handlers are called in the original order "  , function (  )  {%NWL%testFulfilled ( dummy , function ( promise , done )  {%NWL%var handler1 = sinon . spy ( function handler1 (  )  {  }  )  ; %NWL%var handler2 = sinon . spy ( function handler2 (  )  {  }  )  ; %NWL%9
var lastArgument = args [ args . length - 1 ]  ; %NWL%return typeof lastArgument =  =  =  " function " ? lastArgument : undefined ;%NWL%}%NWL%var AuditCategory = declareInterfaceClass ( AuditCategoryImpl )  ; %NWL%var AuditResult = declareInterfaceClass ( AuditResultImpl )  ; %NWL%var Button = declareInterfaceClass ( ButtonImpl )  ; %NWL%var EventSink = declareInterfaceClass ( EventSinkImpl )  ; %NWL%var ExtensionPanel = declareInterfaceClass ( ExtensionPanelImpl )  ; %NWL%var ExtensionSidebarPane = declareInterfaceClass ( ExtensionSidebarPaneImpl )  ; %NWL%var PanelWithSidebar = declareInterfaceClass ( PanelWithSidebarImpl )  ; %NWL%var Request = declareInterfaceClass ( RequestImpl )  ; %NWL%3
var ids   =  [  ]  ; %NWL%var salaries  =  [  ]  ; %NWL%for ( var i = 0 ; i < 5 ; i +  +  )%NWL%{%NWL%var employee = doc . createElement (  " employee "  )  ; %NWL%var address  = doc . createElement (  " address "  )  ; %NWL%var name  = doc . createElement (  " name "  )  ; %NWL%var position = doc . createElement (  " position "  )  ; %NWL%var gender  = doc . createElement (  " gender "  )  ; %NWL%var id   = doc . createElement (  " employeeId "  )  ; %NWL%var salary  = doc . createElement (  " salary "  )  ; %NWL%4
} else if ( self . _state . isSecondary ( server )  )  {%NWL%self . emit (  ' left '  ,  ' secondary '  , server )  ; %NWL%delete self . _state . secondaries [ server . name ]  ;%NWL%}%NWL%if ( Object . keys ( self . _state . addresses )  . length =  = 0%NWL%&& self . _serverState ! = ReplSet . REPLSET_DESTROYED )  {%NWL%self . _serverState = ReplSet . REPLSET_DISCONNECTED ; %NWL%self . _dbStore . emit (  " close "  , new Error (  " replicaset disconnected , no valid servers contactable over tcp "  )  , null , true )  ;%NWL%}%NWL%var host = server . socketOptions . host ; %NWL%var port = server . socketOptions . port ; %NWL%9
if ( result )  {%NWL%shown_notification = result ;%NWL%} else {%NWL%client . set (  ' editor : shown_notification '  , true )  ;%NWL%}%NWL%res . render (  ' editor / index '  ,  { profile : req . user , version : config . editor . version , shown_notification : shown_notification }  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . create_repository = function ( req , res )  {%NWL%var repository_url = sanitize ( req . body . repository_url )  . xss (  )  . trim (  )  ; %NWL%var retain_remote = sanitize ( req . body . retain_remote )  . xss (  )  . trim (  )  ; %NWL%9
var createTorrent = require (  ' create - torrent '  )%NWL%var debug = require (  ' debug '  )  (  ' bittorrent - client '  )%NWL%var DHT = require (  ' bittorrent - dht / client '  )  /  / empty object in browser%NWL%var EventEmitter = require (  ' events '  )  . EventEmitter%NWL%var extend = require (  ' extend . js '  )%NWL%var hat = require (  ' hat '  )%NWL%var inherits = require (  ' inherits '  )%NWL%var loadIPSet = require (  ' load - ip - set '  )  /  / empty object in browser%NWL%var parallel = require (  ' run - parallel '  )%NWL%var parseTorrent = require (  ' parse - torrent '  )%NWL%var speedometer = require (  ' speedometer '  )%NWL%5
this . _paper . setSize ( diagram . width , diagram . height )  ; %NWL%var y = DIAGRAM_MARGIN + title_height ; %NWL%this . draw_title (  )  ; %NWL%this . draw_actors ( y )  ; %NWL%this . draw_signals ( y + this . _actors_height )  ; %NWL%this . _paper . setFinish (  )  ;%NWL%}  ,%NWL%layout : function (  )  {%NWL%var diagram = this . diagram ; %NWL%var paper  = this . _paper ; %NWL%var font  = this . _font ; %NWL%9
var Surface    = require (  ' famous / core / Surface '  )  ; %NWL%var RenderNode   = require (  ' famous / core / RenderNode '  )  ; %NWL%var StateModifier  = require (  ' famous / modifiers / StateModifier '  )  ; %NWL%var InputSurface  = require (  ' famous / surfaces / InputSurface '  )  ; %NWL%var FlexibleLayout  = require (  ' famous / views / FlexibleLayout '  )  ; %NWL%var GridLayout   = require (  ' famous / views / GridLayout '  )  ; %NWL%var ScrollContainer  = require (  ' famous / views / ScrollContainer '  )  ; %NWL%var RenderController = require (  ' famous / views / RenderController '  )  ; %NWL%var Transform = require (  ' famous / core / Transform '  )  ; %NWL%var LocationEntry  = require (  ' widgets / LocationEntry '  )  ; %NWL%var RecentSearchEntry = require (  ' widgets / RecentSearchEntry '  )  ; %NWL%9
treerow . appendChild ( treecell3 )  ; %NWL%treeitem . appendChild ( treerow )%NWL%gDialog . installedFontsTreechildren . appendChild ( treeitem )  ;%NWL%}%NWL%}%NWL%}%NWL%function UpdateButtons (  )%NWL%{%NWL%var tree = gDialog . installedFontsTree ; %NWL%var contentView = tree . contentView ; %NWL%var view = tree . view ; %NWL%9
, methodOverride = require (  ' method - override '  )%NWL%, errorHandler = require (  ' errorhandler '  )%NWL%, cons  = require (  ' consolidate '  )%NWL%, swig  = require (  ' swig '  )%NWL%, flash  = require (  ' connect - flash '  )%NWL%, http  = require (  ' http '  )%NWL%, facebook = require (  ' facebook - node - sdk '  )%NWL%, mongo  = require (  ' mongoose '  )%NWL%, middleware = require (  '  .  / lib / util / middlewares '  )%NWL%, time  = require (  ' time '  )%NWL%, async  = require (  ' async '  )%NWL%3
var EventConstants = require (  ' EventConstants '  )  ; %NWL%var EventPluginUtils = require (  ' EventPluginUtils '  )  ; %NWL%var EventPropagators = require (  ' EventPropagators '  )  ; %NWL%var SyntheticClipboardEvent = require (  ' SyntheticClipboardEvent '  )  ; %NWL%var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%var SyntheticFocusEvent = require (  ' SyntheticFocusEvent '  )  ; %NWL%var SyntheticKeyboardEvent = require (  ' SyntheticKeyboardEvent '  )  ; %NWL%var SyntheticMouseEvent = require (  ' SyntheticMouseEvent '  )  ; %NWL%var SyntheticDragEvent = require (  ' SyntheticDragEvent '  )  ; %NWL%var SyntheticTouchEvent = require (  ' SyntheticTouchEvent '  )  ; %NWL%var SyntheticUIEvent = require (  ' SyntheticUIEvent '  )  ; %NWL%0
if ( this . root )  {%NWL%this . splay ( value )  ; %NWL%if ( this . contentEquals ( value , this . root . value )  )  {%NWL%var index = this . root . index ; %NWL%if ( this . dispatchesRangeChanges )  {%NWL%this . dispatchBeforeRangeChange (  [  ]  ,  [ value ]  , index )  ;%NWL%}%NWL%if ( !this . root . left )  {%NWL%this . root = this . root . right ;%NWL%} else {%NWL%var right = this . root . right ; %NWL%3
}  ,%NWL%getInt32 : function ChunkedStream_getInt32 (  )  {%NWL%var b0 = this . getByte (  )  ; %NWL%var b1 = this . getByte (  )  ; %NWL%var b2 = this . getByte (  )  ; %NWL%var b3 = this . getByte (  )  ; %NWL%return ( b0 <  < 24 )  +  ( b1 <  < 16 )  +  ( b2 <  < 8 )  + b3 ;%NWL%}  ,%NWL%getBytes : function ChunkedStream_getBytes ( length )  {%NWL%var bytes = this . bytes ; %NWL%var pos = this . pos ; %NWL%9
function createList ( data )  {%NWL%$ (  ' ul . auto - list '  )  . remove (  )  ;  /  / remove old if exists%NWL%var ul = document . createElement (  " ul "  )  ; %NWL%$ ( ul )  . addClass (  " auto - list "  )  ; %NWL%document . body . appendChild ( ul )  ; %NWL%return ul ;%NWL%}%NWL%function createClone ( id )  {%NWL%var data = _data [ id ]  ; %NWL%$ (  ' div . textarea '  )  . remove (  )  ;  /  / remove old if exists%NWL%var div = document . createElement (  " div "  )  ; %NWL%2
{%NWL%UID :  ' fooasdfasdf '  ,%NWL%getURL :  ' http :  /  / localhost : 8081 / news / aggregator '  ,%NWL%portal_type :  ' Collection '  ,%NWL%Description :  ' Site News '  ,%NWL%Title :  ' Another Item '%NWL%}%NWL%]  ; %NWL%var results =  [  ]  ; %NWL%var batch = JSON . parse ( getQueryVariable ( xhr . url ,  ' batch '  )  )  ; %NWL%var query = JSON . parse ( getQueryVariable ( xhr . url ,  ' query '  )  )  ; %NWL%9
this . setNotify = function ( itemSet , itemRemove )  {%NWL%this . notify =  {%NWL%setItem : itemSet ,%NWL%removeItem : itemRemove%NWL%}  ;%NWL%}  ; %NWL%this . $get =  [  ' $rootScope '  ,  ' $window '  ,  ' $document '  ,  ' $parse '  , function ( $rootScope , $window , $document , $parse )  {%NWL%var self = this ; %NWL%var prefix = self . prefix ; %NWL%var cookie = self . cookie ; %NWL%var notify = self . notify ; %NWL%8
var ReactDOMButton = require (  "  .  / ReactDOMButton "  )  ; %NWL%var ReactDOMForm = require (  "  .  / ReactDOMForm "  )  ; %NWL%var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%var ReactDOMSelect = require (  "  .  / ReactDOMSelect "  )  ; %NWL%var ReactDOMTextarea = require (  "  .  / ReactDOMTextarea "  )  ; %NWL%var ReactEventListener = require (  "  .  / ReactEventListener "  )  ; %NWL%var ReactInjection = require (  "  .  / ReactInjection "  )  ; %NWL%var ReactInstanceHandles = require (  "  .  / ReactInstanceHandles "  )  ; %NWL%var ReactMount = require (  "  .  / ReactMount "  )  ; %NWL%0
try {%NWL%return vm . runInThisContext ( code , filename )  ;%NWL%} catch ( err )  {%NWL%var regex = new RegExp (  '  ( at '  + filename +  '  :  .  *  )  [ \\s\\S ]  *  '  )  ; %NWL%var syntaxRegex =  / \s * at evalcx [ \s\S ]  *  /  ; %NWL%err . stack = err . stack . replace ( syntaxRegex ,  '  '  )  . replace ( regex ,  ' $1 '  )  ; %NWL%throw err ;%NWL%}%NWL%}  ; %NWL%var util = require (  " util "  )  ; %NWL%var url = require (  " url "  )  ; %NWL%9
curOption [ parts [ i ]  ]  = curOption [ parts [ i ]  ] || {  }  ; %NWL%curOption = curOption [ parts [ i ]  ]  ;%NWL%}%NWL%key = parts . pop (  )  ; %NWL%if ( arguments . length =  =  = 1 )  {%NWL%return curOption [ key ]  =  =  = undefined ? null : curOption [ key ]  ;%NWL%}%NWL%curOption [ key ]  = value ;%NWL%} else {%NWL%if ( arguments . length =  =  = 1 )  {%NWL%return this . options [ key ]  =  =  = undefined ? null : this . options [ key ]  ; %NWL%5
var capacity = this . _capacity ; %NWL%for ( var j = 0 ; j < len ;  +  + j )  {%NWL%ret [ j ]  = this [  ( front + j ) & ( capacity - 1 )  ]  ;%NWL%}%NWL%return ret ;%NWL%}  ; %NWL%Deque . prototype . push = function Deque$push ( item )  {%NWL%var argsLength = arguments . length ; %NWL%var length = this . _length ; %NWL%if ( argsLength > 1 )  {%NWL%var capacity = this . _capacity ; %NWL%8
if ( 2 =  = arguments . length )  {%NWL%if (  ' number '  =  = typeof arguments [ 1 ]  )  {%NWL%this . statusCode = arguments [ 1 ]  ;%NWL%} else {%NWL%this . statusCode = obj ; %NWL%obj = arguments [ 1 ]  ;%NWL%}%NWL%}%NWL%var app = this . app ; %NWL%var replacer = app . get (  ' json replacer '  )  ; %NWL%var spaces = app . get (  ' json spaces '  )  ; %NWL%9
if ( attributes [ i ]  . nodeName . substring ( 0 , 2 )  =  =  " on "  )  {  /  / event handler%NWL%attributes [ i ]  . nodeValue = null ;%NWL%}%NWL%}%NWL%}  ,%NWL%validate : function ( component )  {%NWL%var value = component . get (  " v . value "  )  ; %NWL%if ( $A . util . isUndefinedOrNull ( value ) || $A . util . isEmpty ( value )  )  {%NWL%return ;%NWL%}%NWL%var supportedTags = component . get (  " v . supportedTags "  )  ; %NWL%6
x : x ,%NWL%y : y ,%NWL%width : width ,%NWL%height : height%NWL%}  )  ; %NWL%this . node . textContent = text ;%NWL%}  ; %NWL%Ui . El . Text . prototype = Object . create ( Ui . El . prototype )  ; %NWL%Ui . El . Text . prototype . center = function ( element )  {%NWL%var width = element . getAttribute (  ' width '  )  ; %NWL%var height = element . getAttribute (  ' height '  )  ; %NWL%9
Particle . prototype . _integrate = function _integrate ( dt )  {%NWL%this . integrateVelocity ( dt )  ; %NWL%this . integratePosition ( dt )  ;%NWL%}  ; %NWL%Particle . prototype . getEnergy = function getEnergy (  )  {%NWL%return 0 . 5 * this . mass * this . velocity . normSquared (  )  ;%NWL%}  ; %NWL%Particle . prototype . getTransform = function getTransform (  )  {%NWL%this . _engine . step (  )  ; %NWL%var position = this . position ; %NWL%var transform = this . transform ; %NWL%9
}%NWL%}  ,%NWL%componentWillUnmount : function (  )  {%NWL%if ( this . wrapper )  {%NWL%this . wrapper . stopListening (  )  ; %NWL%delete this . wrapper ;%NWL%}%NWL%}  ,%NWL%componentWillReceiveProps : function ( nextProps )  {%NWL%var model = nextProps . model ; %NWL%var collection = nextProps . collection ; %NWL%9
if ( !allRenderable )  {%NWL%+  + primitive . _debug . tilesWaitingForChildren ;%NWL%}%NWL%return allRenderable && !allUpsampledOnly ;%NWL%}%NWL%function queueTileLoad ( primitive , tile )  {%NWL%primitive . _tileLoadQueue . push ( tile )  ;%NWL%}%NWL%function processTileLoadQueue ( primitive , context , frameState )  {%NWL%var tileLoadQueue = primitive . _tileLoadQueue ; %NWL%var tileProvider = primitive . _tileProvider ; %NWL%9
var escape  = require (  ' escape - html '  )%NWL%var fit   = require (  ' canvas - fit '  )%NWL%var getCompare = require (  ' gl - compare '  )%NWL%var getContext = require (  ' gl - context '  )%NWL%var quotemeta  = require (  ' quotemeta '  )%NWL%var cheerio  = require (  ' cheerio '  )%NWL%var glapi   = require (  ' gl - api '  )%NWL%var marked  = require (  ' marked '  )%NWL%var glsldoc  = require (  ' glsldoc '  )%NWL%var assert  = require (  ' assert '  )%NWL%var path   = require (  ' path '  )%NWL%4
define (  [  " exports "  ,  " module "  ,  " react "  ,  " classnames "  ,  "  .  / BootstrapMixin "  ,  "  .  / DropdownStateMixin "  ,  "  .  / Button "  ,  "  .  / ButtonGroup "  ,  "  .  / DropdownMenu "  ]  , function ( exports , module , _react , _classnames , _BootstrapMixin , _DropdownStateMixin , _Button , _ButtonGroup , _DropdownMenu )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var _extends = Object . assign || function ( target )  { for ( var i = 1 ; i < arguments . length ; i +  +  )  { var source = arguments [ i ]  ; for ( var key in source )  { if ( Object . prototype . hasOwnProperty . call ( source , key )  )  { target [ key ]  = source [ key ]  ;  }  }  } return target ;  }  ; %NWL%var React = _interopRequire ( _react )  ; %NWL%var classSet = _interopRequire ( _classnames )  ; %NWL%var BootstrapMixin = _interopRequire ( _BootstrapMixin )  ; %NWL%var DropdownStateMixin = _interopRequire ( _DropdownStateMixin )  ; %NWL%var Button = _interopRequire ( _Button )  ; %NWL%var ButtonGroup = _interopRequire ( _ButtonGroup )  ; %NWL%var DropdownMenu = _interopRequire ( _DropdownMenu )  ; %NWL%6
, basename = require (  ' path '  )  . basename%NWL%, join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var debug = options . debug ; %NWL%var src = options . src ; %NWL%8
this . disableTitle (  )  ;%NWL%}%NWL%if ( !this . _showLineStatus )  {%NWL%this . disableLineStatus (  )  ;%NWL%}%NWL%}  ,%NWL%_createSplitter : function (  )  {%NWL%var splitNode = lib . $ (  "  . split "  , this . _topWidgetDiv )  ;  /  / $NON - NLS - 0$%NWL%splitNode . id = this . _splitterId ; %NWL%var leftPane = lib . $ (  "  . leftPanelLayout "  , this . _topWidgetDiv )  ;  /  / $NON - NLS - 0$%NWL%var rightPane = lib . $ (  "  . rightPanelLayout "  , this . _topWidgetDiv )  ;  /  / $NON - NLS - 0$%NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
this . _sArray = new Float32Array ( MAX_POINTS )  ; %NWL%this . _texture = createCircleTexture ( gl )  ; %NWL%this . _shader = createCircleShader ( gl , viewportArray )  ; %NWL%this . _positionBuffer = gl . createBuffer (  )  ; %NWL%this . _sizeBuffer = gl . createBuffer (  )  ;%NWL%}%NWL%PointRenderer . prototype . draw = function ( points )  {%NWL%var gl = this . _gl ; %NWL%var vertices = this . _verticesCache ; %NWL%var sizes = this . _sizesCache ; %NWL%var vArray = this . _vArray ; %NWL%7
gl . enableVertexAttribArray ( locations . a_rotateWithView )  ; %NWL%gl . vertexAttribPointer ( locations . a_rotateWithView , 1 , goog . webgl . FLOAT ,%NWL%false , 32 , 28 )  ; %NWL%var projectionMatrix = this . projectionMatrix_ ; %NWL%ol . vec . Mat4 . makeTransform2D ( projectionMatrix ,%NWL%0 . 0 , 0 . 0 ,%NWL%2 /  ( resolution * size [ 0 ]  )  ,%NWL%2 /  ( resolution * size [ 1 ]  )  ,%NWL%- rotation ,%NWL%-  ( center [ 0 ]  - this . origin_ [ 0 ]  )  ,  -  ( center [ 1 ]  - this . origin_ [ 1 ]  )  )  ; %NWL%var offsetScaleMatrix = this . offsetScaleMatrix_ ; %NWL%3
}%NWL%if ( afterAuth )  {%NWL%afterAuth (  )  ;%NWL%}%NWL%_this . load (  )  ;%NWL%}  )  ;%NWL%}%NWL%rtclient . RealtimeLoader . prototype . load = function (  )  {%NWL%var fileId = rtclient . params [  ' fileId '  ]  ; %NWL%var userId = this . authorizer . userId ; %NWL%var state = rtclient . params [  ' state '  ]  ; %NWL%8
var row = document . createElement (  " tr "  )  ;  /  / $NON - NLS - 0$%NWL%var td = document . createElement (  " td "  )  ;  /  / $NON - NLS - 0$%NWL%td . textContent = data . items [ itemCount ]  . item ; %NWL%row . appendChild ( td )  ; %NWL%tablebody . appendChild ( row )  ; %NWL%var value = data . items [ itemCount ]  . value ; %NWL%var cell = document . createElement (  " td "  )  ;  /  / $NON - NLS - 0$%NWL%row . appendChild ( cell )  ; %NWL%if ( typeof value =  =  =  ' object '  )  {  /  / $NON - NLS - 0$%NWL%var debugData =  { title : data . service , item : data . items [ itemCount ]  . item , value : value }  ; %NWL%var span = document . createElement (  " span "  )  ;  /  / $NON - NLS - 0$%NWL%1
var Y =  {  }  ; %NWL%Y . each = function ( iterable , fn )  {%NWL%if (  ' length ' in iterable )  {%NWL%for ( var i = 0 , len = iterable . length ; i < len ; i +  +  )  {%NWL%fn . call ( iterable [ i ]  , iterable [ i ]  )  ;%NWL%}%NWL%}%NWL%return null ;%NWL%}  ; %NWL%var document = context . document ; %NWL%var SELECT = context . SELECT ; %NWL%9
this . assetLoader . handleEvent (  ' load '  , data . id , data . loadData )  ; %NWL%break ; %NWL%case ' assetLoadError '  : %NWL%this . assetLoader . handleEvent (  ' error '  , data . id , data . loadData )  ; %NWL%break ; %NWL%case ' userevent '  : %NWL%var displayObjectsRegistry = this . registry . displayObjects ; %NWL%var targetId = data . targetId ; %NWL%var target = targetId ? displayObjectsRegistry [ targetId ]  : this ; %NWL%if ( target )  {  /  / target might have been removed already%NWL%var event = data . event ; %NWL%7
var parseBuildErrors  = require (  '  .  / parseBuildErrors '  )  ; %NWL%var linkNodeModules   = require (  '  .  / linkNodeModules '  )  ; %NWL%var Promise     = require (  ' es6 - promise '  )  . Promise ; %NWL%var chalk     = require (  ' chalk '  )  ; %NWL%var spawn     = require (  ' child_process '  )  . spawn ; %NWL%var tools     = require (  '  .  .  / tools '  )  ; %NWL%var path     = require (  ' path '  )  ; %NWL%var logs     = require (  '  .  .  / logs '  )  ; %NWL%var fs      = require (  ' fs '  )  ; %NWL%var pty      = require (  ' pty . js '  )  ; %NWL%var utils     = require (  '  .  .  / utils '  )  ; %NWL%5
if ( response && !this . nduid )  {%NWL%var nduid ; %NWL%for ( p in response )  {%NWL%if ( p =  =  " com . palm . properties . nduid "  )  { nduid = response [ p ]  ;  }%NWL%}%NWL%this . nduid = nduid ;%NWL%}%NWL%var galx = Mojo . Model . decrypt ( this . nduid , galxEnc )  ; %NWL%var sid = Mojo . Model . decrypt ( this . nduid , sidEnc )  ; %NWL%var hsid = Mojo . Model . decrypt ( this . nduid , hsidEnc )  ; %NWL%var lsid = Mojo . Model . decrypt ( this . nduid , lsidEnc )  ; %NWL%7
}  ; %NWL%WallGeometry . fromConstantHeights = function ( options )  {%NWL%options = defaultValue ( options , defaultValue . EMPTY_OBJECT )  ; %NWL%var positions = options . positions ; %NWL%if ( !defined ( positions )  )  {%NWL%throw new DeveloperError (  ' options . positions is required .  '  )  ;%NWL%}%NWL%var minHeights ; %NWL%var maxHeights ; %NWL%var min = options . minimumHeight ; %NWL%var max = options . maximumHeight ; %NWL%9
var openIn = smartSelect . attr (  ' data - open - in '  )  ; %NWL%if ( !openIn ) openIn = app . params . smartSelectInPopup ? ' popup '  :  ' page '  ; %NWL%var smartSelectData = smartSelect . dataset (  )  ; %NWL%var pageTitle = smartSelectData . pageTitle || smartSelect . find (  '  . item - title '  )  . text (  )  ; %NWL%var backText = smartSelectData . backText || app . params . smartSelectBackText ; %NWL%var closeText = smartSelectData . popupCloseText || smartSelectData . backText || app . params . smartSelectPopupCloseText ; %NWL%var backOnSelect = smartSelectData . backOnSelect ! =  = undefined ? smartSelectData . backOnSelect : app . params . smartSelectBackOnSelect ; %NWL%var formTheme = smartSelectData . formTheme || app . params . smartSelectFormTheme ; %NWL%var navbarTheme = smartSelectData . navbarTheme || app . params . smartSelectNavbarTheme ; %NWL%var virtualList = smartSelectData . virtualList ; %NWL%var virtualListHeight = smartSelectData . virtualListHeight ; %NWL%9
module . exports = function responseTime ( options )  {%NWL%if ( typeof options =  =  =  ' number '  )  {%NWL%deprecate (  ' number argument : use { digits :  '  + JSON . stringify ( options )  +  '  } instead '  )%NWL%options =  { digits : options }%NWL%}%NWL%options = options || {  }%NWL%var digits = options . digits ! =  = undefined%NWL%? options . digits%NWL% : 3%NWL%var header = options . header || ' X - Response - Time '%NWL%var suffix = options . suffix ! =  = undefined%NWL%6
function createTimenamesGroup ( times )  {%NWL%var p = document . createElement (  ' p '  )  ; %NWL%p . setAttribute (  ' class '  ,  ' visibleTimeNamesList '  )  ; %NWL%for ( var i in times )  {%NWL%var input = document . createElement (  ' input '  )  ; %NWL%var time = times [ i ]  ; %NWL%input . setAttribute (  ' type '  ,  ' checkbox '  )  ; %NWL%input . setAttribute (  ' name '  ,  ' timenames '  )  ; %NWL%input . setAttribute (  ' id '  , time [ 0 ]  )  ; %NWL%p . appendChild ( input )  ; %NWL%var label = document . createElement (  ' label '  )  ; %NWL%1
var path = require (  ' path '  )  ; %NWL%var params = require (  '  .  / params '  )  ; %NWL%var envConf = require (  '  .  .  / config / environment '  )  ; %NWL%var config = require (  '  .  .  / config / configuration '  )  ; %NWL%var database = require (  '  .  .  / config / database '  )  ; %NWL%var middleware = require (  '  .  .  / config / middleware '  )  ; %NWL%var session = require (  '  .  .  / config / session '  )  ; %NWL%var Resource = require (  '  .  / router '  )  . Resource ; %NWL%var locales = require (  '  .  / locales '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%1
this . events_add (  { pc_tsid : pc . tsid , job_id : job_id , class_id : job . class_tsid , callback :  ' acceptJobWork '  }  , unit_duration / 1000 )  ; %NWL%return {%NWL%tool_class_id : tool_class_id ,%NWL%units : counter_limit ,%NWL%unit_duration : unit_duration ,%NWL%unit_energy : req . energy%NWL%}  ;%NWL%}%NWL%function acceptJobWork ( details )  {%NWL%var job_id = details . job_id ; %NWL%var class_id = details . class_id ; %NWL%9
}  )  ;%NWL%}  )  ; %NWL%suite (  ' AVRCP commands ( SCO is enabled )  '  , function (  )  {%NWL%setup ( function (  )  {%NWL%mrc . _isSCOConnected = true ;%NWL%}  )  ; %NWL%test (  ' AVRCP . PLAY_PRESS '  , function (  )  {%NWL%var playListener = this . sinon . spy ( function ( event )  {%NWL%var command = event . detail . command ; %NWL%assert . equal ( command , REMOTE_CONTROLS . PLAY )  ; %NWL%var isSCOConnected = event . detail . isSCOConnected ; %NWL%8
]  ;%NWL%}%NWL%function interpolationList ( start , end )  {%NWL%var list =  {%NWL%start :  [  ]  ,%NWL%end :  [  ]%NWL%}  ,%NWL%i =  - 1 , l ,%NWL%currStart , currEnd , currType ;%NWL%( start =  =  " none " || isAffine ( start )  ) && ( start =  "  "  )  ;%NWL%( end =  =  " none " || isAffine ( end )  ) && ( end =  "  "  )  ; %NWL%9
var top = bounds . top ; %NWL%var decorations = this . decorations_ ; %NWL%var decorationTop = decorations [ 0 ]  ; %NWL%var decorationMiddle = decorations [ 1 ]  ; %NWL%var decorationBottom = decorations [ 2 ]  ; %NWL%decorationTop . setCenter ( left , top + decorationTop . getHeight (  )  )  ; %NWL%decorationMiddle . setCenter ( left , top +  ( bounds . height / 2 )  )  ; %NWL%decorationBottom . setCenter ( left , bounds . toBox (  )  . bottom - decorationBottom . getHeight (  )  )  ;%NWL%}  ; %NWL%thin . core . ListGuideResizer . prototype . adjustToResizerBoundsForHorizon = function ( bounds )  {%NWL%var left = bounds . left ; %NWL%0
var MiniMap    = require (  ' UI / Components / MiniMap / MiniMap '  )  ; %NWL%var BasicInfo   = require (  ' UI / Components / BasicInfo / BasicInfo '  )  ; %NWL%var WinStats   = require (  ' UI / Components / WinStats / WinStats '  )  ; %NWL%var Inventory   = require (  ' UI / Components / Inventory / Inventory '  )  ; %NWL%var ShortCut   = require (  ' UI / Components / ShortCut / ShortCut '  )  ; %NWL%var Equipment   = require (  ' UI / Components / Equipment / Equipment '  )  ; %NWL%var StatusIcons   = require (  ' UI / Components / StatusIcons / StatusIcons '  )  ; %NWL%var ChatRoomCreate  = require (  ' UI / Components / ChatRoomCreate / ChatRoomCreate '  )  ; %NWL%var Emoticons   = require (  ' UI / Components / Emoticons / Emoticons '  )  ; %NWL%var SkillList   = require (  ' UI / Components / SkillList / SkillList '  )  ; %NWL%var PartyFriends  = require (  ' UI / Components / PartyFriends / PartyFriends '  )  ; %NWL%0
var type = ctx . type ; %NWL%if ( typeof ctx . iDisplayStart =  =  ' undefined '  )  {%NWL%ctx . iDisplayStart = 0 ;%NWL%}%NWL%if ( typeof ctx . sEcho =  =  ' undefined '  )  {%NWL%ctx . sEcho = 0 ;%NWL%}%NWL%var pageSize = 10 ; %NWL%var all_users ; %NWL%var search = ctx . sSearch ; %NWL%var userType = ctx . userType ; %NWL%0
dojo . xhr = plainXhr ;%NWL%}  ,%NWL%getDirtyObjects : function (  )  {%NWL%return dirtyObjects ;%NWL%}  ,%NWL%revert : function ( service )  {%NWL%for ( var i = dirtyObjects . length ; i > 0 ;  )  {%NWL%i -  -  ; %NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
const nsIAppShellService  = Components . interfaces . nsIAppShellService ; %NWL%const nsILocalFile    = Components . interfaces . nsILocalFile ; %NWL%const nsIFileURL    = Components . interfaces . nsIFileURL ; %NWL%const nsISupports    = Components . interfaces . nsISupports ; %NWL%const nsIFactory    = Components . interfaces . nsIFactory ; %NWL%const nsIFilePicker   = Components . interfaces . nsIFilePicker ; %NWL%const nsIInterfaceRequestor = Components . interfaces . nsIInterfaceRequestor ; %NWL%const nsIDOMWindow    = Components . interfaces . nsIDOMWindow ; %NWL%const nsIStringBundleService = Components . interfaces . nsIStringBundleService ; %NWL%const nsIWebNavigation   = Components . interfaces . nsIWebNavigation ; %NWL%const nsIDocShellTreeItem  = Components . interfaces . nsIDocShellTreeItem ; %NWL%0
}  )  ;%NWL%}%NWL%function web2py_ajax_page ( method , action , data , target )  {%NWL%jQuery . ajax (  {  ' type '  : method ,  ' url '  : action ,  ' data '  : data ,%NWL%' beforeSend '  : function ( xhr )  {%NWL%xhr . setRequestHeader (  ' web2py - component - location '  , document . location )  ; %NWL%xhr . setRequestHeader (  ' web2py - component - element '  , target )  ;  }  ,%NWL%' complete '  : function ( xhr , text )  {%NWL%var html = xhr . responseText ; %NWL%var content = xhr . getResponseHeader (  ' web2py - component - content '  )  ; %NWL%var command = xhr . getResponseHeader (  ' web2py - component - command '  )  ; %NWL%9
function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  ,  [  ]  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%var mappings = util . getArg ( sourceMap ,  ' mappings '  )  ; %NWL%5
var frames = el . querySelectorAll (  ' iframe '  )  ; %NWL%for ( var i = 0 , frame ; frame = frames [ i ]  ; i +  +  )  {%NWL%this . enableFrame_ ( frame )  ;%NWL%}%NWL%}  ; %NWL%SlideDeck . prototype . enableFrame_ = function ( frame )  {%NWL%var srcdoc = frame . dataset . srcdoc ; %NWL%if ( srcdoc && frame . src ! = srcdoc )  {%NWL%frame . srcdoc = srcdoc ;%NWL%}%NWL%var src = frame . dataset . src ; %NWL%6
var path = require (  ' path '  )  ; %NWL%var gulp = require (  ' gulp '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var vsource = require (  ' vinyl - source - stream '  )  ; %NWL%var streamify = require (  ' gulp - streamify '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var livereload = require (  ' gulp - livereload '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var header = require (  ' gulp - header '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%2
col . remove ( col . models )  ; %NWL%equal ( col . length , 0 )  ;%NWL%}  )  ; %NWL%test (  " #861 , adding models to a collection which do not pass validation "  , function (  )  {%NWL%raises ( function (  )  {%NWL%var Model = Backbone . Model . extend (  {%NWL%validate : function ( attrs )  {%NWL%if ( attrs . id =  = 3 ) return " id can ' t be 3 "  ;%NWL%}%NWL%}  )  ; %NWL%var Collection = Backbone . Collection . extend (  {%NWL%5
test . throws (%NWL%function (  )  {%NWL%test . done (  )  ; %NWL%protocol . windowSize (  ' current '  , 10 ,  ' a '  )  ;%NWL%}  ,  ' Width and height arguments must be passed as numbers .  '%NWL%)  ;%NWL%}  )  ;%NWL%}  ,%NWL%testWindowSizeGet : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
this . _width = width ; %NWL%this . _ellipsoid = defaultValue ( options . ellipsoid , Ellipsoid . WGS84 )  ; %NWL%this . _height = defaultValue ( options . height , 0 )  ; %NWL%this . _extrudedHeight = defaultValue ( options . extrudedHeight , this . _height )  ; %NWL%this . _cornerType = defaultValue ( options . cornerType , CornerType . ROUNDED )  ; %NWL%this . _granularity = defaultValue ( options . granularity , CesiumMath . RADIANS_PER_DEGREE )  ; %NWL%this . _workerName =  ' createCorridorOutlineGeometry '  ;%NWL%}  ; %NWL%CorridorOutlineGeometry . createGeometry = function ( corridorOutlineGeometry )  {%NWL%var positions = corridorOutlineGeometry . _positions ; %NWL%var height = corridorOutlineGeometry . _height ; %NWL%9
var fonts   = require (  ' google - fonts '  )%NWL%var escape  = require (  ' escape - html '  )%NWL%var fit   = require (  ' canvas - fit '  )%NWL%var getCompare = require (  ' gl - compare '  )%NWL%var getContext = require (  ' gl - context '  )%NWL%var quotemeta  = require (  ' quotemeta '  )%NWL%var cheerio  = require (  ' cheerio '  )%NWL%var glapi   = require (  ' gl - api '  )%NWL%var marked  = require (  ' marked '  )%NWL%var glsldoc  = require (  ' glsldoc '  )%NWL%var assert  = require (  ' assert '  )%NWL%5
maximumHeights : maxHeights ,%NWL%minimumHeights : minHeights ,%NWL%ellipsoid : options . ellipsoid ,%NWL%vertexFormat : options . vertexFormat%NWL%}  ; %NWL%return new WallGeometry ( newOptions )  ;%NWL%}  ; %NWL%WallGeometry . createGeometry = function ( wallGeometry )  {%NWL%var wallPositions = wallGeometry . _positions ; %NWL%var minimumHeights = wallGeometry . _minimumHeights ; %NWL%var maximumHeights = wallGeometry . _maximumHeights ; %NWL%9
animator . takeoff (  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%function wrapAnimator ( animator , startX , startY , startTime )  {%NWL%var node = animator . node ; %NWL%var constrained = animator . constrained ; %NWL%var paginated = animator . paginated ; %NWL%var viewport = animator . viewport || 0 ; %NWL%var scrollbar = animator . scrollbar ; %NWL%var position = animator . position ; %NWL%5
self . offsets . push ( this [ 0 ]  )%NWL%self . targets . push ( this [ 1 ]  )%NWL%}  )%NWL%}%NWL%, process : function (  )  {%NWL%var scrollTop = this . $scrollElement . scrollTop (  )  + this . options . offset%NWL%, scrollHeight = this . $scrollElement [ 0 ]  . scrollHeight || this . $body [ 0 ]  . scrollHeight%NWL%, maxScroll = scrollHeight - this . $scrollElement . height (  )%NWL%, offsets = this . offsets%NWL%, targets = this . targets%NWL%, activeTarget = this . activeTarget%NWL%8
var MediaCoreDAO = require (  '  .  / internal / dao '  )  ; %NWL%var MediaCoreUtil = require (  '  .  / internal / util '  )  ; %NWL%var test = module . exports . test = function ( ctx , content , callback )  {%NWL%if ( content . resourceSubType =  =  =  ' file ' && MediaCoreConfig . getValue ( content . tenant . alias ,  ' mediacore '  ,  ' enabled '  )  )  {%NWL%if ( _isVideo ( ctx . revision . mime ) || _isAudio ( ctx . revision . mime )  )  {%NWL%return callback ( null , 20 )  ;%NWL%}%NWL%}%NWL%return callback ( null ,  - 1 )  ;%NWL%}  ; %NWL%var generatePreviews = module . exports . generatePreviews = function ( ctx , content , callback )  {%NWL%2
}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%function genSourceMap ( modules )  {%NWL%var sourceMapGen = new SourceMapGenerator (  { file :  ' bundle . js '  , version : 3 }  )  ; %NWL%var packageLineNo = 0 ; %NWL%for ( var i = 0 ; i < modules . length ; i +  +  )  {%NWL%var module = modules [ i ]  ; %NWL%var transformedCode = module . transformedCode ; %NWL%var sourcePath = module . sourcePath ; %NWL%var sourceCode = module . sourceCode ; %NWL%8
. config (  [  ' $autofieldsProvider '  , function ( $autofieldsProvider )  {%NWL%$autofieldsProvider . settings . fixUrl = true ; %NWL%$autofieldsProvider . registerHandler (  [  ' text '  ,  ' email '  ,  ' url '  ,  ' date '  ,  ' number '  ,  ' password '  ]  , function ( directive , field , index )  {%NWL%var fieldElements = $autofieldsProvider . field ( directive , field ,  '  < input /  >  '  )  ; %NWL%var fixUrl =  ( field . fixUrl ? field . fixUrl : directive . options . fixUrl )  ; %NWL%if ( field . type =  =  ' url ' && fixUrl ) fieldElements . input . attr (  ' fix - url '  ,  '  '  )  ; %NWL%return fieldElements . fieldContainer ;%NWL%}  )  ; %NWL%$autofieldsProvider . settings . defaultOption =  ' Select One '  ; %NWL%$autofieldsProvider . registerHandler (  ' select '  , function ( directive , field , index )  {%NWL%var defaultOption =  ( field . defaultOption ? field . defaultOption : directive . options . defaultOption )  ; %NWL%4
var APIPlugin = require (  "  .  / APIPlugin "  )  ; %NWL%var ConstPlugin = require (  "  .  / ConstPlugin "  )  ; %NWL%var RequireJsStuffPlugin = require (  "  .  / RequireJsStuffPlugin "  )  ; %NWL%var NodeStuffPlugin = require (  "  .  / NodeStuffPlugin "  )  ; %NWL%var CompatibilityPlugin = require (  "  .  / CompatibilityPlugin "  )  ; %NWL%var DefinePlugin = require (  "  .  / DefinePlugin "  )  ; %NWL%var MovedToPluginWarningPlugin = require (  "  .  / MovedToPluginWarningPlugin "  )  ; %NWL%var TemplatedPathPlugin = require (  "  .  / TemplatedPathPlugin "  )  ; %NWL%var WarnCaseSensitiveModulesPlugin = require (  "  .  / WarnCaseSensitiveModulesPlugin "  )  ; %NWL%var LoaderPlugin = require (  "  .  / dependencies / LoaderPlugin "  )  ; %NWL%var CommonJsPlugin = require (  "  .  / dependencies / CommonJsPlugin "  )  ; %NWL%9
var EE = require (  ' events '  )  . EventEmitter%NWL%var path = require (  ' path '  )%NWL%var assert = require (  ' assert '  )%NWL%var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%var isAbsolute = common . isAbsolute%NWL%var setopts = common . setopts%NWL%var ownProp = common . ownProp%NWL%var inflight = require (  ' inflight '  )%NWL%1
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
return JSON . parse ( JSON . stringify ( model )  )  ;%NWL%}  ; %NWL%var checkTest = function ( ctx )  {%NWL%return function ( resp )  {%NWL%expect ( json ( resp )  )  . to . eql ( output [ ctx . test . title ]  [ dialect ]  . result )  ;%NWL%}  ;%NWL%}  ; %NWL%var Models   = require (  '  .  / helpers / objects '  )  ( bookshelf )  . Models ; %NWL%var Site  = Models . Site ; %NWL%var SiteMeta = Models . SiteMeta ; %NWL%var Admin  = Models . Admin ; %NWL%8
( function ( factory )  {%NWL%if ( typeof define =  =  =  " function " && define . amd )  {%NWL%define (  [  "  .  .  / cldr "  ]  , factory )  ;%NWL%} else if ( typeof module =  =  =  " object " && typeof module . exports =  =  =  " object "  )  {%NWL%module . exports = factory ( require (  " cldr . js "  )  )  ;%NWL%} else {%NWL%factory ( Cldr )  ;%NWL%}%NWL%}  ( function ( Cldr )  {%NWL%var jsonMerge = Cldr . _jsonMerge ; %NWL%var pathNormalize = Cldr . _pathNormalize ; %NWL%9
var tr = null ; %NWL%var td = null ; %NWL%var div = null ; %NWL%table . cellPadding = 0 ; %NWL%table . cellSpacing = 0 ; %NWL%table . className =  ' hierMenu '  ; %NWL%table . id =  ' hierMenuLevel_ '  + level ; %NWL%var items = menuItem . items ; %NWL%this . _currLevel = level ; %NWL%var min = this . displayedMenu . minWidth ; %NWL%var max = this . displayedMenu . maxWidth ; %NWL%9
var Backbone = require (  "  .  .  /  .  .  / lib / application / Backbone "  )  ; %NWL%var $ = require (  "  .  .  /  .  .  / lib / application / jquery "  )  ; %NWL%var Promise = require (  " bluebird "  )  ; %NWL%var ServerRenderingWorkflow = require (  "  .  .  /  .  .  / lib / server / ServerRenderingWorkflow "  )  ; %NWL%var ServerRenderer = require (  "  .  .  /  .  .  / lib / server / ServerRenderer "  )  ; %NWL%var ServerRequest = require (  "  .  .  /  .  .  / lib / server / ServerRequest "  )  ; %NWL%var ServerResponse = require (  "  .  .  /  .  .  / lib / server / ServerResponse "  )  ; %NWL%var Layout = require (  "  .  .  /  .  .  / lib / viewing / Layout "  )  ; %NWL%var LayoutDelegate = require (  "  .  .  /  .  .  / lib / controlling / LayoutDelegate "  )  ; %NWL%var ErrorViewMapping = require (  "  .  .  /  .  .  / lib / errors / ErrorViewMapping "  )  ; %NWL%var Errors = require (  "  .  .  /  .  .  / lib / errors / Errors "  )  ; %NWL%9
el . setAttribute (  ' class '  , clss )  ; %NWL%values . forEach ( function ( item )  {%NWL%el . appendChild ( module . exports . createOption ( item )  )  ;%NWL%}  )  ; %NWL%return el ;%NWL%}  ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / ext / menu_tools / add_editor_menu_options '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / ext / modelist '  ,  ' ace / ext / themelist '  ]  , function ( require , exports , module )  {%NWL%module . exports . addEditorMenuOptions = function addEditorMenuOptions ( editor )  {%NWL%var modelist = require (  '  .  .  / modelist '  )  ; %NWL%var themelist = require (  '  .  .  / themelist '  )  ; %NWL%9
pos . left																 /  / The absolute mouse position%NWL%+ this . offset . relative . left * mod										 /  / Only for relative positioned nodes : Relative offset from element to offset parent%NWL%+ this . offset . parent . left * mod											 /  / The offsetParent ' s offset without borders ( offset + border )%NWL%-  ( $ . browser . safari && $ . browser . version < 526 && this . cssPosition =  =  ' fixed ' ? 0 :  ( this . cssPosition =  =  ' fixed ' ? - this . scrollParent . scrollLeft (  )  : scrollIsRootNode ? 0 : scroll . scrollLeft (  )  )  * mod )%NWL%)%NWL%}  ;%NWL%}  ,%NWL%_generatePosition : function ( event )  {%NWL%var o = this . options , scroll = this . cssPosition =  =  ' absolute ' && ! ( this . scrollParent [ 0 ] ! = document && $ . ui . contains ( this . scrollParent [ 0 ]  , this . offsetParent [ 0 ]  )  ) ? this . offsetParent : this . scrollParent , scrollIsRootNode =  (  /  ( html|body )  / i )  . test ( scroll [ 0 ]  . tagName )  ; %NWL%var pageX = event . pageX ; %NWL%var pageY = event . pageY ; %NWL%9
tinyMCEPopup . resizeToInnerSize (  )  ; %NWL%document . getElementById (  ' backgroundimagebrowsercontainer '  )  . innerHTML = getBrowserHTML (  ' backgroundimagebrowser '  ,  ' backgroundimage '  ,  ' image '  ,  ' table '  )  ; %NWL%document . getElementById (  ' bgcolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bgcolor_pick '  ,  ' bgcolor '  )  ; %NWL%var inst = tinyMCEPopup . editor ; %NWL%var dom = inst . dom ; %NWL%var trElm = dom . getParent ( inst . selection . getStart (  )  ,  " tr "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = dom . parseStyle ( dom . getAttrib ( trElm ,  " style "  )  )  ; %NWL%var rowtype = trElm . parentNode . nodeName . toLowerCase (  )  ; %NWL%var align = dom . getAttrib ( trElm ,  ' align '  )  ; %NWL%var valign = dom . getAttrib ( trElm ,  ' valign '  )  ; %NWL%9
if ( typeof define ! =  =  ' function '  )  {%NWL%var define = require (  ' amdefine '  )  ( module )  ;%NWL%}%NWL%define ( function ( require , exports , module )  {%NWL%var tm = require (  "  .  / tree - matcher "  )  ; %NWL%var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%6
var labelId = this . getLabelIdValue ( label )  ; %NWL%var inputId = this . getInputIdValue ( input )  ; %NWL%$A . test . assertEquals ( labelId , inputId ,  " Global Id for label and input in default positon should be the same "  )  ; %NWL%$A . test . assertTrue ( $A . test . contains ( label . className ,  " left "  )  ,  " Class Name :  "  + label . className +  " should contain left "  )  ;%NWL%}%NWL%}  ,%NWL%testLabelWithLeftPosition :  {%NWL%test : function ( component )  {%NWL%var div = component . find (  " leftPosition "  )  . getElement (  )  ; %NWL%var label = div . getElementsByTagName (  ' label '  )  [ 0 ]  ; %NWL%var input = div . getElementsByTagName (  ' input '  )  [ 0 ]  ; %NWL%9
}  ; %NWL%img . src = theURL . createObjectURL ( file )  ; %NWL%div . appendChild ( svg )  ; %NWL%var filter = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " filter "  )  ; %NWL%filter . setAttribute (  " id "  ,  " SVGdesaturate "  )  ; %NWL%svg . appendChild ( filter )  ; %NWL%var feColorMatrix = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " feColorMatrix "  )  ; %NWL%feColorMatrix . setAttribute (  " type "  ,  " saturate "  )  ; %NWL%feColorMatrix . setAttribute (  " values "  ,  " 0 "  )  ; %NWL%filter . appendChild ( feColorMatrix )  ; %NWL%var clipPath = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " clipPath "  )  ; %NWL%3
return this . to%NWL%}  ,%NWL%getBy : function (  )  {%NWL%if ( this . test . typeOf ( this . by )  =  =  ' Function '  )%NWL%return this . by . call ( this . test , this )%NWL%else%NWL%return this . by%NWL%}  ,%NWL%process : function (  )  {%NWL%var test = this . test ; %NWL%var next = this . next ; %NWL%9
this . getter_ , this . setter_ )  ;%NWL%}  ; %NWL%gf . sim . Variable . Color . prototype . getReadSource = function ( obj )  {%NWL%var setter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . setter_ )  ; %NWL%var reader = gf . net . PacketReader . getSharedReader (  )  ; %NWL%var readFn = gf . sim . Variable . getCompiledFunctionName_ (%NWL%reader , reader . readUint32 )  ; %NWL%return ' target .  '  + setter +  '  ( reader .  '  + readFn +  '  (  )  )  ;  '  ;%NWL%}  ; %NWL%gf . sim . Variable . Color . prototype . getWriteSource = function ( obj )  {%NWL%var getter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . getter_ )  ; %NWL%3
}%NWL%}%NWL%mapview . addEventListener (  ' regionChanged '  , function ( evt )%NWL%{%NWL%Titanium . API . info (  ' maps region has updated to '  + evt . longitude +  '  ,  '  + evt . latitude )  ;%NWL%}  )  ; %NWL%var annotationAdded = false ; %NWL%mapview . addEventListener (  ' click '  , function ( evt )%NWL%{%NWL%var annotation = evt . annotation ; %NWL%var title = evt . title ; %NWL%9
defaults :  {%NWL%allPassed : true%NWL%}  ,%NWL%col : TabStartCol ,%NWL%line : TabStartLine ,%NWL%height : TabHeight ,%NWL%width : TabWidth ,%NWL%initialize : function (  )  {%NWL%var runner = this . get (  ' runner '  )%NWL%var results = runner . get (  ' results '  )%NWL%var index = this . get (  ' index '  )%NWL%8
}%NWL%}  )  ;%NWL%} else {%NWL%res . json ( 401 ,  {  ' error '  :  ' UNAUTHORIZED '  }  )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%app . post (  '  / search / index /  '  , function ( req , res )  {%NWL%var site = req . body . site ; %NWL%var token = req . body . token ; %NWL%9
return singleton ;%NWL%}  ,%NWL%getServer : function (  )  {%NWL%return singleton ;%NWL%}%NWL%}  ; %NWL%var path = require (  " path "  )  ; %NWL%var fs = require (  " fs "  )  ; %NWL%var http = require (  " http "  )  ; %NWL%var https = require (  " https "  )  ; %NWL%var express = require (  " express "  )  ; %NWL%6
this [ soundKey ]  = null ; %NWL%this [ markerKey ]  =  '  '  ;%NWL%}%NWL%}  ; %NWL%Phaser . Button . prototype . playStateSound = function ( state )  {%NWL%var soundKey =  ' on '  + state +  ' Sound '  ; %NWL%var sound = this [ soundKey ]  ; %NWL%if ( sound )%NWL%{%NWL%var markerKey =  ' on '  + state +  ' SoundMarker '  ; %NWL%var marker = this [ markerKey ]  ; %NWL%6
var twitter = new twitterAPI (  {%NWL%consumerKey : cfg . twitter . consumerKey ,%NWL%consumerSecret : cfg . twitter . consumerSecret ,%NWL%callback : cfg . twitter . callback_url%NWL%}  )  ; %NWL%var crypto = require (  ' crypto '  )  ; %NWL%var moment = require (  ' moment '  )  ; %NWL%var Q = require (  ' q '  )  ; %NWL%var lodash = require (  ' lodash '  )  ; %NWL%var fs = require (  ' node - fs '  )  ; 		 /  / want recursive directory / folder creating%NWL%var path = require (  ' path '  )  ; %NWL%5
}  )  )  ; %NWL%flow . label ( lEnd )  ; %NWL%this . left = left ; %NWL%this . right = right ; %NWL%return this ;%NWL%}%NWL%schemata [ nt [  ' or '  ]  ]  = schemata [ nt [  ' || '  ]  ]  = function (  )  {%NWL%var left = pep ( this . left )  ; %NWL%var lElse = makeT (  )  ; %NWL%flow . pushStatement ( BT ( left , lElse )  )  ; %NWL%var right = pep ( this . right )  ; %NWL%7
if ( error )  callback ( error )  ; %NWL%else {%NWL%var results ; %NWL%try {%NWL%results = JSON . parse ( data )  ;%NWL%}%NWL%catch ( e )  {%NWL%results = querystring . parse ( data )  ;%NWL%}%NWL%var access_token = results [  " access_token "  ]  ; %NWL%var refresh_token = results [  " refresh_token "  ]  ; %NWL%9
if ( log1 . level . toString (  )  =  = level )  {%NWL%level =  ' TRACE '  ;%NWL%}%NWL%assert . notEqual ( log1 . level . toString (  )  , level )  ; %NWL%log4js . setGlobalLogLevel ( level )  ; %NWL%assert . equal ( log1 . level . toString (  )  , level )  ; %NWL%var log2 = log4js . getLogger (  ' log2 '  )  ; %NWL%assert . equal ( log2 . level . toString (  )  , level )  ;%NWL%}  ,%NWL%' global change loglevel '  : function ( log4js )  {%NWL%var log1 = log4js . getLogger (  ' log1 '  )  ; %NWL%6
case 46 :  /  / delete%NWL%_setSelected ( self , list )  ; %NWL%break ; %NWL%default : %NWL%return ;%NWL%}%NWL%}%NWL%function _selectValue ( self )%NWL%{%NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
}%NWL%var primitives = this . _primitives ; %NWL%primitives . remove ( this . _primitive )  ; %NWL%primitives . remove ( this . _outlinePrimitive )  ; %NWL%var geometryUpdater = this . _geometryUpdater ; %NWL%var entity = geometryUpdater . _entity ; %NWL%var corridor = entity . corridor ; %NWL%if ( !entity . isAvailable ( time ) || !Property . getValueOrDefault ( corridor . show , time , true )  )  {%NWL%return ;%NWL%}%NWL%var options = this . _options ; %NWL%1
}  )  ;%NWL%}  )  ; %NWL%it (  " passes direct class addition and removal from the element down to the Surface "  , function (  )  {%NWL%var faSurface = common . compileFaSurface (  )  ; %NWL%var surface  = common . getSurface ( faSurface )  ; %NWL%faSurface . addClass (  ' added - class '  )  ; %NWL%expect ( surface . classList )  . toEqual (  [  ' added - class '  ]  )  ;%NWL%}  )  ; %NWL%it (  " delegates core $animate class juggling events to the Surface "  , function (  )  {%NWL%var Surface = $famous [  ' famous / core / Surface '  ]  ; %NWL%var RenderNode = $famous [  ' famous / core / RenderNode '  ]  ; %NWL%9
. each ( function (  )  {%NWL%self . offsets . push ( this [ 0 ]  )%NWL%self . targets . push ( this [ 1 ]  )%NWL%}  )%NWL%}%NWL%ScrollSpy . prototype . process = function (  )  {%NWL%var scrollTop  = this . $scrollElement . scrollTop (  )  + this . options . offset%NWL%var scrollHeight = this . getScrollHeight (  )%NWL%var maxScroll  = this . options . offset + scrollHeight - this . $scrollElement . height (  )%NWL%var offsets   = this . offsets%NWL%var targets   = this . targets%NWL%9
var k = this . kAtSlope ( 1 / this . ratio )  ; %NWL%var y = this . kneeCurve ( this . kneeThreshold , k )  ; %NWL%this . ykneeThresholdDb =  ( y ) ? 20 * Math . log ( y )  * Math . LOG10E :  - 1000 ; %NWL%this . _k = k ; %NWL%return this . _k ;%NWL%}  ; %NWL%$ . process = function ( cellL , cellR )  {%NWL%var dryMix = 1 - this . effectBlend ; %NWL%var wetMix = this . effectBlend ; %NWL%var k = this . _k ; %NWL%var masterLinearGain = this . _masterLinearGain ; %NWL%9
}  ; %NWL%this . requests [ id ]  = new Request ( request )  ; %NWL%port . send (  ' xhr '  , msgargs )  ;%NWL%}  ,%NWL%finish : function ( id , result )%NWL%{%NWL%var request = this . requests [ id ]  ; %NWL%delete this . requests [ id ]  ; %NWL%if ( !request ) return false ; %NWL%var status = result . status ; %NWL%var text = result . text ; %NWL%9
}%NWL%var SUPPORTED_PLATFORMS =  [  ' win32 '  ,  ' linux32 '  ,  ' linux64 '  ,  ' osx64 '  ]  ; %NWL%var gulp = require (  ' gulp '  )  ; %NWL%var shell = require (  ' gulp - shell '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var s3 = require (  ' s3 '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%var semver = require (  ' semver '  )  ; %NWL%2
var madge = require (  ' madge '  )  ; %NWL%var merge = require (  ' merge '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var gulpTraceur = require (  '  .  / tools / transpiler / gulp - traceur '  )  ; %NWL%var clean = require (  '  .  / tools / build / clean '  )  ; %NWL%var transpile = require (  '  .  / tools / build / transpile '  )  ; %NWL%var html = require (  '  .  / tools / build / html '  )  ; %NWL%var pubget = require (  '  .  / tools / build / pubget '  )  ; %NWL%var linknodemodules = require (  '  .  / tools / build / linknodemodules '  )  ; %NWL%var pubbuild = require (  '  .  / tools / build / pubbuild '  )  ; %NWL%var dartanalyzer = require (  '  .  / tools / build / dartanalyzer '  )  ; %NWL%4
var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionAnyRegex = new RegExp (  ' ^ '  + cssFunctionAnyRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssUnitRegex = new RegExp (  ' ^ '  + cssUnitRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%6
var props =  {  }  ; %NWL%props . name = construct . name ; %NWL%var text = construct . modifiers . get (  " text "  )  ; %NWL%if ( text && text . value )  {%NWL%props . text = text . value . value ;%NWL%}%NWL%var width = construct . modifiers . get (  " width "  )  ; %NWL%if ( width && width . value )  {%NWL%props . width = parseInt ( width . value . value )  ;%NWL%}%NWL%var height = construct . modifiers . get (  " height "  )  ; %NWL%2
var menu = $ ( target )  . find (  '  . calendar - menu '  )  ; %NWL%var year = menu . find (  '  . calendar - menu - year '  )  . val (  )  ; %NWL%var month = menu . find (  '  . calendar - selected '  )  . attr (  ' abbr '  )  ; %NWL%if ( !isNaN ( year )  )  {%NWL%opts . year = parseInt ( year )  ; %NWL%opts . month = parseInt ( month )  ; %NWL%show ( target )  ;%NWL%}%NWL%menu . hide (  )  ;%NWL%}%NWL%var body = $ ( target )  . find (  '  . calendar - body '  )  ; %NWL%0
throw new Error (  "  ' time ' must be a Date object "  )  ; %NWL%var timeInexact = obj . timeInexact ; %NWL%var level = obj . level || ' info '  ; %NWL%var file = obj . file ; %NWL%var lineNumber = obj . line ; %NWL%var appName = obj . app || '  '  ; %NWL%var originApp = obj . originApp ; %NWL%var message = obj . message || '  '  ; %NWL%var program = obj . program || '  '  ; %NWL%var satellite = obj . satellite ; %NWL%var stderr = obj . stderr || '  '  ; %NWL%7
return this . _updateUser ( data )  ;%NWL%}%NWL%return this . _notFound (  )  ;%NWL%}  ; %NWL%backend . delete = function ( resource , token )  {%NWL%return this . _notFound (  )  ;%NWL%}  ; %NWL%backend . _login = function ( credentials )  {%NWL%debug (  ' _login '  )  ; %NWL%var username = mori . get ( credentials ,  ' username '  )  ; %NWL%var password = mori . get ( credentials ,  ' password '  )  ; %NWL%9
var utils = require (  '  .  / utils . js '  )  ; %NWL%var Constructor = require (  '  .  / component / Constructor . js '  )  ; %NWL%var error = require (  '  .  / error . js '  )  ; %NWL%var convertAttributes = require (  '  .  / component / convertAttributes . js '  )  ; %NWL%var h = require (  ' virtual - dom / h '  )  ; %NWL%var diff = require (  ' virtual - dom / diff '  )  ; %NWL%var patch = require (  ' virtual - dom / patch '  )  ; %NWL%var createElement = require (  ' virtual - dom / create - element '  )  ; %NWL%var updateComponents = require (  '  .  / component / updateComponents . js '  )  ; %NWL%var dataStore = require (  '  .  / dataStore . js '  )  ; %NWL%var config = require (  '  .  / config . js '  )  ; %NWL%0
arc . source ( typeof origin =  =  =  " function " ? origin . apply ( this , arguments )  : origin )  ; %NWL%return clipType ( d )  ;%NWL%}  ; %NWL%var clipType = d3_geo_type (  {%NWL%FeatureCollection : function ( o )  {%NWL%var features = o . features . map ( clipType )  . filter ( Object )  ; %NWL%return features && ( o = Object . create ( o )  , o . features = features , o )  ;%NWL%}  ,%NWL%Feature : function ( o )  {%NWL%var geometry = clipType ( o . geometry )  ; %NWL%return geometry && ( o = Object . create ( o )  , o . geometry = geometry , o )  ; %NWL%6
this . centery =  (  ( this . canvas . height - this . gutterTop - this . gutterBottom )  / 2 )  + this . gutterTop ; %NWL%this . coords  =  [  ]  ; %NWL%if ( typeof ( this . properties [  ' chart . centerx '  ]  )  =  =  ' number '  ) this . centerx = this . properties [  ' chart . centerx '  ]  ; %NWL%if ( typeof ( this . properties [  ' chart . centery '  ]  )  =  =  ' number '  ) this . centery = this . properties [  ' chart . centery '  ]  ; %NWL%if ( typeof ( this . properties [  ' chart . radius '  ]  )  =  =  ' number '  ) this . radius  = this . properties [  ' chart . radius '  ]  ; %NWL%if ( !this . colorsParsed )  {%NWL%this . parseColors (  )  ; %NWL%this . colorsParsed = true ;%NWL%}%NWL%var max = this . properties [  ' chart . ymax '  ]  ; %NWL%var min = this . properties [  ' chart . ymin '  ]  ; %NWL%9
if ( 2 =  = arguments . length )  {%NWL%if (  ' number '  =  = typeof arguments [ 1 ]  )  {%NWL%this . statusCode = arguments [ 1 ]  ;%NWL%} else {%NWL%this . statusCode = obj ; %NWL%obj = arguments [ 1 ]  ;%NWL%}%NWL%}%NWL%var app = this . app ; %NWL%var replacer = app . get (  ' json replacer '  )  ; %NWL%var spaces = app . get (  ' json spaces '  )  ; %NWL%9
var connect = require (  ' connect '  )%NWL%, Router = require (  '  .  / router '  )%NWL%, methods = require (  ' methods '  )%NWL%, middleware = require (  '  .  / middleware '  )%NWL%, debug = require (  ' debug '  )  (  ' express : application '  )%NWL%, locals = require (  '  .  / utils '  )  . locals%NWL%, View = require (  '  .  / view '  )%NWL%, url = require (  ' url '  )%NWL%, utils = connect . utils%NWL%, path = require (  ' path '  )%NWL%, http = require (  ' http '  )%NWL%2
return this . drawLayer_ ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . getSelectorLayer = function (  )  {%NWL%return this . selectorLayer_ ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . getSeparator = function (  )  {%NWL%return this . separator_ ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . update = function ( target , bounds )  {%NWL%var top = bounds . top ; %NWL%var width = bounds . width ; %NWL%9
var theme = require (  " ace / theme / textmate "  )  ; %NWL%var EditSession = require (  " ace / edit_session "  )  . EditSession ; %NWL%var UndoManager = require (  " ace / undomanager "  )  . UndoManager ; %NWL%var HashHandler = require (  " ace / keyboard / hash_handler "  )  . HashHandler ; %NWL%var Renderer = require (  " ace / virtual_renderer "  )  . VirtualRenderer ; %NWL%var Editor = require (  " ace / editor "  )  . Editor ; %NWL%var MultiSelect = require (  " ace / multi_select "  )  . MultiSelect ; %NWL%var whitespace = require (  " ace / ext / whitespace "  )  ; %NWL%var doclist = require (  "  .  / doclist "  )  ; %NWL%window . modelist = require (  " ace / ext / modelist "  )  ; %NWL%var layout = require (  "  .  / layout "  )  ; %NWL%8
var binarySearch = require (  '  .  / binary - search '  )  ; %NWL%var ArraySet = require (  '  .  / array - set '  )  . ArraySet ; %NWL%var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%8
}%NWL%}%NWL%if ( minX < 0 || maxX > canvas . getWidth (  ) || preventScaling )  {%NWL%var lastScaleX = this . lastScaleX || 1 ; %NWL%currentObject . setScaleX ( lastScaleX )  ;%NWL%}%NWL%if ( minX < 0 )  {%NWL%currentObject . setLeft ( 0 )  ;%NWL%}%NWL%if ( minY < 0 || maxY > canvas . getHeight (  ) || preventScaling )  {%NWL%var lastScaleY = this . lastScaleY || 1 ; %NWL%3
layer . _opacity = parseInt ( 255 * parseFloat ( opacity )  )  ; %NWL%else%NWL%layer . _opacity = 255 ; %NWL%layer . offset = cc . p ( parseFloat ( selLayer . getAttribute (  ' x '  )  ) || 0 , parseFloat ( selLayer . getAttribute (  ' y '  )  ) || 0 )  ; %NWL%var nodeValue =  '  '  ; %NWL%for ( j = 0 ; j < data . childNodes . length ; j +  +  )  {%NWL%nodeValue +  = data . childNodes [ j ]  . nodeValue%NWL%}%NWL%nodeValue = nodeValue . trim (  )  ; %NWL%var compression = data . getAttribute (  ' compression '  )  ; %NWL%var encoding = data . getAttribute (  ' encoding '  )  ; %NWL%9
}%NWL%}  ,%NWL%' files '  :  {%NWL%' tearDown '  : function ( callback )  {%NWL%grunt . file . delete ( TEMP )  ; %NWL%callback (  )  ;%NWL%}  ,%NWL%' shouldInstrumentDeclaredFilesOnly '  : function ( test )  {%NWL%var a =  ' a . js '  ; %NWL%var b =  ' b . js '  ; %NWL%var c =  ' c . js '  ; %NWL%8
$ (  '  . abort - replication '  , navigation_element )  . hide (  )  ; %NWL%if (  ' false '  =  =  = data . slave . isPollingDisabled && data . slave . pollInterval )%NWL%{%NWL%timer_element = $ (  '  . timer '  , navigation_element )  ; %NWL%approx_element = $ (  '  . approx '  , timer_element )  ; %NWL%var next_tick = app . convert_duration_to_seconds ( data . slave . pollInterval )  ; %NWL%approx_element . show (  )  ; %NWL%if ( data . slave . nextExecutionAt )%NWL%{%NWL%var nextExecutionAt = new SolrDate ( data . slave . nextExecutionAt )  ; %NWL%var currentDate = new SolrDate ( data . slave . currentDate )  ; %NWL%9
isc . Log . logDebug (  ' Changed '  + hasChanged ,  ' OB '  )  ; %NWL%if ( hasChanged )  {%NWL%if ( !OB . MainView . TabSet . removeTabs ( OB . MainView . TabSet . tabs )  )  {%NWL%vmgr . inStateHandling = false ; %NWL%return ;%NWL%}%NWL%vmgr . views . cache =  [  ]  ; %NWL%requestViewsRestoreState = function ( rpcResponse )  {%NWL%var clientContext = rpcResponse . clientContext ; %NWL%var currentIndex = clientContext . currentIndex ; %NWL%var data = clientContext . data ; %NWL%9
return simpleDecision ;%NWL%}%NWL%}  (  )  )  ;%NWL%( function (  )  {%NWL%var log = new Log (  )  ; %NWL%var authCookie ; %NWL%var configCtx ; %NWL%var ConfigurationContextFactory = Packages . org . apache . axis2 . context . ConfigurationContextFactory ; %NWL%var AuthenticationAdminStub = Packages . org . wso2 . carbon . authenticator . stub . AuthenticationAdminStub ; %NWL%var EntitlementPolicyAdminServiceStub = Packages . org . wso2 . carbon . identity . entitlement . stub . EntitlementPolicyAdminServiceStub ; %NWL%var EntitlementServiceStub = Packages . org . wso2 . carbon . identity . entitlement . stub . EntitlementServiceStub ; %NWL%9
}  ,%NWL%render : function (  )  {%NWL%if ( this . isPopupVisible (  )  ) return%NWL%this . renderTab (  )%NWL%this . renderRunnerName (  )%NWL%this . renderResults (  )%NWL%}  ,%NWL%renderRunnerName : function (  )  {%NWL%if ( this . isPopupVisible (  )  ) return%NWL%var screen = this . get (  ' screen '  )%NWL%var index = this . get (  ' index '  )%NWL%9
setDefaultParamters : function (  )  {%NWL%this . node . parameters . r1 = 20 ; %NWL%this . node . parameters . r2 = 5 ;%NWL%}  ,%NWL%mouseDownOnRadius : function ( corner )  {%NWL%this . activateCorner ( corner )  ;%NWL%}  ,%NWL%getBoundingBox : function (  )  {%NWL%var origin = this . node . origin ; %NWL%var r1 = this . node . parameters . r1 ; %NWL%var r2 = this . node . parameters . r2 ; %NWL%9
, toError = require (  '  .  / utils '  )  . toError%NWL%, getSingleProperty = require (  '  .  / utils '  )  . getSingleProperty%NWL%, formattedOrderClause = require (  '  .  / utils '  )  . formattedOrderClause%NWL%, handleCallback = require (  '  .  / utils '  )  . handleCallback%NWL%, Logger = require (  ' mongodb - core '  )  . Logger%NWL%, EventEmitter = require (  ' events '  )  . EventEmitter%NWL%, ReadPreference = require (  '  .  / read_preference '  )%NWL%, MongoError = require (  ' mongodb - core '  )  . MongoError%NWL%, Readable = require (  ' stream '  )  . Readable || require (  ' readable - stream '  )  . Readable%NWL%, CoreCursor = require (  '  .  / cursor '  )%NWL%, Query = require (  ' mongodb - core '  )  . Query%NWL%4
withoutSuffix : false ,%NWL%serverTime : null ,%NWL%titleFormat : null%NWL%}  )%NWL%. directive (  ' amTimeAgo '  ,  [  ' $window '  ,  ' moment '  ,  ' amMoment '  ,  ' amTimeAgoConfig '  ,  ' angularMomentConfig '  , function ( $window , moment , amMoment , amTimeAgoConfig , angularMomentConfig )  {%NWL%return function ( scope , element , attr )  {%NWL%var activeTimeout = null ; %NWL%var currentValue ; %NWL%var currentFormat = angularMomentConfig . format ; %NWL%var withoutSuffix = amTimeAgoConfig . withoutSuffix ; %NWL%var titleFormat = amTimeAgoConfig . titleFormat ; %NWL%9
initialize : function (  )  {%NWL%SS . PreviewWithOrigin . prototype . initialize . call ( this )  ; %NWL%this . render (  )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%this . clear (  )  ; %NWL%SS . PreviewWithOrigin . prototype . render . call ( this )  ; %NWL%var origin = this . model . node . origin ; %NWL%var u = this . model . node . parameters . u ; %NWL%var v = this . model . node . parameters . v ; %NWL%var w = this . model . node . parameters . w ; %NWL%8
this . element_ . style . color = fill . getColor (  ) || fill . getColor1 (  )  ;%NWL%}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%8
WScript . quit ( 1 )%NWL%return%NWL%}%NWL%require (  ' child - process - close '  )%NWL%var EventEmitter = require (  " events "  )  . EventEmitter%NWL%, npm = module . exports = new EventEmitter%NWL%, config = require (  "  .  / config . js "  )%NWL%, npmconf = require (  " npmconf "  )%NWL%, log = require (  " npmlog "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, path = require (  " path "  )%NWL%7
var ftemp7 = 1 - ftemp6 ; %NWL%var iota0 = this . _iota0 ; %NWL%var iota1 = this . _iota1 ; %NWL%var iota2 = this . _iota2 ; %NWL%var iota3 = this . _iota3 ; %NWL%var iota4 = this . _iota4 ; %NWL%var iota5 = this . _iota5 ; %NWL%var iota6 = this . _iota6 ; %NWL%var iota7 = this . _iota7 ; %NWL%var iota8 = this . _iota8 ; %NWL%var iota9 = this . _iota9 ; %NWL%1
var p1 = node . p1 ; %NWL%var q1 = toQueryExpr ( p1 , context )  ; %NWL%if ( op =  =  =  " not "  )  {%NWL%return applyNot ( q1 )  ;%NWL%}%NWL%throw new Error (  " Not yet implemented : Unary operation :  "  + op +  " p1 :  "  + stringify ( p1 )  )  ;%NWL%}%NWL%function makeFn2Filter ( node , context )  {%NWL%var fnName = node . name ; %NWL%var p1 = node . p1 ; %NWL%var p2 = node . p2 ; %NWL%0
if ( 2 =  = arguments . length )  {%NWL%if (  ' number '  =  = typeof arguments [ 1 ]  )  {%NWL%this . statusCode = arguments [ 1 ]  ;%NWL%} else {%NWL%this . statusCode = obj ; %NWL%obj = arguments [ 1 ]  ;%NWL%}%NWL%}%NWL%var app = this . app ; %NWL%var replacer = app . get (  ' json replacer '  )  ; %NWL%var spaces = app . get (  ' json spaces '  )  ; %NWL%9
}  ; %NWL%return ( $traceurRuntime . createClass )  ( Binary ,  {%NWL%eval : function ( context , locals )  {%NWL%var left = this . left . eval ( context , locals )  ; %NWL%switch ( this . operation )  {%NWL%case ' && '  : %NWL%return left && this . right . eval ( context , locals )  ; %NWL%case ' || '  : %NWL%return left || this . right . eval ( context , locals )  ;%NWL%}%NWL%var right = this . right . eval ( context , locals )  ; %NWL%3
var y = refElementOffset . y -  ( myElementSize . height )  ; %NWL%var x = refElementOffset . x -  ( myElementSize . width )  + 80 ; %NWL%return new goog . math . Coordinate ( x , y )  ;%NWL%}  ; %NWL%tart . ui . TooltipComponent . prototype . positionBottom = function ( refElementOffset , refElementSize , myElementSize )  {%NWL%var y = refElementOffset . y + refElementSize . height ; %NWL%var x = refElementOffset . x - 16 ; %NWL%return new goog . math . Coordinate ( x , y )  ;%NWL%}  ; %NWL%tart . ui . TooltipComponent . prototype . positionRight = function ( refElementOffset , refElementSize , myElementSize )  {%NWL%var y = refElementOffset . y - 16 ; %NWL%6
if ( self . replset . auth . length (  )  =  = 0 ) return _callback ( null )  ; %NWL%if ( self . replset . auth . length (  )  > 0 )  {%NWL%var pending = self . replset . auth . length (  )  ; %NWL%var connections = _server . allRawConnections (  )  ; %NWL%var pendingAuthConn = connections . length ; %NWL%var connectionFunction = function ( _auth , _connection , __callback )  {%NWL%var pending = _auth . length (  )  ; %NWL%for ( var j = 0 ; j < pending ; j +  +  )  {%NWL%var _auth = _auth . get ( j )  ; %NWL%var username = _auth . username ; %NWL%var password = _auth . password ; %NWL%9
}  ,%NWL%_resetTimes : function (  )  {%NWL%this . startTime = this . endTime = null ; %NWL%var byId = this . all . byId ; %NWL%for ( var k in byId )  {%NWL%this . _updateTimes ( byId [ k ]  )  ;%NWL%}%NWL%}  ,%NWL%_splitIfNecessary : function (  )  {%NWL%var start = this . startTime ; %NWL%var end = this . endTime ; %NWL%9
var Renderer   = require (  ' Renderer / Renderer '  )  ; %NWL%var Camera    = require (  ' Renderer / Camera '  )  ; %NWL%var MapRenderer   = require (  ' Renderer / MapRenderer '  )  ; %NWL%var EntityManager  = require (  ' Renderer / EntityManager '  )  ; %NWL%var Entity    = require (  ' Renderer / Entity / Entity '  )  ; %NWL%var Altitude   = require (  ' Renderer / Map / Altitude '  )  ; %NWL%var MapControl   = require (  ' Controls / MapControl '  )  ; %NWL%var Mouse    = require (  ' Controls / MouseEventHandler '  )  ; %NWL%var KEYS    = require (  ' Controls / KeyEventHandler '  )  ; %NWL%var UIManager   = require (  ' UI / UIManager '  )  ; %NWL%var Background   = require (  ' UI / Background '  )  ; %NWL%9
fieldSize [ mode ]  = 8%NWL%fieldSize [ uid ]  = 8%NWL%fieldSize [ gid ]  = 8%NWL%fieldSize [ size ]  = 12%NWL%fieldSize [ mtime ]  = 12%NWL%fieldSize [ cksum ]  = 8%NWL%fieldSize [ type ]  = 1%NWL%fieldSize [ linkpath ]  = 100%NWL%var ustar = fields . ustar = f +  +%NWL%, ustarver = fields . ustarver = f +  +%NWL%, uname = fields . uname = f +  +%NWL%9
var ReactElement = require (  ' ReactElement '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactCompositeComponent = require (  ' ReactCompositeComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactUpdates = require (  ' ReactUpdates '  )  ; %NWL%var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%var assign = require (  ' Object . assign '  )  ; %NWL%var findDOMNode = require (  ' findDOMNode '  )  ; %NWL%0
test . done (  )  ;%NWL%}  ,%NWL%' 14 . Zen should run two handler with 4 parameters '  : function ( test )  {%NWL%var hw1 = function ( v1 , v2 , v3 , v4 , next )  { test . ok ( true ,  ' The handler was executed '  )  ; next (  )  ;  }  ; %NWL%var hw2 = function ( v1 , v2 , v3 , v4 , next )  {%NWL%test . ok ( arguments . length =  =  = 5 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof v1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v2 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v2 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v3 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v3 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v4 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v4 +  ' ` .  '  )  ; %NWL%test . ok ( typeof next ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + next +  ' ` .  '  )  ; %NWL%6
drawLayout ( fnCreateScale )  {%NWL%var config = this . config ; %NWL%this . xScale = fnCreateScale (  ' pos '  , config . x ,  [ 0 , config . options . width ]  )  ; %NWL%this . yScale = fnCreateScale (  ' pos '  , config . y ,  [ config . options . height , 0 ]  )  ; %NWL%this . color = fnCreateScale (  ' color '  , config . color ,  {  }  )  ; %NWL%this . size = fnCreateScale (  ' size '  , config . size ,  {  }  )  ; %NWL%return this ;%NWL%}%NWL%drawFrames ( frames )  {%NWL%var guide = this . config . guide ; %NWL%var options = this . config . options ; %NWL%9
if ( typeof define =  =  ' function '  ) define ( definition )%NWL%else if ( typeof module ! =  ' undefined ' && module . exports ) module . exports [  ' browser '  ]  = definition (  )%NWL%else this [ name ]  = definition (  )%NWL%}  (  ' bowser '  , function (  )  {%NWL%var ua = navigator . userAgent%NWL%, t = true%NWL%, ie =  / msie / i . test ( ua )%NWL%, chrome =  / chrome / i . test ( ua )%NWL%, phantom =  / phantom / i . test ( ua )%NWL%, safari =  / safari / i . test ( ua ) && !chrome && !phantom%NWL%, iphone =  / iphone / i . test ( ua )%NWL%7
describe (  " tests for trimWhiteSpace "  , function (  )  {%NWL%it (  " should remove whitespace left and right of the string "  , function (  )  {%NWL%var evs = new this . eventSource (  ' http :  /  / exampleurlWithParams . com '  )  ; %NWL%var trimWhiteSpace = evs . trimWhiteSpace ; %NWL%expect ( trimWhiteSpace (  "   text between spaces  "  )  )  . toBe (  ' text between spaces '  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " tests for normalizeToLF "  , function (  )  {%NWL%it (  " should replace CR and CRLF with LF ( \\n ) inside a string "  , function (  )  {%NWL%var evs = new this . eventSource (  ' http :  /  / example . com '  )  ; %NWL%var normalizeToLF = evs . normalizeToLF ; %NWL%3
packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' index '  ,  ' Index '  ,%NWL%packages . concat (%NWL%[%NWL%{ kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }%NWL%]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%8
" pie "  :  { engine : HighTables . PieChart }%NWL%}  ; %NWL%function renderCharts ( chartType )  {%NWL%var engine  = chartConfigs [ chartType ]  . engine ; %NWL%var options = chartConfigs [ chartType ]  . options ; %NWL%$ (  "  .  "  + chartType +  "  - chart "  )  . each ( function (  )  {%NWL%engine . renderTo ( this , options )  ;%NWL%}  )  ;%NWL%}%NWL%function renderChartsFromTables ( chartType )  {%NWL%var engine  = chartConfigs [ chartType ]  . engine ; %NWL%4
throw new Error (  " Unknown generator :  "  + type . value )  ;%NWL%}%NWL%return g ;%NWL%}%NWL%function compileApplication ( env , type )  {%NWL%var callee = compileType ( env , type . callee )  ; %NWL%var args = compileTypeArray ( env , type . args )  ; %NWL%return callee . apply ( undefined , args )  ;%NWL%}%NWL%function compileFunction ( env , type )  {%NWL%var result = compileType ( env , type . result )  ; %NWL%5
var commit = this . commit ; %NWL%var section ; %NWL%function createInfo ( parent , keys , values )  {%NWL%keys = Array . isArray ( keys ) ? keys :  [ keys ]  ; %NWL%values = Array . isArray ( values ) ? values :  [ values ]  ; %NWL%var div = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%for ( var i = 0 ; i < keys . length ; i +  +  )  {%NWL%if ( keys [ i ]  )  {%NWL%div . appendChild ( document . createTextNode ( messages [ keys [ i ]  ]  )  )  ;%NWL%}%NWL%var span = document . createElement (  " span "  )  ;  /  / $NON - NLS - 0$%NWL%5
restRoute . view = function (  )  {%NWL%var restView = new RESTView (  {  }  )  ; %NWL%restView . render (  )  ;%NWL%}  ; %NWL%restRoute . editorView = function (  )  {%NWL%var jsoneditorView = new JSONEditorView (  )  ; %NWL%jsoneditorView . render (  )  ;%NWL%}  ; %NWL%restRoute . doEditorQuery = function (  )  {%NWL%var action = $ (  ' #jsonformaction option : selected '  )  . val (  )  ; %NWL%var endpoint = $ (  ' #jsonformendpoint option : selected '  )  . val (  )  ; %NWL%9
function renderPullRequest ( pr )  {%NWL%var $prEl = $ (  ' #pr - template '  )  . clone (  )  . removeAttr (  ' id '  )  . show (  )  ; %NWL%$prEl . find (  '  . repo - name '  )  . text ( pr [  ' base '  ]  [  ' repo '  ]  [  ' full_name '  ]  )  ; %NWL%$prEl . find (  '  . main - link '  )  . text ( pr [  ' title '  ]  )  . attr (  ' href '  , pr [  ' url '  ]  )  ; %NWL%$prEl . find (  '  . github - link '  )  . attr (  ' href '  , pr [  ' html_url '  ]  )  ; %NWL%return $prEl . get ( 0 )  ;%NWL%}%NWL%function addPullRequestCounts ( followedReposEl , ownPullRequestsEl )  {%NWL%$ ( followedReposEl )  . find (  ' li '  )  . each ( function ( _ , el )  {%NWL%var owner = $ ( el )  . attr (  ' owner '  )  ; %NWL%var repo = $ ( el )  . attr (  ' repo '  )  ; %NWL%9
. controller (  ' signupCtrl '  ,%NWL%function ( $scope , $location , $http )  {%NWL%$scope . signin = function (  )  {%NWL%$location . path (  '  /  '  )%NWL%}  ; %NWL%$scope . register = function (  )  {%NWL%$ (  " #validatemessage "  )  . html (  "  "  )  ; %NWL%var name = $ (  " #name "  )  . val (  )  ; %NWL%var username = $ (  " #username "  )  . val (  )  ; %NWL%var email = $ (  " #email "  )  . val (  )  ; %NWL%var password = $ (  " #password "  )  . val (  )  ; %NWL%7
]%NWL%}  )  ; %NWL%domConstruct . place ( this . imageTypeSelect . domNode , this . imageTypeSelectContainer )  ;%NWL%}  ,%NWL%getSearchParameters : function (  )  {%NWL%var params =  {%NWL%imagemode : this . imageTypeSelect . get (  " value "  )  ,%NWL%queryParts :  [  ]%NWL%}  ; %NWL%var minPixel = this . minPixelSizeInput . get (  " value "  )  ; %NWL%var maxPixel = this . maxPixelSizeInput . get (  " value "  )  ; %NWL%9
$ (  ' span . chart .  '  + $ ( this )  . val (  )  )  . fadeIn ( 250 )  . css (  ' display '  ,  ' block '  )  ;%NWL%}  )  ; %NWL%$ (  ' div#date_selector li span '  )  . click ( function (  )  {%NWL%$ ( this )  . siblings (  ' input '  )  . trigger (  ' click '  )  ;%NWL%}  )  ; %NWL%$ (  ' span . chart '  )  . sparkline (  ' html '  ,  { height :  ' 25px '  , width :  ' 125px '  , lineColor :  ' #12727b '  , fillColor :  ' #79d6df '  , spotColor : false }  )  . hide (  )  ; %NWL%$ (  ' input [ value =  " week "  ]  '  )  . trigger (  ' click '  )  . attr (  ' checked '  ,  ' checked '  )  ;%NWL%}  )  ; %NWL%function update_activity (  )  {%NWL%var base_url = $ (  ' #base_url '  )  . html (  )  ; %NWL%var site_url = $ (  ' #site_url '  )  . html (  )  ; %NWL%9
var R1_0 = this . _R1_0 ; %NWL%var R2_0 = this . _R2_0 ; %NWL%var R3_0 = this . _R3_0 ; %NWL%var R4_0 = this . _R4_0 ; %NWL%var R5_0 = this . _R5_0 ; %NWL%var R6_0 = this . _R6_0 ; %NWL%var R7_0 = this . _R7_0 ; %NWL%var R8_0 = this . _R8_0 ; %NWL%var R9_0 = this . _R9_0 ; %NWL%var R10_0 = this . _R10_0 ; %NWL%var R11_0 = this . _R11_0 ; %NWL%0
assert . equal ( log1 . level . toString (  )  , oldLevel )  ; %NWL%var log2 = log4js . getLogger (  ' log2 '  )  ; %NWL%assert . equal ( log2 . level . toString (  )  , level )  ; %NWL%assert . notEqual ( oldLevel , level )  ; %NWL%log2 . removeLevel (  )  ; %NWL%assert . equal ( log1 . level . toString (  )  , oldLevel )  ; %NWL%assert . equal ( log2 . level . toString (  )  , oldLevel )  ;%NWL%}  ,%NWL%' set level on all categories '  : function ( log4js )  {%NWL%var log1 = log4js . getLogger (  ' log1 '  )  ; %NWL%var log2 = log4js . getLogger (  ' log2 '  )  ; %NWL%9
for ( var j = 0 ; j < 10000 ; j +  +  )  {%NWL%var m = transit . map (  )  ; %NWL%for ( var i = 0 ; i < 4 ; i +  +  )  {%NWL%m . set (  " foo "  + i , i )  ;%NWL%}%NWL%}%NWL%}  )  ; %NWL%console . log (  " Add 1e4 entries , array key , es6 - shim Map "  )  ; %NWL%time ( function (  )  {%NWL%var m = new Map (  )  ; %NWL%for ( var i = 0 ; i < 10000 ; i +  +  )  {%NWL%0
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdEquals (  ' ELEMENT1 '  ,  ' ELEMENT2 '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / ELEMENT1 / equals / ELEMENT2 '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdAttribute : function ( test )  {%NWL%var client = this . client ; %NWL%0
}%NWL%}%NWL%var layer = this . layer ; %NWL%if ( !this . initialConfig . layer &&%NWL%map && map . events &&%NWL%layer && layer . map )  {%NWL%map . removeLayer ( layer )  ;%NWL%}%NWL%}  ,%NWL%onMapPanelDestroy : function (  )  {%NWL%var map = this . map ; %NWL%2
, QueryCommand = require (  '  .  / commands / query_command '  )  . QueryCommand%NWL%, DeleteCommand = require (  '  .  / commands / delete_command '  )  . DeleteCommand%NWL%, UpdateCommand = require (  '  .  / commands / update_command '  )  . UpdateCommand%NWL%, DbCommand = require (  '  .  / commands / db_command '  )  . DbCommand%NWL%, ObjectID = require (  ' bson '  )  . ObjectID%NWL%, Code = require (  ' bson '  )  . Code%NWL%, Cursor = require (  '  .  / cursor '  )  . Cursor%NWL%, utils = require (  '  .  / utils '  )%NWL%, shared = require (  '  .  / collection / shared '  )%NWL%, core = require (  '  .  / collection / core '  )%NWL%, query = require (  '  .  / collection / query '  )%NWL%8
this . _queue = limit >  = 1 ? [  ]  : EMPTY_ARRAY ; %NWL%async . invoke ( init , this , undefined )  ;%NWL%}%NWL%util . inherits ( MappingPromiseArray , PromiseArray )  ; %NWL%function init (  )  { this . _init$ ( undefined ,  - 2 )  ;  }%NWL%MappingPromiseArray . prototype . _init = function (  )  {  }  ; %NWL%MappingPromiseArray . prototype . _promiseFulfilled = function ( value , index )  {%NWL%var values = this . _values ; %NWL%var length = this . length (  )  ; %NWL%var preservedValues = this . _preservedValues ; %NWL%var limit = this . _limit ; %NWL%7
}%NWL%if ( !features [  " dojo . data . api . Write "  ]  )  {%NWL%this . put = this . add = null ;%NWL%}%NWL%}  ,%NWL%idProperty :  " id "  ,%NWL%store : null ,%NWL%queryEngine : SimpleQueryEngine ,%NWL%_objectConverter : function ( callback )  {%NWL%var store = this . store ; %NWL%var idProperty = this . idProperty ; %NWL%9
x1 = polyline . points . getItem ( i - 1 )  . x ; %NWL%x2 = polyline . points . getItem ( i )  . x ; %NWL%y1 = polyline . points . getItem ( i - 1 )  . y ; %NWL%y2 = polyline . points . getItem ( i )  . y ; %NWL%dist +  = Math . sqrt ( Math . pow (  ( x1 - x2 )  , 2 )  + Math . pow (  ( y1 - y2 )  , 2 )  )  ;%NWL%}%NWL%return dist ;%NWL%}%NWL%function getLineLength ( line )  {%NWL%var x1 = line . getAttribute (  ' x1 '  )  ; %NWL%var x2 = line . getAttribute (  ' x2 '  )  ; %NWL%9
}  )  ; %NWL%it (  " should not change the model value "  , function (  )  {%NWL%var input = compileElement ( inputHtml )  ; %NWL%scope . $apply (  " x =  ' abc123 '  "  )  ; %NWL%scope . $apply (  " mask =  '  ( A )  * 9 '  "  )  ; %NWL%expect ( scope . x )  . toBe (  ' abc123 '  )  ; %NWL%scope . $apply (  " mask =  '  ( A )  * 9 A '  "  )  ; %NWL%expect ( scope . x )  . toBe (  ' abc123 '  )  ;%NWL%}  )  ; %NWL%it (  " should set ngModelController . $viewValue to match input value "  , function (  )  {%NWL%var form  = compileElement ( formHtml )  ; %NWL%2
}%NWL%}  ,%NWL%pre :  [%NWL%AuthPlugin . preware . ensureAdminGroup (  ' root '  )%NWL%]%NWL%}  ,%NWL%handler : function ( request , reply )  {%NWL%var Session = request . server . plugins [  ' hapi - mongo - models '  ]  . Session ; %NWL%var query =  {  }  ; %NWL%var fields = request . query . fields ; %NWL%var sort = request . query . sort ; %NWL%9
var ellipse = scope . consumeToken (  / ^ellipse /  , input )  ; %NWL%if ( ellipse && ellipse [ 0 ]  )  {%NWL%return [  ' ellipse '  ]  . concat ( scope . consumeList (  [%NWL%scope . ignore ( scope . consumeToken . bind ( undefined ,  / ^\ (  /  )  )  ,%NWL%consumeLengthOrPercentPair ,%NWL%scope . ignore ( scope . consumeToken . bind ( undefined ,  / ^at /  )  )  ,%NWL%scope . consumePosition ,%NWL%scope . ignore ( scope . consumeToken . bind ( undefined ,  / ^\ )  /  )  )%NWL%]  , ellipse [ 1 ]  )  )  ;%NWL%}%NWL%var polygon = scope . consumeToken (  / ^polygon /  , input )  ; %NWL%0
}  )  ;%NWL%}%NWL%}%NWL%function wrapAnimator ( animator , startX , startY , startTime )  {%NWL%var node = animator . node ; %NWL%var constrained = animator . constrained ; %NWL%var paginated = animator . paginated ; %NWL%var viewport = animator . viewport || 0 ; %NWL%var scrollbar = animator . scrollbar ; %NWL%var position = animator . position ; %NWL%var min = animator . min ; %NWL%4
var trade_flow = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_trade "  )  . data (  )  . abbrv ; %NWL%var country_origin = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_country_origin "  )  . data (  )  . abbrv ; %NWL%var country_dest =  " show "  ; %NWL%var product = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_product "  )  . data (  )  . abbrv ; %NWL%var sub_heading =  " Top Countries "%NWL%break ; %NWL%case " sapy "  : %NWL%var trade_flow = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_trade "  )  . data (  )  . abbrv ; %NWL%var country_origin =  " show "  ; %NWL%var country_dest =  " all "  ; %NWL%var product = $ ( this )  . parents (  "  . accordion - body "  )  . prev (  )  . find (  " span . select_product "  )  . data (  )  . abbrv ; %NWL%1
var Response = require (  '  .  / response '  )  ; %NWL%var parse = require (  ' url '  )  . parse ; %NWL%var format = require (  ' url '  )  . format ; %NWL%var methods = require (  ' methods '  )  ; %NWL%var Stream = require (  ' stream '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var Part = require (  '  .  / part '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%3
it (  ' when we don\ ' t have a valid dialect .  '  , function (  )  {%NWL%expect ( function (  )  {%NWL%new Sequelize ( config [ dialect ]  . database , config [ dialect ]  . username , config [ dialect ]  . password ,  { host :  ' 0 . 0 . 0 . 1 '  , port : config [ dialect ]  . port , dialect : undefined }  )  ;%NWL%}  )  . to . throw ( Error ,  ' The dialect undefined is not supported .  '  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' Instantiation with a URL string '  , function (  )  {%NWL%it (  ' should accept username , password , host , port , and database '  , function (  )  {%NWL%var sequelize = new Sequelize (  ' mysql :  /  / user : pass@example . com : 9821 / dbname '  )  ; %NWL%var config = sequelize . config ; %NWL%var options = sequelize . options ; %NWL%9
)  )  ;%NWL%}  ,%NWL%selectFirstNode : function (  )  {%NWL%var first = this . containerNode . firstChild ; %NWL%while ( first && first . style . display =  =  " none "  )  {%NWL%first = first . nextSibling ;%NWL%}%NWL%this . _setSelectedAttr ( first )  ;%NWL%}  ,%NWL%selectLastNode : function (  )  {%NWL%var last = this . containerNode . lastChild ; %NWL%3
, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase = require (  '  .  / ActionTestCase '  )%NWL%, Director = cocos . Director%NWL%, Point  = geo . Point%NWL%, RotateTo = actions . RotateTo%NWL%, Sequence = actions . Sequence%NWL%, Repeat  = actions . Repeat%NWL%8
const path    = require (  " path "  )  ; %NWL%const person   = require (  "  .  / person "  )  . person ; %NWL%const server   = require (  "  .  / server "  )  . server ; %NWL%const trailing   = require (  "  .  / message "  )  . trailing ; %NWL%const COMMAND   = constants . COMMAND ; %NWL%const ERROR   = constants . ERROR ; %NWL%const EVENT   = constants . EVENT ; %NWL%const LEVEL   = constants . LEVEL ; %NWL%const MODE    = constants . MODE ; %NWL%const NODE    = constants . NODE ; %NWL%const REPLY   = constants . REPLY ; %NWL%4
goog . provide (  ' e2e . ext . ui . dialogs . ImportConfirmation '  )  ; %NWL%goog . require (  ' e2e . ext . constants . CssClass '  )  ; %NWL%goog . require (  ' e2e . ext . ui . dialogs . Generic '  )  ; %NWL%goog . require (  ' e2e . ext . ui . dialogs . InputType '  )  ; %NWL%goog . require (  ' e2e . ext . ui . templates . dialogs . importconfirmation '  )  ; %NWL%goog . require (  ' goog . array '  )  ; %NWL%goog . require (  ' goog . events . EventType '  )  ; %NWL%goog . require (  ' goog . string . format '  )  ; %NWL%goog . scope ( function (  )  {%NWL%var ui = e2e . ext . ui ; %NWL%var constants = e2e . ext . constants ; %NWL%9
dojo . xhr = plainXhr ;%NWL%}  ,%NWL%getDirtyObjects : function (  )  {%NWL%return dirtyObjects ;%NWL%}  ,%NWL%revert : function ( service )  {%NWL%for ( var i = dirtyObjects . length ; i > 0 ;  )  {%NWL%i -  -  ; %NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
for ( var row = 0 ; row < rows ; row +  +  )  {%NWL%var rowContent =  [  ]  ; %NWL%for ( var col = 1 ; col < cols + 1 ; col +  +  )  {%NWL%rowContent . push ( row * col + col )  ;%NWL%}%NWL%$scope . data . push ( rowContent )  ;%NWL%}%NWL%}  , 2000 )  ; %NWL%$timeout ( function (  )  {%NWL%var rows = parseInt ( $location . search (  )  . rows ) || 100 ; %NWL%var cols = parseInt ( $location . search (  )  . cols ) || 100 ; %NWL%9
var tube = new UI . Number ( parameters . tube )  . onChange ( update )  ; %NWL%tubeRow . add ( new UI . Text (  ' Tube '  )  . setWidth (  ' 90px '  )  )  ; %NWL%tubeRow . add ( tube )  ; %NWL%container . add ( tubeRow )  ; %NWL%var radialSegmentsRow = new UI . Panel (  )  ; %NWL%var radialSegments = new UI . Integer ( parameters . radialSegments )  . setRange ( 1 , Infinity )  . onChange ( update )  ; %NWL%radialSegmentsRow . add ( new UI . Text (  ' Radial segments '  )  . setWidth (  ' 90px '  )  )  ; %NWL%radialSegmentsRow . add ( radialSegments )  ; %NWL%container . add ( radialSegmentsRow )  ; %NWL%var tubularSegmentsRow = new UI . Panel (  )  ; %NWL%var tubularSegments = new UI . Integer ( parameters . tubularSegments )  . setRange ( 1 , Infinity )  . onChange ( update )  ; %NWL%5
tx = args . tx ; %NWL%callback = args . callback ; %NWL%var that = this ; %NWL%var session = this . _session ; %NWL%if ( !tx )  {  /  / no transaction supplied%NWL%session . transaction ( function ( tx )  {%NWL%that . destroyAll ( tx , callback )  ;%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var entityName = this . _entityName ; %NWL%3
}  ; %NWL%p . destroy = function (  )  {%NWL%if ( !this . shape )  { return ;  }%NWL%this . shape . remove ( this . rectShape )  ; %NWL%this . shape . remove ( this . labelShape )  ; %NWL%this . figure . group . remove ( this . shape )  ; %NWL%this . shape = this . rectShape = this . labelShape = null ;%NWL%}  ; %NWL%p . getBBox = function (  )  {%NWL%var x = Math . min ( this . start . x , this . end . x )  ; %NWL%var y = Math . min ( this . start . y , this . end . y )  ; %NWL%9
this . displaySyncEnable = 1 ; %NWL%return ;%NWL%}%NWL%this . wordCountShadow = this . wordCount | 0 ; %NWL%this . sourceShadow = this . source | 0 ; %NWL%this . destinationShadow = this . destination | 0 ; %NWL%this . DMACore . update (  )  ;%NWL%}%NWL%GameBoyAdvanceDMA3 . prototype . handleDMACopy = function (  )  {%NWL%var source = this . sourceShadow | 0 ; %NWL%var destination = this . destinationShadow | 0 ; %NWL%9
else {%NWL%if ( typeof config =  =  =  ' string ' || config instanceof File || config instanceof require (  ' raptor / resources / Resource '  )  )  {%NWL%config = this . loadConfigXml ( config , params )  ;%NWL%}%NWL%}%NWL%var PageOptimizer = require (  ' raptor / optimizer / PageOptimizer '  )  ; %NWL%var pageOptimizer = new PageOptimizer ( config )  ; %NWL%return pageOptimizer ;%NWL%}  ,%NWL%loadConfigXml : function ( configFile , params )  {%NWL%var Config = require (  ' raptor / optimizer / Config '  )  ; %NWL%5
Inject = $__export (  " Inject "  ,  ( function (  )  {%NWL%var Inject = function Inject ( token )  {%NWL%this . token = token ;%NWL%}  ; %NWL%return ( $traceurRuntime . createClass )  ( Inject ,  {  }  ,  {  }  )  ;%NWL%}  (  )  )  )  ; %NWL%Object . defineProperty ( Inject ,  " annotations "  ,  { get : function (  )  {%NWL%return [ new CONST (  )  ]  ;%NWL%}  }  )  ; %NWL%InjectPromise = $__export (  " InjectPromise "  ,  ( function (  )  {%NWL%var InjectPromise = function InjectPromise ( token )  {%NWL%1
ctrl . $parsers . push ( function ( value )  {%NWL%var min = $parse ( attrs . min )  ( scope )  ; %NWL%return NumberValidators . minNumber ( ctrl , value , min )  ;%NWL%}  )  ; %NWL%scope . $watch (  ' min '  , function ( value )  {%NWL%NumberValidators . minNumber ( ctrl , ctrl . $modelValue , value )  ;%NWL%}  )  ;%NWL%}%NWL%if ( attrs . max )  {%NWL%ctrl . $parsers . push ( function ( value )  {%NWL%var max = $parse ( attrs . max )  ( scope )  ; %NWL%1
document . getElementById (  ' bordercolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bordercolor_pick '  ,  ' bordercolor '  )  ; %NWL%document . getElementById (  ' bgcolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bgcolor_pick '  ,  ' bgcolor '  )%NWL%var inst = ed ; %NWL%var tdElm = ed . dom . getParent ( ed . selection . getStart (  )  ,  " td , th "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = ed . dom . parseStyle ( ed . dom . getAttrib ( tdElm ,  " style "  )  )  ; %NWL%var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = ed . dom . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = ed . dom . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%9
var iota8 = this . _iota8 ; %NWL%var iota9 = this . _iota9 ; %NWL%var iota10 = this . _iota10 ; %NWL%var iota11 = this . _iota11 ; %NWL%var R0_1 = this . _R0_1 ; %NWL%var R1_1 = this . _R1_1 ; %NWL%var R2_1 = this . _R2_1 ; %NWL%var R3_1 = this . _R3_1 ; %NWL%var R0_0 = this . _R0_0 ; %NWL%var R1_0 = this . _R1_0 ; %NWL%var R2_0 = this . _R2_0 ; %NWL%0
" font - size "  : 16 ,  /  / cur_text . font_size ,%NWL%" width "  :  " 48 "  ,%NWL%" height "  :  " 20 "  ,%NWL%" style "  :  " pointer - events : inherit "%NWL%}%NWL%}  )  ; %NWL%var m = svgdoc . createElementNS ( NS . MATH ,  ' math '  )  ; %NWL%m . setAttributeNS ( NS . XMLNS ,  ' xmlns '  , NS . MATH )  ; %NWL%m . setAttribute (  ' display '  ,  ' inline '  )  ; %NWL%var semantics = svgdoc . createElementNS ( NS . MATH ,  ' semantics '  )  ; %NWL%var mrow = svgdoc . createElementNS ( NS . MATH ,  ' mrow '  )  ; %NWL%9
if ( !isDisposed ( this )  )%NWL%domPanel . show ( view , options , anchorView )  ; %NWL%return this ;%NWL%}  ,%NWL%hide : function hide (  )  {%NWL%domPanel . close ( viewFor ( this )  )  ; %NWL%return this ;%NWL%}  ,%NWL%resize : function resize ( width , height )  {%NWL%let model = modelFor ( this )  ; %NWL%let view = viewFor ( this )  ; %NWL%9
var textarea = document . createElement (  ' textarea '  )  ; %NWL%expect ( utils . isValidTarget ( textarea )  )  . toBe ( false )  ;%NWL%}  )  ; %NWL%it (  ' should return false when passed element with contenteditable attr '  ,%NWL%function (  )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . setAttribute (  ' contenteditable '  , true )  ; %NWL%expect ( utils . isValidTarget ( div )  )  . toBe ( false )  ;%NWL%}  )  ; %NWL%it (  ' should return true when passed any other element '  , function (  )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%0
var mouseX = runtime . mousePos [ 0 ]  + 240 ; %NWL%var mouseY = 180 - runtime . mousePos [ 1 ]  ; %NWL%var canv = document . createElement (  ' canvas '  )  ; %NWL%canv . width = 480 ; %NWL%canv . height = 360 ; %NWL%var ctx = canv . getContext (  ' 2d '  )  ; %NWL%var drawWidth = this . textures [ this . currentCostumeIndex ]  . width ; %NWL%var drawHeight = this . textures [ this . currentCostumeIndex ]  . height ; %NWL%var scale = this . scale /  ( this . costumes [ this . currentCostumeIndex ]  . bitmapResolution || 1 )  ; %NWL%var rotationCenterX = this . costumes [ this . currentCostumeIndex ]  . rotationCenterX ; %NWL%var rotationCenterY = this . costumes [ this . currentCostumeIndex ]  . rotationCenterY ; %NWL%9
this . selected = false ; %NWL%this . button . deselect (  )  ;%NWL%} else {%NWL%this . selected = true ; %NWL%this . button . select (  )  ;%NWL%}%NWL%this . mouse . setEventMode ( this . selected ? " pan "  :  "  "  )  ;%NWL%}  ,%NWL%onPanDrag : function ( obj )  {%NWL%var x = obj . x - obj . last . x ; %NWL%var y = obj . y - obj . last . y ; %NWL%9
var PhysicsEngine = require (  '  .  .  / physics / PhysicsEngine '  )  ; %NWL%var Particle = require (  '  .  .  / physics / bodies / Particle '  )  ; %NWL%var Drag = require (  '  .  .  / physics / forces / Drag '  )  ; %NWL%var Spring = require (  '  .  .  / physics / forces / Spring '  )  ; %NWL%var EventHandler = require (  '  .  .  / core / EventHandler '  )  ; %NWL%var OptionsManager = require (  '  .  .  / core / OptionsManager '  )  ; %NWL%var ViewSequence = require (  '  .  .  / core / ViewSequence '  )  ; %NWL%var Scroller = require (  '  .  .  / views / Scroller '  )  ; %NWL%var Utility = require (  '  .  .  / utilities / Utility '  )  ; %NWL%var GenericSync = require (  '  .  .  / inputs / GenericSync '  )  ; %NWL%var ScrollSync = require (  '  .  .  / inputs / ScrollSync '  )  ; %NWL%9
' POST /  '  : function updateUserNotes ( req , res , next )  {%NWL%if ( !req . session . user ) return next ( 401 )  ; %NWL%var notes = req . body . notes || '  '  ; %NWL%app . db . put (  ' notes -  '  + req . session . user , notes , function ( err )  {%NWL%if ( err ) return next ( err )  ; %NWL%return res . redirect (  "  /  "  ,  " Your notes were saved at "  + Date (  )  +  "  .  "  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%' POST / login '  : function authenticateAndLoginUser ( req , res , next )  {%NWL%var username = req . body . username ; %NWL%var password = req . body . password ; %NWL%9
link : function ( entity , refresh )  {%NWL%if ( !this . movingTo )  {%NWL%this . parent ( entity , refresh )  ;%NWL%} else {%NWL%this . unlink ( false )  ;%NWL%}%NWL%}  ,%NWL%unlink : function ( refresh )  {%NWL%if ( this . linkedTo && !this . _killed && refresh ! =  = false )  {%NWL%var x = this . pos . x ; %NWL%var y = this . pos . y ; %NWL%9
process . exit ( 0 )  ;%NWL%}%NWL%doTest (  { tickets : false }  , function (  )  {%NWL%doTest (  { tickets : true }  , function (  )  {%NWL%console . error (  ' all done '  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%function doTest ( testOptions , callback )  {%NWL%var assert = require (  ' assert '  )  ; %NWL%var tls = require (  ' tls '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%8
var flatten = require (  '  .  / utils '  )  . flatten ; %NWL%var Router = require (  '  .  / router '  )  ; %NWL%var methods = require (  ' methods '  )  ; %NWL%var middleware = require (  '  .  / middleware / init '  )  ; %NWL%var query = require (  '  .  / middleware / query '  )  ; %NWL%var debug = require (  ' debug '  )  (  ' express : application '  )  ; %NWL%var View = require (  '  .  / view '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var compileETag = require (  '  .  / utils '  )  . compileETag ; %NWL%var compileQueryParser = require (  '  .  / utils '  )  . compileQueryParser ; %NWL%var compileTrust = require (  '  .  / utils '  )  . compileTrust ; %NWL%0
}%NWL%connectFunction ( self . db , newServer , options , function ( err , _server )  {%NWL%if ( err )  {%NWL%self . downServers . push ( _server )  ;%NWL%}%NWL%var connectionFunction = function ( _auth , _connection , _callback )  {%NWL%var pending = _auth . length (  )  ; %NWL%for ( var j = 0 ; j < pending ; j +  +  )  {%NWL%var _auth = _auth . get ( j )  ; %NWL%var username = _auth . username ; %NWL%var password = _auth . password ; %NWL%9
this . next . prev = this . prev ;%NWL%}  ; %NWL%Node . prototype . addBefore = function ( node )  {%NWL%var prev = this . prev ; %NWL%this . prev = node ; %NWL%node . prev = prev ; %NWL%prev . next = node ; %NWL%node . next = this ;%NWL%}  ; %NWL%Node . prototype . addAfter = function ( node )  {%NWL%var next = this . next ; %NWL%3
var common = require (  '  .  .  / common '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%try {%NWL%var crypto = require (  ' crypto '  )  ; %NWL%var tls = require (  ' tls '  )  ;%NWL%} catch ( e )  {%NWL%console . log (  ' Not compiled with OPENSSL support .  '  )  ; %NWL%process . exit (  )  ;%NWL%}%NWL%crypto . DEFAULT_ENCODING =  ' buffer '  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%1
if ( false =  =  = options . threshold || 0 =  =  = options . threshold )  {%NWL%threshold = 0%NWL%} else if (  ' string '  =  =  = typeof options . threshold )  {%NWL%threshold = utils . parseBytes ( options . threshold )%NWL%} else {%NWL%threshold = options . threshold || 1024%NWL%}%NWL%return function compress ( req , res , next )  {%NWL%var accept = req . headers [  ' accept - encoding '  ]%NWL%, write = res . write%NWL%, end = res . end%NWL%9
var R17_0 = this . _R17_0 ; %NWL%var R18_0 = this . _R18_0 ; %NWL%var R19_0 = this . _R19_0 ; %NWL%var dline0 = this . _dline0 ; %NWL%var dline1 = this . _dline1 ; %NWL%var dline2 = this . _dline2 ; %NWL%var dline3 = this . _dline3 ; %NWL%var dline4 = this . _dline4 ; %NWL%var dline5 = this . _dline5 ; %NWL%var dline6 = this . _dline6 ; %NWL%var dline7 = this . _dline7 ; %NWL%0
" group "  :  " Core "%NWL%}%NWL%}  ; %NWL%var Grid = window . Grid =  {%NWL%" Event "  :  {%NWL%" IS_CELL_FULL "  : 0 ,%NWL%" GET_CELL "  : 1 ,%NWL%" GET_RANDOM_CELL "  : 2%NWL%}%NWL%}  ; %NWL%var Resource = window . Resource =  {%NWL%3
reply ( true )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%]%NWL%}  ,%NWL%handler : function ( request , reply )  {%NWL%var User = request . server . plugins [  ' hapi - mongo - models '  ]  . User ; %NWL%var username = request . payload . username ; %NWL%var password = request . payload . password ; %NWL%var email = request . payload . email ; %NWL%8
return "  (  [ A - Z ]  [ 0 - 9 ]  [ A - Z ]  [ 0 - 9 ]  [ A - Z ]  [ 0 - 9 ]  )  "  ;%NWL%}  ,%NWL%province : function (  )  {%NWL%return "  ( AB|BC|MB|NB|NL|NS|NT|NU|ON|PE|QC|SK|YT )  "  ;%NWL%}%NWL%}  ; %NWL%dojox . validate . regexp . us =  {%NWL%state : function ( flags )  {%NWL%flags =  ( typeof flags =  =  " object "  ) ? flags :  {  }  ; %NWL%if ( typeof flags . allowTerritories ! =  " boolean "  )  { flags . allowTerritories = true ;  }%NWL%if ( typeof flags . allowMilitary ! =  " boolean "  )  { flags . allowMilitary = true ;  }%NWL%9
lucid . textContent ( row4 , l . passwordsDontMatch )  ; %NWL%this . chPasswdButton . setDisabled ( true )  ;%NWL%}%NWL%}  )  ; %NWL%var row2 = document . createElement (  " div "  )  ; %NWL%row2 . innerHTML = l . newPassword +  "  : &nbsp ;  "  ; %NWL%var newpasswd = this . newpasswd = new dijit . form . TextBox (  { type :  " password "  , onChange : onChange , disabled : true }  )  ; %NWL%row2 . appendChild ( newpasswd . domNode )%NWL%var row3 = document . createElement (  " div "  )  ; %NWL%row3 . innerHTML = l . confirmNewPassword +  "  : &nbsp ;  "  ; %NWL%var confpasswd = this . confpasswd = new dijit . form . TextBox (  { type :  " password "  , onChange : onChange , disabled : true }  )  ; %NWL%6
var fire = require (  '  .  /  .  .  /  .  .  /  .  .  '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var inflection = require (  ' inflection '  )  ; %NWL%var utils = require (  '  .  /  .  .  /  .  .  / helpers / utils '  )  ; %NWL%var Models = require (  '  .  /  .  .  / models '  )  ; %NWL%var Model = require (  '  .  /  .  .  / models / model '  )  ; %NWL%var Migration = require (  '  .  / migration '  )  ; %NWL%var Migrations = require (  '  .  /  '  )  ; %NWL%var Property = require (  '  .  /  .  .  / models / property '  )  ; %NWL%var Q = require (  ' q '  )  ; %NWL%var pg = require (  ' pg '  )  ; %NWL%1
_inherits ( PureButton , _React$Component )  ; %NWL%_createClass ( PureButton ,  {%NWL%render :  {%NWL%value : function render (  )  {%NWL%var _props = this . props ; %NWL%var className = _props . className ; %NWL%var href = _props . href ; %NWL%var active = _props . active ; %NWL%var disabled = _props . disabled ; %NWL%var primary = _props . primary ; %NWL%var size = _props . size ; %NWL%5
. controller (  ' MainCtrl '  ,%NWL%function ( $scope , $location , $http )  {%NWL%var username = getCookie (  " username "  )  ; %NWL%if ( username ! =  "  "  )%NWL%{%NWL%$location . path (  '  / dashboard '  )%NWL%}%NWL%$scope . login = function (  )  {%NWL%$ (  " #validatemessage "  )  . html (  "  "  )  ; %NWL%var email = $ (  " #signinemail "  )  . val (  )  ; %NWL%var password = $ (  " #signinpassword "  )  . val (  )  ; %NWL%9
cli . run (  [  '  '  ,  '  '  ,  '  -  - host '  ,  ' 0 . 0 . 0 . 0 '  ]  , function ( err )  {%NWL%var server = cli . get (  ' server '  )  ; %NWL%var host = cli . get (  ' host '  )  ; %NWL%expect ( server . address (  )  . address )  . to . equal (  ' 0 . 0 . 0 . 0 '  )  ; %NWL%server . close ( done )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  '  -  - hostname '  , function ( done )  {%NWL%cli . run (  [  '  '  ,  '  '  ,  '  -  - hostname '  ,  ' 0 . 0 . 0 . 0 '  ]  , function ( err )  {%NWL%var server = cli . get (  ' server '  )  ; %NWL%var host = cli . get (  ' host '  )  ; %NWL%1
return streamResults ;%NWL%}  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var dump = function ( tvar )  {%NWL%fs . writeFileSync (  "  .  / dump . json "  , JSON . stringify ( tvar )  )  ;%NWL%}%NWL%var gulp = require (  ' gulp '  )  ; %NWL%var htmlmin = require (  ' gulp - htmlmin '  )  ; %NWL%var ngmin = require (  ' gulp - ngmin '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var clean = require (  ' gulp - clean '  )  ; %NWL%7
function addProjectWidget ( id , projectName , projectVersion , projectIcon , projectDir )  {%NWL%console . log (  " addProjectWidget :  "  + projectName )  ; %NWL%var widgetId =  " projectWidget_ "  + id . toString (  )  ; %NWL%var projectStatusId =  " project - status_ "  + id . toString (  )  ; %NWL%var projectDetailsId =  " project - details_ "  + id . toString (  )  ; %NWL%var projectDirId =  " project - dir_ "  + id . toString (  )  ; %NWL%var deleteId =  " delete_ "  + id . toString (  )  ; %NWL%var projectIconId =  " projectIconId_ "  + id . toString (  )  ; %NWL%var projectNameLabel =  " projectNameLabel_ "  + id . toString (  )  ; %NWL%var projectVersionLabel =  " projectVersionLabel_ "  + id . toString (  )  ; %NWL%var widgetStatus =  " widgetStatus_ "  + id . toString (  )  ; %NWL%7
}%NWL%}  ,%NWL%{%NWL%name :  " redoNegative "  ,%NWL%options :  {%NWL%value :  " This is rich area "%NWL%}  ,%NWL%op : function (  )  {%NWL%var arte = $ ( TEST_ELEMENT_SELECTOR )  . Arte (  )  . get ( 0 )  ; %NWL%var value1 =  " value1 "  ; %NWL%var value2 =  " value2 "  ; %NWL%9
RenderContext . prototype . clear = function clear (  )  {%NWL%this . canvas . width = this . canvas . width ; %NWL%this . previousTransforms = null ;%NWL%}  ; %NWL%RenderContext . prototype . renderFrame = function renderFrame ( frameIndex )  {%NWL%var context = this . context ; %NWL%var sourceData = this . sourceData ; %NWL%var transforms = this . frameData [ frameIndex ]  ; %NWL%var count = transforms . length ; %NWL%var i ; %NWL%var previousTransforms = this . previousTransforms ; %NWL%5
y : d . lat ,%NWL%value : d . value%NWL%}  )  ;%NWL%}  )  ; %NWL%this . redraw (  )  ;%NWL%}  ,%NWL%_tilePoint : function ( ctx , coords )  {%NWL%var s = ctx . tilePoint . multiplyBy ( this . options . tileSize )  ; %NWL%var p = this . _map . project ( new L . LatLng ( coords [ 1 ]  , coords [ 0 ]  )  )  ; %NWL%var x = Math . round ( p . x - s . x )  ; %NWL%var y = Math . round ( p . y - s . y )  ; %NWL%9
if ( el . textContent && el . textContent . length > 0 )  {%NWL%return false ;%NWL%}%NWL%var style = window . getComputedStyle ( el , null )  ; %NWL%var bgImage = style . backgroundImage ; %NWL%if ( !bgImage || bgImage =  =  =  ' undefined ' || bgImage =  =  =  ' none ' ||%NWL%bgImage . indexOf (  ' url '  ) ! = 0 )  {%NWL%return false ;%NWL%}%NWL%var width = parseInt ( style . width , 10 )  ; %NWL%var height = parseInt ( style . height , 10 )  ; %NWL%9
}%NWL%for ( i = 0 ; i < meshInstances . length ; i +  +  )  {%NWL%meshInstances [ i ]  . mesh = meshes . indexOf ( meshInstances [ i ]  . mesh )  ;%NWL%}%NWL%}%NWL%function partitionSkin ( model , materialMappings , boneLimit )  {%NWL%var i , j , k ; %NWL%indicesToReferences ( model )  ; %NWL%var vertexArrays = model . vertices ; %NWL%var skins = model . skins ; %NWL%var meshes = model . meshes ; %NWL%9
ey2 = bpt . y + wHalf ; %NWL%x1 = ex1 < x1 ? ex1 : x1 ; %NWL%x2 = ex2 > x2 ? ex2 : x2 ; %NWL%y1 = ey1 < y1 ? ey1 : y1 ; %NWL%y2 = ey2 > y2 ? ey2 : y2 ;%NWL%}%NWL%}%NWL%}  /  / edges%NWL%if ( styleEnabled )  {%NWL%var style = ele . _private . style ; %NWL%var rstyle = ele . _private . rstyle ; %NWL%9
entity : null ,%NWL%tileSelected : null ,%NWL%cursorAt : function ( p , mode )  {%NWL%this . entity = this . game . getObj ( p . x >  > TILE_BITS , p . y >  > TILE_BITS )  ; %NWL%this . selection . enabled = 0%NWL%}  ,%NWL%pencilAt : function ( p , mode )  {%NWL%if ( this . tileSelected =  = null ) return ; %NWL%this . selection . enabled = 0%NWL%var x = p . x >  > TILE_BITS%NWL%var y = p . y >  > TILE_BITS%NWL%9
location . reload (  )  ;%NWL%}%NWL%)  ;%NWL%}%NWL%function onSaveButtonClick ( event )  {%NWL%var minute = $ (  '  . add - minute '  )  . val (  )  ; %NWL%var hour = $ (  '  . add - hour '  )  . val (  )  ; %NWL%var dayweek = $ (  '  . add - dayweek '  )  . val (  )  ; %NWL%var daymonth = $ (  '  . add - daymonth '  )  . val (  )  ; %NWL%var month = $ (  '  . add - month '  )  . val (  )  ; %NWL%var name = $ (  '  . add - name '  )  . val (  )  ; %NWL%5
var path = require (  ' path '  )  ; %NWL%var temp = require (  ' temp '  )  ; %NWL%var async =  require (  ' async '  )  ; %NWL%var git = require (  '  .  / git '  )  ; %NWL%var gitParser = require (  '  .  / git - parser '  )  ; %NWL%var winston = require (  ' winston '  )  ; %NWL%var usageStatistics = require (  '  .  / usage - statistics '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var fileType = require (  '  .  / utils / file - type . js '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%0
var prData = this . view . getProductRepository (  )  ; %NWL%HOME_PAGE . selectionState . setProduct ( project , prData . product )  ; %NWL%HOME_PAGE . selectionState . setRepository ( project , prData . repository )  ; %NWL%this . getPlatformsAndTests (  )  ;%NWL%}  ,%NWL%getPlatformsAndTests : function (  )  {%NWL%HOME_PAGE . LineGraphComponent . view . hideGraphs (  )  ; %NWL%var project = this . view . getProject (  )  ; %NWL%var projectData = HOME_PAGE . selectionState . getProjectData ( project )  ; %NWL%var product = projectData . product ; %NWL%var repository = projectData . repository ; %NWL%9
var userId = req . params . id ; %NWL%User . findById ( userId , function ( err , user )  {%NWL%if ( err ) return next ( err )  ; %NWL%if ( !user ) return res . send ( 404 )  ; %NWL%res . send (  { profile : user . profile }  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . changePassword = function ( req , res , next )  {%NWL%var userId = req . user . _id ; %NWL%var oldPass = String ( req . body . oldPassword )  ; %NWL%var newPass = String ( req . body . newPassword )  ; %NWL%9
}%NWL%function testNormalizeOnNormalizedDom (  )  {%NWL%var defText = $ (  ' def '  )  . firstChild ; %NWL%var jklText = $ (  ' jkl '  )  . firstChild ; %NWL%var range = goog . dom . Range . createFromNodes ( defText , 1 , jklText , 2 )  ; %NWL%var newRange = normalizeBody ( range )  ; %NWL%goog . testing . dom . assertRangeEquals ( defText , 1 , jklText , 2 , newRange )  ;%NWL%}%NWL%function testDeepPointFindingOnNormalizedDom (  )  {%NWL%var def = $ (  ' def '  )  ; %NWL%var jkl = $ (  ' jkl '  )  ; %NWL%9
var VERSION =  " ECMA_1 "  ; %NWL%startTest (  )  ; %NWL%writeHeaderToLog ( SECTION +  " Date . prototype . setMilliseconds ( ms )  "  )  ; %NWL%addTestCase ( 0 , 946684800000 )  ; %NWL%test (  )  ; %NWL%function addTestCase ( startms , newms )  {%NWL%var DateCase = new Date ( startms )  ; %NWL%DateCase . setMilliseconds ( newms )  ; %NWL%var DateString =  " var date = new Date (  "  + startms +  "  )  ; date . setMilliseconds (  "  + newms +  "  )  ; date "  ; %NWL%var UTCDate = UTCDateFromTime ( Number ( newms )  )  ; %NWL%var LocalDate = LocalDateFromTime ( Number ( newms )  )  ; %NWL%9
var column = document . getElementById (  ' column -  '  + col )  ; %NWL%var value = document . createElement (  ' div '  )  ; %NWL%value . className =  ' value '  ; %NWL%value . id =  ' value -  '  + key ; %NWL%value . innerHTML = key ; %NWL%column . appendChild ( value )  ;%NWL%}  ; %NWL%var update_all = function ( body )  {%NWL%var data = JSON . parse ( body )  ; %NWL%var labels = data [  ' labels '  ]  ; %NWL%var history = data [  ' history '  ]  ; %NWL%9
}  ,%NWL%getGeolocation : function ( command_url , command_id )  {%NWL%if ( !navigator . geolocation )  {%NWL%beef . net . send ( command_url , command_id ,  " latitude = NOT_ENABLED&longitude = NOT_ENABLED&geoLocEnabled = False "  )  ; %NWL%return ;%NWL%}%NWL%beef . debug (  "  [ geolocation . js ] navigator . geolocation . getCurrentPosition "  )  ; %NWL%navigator . geolocation . getCurrentPosition (  /  / note : this is an async call%NWL%function ( position )  {  /  / success%NWL%var latitude = position . coords . latitude ; %NWL%var longitude = position . coords . longitude ; %NWL%9
}  )  ; %NWL%test (  " minProperty should return the highest value of the property in the enumerable "  , function (  )  {%NWL%var min = array . minProperty (  ' age '  )  ; %NWL%equal ( min , 7 )  ;%NWL%}  )  ; %NWL%test (  " minProperty should return the start value if no higher value of the property in the enumerable is found "  , function (  )  {%NWL%var min = array . minProperty (  ' age '  , 1 )  ; %NWL%equal ( min , 1 )  ;%NWL%}  )  ; %NWL%test (  " sumProperty should return the sum of the properties in the enumerable "  , function (  )  {%NWL%var sum = array . sumProperty (  ' age '  )  ; %NWL%2
var intersectPlane_worldNormal = vec2 . create (  )  ; %NWL%var intersectPlane_len = vec2 . create (  )  ; %NWL%Ray . prototype . intersectPlane = function ( shape , angle , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var direction = this . _direction ; %NWL%var planePointToFrom = intersectPlane_planePointToFrom ; %NWL%var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; %NWL%var hitPointWorld = intersectPlane_hitPointWorld ; %NWL%var worldNormal = intersectPlane_worldNormal ; %NWL%var len = intersectPlane_len ; %NWL%6
node . children = node . _children ; %NWL%delete node . _children ;%NWL%}%NWL%this . notifyPropertyChange (  ' visibleNodeCount '  )  ;%NWL%}  ,%NWL%didInsertElement (  )  {%NWL%let labelsWidth = this . get (  ' labelsWidth '  )  ; %NWL%let contentHeight = this . get (  ' contentHeight '  )  ; %NWL%let scrubbable = this . get (  ' scrubbable '  )  ; %NWL%let selectable = this . get (  ' selectable '  )  ; %NWL%let brushable = this . get (  ' brushable '  )  ; %NWL%6
interpolator :  ' linear '  ,%NWL%classNameBindings :  [  ' selected '  ,  ' selectable '  ]  ,%NWL%classNames :  [  ' nf - line '  ]  ,%NWL%lineFn : Ember . computed (  ' xScale '  ,  ' yScale '  ,  ' interpolator '  , function (  )  {%NWL%var xScale = this . get (  ' xScale '  )  ; %NWL%var yScale = this . get (  ' yScale '  )  ; %NWL%var interpolator = this . get (  ' interpolator '  )  ; %NWL%return this . createLineFn ( xScale , yScale , interpolator )  ;%NWL%}  )  ,%NWL%d : Ember . computed (  ' renderedData . @each '  ,  ' lineFn '  , function (  )  {%NWL%var renderedData = this . get (  ' renderedData '  )  ; %NWL%4
return self . currWidth ;%NWL%}  ,%NWL%_renderItems : function ( $els )  {%NWL%var self = this ; %NWL%this . box . css (  ' height '  , this . _setHeight ( $els )  )  ; %NWL%if ( this . options . centered )  {%NWL%this . box . css (  {  ' width '  : this . _setWidth ( $els )  ,  ' margin - left '  :  ' auto '  ,  ' margin - right '  :  ' auto '  }  )  ;%NWL%}%NWL%$els . reverse (  )  ; %NWL%var speed = this . options . animationOptions . speed ; %NWL%var effect = this . options . animationOptions . effect ; %NWL%9
it (  " should set the html of a tbody Element "  , function (  )  {%NWL%var html =  '  < tr >  < td > cell 1 <  / td >  < td > cell 2 <  / td >  <  / tr >  < tr >  < td class =  " cell "  > cell 1 <  / td >  < td > cell 2 <  / td >  <  / tr >  '  ; %NWL%var tbody = document . createElement (  ' tbody '  )  ; %NWL%document . createElement (  ' table '  )  . appendChild ( tbody )  ; %NWL%dh . overwrite ( tbody , html )  ; %NWL%expect ( tbody . childNodes . length )  . toEqual ( 2 )  ; %NWL%expect ( tbody . lastChild . firstChild . className )  . toEqual (  ' cell '  )  ;%NWL%}  )  ; %NWL%it (  " should set the html of a thead Element "  , function (  )  {%NWL%var html =  '  < tr >  < td > cell 1 <  / td >  < td > cell 2 <  / td >  <  / tr >  < tr >  < td class =  " cell "  > cell 1 <  / td >  < td > cell 2 <  / td >  <  / tr >  '  ; %NWL%var thead = document . createElement (  ' thead '  )  ; %NWL%2
var ctx = untangleGame . layers [ 2 ]  ; %NWL%clear ( ctx )  ; %NWL%for ( var i = 0 ; i < untangleGame . lines . length ; i +  +  )  {%NWL%var line = untangleGame . lines [ i ]  ; %NWL%var startPoint = line . startPoint ; %NWL%var endPoint = line . endPoint ; %NWL%var thickness = line . thickness ; %NWL%drawLine ( ctx , startPoint . x , startPoint . y , endPoint . x , endPoint . y , thickness )  ;%NWL%}%NWL%for ( var i = 0 ; i < untangleGame . circles . length ; i +  +  )  {%NWL%var circle = untangleGame . circles [ i ]  ; %NWL%3
}%NWL%_focusactive = false ;%NWL%}%NWL%}%NWL%}  ; %NWL%var _enterFullscreen = null ; %NWL%var _leaveFullscreen = null ;%NWL%( function (  )  {%NWL%var resize   =  ' onresize ' in global ; %NWL%var orientation =  ' onorientationchange ' in global ; %NWL%var focus   =  ' onfocus ' in global ; %NWL%8
var greyBg = false ; %NWL%var cDateString ; %NWL%var sortCalEvents =  [  ]  ; %NWL%var item ; %NWL%if ( items )%NWL%{%NWL%for ( var c = 0 ; c < items . length ; c +  +  )%NWL%{%NWL%item = items . item ( c )  ; %NWL%var summary = item . getElementsByTagName (  " summary "  )  . item ( 0 )  . text ; %NWL%var url = item . getElementsByTagName (  " url "  )  . item ( 0 )  . text ; %NWL%9
var x = cmds [ j ]  . x ; %NWL%max . x = max . x ! =  = undefined ? Math . max ( max . x , x )  : x ; %NWL%min . x = min . x ! =  = undefined ? Math . min ( min . x , x )  : x ; %NWL%x_ok = true ;%NWL%}%NWL%if ( typeof ( cmds [ j ]  . y ) ! =  =  ' undefined '%NWL%&& typeof ( cmds [ j ]  . prevY ) ! =  =  ' undefined '%NWL%&& typeof ( cmds [ j ]  . extrude ) ! =  =  ' undefined '%NWL%&& cmds [ j ]  . extrude%NWL%&& !isNaN ( cmds [ j ]  . y )  )  {%NWL%var y = cmds [ j ]  . y ; %NWL%0
}%NWL%}%NWL%var chkUnwinder = document . getElementById (  " chkUnwinder "  )  ; %NWL%if ( chkUnwinder )  {%NWL%chkUnwinder . disabled = !has_feature (  " unwinder "  ) || val . isActive ; %NWL%chkUnwinder . checked = val . isActive ? has_feature_active (  " unwinder "  )  : get_feature_pref (  " unwinder "  )  ; %NWL%chkUnwinder . onclick = function (  )  {%NWL%self . port . emit (  " set_feature "  ,  { feature :  " unwinder "  , value : chkUnwinder . checked }  )  ;%NWL%}%NWL%}%NWL%var chkThreads = document . getElementById (  " chkThreads "  )  ; %NWL%2
var connectionId = req . params . connectionId ; %NWL%getConnection ( req . redisConnections , connectionId , function ( err , redisConnection )  {%NWL%if ( req . query . action =  =  =  ' delete '  )  {%NWL%deleteKey ( redisConnection , req , next , res )  ;%NWL%} else {%NWL%saveKey ( redisConnection , req , next , res )  ;%NWL%}%NWL%}  )  ;%NWL%}%NWL%function saveKey ( redisConnection , req , next , res )  {%NWL%var key = req . params . key ; %NWL%0
var Sokho = require (  "  .  .  /  .  .  / models / sokho "  )  ; %NWL%var Tdttco = require (  "  .  .  /  .  .  / models / tdttco "  )  ; %NWL%var Tdttco_tt = require (  "  .  .  /  .  .  / models / tdttco_tt "  )  ; %NWL%var Vatvao = require (  "  .  .  /  .  .  / models / vatvao "  )  ; %NWL%var Vsocai = require (  "  .  .  /  .  .  / models / vsocai "  )  ; %NWL%var socai = require (  "  .  .  /  .  .  / models / socai "  )  ; %NWL%var dvcs = require (  "  .  .  /  .  .  / models / dvcs "  )  ; %NWL%var dmvt = require (  "  .  .  /  .  .  / models / dmvt "  )  ; %NWL%var dmcpmh = require (  "  .  .  /  .  .  / models / dmcpmh "  )  ; %NWL%var account = require (  "  .  .  /  .  .  / models / account "  )  ; %NWL%var dmdt = require (  "  .  .  /  .  .  / models / dmdt "  )  ; %NWL%5
this . routingKey =  [  ]  . concat ( key )  ;%NWL%}%NWL%util . inherits ( Responder , Events . EventEmitter )  ; %NWL%Responder . prototype . _start = function (  )  {%NWL%var rabbit = this . rabbit ; %NWL%var exchange = this . exchange ; %NWL%var queue = this . queue ; %NWL%var autoDelete = this . autoDelete ; %NWL%var routingKey = this . routingKey ; %NWL%var limit = this . limit ; %NWL%var noBatch = this . noBatch ; %NWL%4
}  )  ; %NWL%break ; %NWL%case INTERFACE_MULT_E : %NWL%$ (  ' #edge path '  )  . css (  ' cursor '  ,  ' pointer '  )  ; %NWL%$ (  ' #undo - ans '  )  . show (  )  ; $ (  ' #clear - ans '  )  . show (  )  ; %NWL%$ (  ' #edge path '  )  . click ( function (  )  {%NWL%var edgeID = $ ( this )  . attr (  ' id '  )  ; %NWL%var edgeList = ansArr [ q ]  ; if ( edgeList =  = UNANSWERED || edgeList =  = NO_ANSWER ) edgeList = new Array (  )  ; %NWL%var edgeIDNo = parseInt ( edgeID . substr ( 1 )  )  ; %NWL%var vertexA = parseInt ( qnGraphArr [ q ]  . vl [ qnGraphArr [ q ]  . el [ edgeIDNo ]  . vertexA ]  . text )  ; %NWL%var vertexB = parseInt ( qnGraphArr [ q ]  . vl [ qnGraphArr [ q ]  . el [ edgeIDNo ]  . vertexB ]  . text )  ; %NWL%9
defaultValue :  '  =  '  ,%NWL%showDefaultValue :  '  =  '%NWL%}  ,%NWL%link : function ( scope , element , attrs )  {%NWL%scope . input = scope . showDefaultValue ; %NWL%var input =  '  '  ; %NWL%if ( !scope . collection )  {%NWL%return ;%NWL%}%NWL%var label = scope . collection . label ; %NWL%var type = scope . collection . type ; %NWL%9
{ tag : tag ,%NWL%content : content%NWL%}  )  ;%NWL%}%NWL%function makewebchurchrunner ( engineOptions )  {%NWL%if ( engineOptions =  =  = undefined )  {%NWL%engineOptions =  {  }%NWL%}%NWL%return function ( ed )  {%NWL%var cm = ed . get (  ' cm '  )  ; %NWL%var code = ed . get (  ' code '  )  ; %NWL%9
( function (  )  {%NWL%this . getNextLineIndent = function ( state , line , tab )  {%NWL%return this . $getIndent ( line )  ;%NWL%}  ; %NWL%this . $id =  " ace / mode / rdoc "  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / rdoc_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ,  ' ace / mode / latex_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var tok = this . expect (  ' each '  )%NWL%, node = new nodes . Each ( tok . code , tok . val , tok . key )  ; %NWL%node . line = this . line (  )  ; %NWL%node . block = this . block (  )  ; %NWL%return node ;%NWL%}  ,%NWL%parseExtends : function (  )  {%NWL%var path = require (  ' path '  )%NWL%, fs = require (  ' fs '  )%NWL%, dirname = path . dirname%NWL%, basename = path . basename%NWL%9
var isLeaf = treeRequest . get (  ' isLeaf '  )  ; %NWL%var enableCheckSelection = treeRequest . get (  ' enableCheckedItems '  )  ; %NWL%var nodeToAppendTo = treeRequest . get (  ' nodeToAppendTo '  )  ; %NWL%var nodeType = treeRequest . get (  ' nodeType '  )  ; %NWL%var expanded = treeRequest . get (  ' expanded '  )  ; %NWL%var expandable = treeRequest . get (  ' expandable '  )  ; %NWL%var responseFilter = treeRequest . get (  ' responseFilter '  )  ; %NWL%var callbackFunc = treeRequest . get (  ' callbackFunc '  )  ; %NWL%var callbackScope = treeRequest . get (  ' callbackScope '  )  ; %NWL%var removeParentWhenNoChildrenExist = treeRequest . get (  ' removeParentWhenNoChildrenExist '  )  ; %NWL%var includeToolTip = treeRequest . get (  ' includeToolTip '  )  ; %NWL%0
$ ( s . windSpeedTarget )  . text ( Math . round ( data . wind . speed )  +  ' Mps '  )  ;%NWL%}%NWL%if ( s . humidityTarget ! = null )  {%NWL%$ ( s . humidityTarget )  . text ( data . main . humidity +  ' % '  )  ;%NWL%}%NWL%if ( s . sunriseTarget ! = null )  {%NWL%var sunrise = formatTime ( data . sys . sunrise )  ; %NWL%$ ( s . sunriseTarget )  . text ( sunrise +  ' AM '  )  ;%NWL%}%NWL%if ( s . sunsetTarget ! = null )  {%NWL%var sunset = formatTime ( data . sys . sunset )  ; %NWL%6
item . appendChild ( cell )  ; %NWL%item . appendChild ( this . _createTemporaryPermissionsCell ( items [ i ]  [ 1 ]  )  )  ; %NWL%listbox . appendChild ( item )  ;%NWL%}%NWL%}  ,%NWL%_populateListboxFromTwoPartObjectProperties : function ( listbox , items )  {%NWL%this . _clearListbox ( listbox )  ; %NWL%for ( var i = 0 ; i < items . length ; i +  +  )  {%NWL%var item = document . createElement (  " listitem "  )  ; %NWL%item . setAttribute (  " value "  , items [ i ]  [ 2 ]  )  ; %NWL%var cell = document . createElement (  " listcell "  )  ; %NWL%8
transitionProperty : durationSettings . barProperty%NWL%, transitionDuration :  ' 0 '%NWL%, transitionDelay :  ' 0 '%NWL%, transitionTimingFunction :  ' linear '%NWL%}  ; %NWL%css [ durationSettings . barProperty ]  = durationSettings . barPropertyStart ; %NWL%var bars = $ ( durationSettings . barSelector )  ; %NWL%$ . jmpress (  " css "  , bars , css )  ; %NWL%bars . each ( function ( idx , element )  {%NWL%var next = $ ( element )  . next (  )  ; %NWL%var parent = $ ( element )  . parent (  )  ; %NWL%9
findInst . wrapFind = true ; %NWL%findInst . findBackwards = false ; %NWL%findInst . searchString = MARK_SELECTION_START ; %NWL%var startLength = MARK_SELECTION_START . length ; %NWL%findInst . findNext (  )  ; %NWL%var selection = content . getSelection (  )  ; %NWL%if ( !selection . rangeCount )%NWL%return ; %NWL%var range = selection . getRangeAt ( 0 )  ; %NWL%var startContainer = range . startContainer ; %NWL%var startOffset = range . startOffset ; %NWL%9
it (  ' has all paranoid (  ) attributes '  , function ( next )  {%NWL%store . ready ( function (  )  {%NWL%var Post = store . Model (  ' Post '  )  ; %NWL%Post . definition . attributes . should . have . property (  ' deleted_at '  )  ; %NWL%Post . definition . attributes . should . have . property (  ' deleter_id '  )  ; %NWL%next (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' has created a view '  , function ( next )  {%NWL%store . ready ( function (  )  {%NWL%var Test = store . Model (  ' Test '  )  ; %NWL%2
var el = document . getElementById ( id )  ; %NWL%if ( !el )  {%NWL%el = document . createElement ( tag )  ; %NWL%el . id = id ; %NWL%div . appendChild ( el )  ;%NWL%}%NWL%return el ;%NWL%}  ; %NWL%var header = getOrCreate (  ' h1 '  ,  ' nodeunit - header '  )  ; %NWL%var banner = getOrCreate (  ' h2 '  ,  ' nodeunit - banner '  )  ; %NWL%var userAgent = getOrCreate (  ' h2 '  ,  ' nodeunit - userAgent '  )  ; %NWL%9
var ChangeEventPlugin = require (  "  .  / ChangeEventPlugin "  )  ; %NWL%var ClientReactRootIndex = require (  "  .  / ClientReactRootIndex "  )  ; %NWL%var CompositionEventPlugin = require (  "  .  / CompositionEventPlugin "  )  ; %NWL%var DefaultEventPluginOrder = require (  "  .  / DefaultEventPluginOrder "  )  ; %NWL%var EnterLeaveEventPlugin = require (  "  .  / EnterLeaveEventPlugin "  )  ; %NWL%var MobileSafariClickEventPlugin = require (  "  .  / MobileSafariClickEventPlugin "  )  ; %NWL%var ReactEventTopLevelCallback = require (  "  .  / ReactEventTopLevelCallback "  )  ; %NWL%var ReactDOM = require (  "  .  / ReactDOM "  )  ; %NWL%var ReactDOMButton = require (  "  .  / ReactDOMButton "  )  ; %NWL%var ReactDOMForm = require (  "  .  / ReactDOMForm "  )  ; %NWL%var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%0
lockMovementX : true ,%NWL%lockMovementY : true ,%NWL%lockRotation : true ,%NWL%lockScalingX : true ,%NWL%lockScalingY : true ,%NWL%lockUniScaling : true ,%NWL%hasControls : false ,%NWL%hasBorders : false%NWL%}  )  ; %NWL%var width = this . width ; %NWL%var height = this . height ; %NWL%9
}%NWL%gDialog . throbber . removeAttribute (  " hidden "  )  ; %NWL%req . send ( null )  ;%NWL%}%NWL%function ShowFamilies (  )%NWL%{%NWL%var families = gTemplates . querySelectorAll (  " family "  )  ; %NWL%for ( var i = 0 ; i < families . length ; i +  +  )  {%NWL%var family = families [ i ]  . getAttribute (  " name "  )  ; %NWL%var count  = families [ i ]  . getAttribute (  " count "  )  ; %NWL%var href  = families [ i ]  . getAttribute (  " href "  )  ; %NWL%9
var rollover = document . getElementById (  " navbar_ "  + index +  " _rollover "  )  ; %NWL%if ( normal && rollover )%NWL%{%NWL%normal . style . visibility =  " hidden "  ; %NWL%rollover . style . visibility =  " visible "  ;%NWL%}%NWL%return true ;%NWL%}%NWL%function NBmouseout ( index )%NWL%{%NWL%var normal = document . getElementById (  " navbar_ "  + index +  " _normal "  )  ; %NWL%0
this . usermedia . e . on (  " mediasuccess mediaerror "  , _ . bind ( function (  )  {%NWL%this . maybeStart (  )  ;%NWL%}  , this )  )  ; %NWL%this . usermedia . e . on (  " mediachanged "  , _ . bind ( function (  )  {%NWL%this . e . triggerHandler (  " usermedia "  ,  [ this . usermedia ]  )  ;%NWL%}  , this )  )  ;%NWL%}  ; %NWL%WebRTC . prototype . processReceived = function ( event , to , data , type , to2 , from )  {%NWL%if ( data && data . _token )  {%NWL%var token = data . _token ; %NWL%var id = data . _id ; %NWL%9
x : x ,%NWL%y : y ,%NWL%width : width ,%NWL%height : height%NWL%}  )  ; %NWL%this . node . textContent = text ;%NWL%}  ; %NWL%Ui . El . Text . prototype = Object . create ( Ui . El . prototype )  ; %NWL%Ui . El . Text . prototype . center = function ( element )  {%NWL%var width = element . getAttribute (  ' width '  )  ; %NWL%var height = element . getAttribute (  ' height '  )  ; %NWL%9
packages . concat (%NWL%[%NWL%{ kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }%NWL%]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%var externals = taffy ( members . externals )  ; %NWL%6
var fulfilled = this . _fulfilled ; %NWL%this . detach (  )  ; %NWL%this . _state = 1 ; %NWL%fulfilled ( value )  ;%NWL%}  ; %NWL%Deferred . prototype . reject = function ( reason )  {%NWL%if ( this . _state ! = 0 )  {%NWL%throw new Microsoft . Utility . Exception (  " Invalid deferred state =  "  + this . _state )  ;%NWL%}%NWL%this . _reason = reason ; %NWL%var rejected = this . _rejected ; %NWL%0
return {%NWL%token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / jsx_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / doc_comment_highlight_rules "  ,  " ace / mode / text_highlight_rules "  ]  , function ( acequire , exports , module )  {%NWL%var oop = acequire (  "  .  .  / lib / oop "  )  ; %NWL%var lang = acequire (  "  .  .  / lib / lang "  )  ; %NWL%9
Error . stackTraceLimit = stackTraceLimit ;%NWL%}%NWL%}%NWL%function fName ( fn )  {%NWL%if ( !fn ) return ' undefined '  ; %NWL%return ( fn && fn . name ) ? fn . name : fn ;%NWL%}%NWL%function formatErrorMeta ( err )  {%NWL%if ( !err . meta ) return ; %NWL%var vcon = err . meta . vcon ; %NWL%var task = err . meta . task ; %NWL%9
52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 ,  - 1 ,  - 1 ,  - 1 , 0 ,  - 1 ,  - 1 ,%NWL%- 1 , 0 , 1 , 2 ,  3 , 4 , 5 , 6 ,  7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 ,%NWL%15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 ,  - 1 ,  - 1 ,  - 1 ,  - 1 ,  - 1 ,%NWL%- 1 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 ,%NWL%41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 ,  - 1 ,  - 1 ,  - 1 ,  - 1 ,  - 1%NWL%]  ,%NWL%decode : function ( data , offset )  {%NWL%" use strict "  ; %NWL%offset = typeof ( offset ) ! =  =  ' undefined ' ? offset : 0 ; %NWL%var toBinaryTable = Base64 . toBinaryTable ; %NWL%var base64Pad = Base64 . base64Pad ; %NWL%9
}%NWL%return __TEMPLATES [ name ]  ;%NWL%}  ,%NWL%splitList : function ( rows , cols , items )  {%NWL%var _matrix =  {  ' row '  :  [  ]  }  ; %NWL%var _total = items . length ; %NWL%var _matrix_row = _matrix . row ; %NWL%for ( var row = 0 ; row < rows ; row +  +  )  {%NWL%_matrix_row . push (  {  ' col '  :  [  ]  }  )  ; %NWL%var _matrix_col = _matrix_row . last (  )  . col ; %NWL%for ( var col = 0 ; col < cols ; col +  +  )  {%NWL%7
if ( !process . versions . openssl )  {%NWL%console . error (  ' Skipping because node compiled without OpenSSL .  '  )  ; %NWL%process . exit ( 0 )  ;%NWL%}%NWL%var common = require (  '  .  .  / common '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var tls = require (  ' tls '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var cert = fs . readFileSync ( path . join ( common . fixturesDir ,  ' test_cert . pem '  )  )  ; %NWL%var key = fs . readFileSync ( path . join ( common . fixturesDir ,  ' test_key . pem '  )  )  ; %NWL%9
return convertSrc ( src , results )  ;%NWL%}  ,%NWL%readConstants : function ( src , fileName )  {%NWL%var ast = parse ( src , fileName )  ; %NWL%walk . simple ( ast ,  {%NWL%ExpressionStatement : function ( node )  {%NWL%if ( node . expression . type ! =  =  ' CallExpression '  )  {%NWL%return ;%NWL%}%NWL%var start = node . start ; %NWL%var end = node . end ; %NWL%9
regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%2
this . render (  )%NWL%}%NWL%}  ,%NWL%pageUp : function (  )  {%NWL%var height = this . get (  ' height '  )%NWL%var scrollOffset = this . get (  ' scrollOffset '  )%NWL%this . scrollTo ( Math . max ( 0 , scrollOffset - height )  )%NWL%}  ,%NWL%pageDown : function (  )  {%NWL%var height = this . get (  ' height '  )%NWL%var scrollOffset = this . get (  ' scrollOffset '  )%NWL%4
click : function (  )  {%NWL%t . result (  )  ;%NWL%}%NWL%}  ]%NWL%}  )  ;%NWL%}  ,%NWL%buildMenu : function ( menu , node , config )  {%NWL%var t = this ; %NWL%var disabled = config . disabled ; %NWL%var pos = config . pos ; %NWL%var mode = config . mode ; %NWL%8
return ( value - min )  *  ( maxSize - minSize )  /  ( max - min )  + minSize ;%NWL%}  ,%NWL%getPolygon : function ( seriesIndex , dataIndex , defaultColor , xLT , y , topWidth , bottomWidth , height , align )  {%NWL%var serie = this . series [ seriesIndex ]  ; %NWL%var data = serie . data [ dataIndex ]  ; %NWL%var queryTarget =  [%NWL%data ,%NWL%serie%NWL%]  ; %NWL%var normal = this . deepMerge ( queryTarget ,  ' itemStyle . normal '  ) || {  }  ; %NWL%var emphasis = this . deepMerge ( queryTarget ,  ' itemStyle . emphasis '  ) || {  }  ; %NWL%9
next_1 . call ( this , 1 )  ;%NWL%}  ; %NWL%var next = function ( inNumSamples )  {%NWL%var out  = this . outputs [ 0 ]  ; %NWL%var inIn  = this . inputs [ 0 ]  ; %NWL%var next_srclo = this . inputs [ 1 ]  [ 0 ] || 0 . 001 ; %NWL%var next_srchi = this . inputs [ 2 ]  [ 0 ] || 0 . 001 ; %NWL%var next_dstlo = this . inputs [ 3 ]  [ 0 ]  ; %NWL%var next_dsthi = this . inputs [ 4 ]  [ 0 ]  ; %NWL%var srclo = this . _srclo ; %NWL%var srchi = this . _srchi ; %NWL%9
if ( err ! = null ) throw err ; %NWL%callback (  )  ;%NWL%}  )  ;%NWL%}%NWL%exports . shouldFailDuePresentingWrongCredentialsToServer =  {%NWL%metadata :  { requires :  { topology :  ' ssl '  }  }  ,%NWL%test : function ( configuration , test )  {%NWL%var ReplSetManager = require (  ' mongodb - tools '  )  . ReplSetManager%NWL%, Db = configuration . require . Db%NWL%, Server = configuration . require . Server%NWL%, ReplSet = configuration . require . ReplSet%NWL%8
responsePage : basicResponsePage ,%NWL%appURL : path . join ( hotplate . config . get (  ' hotplate . routeUrlsPrefix '  )  ,  '  / app '  )  ,%NWL%}  )  ; %NWL%hotplate . hotEvents . onCollect (  ' stores '  ,  ' hotCoreAuth '  , hotplate . cachable ( function ( done )  {%NWL%var stores =  {  }%NWL%hotCoreJsonRestStores . get ( function ( err , s )  {%NWL%if ( err )  {%NWL%done ( err )  ;%NWL%} else {%NWL%var HotStore = s . HotStore ; %NWL%var HotSchema = s . HotSchema ; %NWL%9
' use strict '  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var exec = require (  ' child_process '  )  . exec ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var common = require (  '  .  / common '  )  ; %NWL%var watchman = require (  ' fb - watchman '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var CHANGE_EVENT = common . CHANGE_EVENT ; %NWL%var DELETE_EVENT = common . DELETE_EVENT ; %NWL%var ADD_EVENT = common . ADD_EVENT ; %NWL%8
var session = require (  ' express - session '  )  ; %NWL%var MongoStore = require (  ' connect - mongo '  )  (  { session : session }  )  ; %NWL%var mongoose = require (  ' mongoose '  )  ; %NWL%var passport = require (  ' passport '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var compress = require (  ' compression '  )  (  )  ; %NWL%var lodash = require (  ' lodash '  )  ; %NWL%var expressValidator = require (  ' express - validator '  )  ; %NWL%var errorHandler = require (  '  .  / middleware / error '  )  ; %NWL%var viewHelper = require (  '  .  / middleware / view - helper '  )  ; %NWL%var flash = require (  ' express - flash '  )  ; %NWL%0
return [ new CONST (  )  ]  ;%NWL%}  }  )  ; %NWL%DependencyAnnotation = $__export (  " DependencyAnnotation "  ,  ( function (  )  {%NWL%var DependencyAnnotation = function DependencyAnnotation (  )  {  }  ; %NWL%return ( $traceurRuntime . createClass )  ( DependencyAnnotation ,  {  }  ,  {  }  )  ;%NWL%}  (  )  )  )  ; %NWL%Object . defineProperty ( DependencyAnnotation ,  " annotations "  ,  { get : function (  )  {%NWL%return [ new CONST (  )  ]  ;%NWL%}  }  )  ; %NWL%Injectable = $__export (  " Injectable "  ,  ( function (  )  {%NWL%var Injectable = function Injectable (  )  {  }  ; %NWL%3
}  ; %NWL%function _launchAttention ( type , params , incomingCall , contact )  {%NWL%var isOutgoing = type =  =  =  ' outgoing '  ; %NWL%isOutgoing && LoadingOverlay . show ( navigator . mozL10n . get (  ' calling '  )  )  ; %NWL%_generateAttentionParams ( type , params , function ( attentionParams )  {%NWL%AudioCompetingHelper . leaveCompetition (  )  ; %NWL%AudioCompetingHelper . destroy (  )  ; %NWL%_callType = type ; %NWL%_params = params ; %NWL%var host = document . location . host ; %NWL%var protocol = document . location . protocol ; %NWL%9
return 0 ;%NWL%} else if ( dateA < dateB )  {%NWL%return - 1 ;%NWL%} else {%NWL%return 1 ;%NWL%}%NWL%}  ; %NWL%lexicalFormLiteral = function ( term , env )  {%NWL%var value = term . value ; %NWL%var lang = term . lang ; %NWL%var type = term . type ; %NWL%8
var Instance    = require (  "  .  / Instance "  )  . Instance ; %NWL%var LazyLoad    = require (  "  .  / LazyLoad "  )  ; %NWL%var ManyAssociation  = require (  "  .  / Associations / Many "  )  ; %NWL%var OneAssociation  = require (  "  .  / Associations / One "  )  ; %NWL%var ExtendAssociation = require (  "  .  / Associations / Extend "  )  ; %NWL%var Property    = require (  "  .  / Property "  )  ; %NWL%var Singleton   = require (  "  .  / Singleton "  )  ; %NWL%var Utilities   = require (  "  .  / Utilities "  )  ; %NWL%var Validators   = require (  "  .  / Validators "  )  ; %NWL%var ORMError    = require (  "  .  / Error "  )  ; %NWL%var Hook     = require (  "  .  / Hook "  )  ; %NWL%1
var specify  = require (  ' specify '  )%NWL%, async  = require (  ' async '  )%NWL%, helpers  = require (  '  .  .  / helpers '  )%NWL%, timeout  = helpers . timeout%NWL%, nano  = helpers . nano%NWL%, nock  = helpers . nock%NWL% ; %NWL%var mock  = nock ( helpers . couch ,  " db / replicate "  )%NWL%, db   = nano . use (  " db_replicate "  )%NWL%, replica  = nano . use (  " db_replica "  )%NWL%, replica2 = nano . use (  " db_replica2 "  )%NWL%9
. transform ( parseFloat , String )  ; %NWL%var saturation = new ol . dom . Input ( document . getElementById (  ' saturation '  )  )  ; %NWL%saturation . bindTo (  ' value '  , layer ,  ' saturation '  )%NWL%. transform ( parseFloat , String )  ; %NWL%var contrast = new ol . dom . Input ( document . getElementById (  ' contrast '  )  )  ; %NWL%contrast . bindTo (  ' value '  , layer ,  ' contrast '  )%NWL%. transform ( parseFloat , String )  ; %NWL%var brightness = new ol . dom . Input ( document . getElementById (  ' brightness '  )  )  ; %NWL%brightness . bindTo (  ' value '  , layer ,  ' brightness '  )%NWL%. transform ( parseFloat , String )  ; %NWL%var rotation = new ol . dom . Input ( document . getElementById (  ' rotation '  )  )  ; %NWL%1
errorCallback (  " No leaderboard with the name '  "  + key +  "  ' exists .  "  )  ; %NWL%return ;%NWL%}%NWL%if ( typeof ( score ) ! =  =  ' number ' || isNaN ( score )  )  {%NWL%throw new Error (  " Score must be a number .  "  )  ;%NWL%}%NWL%if ( score < 0 )  {%NWL%throw new Error (  " Score cannot be negative .  "  )  ;%NWL%}%NWL%var sortBy = meta . sortBy ; %NWL%var bestScore = meta . bestScore ; %NWL%9
serviceClass : dojox . rpc . Rest ,%NWL%conflictDateHeader :  " If - Unmodified - Since "  ,%NWL%commit : function ( kwArgs )  {%NWL%kwArgs = kwArgs || {  }  ; %NWL%var actions =  [  ]  ; %NWL%var alreadyRecorded =  {  }  ; %NWL%var savingObjects =  [  ]  ; %NWL%for ( var i = 0 ; i < dirtyObjects . length ; i +  +  )  {%NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
var htmlmin = require (  ' gulp - htmlmin '  )  ; %NWL%var ngmin = require (  ' gulp - ngmin '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var clean = require (  ' gulp - clean '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var replace = require (  ' gulp - replace '  )  ; %NWL%var es = require (  ' event - stream '  )  ; %NWL%var minifyCSS = require (  ' gulp - minify - css '  )  ; %NWL%var template = require (  ' gulp - template '  )  ; %NWL%0
var debug = require (  ' debug '  )  (  ' send '  )%NWL%, parseRange = require (  ' range - parser '  )%NWL%, Stream = require (  ' stream '  )%NWL%, mime = require (  ' mime '  )%NWL%, fresh = require (  ' fresh '  )%NWL%, path = require (  ' path '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, basename = path . basename%NWL%, normalize = path . normalize%NWL%, join = path . join%NWL%8
var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var pathManager = require (  ' nombo / pathmanager '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var watchr = require (  ' watchr '  )  ; %NWL%module . exports = function ( options )  {%NWL%var self = new EventEmitter (  )  ; %NWL%var specialCharsRegex =  /  [ \r\n\t ]  / g ; %NWL%var singleQuoteRegex =  /  '  / g ; %NWL%var files = options . files ; %NWL%var watch = options . watch ; %NWL%9
)  )  ; %NWL%textStyleCache [ key ]  = computedStyle ;%NWL%}%NWL%return computedStyle ;%NWL%}  ; %NWL%function getPileFromElement ( element )  {%NWL%var family = element . getAttributeNS ( stylens ,  " family "  )  ; %NWL%return stylePiles [ family ]  ;%NWL%}%NWL%function addMasterPage ( element )  {%NWL%var name = element . getAttributeNS ( stylens ,  " name "  )  ; %NWL%6
angular . module (  ' integrationApp '  )%NWL%. controller (  ' AnimationsCtrl '  , function ( $scope , $famous )  {%NWL%window . s = $scope ; %NWL%var Transitionable = $famous [  ' famous / transitions / Transitionable '  ]  ; %NWL%var GenericSync = $famous [  ' famous / inputs / GenericSync '  ]  ; %NWL%var RotateSync = $famous [  ' famous / inputs / RotateSync '  ]  ; %NWL%var PinchSync = $famous [  ' famous / inputs / PinchSync '  ]  ; %NWL%var Surface = $famous [  ' famous / core / Surface '  ]  ; %NWL%var Engine = $famous [  ' famous / core / Engine '  ]  ; %NWL%var Transform = $famous [  ' famous / core / Transform '  ]  ; %NWL%var EventHandler = $famous [  ' famous / core / EventHandler '  ]  ; %NWL%7
helper . load ( sentimentNode , flow , function (  )  {%NWL%var sentimentNode1 = helper . getNode (  " sentimentNode1 "  )  ; %NWL%sentimentNode1 . should . have . property (  ' name '  ,  ' sentimentNode '  )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should pass on msg if no payload '  , function ( done )  {%NWL%var flow =  [  { id :  " jn1 "  , type :  " sentiment "  , wires :  [  [  " jn2 "  ]  ]  }  ,%NWL%{ id :  " jn2 "  , type :  " helper "  }  ]  ; %NWL%helper . load ( sentimentNode , flow , function (  )  {%NWL%var jn1 = helper . getNode (  " jn1 "  )  ; %NWL%1
componentWillUnmount : function componentWillUnmount (  )  {%NWL%_refs -  -  ; %NWL%if ( _refs =  =  = 0 )  {%NWL%HTML5 . teardown (  )  ;%NWL%}%NWL%DragDropStore . removeChangeListener ( this . handleDragDropStoreChange )  ;%NWL%}  ,%NWL%registerDragDropItemTypeHandlers : function registerDragDropItemTypeHandlers ( type , handlers )  {%NWL%checkValidType ( this , type )  ; %NWL%var dragSource = handlers . dragSource ; %NWL%var dropTarget = handlers . dropTarget ; %NWL%9
var waiting ; %NWL%var updateHints = this . _updateHints ; %NWL%this . editor . on (  " change "  , function (  )  {%NWL%clearTimeout ( waiting )  ; %NWL%waiting = setTimeout ( updateHints , 1000 )  ;%NWL%}  )  ; %NWL%setTimeout ( updateHints , 100 )  ;%NWL%}  ,%NWL%_updateHints : function (  )  {%NWL%var editor = this . editor ; %NWL%var widgets = this . widgets ; %NWL%9
}  ,%NWL%validator : YAHOO . lang . isBoolean%NWL%}  )  ;%NWL%}  ; %NWL%var _createTabElement = function ( attr )  {%NWL%var el = document . createElement (  ' li '  )  ; %NWL%var a = document . createElement (  ' a '  )  ; %NWL%a . href = attr . href || ' # '  ; %NWL%el . appendChild ( a )  ; %NWL%var label = attr . label || null ; %NWL%var labelEl = attr . labelEl || null ; %NWL%9
r2Dim . position = r1Vector ; %NWL%this . sceneObject . add ( r2Dim )  ; %NWL%this . sceneObject . position = new THREE . Vector3 ( origin . x , origin . y , origin . z )  ; %NWL%this . postRender (  )  ;%NWL%}  ,%NWL%}  )  ; %NWL%SS . TorusDimensionText = SS . DimensionText . extend (  {%NWL%render : function (  )  {%NWL%this . clear (  )  ; %NWL%var r1 = this . model . node . parameters . r1 ; %NWL%var r2 = this . model . node . parameters . r2 ; %NWL%9
var rundartpackage = require (  '  .  / tools / build / rundartpackage '  )  ; %NWL%var copy = require (  '  .  / tools / build / copy '  )  ; %NWL%var file2moduleName = require (  '  .  / tools / build / file2modulename '  )  ; %NWL%var karma = require (  ' karma '  )  . server ; %NWL%var minimist = require (  ' minimist '  )  ; %NWL%var es5build = require (  '  .  / tools / build / es5build '  )  ; %NWL%var runServerDartTests = require (  '  .  / tools / build / run_server_dart_tests '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var transformCJSTests = require (  '  .  / tools / build / transformCJSTests '  )  ; %NWL%var tsc = require (  ' gulp - typescript '  )  ; %NWL%var ts2dart = require (  ' gulp - ts2dart '  )  ; %NWL%7
onMouseUp : function ( e )  {%NWL%this . down = false ;%NWL%}  ,%NWL%onMouseMove : function ( e )  {%NWL%if ( !this . down ) return ; %NWL%var offset = this . $el . offset (  )  ,%NWL%x =  ( e . clientX - offset . left )  / this . canvas . width * 2 ,%NWL%y =  ( e . clientY - offset . top )  / this . canvas . height * 2 ; %NWL%var notes = this . model . get (  " notes "  )  ; %NWL%var fromOctave = this . model . get (  " fromOctave "  )  ; %NWL%var toOctave = this . model . get (  " toOctave "  )  ; %NWL%8
indices : indices ,%NWL%wallIndices : wallIndices%NWL%}  ;%NWL%}%NWL%function computePositionsExtruded ( params )  {%NWL%var ellipsoid = params . ellipsoid ; %NWL%var computedPositions = CorridorGeometryLibrary . computePositions ( params )  ; %NWL%var attr = combine ( computedPositions , params . cornerType )  ; %NWL%var wallIndices = attr . wallIndices ; %NWL%var height = params . height ; %NWL%var extrudedHeight = params . extrudedHeight ; %NWL%5
angular . module (  ' mgcrea . bootstrap . affix '  ,  [  ' mgcrea . jquery '  ]  )  . directive (  ' bsAffix '  ,  [%NWL%' $window '  ,%NWL%' dimensions '  ,%NWL%function ( $window , dimensions )  {%NWL%var checkPosition = function ( instance , el , options )  {%NWL%var scrollTop = window . pageYOffset ; %NWL%var scrollHeight = document . body . scrollHeight ; %NWL%var position = dimensions . offset . call ( el [ 0 ]  )  ; %NWL%var height = dimensions . height . call ( el [ 0 ]  )  ; %NWL%var offsetTop = options . offsetTop * 1 ; %NWL%var offsetBottom = options . offsetBottom * 1 ; %NWL%9
this . $label = this . $element . parent (  )  ; %NWL%this . $icon = this . $label . find (  ' i '  )  ; %NWL%this . $chk = this . $label . find (  ' input [ type = checkbox ]  '  )  ; %NWL%this . setState ( this . $chk )  ; %NWL%this . $chk . on (  ' change '  , $ . proxy ( this . itemchecked , this )  )  ;%NWL%}  ; %NWL%Checkbox . prototype =  {%NWL%constructor : Checkbox ,%NWL%setState : function ( $chk )  {%NWL%var checked = $chk . is (  '  : checked '  )  ; %NWL%var disabled = $chk . is (  '  : disabled '  )  ; %NWL%9
. expect ( function ( res )  {%NWL%res . body . length . should . equal ( 1 )  ; %NWL%res . body . should . containEql ( _ . extend ( original , changes )  )  ;%NWL%}  )%NWL%. end ( done )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should earn achievement on completed requirement '  , function ( done )  {%NWL%var db = this . db ; %NWL%var server = this . server ; %NWL%9
this . _buffer . push ( element )  ;%NWL%}  ,%NWL%drawQuadBezier : function ( origin , control , destination , segments , lineWidth , color )  {%NWL%lineWidth = lineWidth || this . _lineWidth ; %NWL%color = color || this . getDrawColor (  )  ; %NWL%if ( color . a =  = null )%NWL%color . a = 255 ; %NWL%var vertices =  [  ]  , t = 0 . 0 ; %NWL%for ( var i = 0 ; i < segments ; i +  +  )  {%NWL%var x = Math . pow ( 1 - t , 2 )  * origin . x + 2 . 0 *  ( 1 - t )  * t * control . x + t * t * destination . x ; %NWL%var y = Math . pow ( 1 - t , 2 )  * origin . y + 2 . 0 *  ( 1 - t )  * t * control . y + t * t * destination . y ; %NWL%9
var express = require (  ' express '  )  ; %NWL%var expressSession = require (  ' express - session '  )  ; %NWL%var fs = require (  ' fs - extra '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var logger = require (  '  .  / logger . js '  )  ; %NWL%var socketio = require (  ' socket . io '  )  ; %NWL%var async = require (  '  .  / async . js '  )%NWL%var irc = require (  '  .  / irc . js '  )  ; %NWL%var users = require (  '  .  / users . js '  )  ; %NWL%var utils = require (  '  .  / utils . js '  )  ; %NWL%5
str = str || '  '  ; %NWL%return str . replace (  / ^ ( event|module|external|package )  :  /  ,  ' $1 -  '  )%NWL%. replace (  / ~ / g ,  '  -  '  )%NWL%. replace (  / \# / g ,  ' _ '  )%NWL%. replace (  / \ (  [ \s\S ]  * \ ) $ /  ,  '  '  )  ;%NWL%}%NWL%var htmlsafe = exports . htmlsafe = function ( str )  {%NWL%return str . replace (  / & / g ,  ' &amp ;  '  )%NWL%. replace (  /  <  / g ,  ' &lt ;  '  )  ;%NWL%}  ; %NWL%var getUniqueFilename = exports . getUniqueFilename = function ( str )  {%NWL%6
var AMDPlugin = require (  "  .  / dependencies / AMDPlugin "  )  ; %NWL%var LabeledModulesPlugin = require (  "  .  / dependencies / LabeledModulesPlugin "  )  ; %NWL%var RequireContextPlugin = require (  "  .  / dependencies / RequireContextPlugin "  )  ; %NWL%var RequireEnsurePlugin = require (  "  .  / dependencies / RequireEnsurePlugin "  )  ; %NWL%var RequireIncludePlugin = require (  "  .  / dependencies / RequireIncludePlugin "  )  ; %NWL%var RemoveParentModulesPlugin = require (  "  .  / optimize / RemoveParentModulesPlugin "  )  ; %NWL%var RemoveEmptyChunksPlugin = require (  "  .  / optimize / RemoveEmptyChunksPlugin "  )  ; %NWL%var MergeDuplicateChunksPlugin = require (  "  .  / optimize / MergeDuplicateChunksPlugin "  )  ; %NWL%var FlagIncludedChunksPlugin = require (  "  .  / optimize / FlagIncludedChunksPlugin "  )  ; %NWL%var UnsafeCachePlugin = require (  " enhanced - resolve / lib / UnsafeCachePlugin "  )  ; %NWL%var ModulesInDirectoriesPlugin = require (  " enhanced - resolve / lib / ModulesInDirectoriesPlugin "  )  ; %NWL%9
el = attr . element || null ;%NWL%}%NWL%if ( !el && !attr . element )  {  /  / create if we dont have one%NWL%el = _createTabViewElement . call ( this , attr )  ;%NWL%}%NWL%YAHOO . widget . TabView . superclass . constructor . call ( this , el , attr )  ;%NWL%}  ; %NWL%YAHOO . extend ( YAHOO . widget . TabView , YAHOO . util . Element )  ; %NWL%var proto = YAHOO . widget . TabView . prototype ; %NWL%var Dom = YAHOO . util . Dom ; %NWL%var Event = YAHOO . util . Event ; %NWL%9
, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%, Spawn  = actions . Spawn%NWL%, Speed  = actions . Speed%NWL%7
}  ,%NWL%" string "  :  {%NWL%" is typeOf string matcher "  : function (  )  {%NWL%var string = sinon . match . string ; %NWL%assert ( sinon . match . isMatcher ( string )  )  ; %NWL%assert . equals ( string . toString (  )  ,  " typeOf ( \ " string\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" object "  :  {%NWL%" is typeOf object matcher "  : function (  )  {%NWL%var object = sinon . match . object ; %NWL%3
if ( !dest    ) dest = this . elements ; %NWL%if (  dest . elements ) dest = dest . elements ; %NWL%if (  mat . elements  ) mat  = mat . elements ; %NWL%dest [ 0  ]  = mat [ 0 ]  ; %NWL%dest [ 1  ]  = mat [ 1 ]  ; %NWL%dest [ 2  ]  = mat [ 2 ]  ; %NWL%dest [ 3  ]  = mat [ 3 ]  ; %NWL%dest [ 4  ]  = mat [ 4 ]  ; %NWL%dest [ 5  ]  = mat [ 5 ]  ; %NWL%dest [ 6  ]  = mat [ 6 ]  ; %NWL%dest [ 7  ]  = mat [ 7 ]  ; %NWL%3
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%, Spawn  = actions . Spawn%NWL%8
this . cookie . domain = domain ;%NWL%}  ; %NWL%this . setNotify = function ( itemSet , itemRemove )  {%NWL%this . notify =  {%NWL%setItem : itemSet ,%NWL%removeItem : itemRemove%NWL%}  ;%NWL%}  ; %NWL%this . $get =  [  ' $rootScope '  ,  ' $window '  ,  ' $document '  , function ( $rootScope , $window , $document )  {%NWL%var prefix = this . prefix ; %NWL%var cookie = this . cookie ; %NWL%9
exports . ownProp = ownProp%NWL%exports . makeAbs = makeAbs%NWL%exports . finish = finish%NWL%exports . mark = mark%NWL%exports . isIgnored = isIgnored%NWL%exports . childrenIgnored = childrenIgnored%NWL%function ownProp ( obj , field )  {%NWL%return Object . prototype . hasOwnProperty . call ( obj , field )%NWL%}%NWL%var path = require (  " path "  )%NWL%var minimatch = require (  " minimatch "  )%NWL%9
assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | = y )  "  , aExpr (  " | =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%2
{%NWL%var scale_magnitude = this . scale_magnitude ; %NWL%var noise_frames_m1 = this . noise_frames_m1 ; %NWL%var n_size_sq = this . n_size_sq ; %NWL%var scale_decimalbits = this . scale_decimalbits ; %NWL%var _def_PackedNoise = true ; %NWL%var n_packsize = this . n_packsize ; %NWL%var np_size = this . np_size ; %NWL%var np_size_sq = this . np_size_sq ; %NWL%var n_size_m1 =  [  ]  ; %NWL%var n_size = this . n_size ; %NWL%1
normal = _face3VertexNormals [ n ]  = _face3VertexNormals [ n ] || new THREE . Vector3 (  )  ; %NWL%normal . copy ( faceVertexNormals [ n ]  )  ; %NWL%objectMatrixRotation . multiplyVector3 ( normal )  ;%NWL%}%NWL%_face3 . z = _face3 . centroidScreen . z ; %NWL%_face3 . meshMaterials = objectMaterials ; %NWL%_face3 . faceMaterials = face . materials ; %NWL%_face3 . overdraw = objectOverdraw ; %NWL%if ( object . geometry . uvs [ f ]  )  {%NWL%_face3 . uvs [ 0 ]  = object . geometry . uvs [ f ]  [ 0 ]  ; %NWL%_face3 . uvs [ 1 ]  = object . geometry . uvs [ f ]  [ 1 ]  ; %NWL%9
if ( typeof define =  =  =  " function " && define . amd )  {%NWL%define (  [  " exports "  ,  " module "  ,  "  .  / constants "  ,  "  .  / document - observer "  ,  "  .  / lifecycle "  ,  "  .  / registry "  ,  "  .  / utils "  ,  "  .  / version "  ]  , factory )  ;%NWL%} else if ( typeof exports ! =  =  " undefined " && typeof module ! =  =  " undefined "  )  {%NWL%factory ( exports , module , require (  "  .  / constants "  )  , require (  "  .  / document - observer "  )  , require (  "  .  / lifecycle "  )  , require (  "  .  / registry "  )  , require (  "  .  / utils "  )  , require (  "  .  / version "  )  )  ;%NWL%}%NWL%}  )  ( function ( exports , module , _constants , _documentObserver , _lifecycle , _registry , _utils , _version )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%8
, fs    = require (  ' fs '  )%NWL%, extend   = require (  ' util '  )  . _extend%NWL%, path   = require (  ' path '  )%NWL%, assemble  = require (  '  .  .  / assemble '  )%NWL%, LocalPackage = require (  '  .  .  / local - package '  )%NWL%, minifiers  = require (  '  .  .  / minifiers '  )%NWL%, repository  = require (  '  .  .  / repository '  )%NWL%, util   = require (  '  .  .  / util '  )%NWL%, info   = require (  '  .  / info '  )%NWL%, FilesystemError  = require (  '  .  .  / errors '  )  . FilesystemError%NWL%, DependencyLoopError = require (  '  .  .  / errors '  )  . DependencyLoopError%NWL%9
if ( world && world . name ) title . append ( world . name )%NWL%if ( world && !world . state ) return newWorld (  )%NWL%pageLoading . addClass (  ' hidden '  )%NWL%voxelUtils . initGame ( db , world )%NWL%}  )%NWL%function openSettings (  )  {%NWL%worlds . db . get ( worldID , function ( err , world )  {%NWL%var settings = $ (  ' #settings - popup '  )%NWL%var info = settings . find (  '  . info '  )%NWL%var destroy = info . find (  '  . destroy '  )%NWL%var loggedOut = info . find (  '  . loggedOut '  )%NWL%9
pos . left																 /  / The absolute mouse position%NWL%+ this . offset . relative . left * mod										 /  / Only for relative positioned nodes : Relative offset from element to offset parent%NWL%+ this . offset . parent . left * mod											 /  / The offsetParent ' s offset without borders ( offset + border )%NWL%-  ( $ . browser . safari && $ . browser . version < 526 && this . cssPosition =  =  ' fixed ' ? 0 :  ( this . cssPosition =  =  ' fixed ' ? - this . scrollParent . scrollLeft (  )  : scrollIsRootNode ? 0 : scroll . scrollLeft (  )  )  * mod )%NWL%)%NWL%}  ;%NWL%}  ,%NWL%_generatePosition : function ( event )  {%NWL%var o = this . options , scroll = this . cssPosition =  =  ' absolute ' && ! ( this . scrollParent [ 0 ] ! = document && $ . ui . contains ( this . scrollParent [ 0 ]  , this . offsetParent [ 0 ]  )  ) ? this . offsetParent : this . scrollParent , scrollIsRootNode =  (  /  ( html|body )  / i )  . test ( scroll [ 0 ]  . tagName )  ; %NWL%var pageX = event . pageX ; %NWL%var pageY = event . pageY ; %NWL%9
flush (  )  {%NWL%var session = this ,%NWL%dirtyModels = this . dirtyModels ,%NWL%newModels = this . newModels ,%NWL%shadows = this . shadows ; %NWL%this . emit (  ' willFlush '  , dirtyModels )  ; %NWL%var flush = new Flush ( this , dirtyModels )  ,%NWL%promise = flush . perform (  )  ; %NWL%dirtyModels . forEach ( function ( model )  {%NWL%var original = this . originals . getModel ( model )  ; %NWL%var shadow = this . shadows . getModel ( model )  ; %NWL%9
decades . push (  { start : start , end : this . maxyear }  )  ; %NWL%while ( decades . length < this . NUM_DECADE_CHOICES )  {%NWL%start -  = 10 ; %NWL%decades . push (  { start : start , end : start + 9 }  )  ;%NWL%}%NWL%return decades ;%NWL%}%NWL%}%NWL%this . make_months = function (  )  {%NWL%var year = this . minyear ; %NWL%var month = this . minmonth ; %NWL%9
}%NWL%IO . fn . init . prototype = IO . fn ; %NWL%IO . prototype . perform = IO . prototype . performUnsafeIO = IO . prototype . run%NWL%var Either = root . Either =  {  }%NWL%Either . of = function ( a )  {%NWL%return Right ( a )%NWL%}%NWL%var Right = Either . Right = root . Right = function ( val )  {%NWL%return new Either . fn . init ( val , true )%NWL%}  ; %NWL%var Left = Either . Left = root . Left = function ( val )  {%NWL%7
plugins . register (  "  / o "  , function ( ob )  {%NWL%var params = ob . params ; %NWL%var validateUserForDataReadAPI = ob . validateUserForDataReadAPI ; %NWL%if ( params . qstring . method =  =  " density "  )  {%NWL%validateUserForDataReadAPI ( params , fetch . fetchTimeObj ,  ' density '  )  ; %NWL%return true ;%NWL%}%NWL%return false ;%NWL%}  )  ; %NWL%plugins . register (  "  / i / apps / delete "  , function ( ob )  {%NWL%var appId = ob . appId ; %NWL%1
}%NWL%}%NWL%DirectTransport . activeCount_ [ uid ]  +  +  ;%NWL%}  ; %NWL%DirectTransport . getRoledChannelName_ = function ( channelName , role )  {%NWL%return channelName +  ' _ '  + role ;%NWL%}  ; %NWL%DirectTransport . messageReceivedHandler_ = function ( literal )  {%NWL%var msg = DirectTransport . Message_ . fromLiteral ( literal )  ; %NWL%var channelName = msg . channelName ; %NWL%var service = msg . service ; %NWL%9
;  ( function (  )  {%NWL%var document = this . document%NWL%, window = this%NWL%, root%NWL%, body%NWL%, h1%NWL%, open%NWL%var initialTitle = document . title ; %NWL%var EventEmitter = Terminal . EventEmitter%NWL%, isMac = Terminal . isMac%NWL%, inherits = Terminal . inherits%NWL%9
var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var exec = require (  ' child_process '  )  . exec ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var common = require (  '  .  / common '  )  ; %NWL%var watchman = require (  ' fb - watchman '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var CHANGE_EVENT = common . CHANGE_EVENT ; %NWL%var DELETE_EVENT = common . DELETE_EVENT ; %NWL%var ADD_EVENT = common . ADD_EVENT ; %NWL%var ALL_EVENT = common . ALL_EVENT ; %NWL%7
dict . setValue ( elemKeys [ i ]  , i )  ; %NWL%v . push ( i )  ;%NWL%}%NWL%}  )  ; %NWL%it (  ' For each gives all the pairs '  ,%NWL%function (  )  {%NWL%for ( var i = 0 ; i < elems ; i +  +  )  {%NWL%dict . setValue ( elemKeys [ i ]  , i )  ;%NWL%}%NWL%var keys = dict . keys (  )  ; %NWL%var values = dict . values (  )  ; %NWL%9
var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var contentDisposition = require (  '  .  / utils '  )  . contentDisposition ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%var send = require (  ' send '  )  ; %NWL%var extname = path . extname ; %NWL%var mime = send . mime ; %NWL%var resolve = path . resolve ; %NWL%8
}  )  ; %NWL%var EndsWith = declare (  " dojox . grid . enhanced . plugins . filter . EndsWith "  , exprs . _BiOpExpr ,  {%NWL%_name :  " endsWith "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var left_res = String ( left_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%var right_res = String ( right_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%return new exprs . BooleanExpr ( left_res . substring ( left_res . length - right_res . length )  =  = right_res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var Matches = declare (  " dojox . grid . enhanced . plugins . filter . Matches "  , exprs . _BiOpExpr ,  {%NWL%1
Template . vulnerabilitySolution . solution = function (  )  {%NWL%var vulnerability = Vulnerabilities . findOne (  {  " project_id "  : Session . get (  ' projectId '  )  ,  " _id "  : Session . get (  ' vulnerabilityId '  )  }  )  ; %NWL%if ( !vulnerability )  {%NWL%return false ;%NWL%}%NWL%return vulnerability . solution ;%NWL%}  ; %NWL%Template . vulnerabilitySolution . events (  {%NWL%' click #save - solution '  : function ( event , tpl )  {%NWL%var projectId = Session . get (  ' projectId '  )  ; %NWL%var vulnerabilityId = Session . get (  ' vulnerabilityId '  )  ; %NWL%9
max :   { pos : 2 , def : 600 ,  valid :  " number "     }%NWL%}  )  ; %NWL%if ( typeof params . wait =  =  =  " number "  )  {%NWL%params . wait =  ( function ( wait )  {%NWL%return function (  )  {%NWL%return $cs . sleep ( wait )  ;%NWL%}  ;%NWL%}  )  ( params . wait )  ;%NWL%}%NWL%var check = params . check ; %NWL%var wait  = params . wait ; %NWL%9
var l10n_dir  = __dirname +  '  /  .  .  / l10n / scripts / rooms /  '  ; %NWL%var rooms_scripts_dir = __dirname +  '  /  .  .  / scripts / rooms /  '  ; %NWL%var Rooms = function (  )  {%NWL%var self = this ; %NWL%self . areas =  {  }  ; %NWL%self . rooms =  {  }  ; %NWL%self . load = function ( verbose , callback )%NWL%{%NWL%verbose = verbose || false ; %NWL%var log = function ( message )  { if ( verbose ) util . log ( message )  ;  }  ; %NWL%var debug = function ( message )  { if ( verbose ) util . debug ( message )  ;  }  ; %NWL%9
}  . bind ( this )  )  ;%NWL%}%NWL%}  ,%NWL%setSource : function ( source )  {%NWL%if ( this . _cubemap )  {%NWL%logASSERT ( Object . prototype . toString . apply ( source )  =  =  =  '  [ object Array ]  '  ,  " pc . Texture : setSource : supplied source is not an array "  )  ; %NWL%logASSERT ( source . length =  =  = 6 ,  " pc . Texture : setSource : supplied source does not have 6 entries .  "  )  ; %NWL%var validTypes = 0 ; %NWL%var validDimensions = true ; %NWL%var width = source [ 0 ]  . width ; %NWL%var height = source [ 0 ]  . height ; %NWL%9
message :  " rsa key added "%NWL%}  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%User . post = function ( req , res , next )  {%NWL%var newuser = req . body . user%NWL%, newpass = req . body . password%NWL%, email  = req . body . email%NWL%, coupon  = req . body . coupon%NWL%, rsakey  = req . body . rsakey%NWL%8
str = str || '  '  ; %NWL%return str . replace (  / ^ ( event|module|external|package )  :  /  ,  ' $1 -  '  )%NWL%. replace (  / ~ / g ,  '  -  '  )%NWL%. replace (  / \# / g ,  ' _ '  )%NWL%. replace (  / \ (  [ \s\S ]  * \ ) $ /  ,  '  '  )  ;%NWL%}%NWL%var htmlsafe = exports . htmlsafe = function ( str )  {%NWL%return str . replace (  / & / g ,  ' &amp ;  '  )%NWL%. replace (  /  <  / g ,  ' &lt ;  '  )  ;%NWL%}  ; %NWL%var getUniqueFilename = exports . getUniqueFilename = function ( str )  {%NWL%6
var gulp = require (  ' gulp '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var watch = require (  ' gulp - watch '  )  ; %NWL%var install = require (  ' gulp - install '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var less = require (  ' gulp - less '  )  ; %NWL%var mocha = require (  ' gulp - spawn - mocha '  )  ; %NWL%var runSequence = require (  ' run - sequence '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var loopbackAngular = require (  ' gulp - loopback - sdk - angular '  )  ; %NWL%var postcss   = require (  ' gulp - postcss '  )  ; %NWL%2
var url = tinyMCE . getParam (  " external_image_list_url "  )  ; %NWL%if ( url ! = null )  {%NWL%if ( url . charAt ( 0 ) ! =  '  /  ' && url . indexOf (  '  :  /  /  '  )  =  =  - 1 )%NWL%url = tinyMCE . documentBasePath +  "  /  "  + url ; %NWL%document . write (  '  < sc '  +  ' ript language =  " javascript " type =  " text / javascript " src =  "  '  + url +  '  "  >  <  / sc '  +  ' ript >  '  )  ;%NWL%}%NWL%function insertImage (  )  {%NWL%var src = document . forms [ 0 ]  . src . value ; %NWL%var alt = document . forms [ 0 ]  . alt . value ; %NWL%var border = document . forms [ 0 ]  . border . value ; %NWL%var vspace = document . forms [ 0 ]  . vspace . value ; %NWL%7
$ (  ' form '  )  . parsley (  ' validate '  )  ; %NWL%if ( !$ (  ' form '  )  . parsley (  ' isValid '  )  )  {%NWL%noty (  {%NWL%text :  ' Input validation failed! '  ,%NWL%' layout '  :  ' center '  ,%NWL%' type '  :  ' error '%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var policyName = $ (  ' #policyName '  )  . val (  )  ; %NWL%var policyType = $ (  ' #policyType '  )  . val (  )  ; %NWL%9
const events = require (  ' events '  )  ; %NWL%const constants = require (  ' constants '  )  ; %NWL%const UDP = process . binding (  ' udp_wrap '  )  . UDP ; %NWL%const SendWrap = process . binding (  ' udp_wrap '  )  . SendWrap ; %NWL%const BIND_STATE_UNBOUND = 0 ; %NWL%const BIND_STATE_BINDING = 1 ; %NWL%const BIND_STATE_BOUND = 2 ; %NWL%var cluster = null ; %NWL%var dns = null ; %NWL%const errnoException = util . _errnoException ; %NWL%const exceptionWithHostPort = util . _exceptionWithHostPort ; %NWL%9
var now = new Date (  )  ; %NWL%return Math . ceil (  ( future . getTime (  )  - now . getTime (  )  )  / ONEDAYMS )  ;%NWL%}  ,%NWL%monthsFromNow : function ( futureDate )  {%NWL%var future = new Date ( futureDate )  ; %NWL%var now = new Date (  )  ; %NWL%return Math . ceil (  ( future . getFullYear (  )  - now . getFullYear (  )  )  * MONTHSINAYEAR + future . getMonth (  )  - now . getMonth (  )  )  ;%NWL%}  ,%NWL%daysBetween : function ( pastDate , futureDate )  {%NWL%var future = new Date ( futureDate )  ; %NWL%var past = new Date ( pastDate )  ; %NWL%4
this . addErrors ( errors )  ; %NWL%return errors ;%NWL%}%NWL%}%NWL%Sys . Mvc . RangeValidator = function Sys_Mvc_RangeValidator ( minimum , maximum )  {%NWL%this . _minimum = minimum ; %NWL%this . _maximum = maximum ;%NWL%}%NWL%Sys . Mvc . RangeValidator . create = function Sys_Mvc_RangeValidator$create ( rule )  {%NWL%var min = rule . ValidationParameters [  ' min '  ]  ; %NWL%var max = rule . ValidationParameters [  ' max '  ]  ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
var invariant = require (  ' react / lib / invariant '  )  ; %NWL%var objectAssign = require (  ' react / lib / Object . assign '  )  ; %NWL%var HashLocation = require (  '  .  .  / locations / HashLocation '  )  ; %NWL%var ActiveContext = require (  '  .  .  / mixins / ActiveContext '  )  ; %NWL%var LocationContext = require (  '  .  .  / mixins / LocationContext '  )  ; %NWL%var RouteContext = require (  '  .  .  / mixins / RouteContext '  )  ; %NWL%var ScrollContext = require (  '  .  .  / mixins / ScrollContext '  )  ; %NWL%var reversedArray = require (  '  .  .  / utils / reversedArray '  )  ; %NWL%var Transition = require (  '  .  .  / utils / Transition '  )  ; %NWL%var Redirect = require (  '  .  .  / utils / Redirect '  )  ; %NWL%var Path = require (  '  .  .  / utils / Path '  )  ; %NWL%7
var block_delta_y = 100 / block_count_y ; %NWL%var block_delta_z = 200 / block_count_z ; %NWL%var block_start_x =  - block_delta_x * block_count_x / 2 + block_delta_x / 2 ; %NWL%var block_start_y = 150 ; %NWL%var block_start_z =  - block_delta_z * block_count_z / 2 + block_delta_y / 2 ; %NWL%block_size = block_delta_x * 0 . 45 ; %NWL%for ( var iz = 0 ; iz < block_count_z ;  +  + iz )  {%NWL%for ( var iy = 0 ; iy < block_count_y ;  +  + iy )  {%NWL%for ( var ix = 0 ; ix < block_count_x ;  +  + ix )  {%NWL%var x = block_delta_x * ix + block_start_x ; %NWL%var y = block_delta_y * iy + block_start_y ; %NWL%9
var tabs = this . get (  ' tabs '  )  ; %NWL%if ( !tabs )  {  /  / not ready yet%NWL%this . _queue [ this . _queue . length ]  =  [  ' addTab '  , arguments ]  ; %NWL%return false ;%NWL%}%NWL%index =  ( index =  =  = undefined ) ? tabs . length : index ; %NWL%var before = this . getTab ( index )  ; %NWL%var self = this ; %NWL%var el = this . get (  ' element '  )  ; %NWL%var tabParent = this . _tabParent ; %NWL%var contentParent = this . _contentParent ; %NWL%9
}  ,%NWL%handleUpdater : function ( rules )%NWL%{%NWL%var builder = rules . builder ; %NWL%delete rules . builder ; %NWL%this . options = rules . options || {  }  ; %NWL%delete rules . options ; %NWL%if ( rules . anchor )%NWL%{ this . setAnchor ( rules . anchor )  ;  }%NWL%delete rules . anchor ; %NWL%var override = rules . override ; %NWL%3
return 0 ;  /  / Plane is infinite . The inertia should therefore be infinty but by convention we set 0 here%NWL%}  ; %NWL%Plane . prototype . updateBoundingRadius = function (  )  {%NWL%this . boundingRadius = Number . MAX_VALUE ;%NWL%}  ; %NWL%Plane . prototype . computeAABB = function ( out , position , angle )  {%NWL%var a = angle % ( 2 * Math . PI )  ; %NWL%var set = vec2 . set ; %NWL%var max = Number . MAX_VALUE ; %NWL%var lowerBound = out . lowerBound ; %NWL%var upperBound = out . upperBound ; %NWL%9
$ (  ' 12h - label '  )  . innerHTML = chrome . i18n . getMessage (  ' 12hour '  )  ; %NWL%$ (  ' 12hNS - label '  )  . innerHTML = chrome . i18n . getMessage (  ' 12hourNoSuffix '  )  ; %NWL%$ (  ' followme - label '  )  . innerHTML = chrome . i18n . getMessage (  ' followMeTwitter '  )  ; %NWL%$ (  ' visit - extension - label '  )  . innerHTML = chrome . i18n . getMessage (  ' visitExtensionPage '  )  ; %NWL%$ (  ' suggestions - label '  )  . innerHTML = chrome . i18n . getMessage (  ' fileBugsSuggestions '  )  ;%NWL%}%NWL%function createTimenamesGroup ( times )  {%NWL%var p = document . createElement (  ' p '  )  ; %NWL%p . setAttribute (  ' class '  ,  ' visibleTimeNamesList '  )  ; %NWL%for ( var i in times )  {%NWL%var input = document . createElement (  ' input '  )  ; %NWL%7
var MessageEncoder = require (  "  .  / utils / MessageEncoder "  )  ; %NWL%var MessageIds = require (  "  .  / constants / MessageIds "  )  ; %NWL%var HttpGetRequest = require (  "  .  .  / utils / loading / HttpGetRequest "  )  ; %NWL%var HttpPostRequest = require (  "  .  .  / utils / loading / HttpPostRequest "  )  ; %NWL%var WebSocketRequest = require (  "  .  .  / utils / loading / WebSocketRequest "  )  ; %NWL%var weblabPaths = require (  "  .  .  / paths "  )  ; %NWL%var weblabConfiguration = require (  "  .  .  / configuration "  )  ; %NWL%var url = require (  " url "  )  ; %NWL%var os = require (  " os "  )  ; %NWL%var net = require (  " net "  )  ; %NWL%var crypto = require (  " crypto "  )  ; %NWL%7
Actor . AbilityAi = function ( array , range )  {%NWL%var tmp =  {%NWL%close :  {  }  ,%NWL%middle :  {  }  ,%NWL%far :  {  }  ,%NWL%range : range || [ 60 , 300 ]  ,%NWL%list :  {  }  ,%NWL%}  ; %NWL%for ( var i in array )  {%NWL%var id = array [ i ]  . id ; %NWL%var distanceInfo = array [ i ]  . distanceInfo ; %NWL%9
var runner = path . join ( root ,  ' simple '  ,  ' tests '  ,  ' runner . html '  )%NWL%var rt = _findRunnerRoot ( runner )%NWL%expect ( rt )  . to . be ( root )%NWL%}  )%NWL%it . skip (  ' relative link was out of project '  , function (  )  {%NWL%}  )%NWL%}  )%NWL%describe (  ' _leastCommonRoot '  , function (  )  {%NWL%var _leastCommonRoot = handleCfg . __get__ (  ' leastCommonRoot '  )%NWL%var dir1 = path . join (  ' path '  ,  ' to '  ,  ' dir1 '  )%NWL%var dir2 = path . join (  ' path '  ,  ' to '  ,  ' dir2 '  )%NWL%9
' jsbeautifier / unpackers / javascriptobfuscator_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / urlencode_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / p_a_c_k_e_r_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / myobfuscate_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / unpacker_filter . js '  ,%NWL%' beautify - json . js '%NWL%)  ; %NWL%self . onmessage = function ( event )  {%NWL%var data = event . data ; %NWL%var messageID = data . messageID ; %NWL%var source = data . source ; %NWL%9
dataUrl :  '  / erp_app / desktop / security_management / capabilities / available '  ,%NWL%autoLoad : false%NWL%}  )  ; %NWL%var selected_grid = Ext . apply ( commonWidgetProperties . selected_grid ,  {%NWL%xtype :  ' security_management_capability_grid '  ,%NWL%title :  ' Selected Capabilities '  ,%NWL%setupUrl :  '  / erp_app / desktop / security_management / capabilities / selected_setup '  ,%NWL%dataUrl :  '  / erp_app / desktop / security_management / capabilities / selected '  ,%NWL%autoLoad : false%NWL%}  )  ; %NWL%var assignment = Ext . apply ( commonWidgetProperties . assignment ,  {%NWL%3
var square      = plugins . get (  " square "  )  ; %NWL%var add       = plugins . get (  " add "  )  ; %NWL%var multiply     = plugins . get (  " multiply "  )  ; %NWL%var divide      = plugins . get (  " divide "  )  ; %NWL%var log       = plugins . get (  " log "  )  ; %NWL%var div       = plugins . get (  " div "  )  ; %NWL%var isEven      = plugins . get (  " isEven "  )  ; %NWL%var isOdd      = plugins . get (  " isOdd "  )  ; %NWL%var gcdNonnegative    = plugins . get (  " gcdNonnegative "  )  ; %NWL%var numeratorAndDenominator  = plugins . get (  " numeratorAndDenominator "  )  ; %NWL%var exactIntegerSqrt   = plugins . get (  " exactIntegerSqrt "  )  ; %NWL%0
var hDim = this . createDimArrow ( h , new THREE . Vector3 ( 0 , 0 , h )  )  ; %NWL%this . sceneObject . add ( hDim )  ; %NWL%this . sceneObject . position = new THREE . Vector3 ( origin . x , origin . y , origin . z )  ; %NWL%this . postRender (  )  ;%NWL%}  ,%NWL%}  )  ; %NWL%SS . ConeDimensionText = SS . DimensionText . extend (  {%NWL%render : function (  )  {%NWL%this . clear (  )  ; %NWL%var r1 = this . model . node . parameters . r1 ; %NWL%var r2 = this . model . node . parameters . r2 ; %NWL%9
} else {%NWL%this . fft . smoothingTimeConstant = 0 ; %NWL%this . fft . getByteFrequencyData ( data )  ; %NWL%this . fft . getByteTimeDomainData ( data )  ;%NWL%}%NWL%var length = data . length ; %NWL%if ( this . valid_points > 0 ) length = this . valid_points ; %NWL%this . ctx . clearRect ( 0 , 0 , this . width , this . height )  ; %NWL%var bin_size = Math . floor ( length / this . num_bins )  ; %NWL%var high =  - 100 ; var highI = 0 ; %NWL%var low =  - 100 ; var lowI = 0 ; %NWL%9
describe (  " collection view "  , function (  )  {%NWL%" use strict "  ; %NWL%var ItemView = Backbone . Marionette . ItemView . extend (  {%NWL%tagName :  " span "  ,%NWL%render : function (  )  {%NWL%this . $el . html ( this . model . get (  " foo "  )  )  ; %NWL%this . trigger (  ' render '  )  ;%NWL%}  ,%NWL%onRender : function (  )  {  }%NWL%}  )  ; %NWL%var CollectionView = Backbone . Marionette . CollectionView . extend (  {%NWL%2
var repl    =  require (  ' repl '  )%NWL%, path    =  require (  ' path '  )%NWL%, cardinal   =  require (  ' cardinal '  )%NWL%, util    =  require (  ' util '  )%NWL%, xtend    =  require (  ' xtend '  )%NWL%, state    =  require (  '  .  / lib / state '  )%NWL%, config    =  require (  '  .  / config / current '  )%NWL%, initConfig   =  require (  '  .  / config / init '  )%NWL%, managePlugins  =  require (  '  .  / lib / manage - plugins '  )%NWL%, initWatcher  =  require (  '  .  / lib / watcher - init '  )%NWL%, feedEdits   =  require (  '  .  / lib / feedEdits '  )%NWL%5
var app = protos . app ; %NWL%var mw =  {%NWL%name :  ' asset_compiler '  ,%NWL%desc :  ' Asset Compiler Middleware '  ,%NWL%}%NWL%var _ = require (  ' underscore '  )  ; %NWL%var config = app . asset_compiler . config ; %NWL%var less = protos . requireDependency (  ' less '  , mw . desc , mw . name )  ; %NWL%var sass = protos . requireDependency (  ' node - sass '  , mw . desc , mw . name )  ; %NWL%var stylus = protos . requireDependency (  ' stylus '  , mw . desc , mw . name )  ; %NWL%var nib = protos . requireDependency (  ' nib '  , mw . desc , mw . name )  ; %NWL%7
nHAdj = parseInt ( oHotspot . width / 2 - this . width / 2 )  ;%NWL%} else if ( nHAdj =  =  ' r '  )  {%NWL%nHAdj = oHotspot . width - this . width ;%NWL%}%NWL%this . _doLocate ( Math . max ( popX + nHAdj , 4 )  , popY + nVAdj )  ;%NWL%}  ; %NWL%N2SimplePopover . prototype . _locateAboveLink = function ( oHotspot )  {%NWL%var popX = oHotspot . absleft ; %NWL%var popY = oHotspot . abstop - this . height ; %NWL%var nHAdj = this . nHAdjust ; %NWL%var nVAdj = this . nVAdjust ; %NWL%9
setTimeout ( function (  )  {%NWL%n1 . emit (  " input "  ,  { payload : null }  )  ;%NWL%}  , 150 )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should handle true and false as strings and delay of 0 '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " n1 "  ,  " type "  :  " trigger "  ,  " name "  :  " triggerNode "  , op1 :  " true "  ,  op2 :  " false "  , duration : 30 , wires :  [  [  " n2 "  ]  ]  }  ,%NWL%{ id :  " n2 "  , type :  " helper "  }  ]  ; %NWL%helper . load ( triggerNode , flow , function (  )  {%NWL%var n1 = helper . getNode (  " n1 "  )  ; %NWL%var n2 = helper . getNode (  " n2 "  )  ; %NWL%9
var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%' index '  + helper . fileExtension )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%7
var fs = require (  ' fs '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var fireUtil = require (  '  .  / firebase - util . js '  )  ; %NWL%var wrench = require (  ' wrench '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var cloudStorage = require (  '  .  / cloudStorage . js '  )  ; %NWL%var backupExtractor = require (  '  .  / backupExtractor . js '  )  ; %NWL%var temp = require (  ' temp '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var ElasticSearchClient = require (  ' elasticsearchclient '  )  ; %NWL%var archiver  = require (  ' archiver '  )  ; %NWL%0
break ;%NWL%}%NWL%this . drawGL (  )  ;%NWL%}%NWL%AnalyserView . prototype . drawGL = function (  )  {%NWL%var canvas = this . canvas ; %NWL%var gl = this . gl ; %NWL%var vbo = this . vbo ; %NWL%var vboTexCoordOffset = this . vboTexCoordOffset ; %NWL%var sonogram3DVBO = this . sonogram3DVBO ; %NWL%var vbo3DTexCoordOffset = this . vbo3DTexCoordOffset ; %NWL%5
var cosTheta = Math . cos ( theta )  ; %NWL%var sinTheta = Math . sin ( theta )  ; %NWL%return _setXYZ . call ( _register ,%NWL%z * sinTheta + x * cosTheta ,%NWL%y ,%NWL%z * cosTheta - x * sinTheta%NWL%)  ;%NWL%}  ; %NWL%Vector . prototype . rotateZ = function rotateZ ( theta )  {%NWL%var x = this . x ; %NWL%var y = this . y ; %NWL%9
, fs = require (  " fs "  )%NWL%, http = require (  ' http '  )%NWL%, https = require (  " https "  )%NWL%, underscore = require (  ' underscore '  )%NWL%, logutils = require (  '  .  / src / serverroot / utils / log . utils '  )%NWL%, cluster = require (  ' cluster '  )%NWL%, axon = require (  ' axon '  )%NWL%, producerSock = axon . socket (  ' push '  )%NWL%, redisSub = require (  '  .  / src / serverroot / web / core / redisSub '  )%NWL%, global = require (  '  .  / src / serverroot / common / global '  )%NWL%, redis = require (  " redis "  )%NWL%0
newError . status . should . equal ( PouchDB . Errors . BAD_REQUEST . status )  ; %NWL%newError . name . should . equal ( PouchDB . Errors . BAD_REQUEST . name )  ; %NWL%newError . message . should . equal ( PouchDB . Errors . BAD_REQUEST . message ,%NWL%' correct error message returned '  )  ; %NWL%newError . reason . should . equal (  ' love needs no message '  )  ;%NWL%}  )  ; %NWL%it (  ' Fail to fetch a doc after db was deleted '  , function ( done )  {%NWL%new PouchDB ( dbs . name , function ( err , db )  {%NWL%var db2 = new PouchDB ( dbs . name )  ; %NWL%var doc =  { _id :  ' foodoc '  }  ; %NWL%var doc2 =  { _id :  ' foodoc2 '  }  ; %NWL%9
serialize : function (  )  {%NWL%return {%NWL%' constructor '  :  ' game . Camera '  ,%NWL%' arguments '  :   [  ' #MAIN '  ]%NWL%}  ;%NWL%}  ,%NWL%reshape : function (  )  {%NWL%var renderer = this . renderer ; %NWL%if ( renderer ! =  = null )  {%NWL%var width  = renderer . width ; %NWL%var height = renderer . height ; %NWL%9
this . noContent = 204 =  = status || 1223 =  = status ; %NWL%this . badRequest = 400 =  = status ; %NWL%this . unauthorized = 401 =  = status ; %NWL%this . notAcceptable = 406 =  = status ; %NWL%this . notFound = 404 =  = status ; %NWL%this . forbidden = 403 =  = status ;%NWL%}  ; %NWL%Response . prototype . toError = function (  )  {%NWL%var req = this . req ; %NWL%var method = req . method ; %NWL%var path = req . path ; %NWL%9
describe (  ' @returns tag '  , function (  )  {%NWL%var docSet = jasmine . getDocSetFromFile (  ' test / fixtures / returnstag . js '  )  ; %NWL%it (  ' When a symbol has a @returns tag with a type and description , the doclet has a " returns " property that includes that info .  '  , function (  )  {%NWL%var find = docSet . getByLongname (  ' find '  )  [ 0 ]  ; %NWL%expect ( typeof find . returns )  . toBe (  ' object '  )  ; %NWL%expect ( find . returns . length )  . toBe ( 1 )  ; %NWL%expect ( find . returns [ 0 ]  . type . names . join (  '  ,  '  )  )  . toBe (  ' string , Array .  < string >  '  )  ; %NWL%expect ( find . returns [ 0 ]  . description )  . toBe (  ' The names of the found item ( s )  .  '  )  ;%NWL%}  )  ; %NWL%it (  ' When a symbol has a @returns tag with a non - nullable type , the doclet indicates that the type is non - nullable '  , function (  )  {%NWL%var getName = docSet . getByLongname (  ' getName '  )  [ 0 ]  ; %NWL%3
var core = require (  '  .  / core . js '  )  ; %NWL%exports . core = core ; %NWL%var engine = require (  '  .  / engine . js '  )  ; %NWL%exports . engine = engine ; %NWL%var services = require (  '  .  / services . js '  )  ; %NWL%exports . services = services ; %NWL%var util = require (  '  .  / util . js '  )  ; %NWL%exports . util = util ; %NWL%var install = require (  '  .  / install . js '  )  ; %NWL%exports . install = install ; %NWL%var share = require (  '  .  / share . js '  )  ; %NWL%0
}  ,%NWL%" charset "  :  {%NWL%alias :  ' c '%NWL%, default :  ' utf - 8 '%NWL%, describe :  ' file encoding type '%NWL%}%NWL%}  ; %NWL%exports . run = function ( options )  {%NWL%var source = options . src ; %NWL%var dest = options . dest ; %NWL%var igts = options . igts ; %NWL%9
var samples = priv . get ( this )  . samples ; %NWL%this . mode = this . io . MODES . ANALOG ; %NWL%this . io . pinMode ( this . pin , this . mode )  ; %NWL%this . io . analogRead ( this . pin , function ( data )  {%NWL%samples . push ( data )  ;%NWL%}  . bind ( this )  )  ;%NWL%}  ,%NWL%descriptor :  {%NWL%cm :  {%NWL%get : function (  )  {%NWL%var median = priv . get ( this )  . median ; %NWL%0
}%NWL%}  ,%NWL%_colorize : function (  )  {%NWL%var x = this . _renderBoundaries [ 0 ]  ; %NWL%var y = this . _renderBoundaries [ 1 ]  ; %NWL%var width = this . _renderBoundaries [ 2 ]  - x ; %NWL%var height = this . _renderBoundaries [ 3 ]  - y ; %NWL%var maxWidth = this . _width ; %NWL%var maxHeight = this . _height ; %NWL%var opacity = this . _opacity ; %NWL%var maxOpacity = this . _maxOpacity ; %NWL%9
testColorPropertyBinding : function (  )%NWL%{%NWL%qx . data . SingleValueBinding . bind ( this . __a ,  " backgroundColor "  , this . __b ,  " backgroundColor "  )  ; %NWL%this . __a . setBackgroundColor (  " red "  )  ; %NWL%this . assertEquals (  " red "  , this . __b . getBackgroundColor (  )  ,  " Color binding does not work! "  )  ;%NWL%}  ,%NWL%testWrongPropertyNames : function (  )%NWL%{%NWL%if ( qx . core . Environment . get (  " qx . debug "  )  )  {%NWL%var a = this . __a ; %NWL%var b = this . __b ; %NWL%9
return z ;%NWL%}  ,%NWL%period : 0 ,%NWL%dampingRatio : 0%NWL%}  ; %NWL%Curve . prototype . setOptions = function setOptions ( options )  {%NWL%for ( var key in options ) this . options [ key ]  = options [ key ]  ;%NWL%}  ; %NWL%Curve . prototype . applyConstraint = function applyConstraint ( targets , source , dt )  {%NWL%var options = this . options ; %NWL%var impulse = this . impulse ; %NWL%9
assert . equal ( mrc . _commandListeners [ REMOTE_CONTROLS . PLAY ]  . length , 0 )  ;%NWL%}  )  ; %NWL%mrc . addCommandListener ( REMOTE_CONTROLS . PLAY , playListener )  ; %NWL%mrc . _commandHandler ( IAC . PLAY_PRESS )  ; %NWL%assert . ok ( playListener . calledOnce )  ;%NWL%}  )  ; %NWL%test (  ' IAC . PLAY_PAUSE_PRESS '  , function (  )  {%NWL%var playpauseListener = this . sinon . spy ( function ( event )  {%NWL%var command = event . detail . command ; %NWL%assert . equal ( command , REMOTE_CONTROLS . PLAY_PAUSE )  ; %NWL%var isSCOConnected = event . detail . isSCOConnected ; %NWL%8
} else {%NWL%self . outerDiv . className = self . outerDiv . className . replace (  / show - skipped /  ,  '  '  )  ;%NWL%}%NWL%}  ;%NWL%}  ; %NWL%jasmine . TrivialReporter . prototype . reportRunnerResults = function ( runner )  {%NWL%var results = runner . results (  )  ; %NWL%var className =  ( results . failedCount > 0 ) ? " runner failed "  :  " runner passed "  ; %NWL%this . runnerDiv . setAttribute (  " class "  , className )  ; %NWL%this . runnerDiv . setAttribute (  " className "  , className )  ; %NWL%var specs = runner . specs (  )  ; %NWL%6
annotationModel . addEventListener (  " Changed "  , this . _listener . onChanged )  ;  /  / $NON - NLS - 0$%NWL%}%NWL%AnnotationStyler . prototype =  {%NWL%destroy : function (  )  {%NWL%var view = this . _view ; %NWL%if ( view )  {%NWL%view . removeEventListener (  " Destroy "  , this . _listener . onDestroy )  ;  /  / $NON - NLS - 0$%NWL%view . removeEventListener (  " LineStyle "  , this . _listener . onLineStyle )  ;  /  / $NON - NLS - 0$%NWL%this . view = null ;%NWL%}%NWL%var annotationModel = this . _annotationModel ; %NWL%4
}%NWL%}  ;%NWL%}  )  ; %NWL%angular . module (  ' clientApp '  )%NWL%. controller (  ' changepasswordCtrl '  ,%NWL%function ( $scope , $location , $http )  {%NWL%$scope . changeuserpassword = function (  )  {%NWL%$ (  " #validatemessage "  )  . html (  "  "  )  ; %NWL%var useremail = getCookie (  " email "  )  ; %NWL%var changepassword = $ (  " #changepassword "  )  . val (  )  ; %NWL%var confirmchangepassword = $ (  " #confirmchangepassword "  )  . val (  )  ; %NWL%9
var each = forEach ; %NWL%var indexOf = ArrayProto . indexOf ; %NWL%var map = ArrayProto . map ; %NWL%var pop = ArrayProto . pop ; %NWL%var push = ArrayProto . push ; %NWL%function reverse (  )  {%NWL%var elements = ArrayProto . slice . call ( this )  ; %NWL%return $ ( ArrayProto . reverse . call ( elements )  )  ;%NWL%}%NWL%var shift = ArrayProto . shift ; %NWL%var some = ArrayProto . some ; %NWL%1
test (  "  . swap ( standard , zoom , srcsetString )  "  , function (  )  {%NWL%expect ( 1 )  ; %NWL%var standard =  "  .  .  / example - images / test_standard . jpg "  ; %NWL%var zoom =  "  .  .  / example - images / test_zoom . jpg "  ; %NWL%var srcsetString =  "  .  .  / example - images / test_standard . jpg 1x ,  .  .  / example - images / test_zoom . jpg 2x "  ; %NWL%api . swap ( standard , zoom , srcsetString )  ; %NWL%equal ( api . $image . attr (  " srcset "  )  , srcsetString ,  " Standard image SRCSET changed "  )  ;%NWL%}  )  ; %NWL%test (  "  . swap ( standard , zoom , srcsetArray )  "  , function (  )  {%NWL%expect ( 1 )  ; %NWL%var standard =  "  .  .  / example - images / test_standard . jpg "  ; %NWL%3
$autofieldsProvider . settings . scope . datepickerOptions =  {%NWL%showWeeks : false%NWL%}  ; %NWL%$autofieldsProvider . settings . scope . openCalendar = function ( $scope , property , e )  {%NWL%e . preventDefault (  )  ; %NWL%e . stopPropagation (  )  ; %NWL%$scope [ property ]  = !$scope [ property ]  ;%NWL%}  ; %NWL%$autofieldsProvider . registerHandler (  ' date '  , function ( directive , field , index )  {%NWL%var showWeeks = field . showWeeks ? field . showWeeks : directive . options . dateSettings . showWeeks ; %NWL%var datepickerPopup = field . datepickerPopup ? field . datepickerPopup : directive . options . dateSettings . datepickerPopup ; %NWL%9
result . add ( item )  ;%NWL%}%NWL%}%NWL%return result ;%NWL%}  ; %NWL%this . intersection = function ( setA , setB )  {%NWL%if ( setA . constructor =  = Array )  {%NWL%var setA = new dojo . collections . ArrayList ( setA )  ;%NWL%}%NWL%if ( setB . constructor =  = Array )  {%NWL%var setB = new dojo . collections . ArrayList ( setB )  ; %NWL%7
W  : 4 ,%NWL%SW : 5 ,%NWL%S  : 6 ,%NWL%SE : 7%NWL%}  ; %NWL%var cell_maker = function ( fluid , _x , _y )  {%NWL%var my =  {  }  ; %NWL%my . pressure = 0 ; %NWL%my . flow =  [ 0 , 0 ]  ; %NWL%var x = _x ; %NWL%var y = _y ; %NWL%9
var path = require (  ' path '  )  ; %NWL%var Q = require (  ' q '  )  ; %NWL%var chmodr = require (  ' chmodr '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var which = require (  ' which '  )  ; %NWL%var LRU = require (  ' lru - cache '  )  ; %NWL%var mout = require (  ' mout '  )  ; %NWL%var Resolver = require (  '  .  / Resolver '  )  ; %NWL%var semver = require (  '  .  .  /  .  .  / util / semver '  )  ; %NWL%var createError = require (  '  .  .  /  .  .  / util / createError '  )  ; %NWL%9
else {%NWL%this . HotkeyState . className =  ' state '  ; %NWL%this . HotkeyState . textContent =  ' Disable '  ; %NWL%this . setDisplay (  ' inline '  )  ;%NWL%}%NWL%}%NWL%}%NWL%function DropDown ( selectId , dropmenuId , options )  {%NWL%var visbility =  [  " hidden "  ,  " visible "  ]  ; %NWL%var dropmenu = document . getElementById ( dropmenuId )  ; %NWL%var select = document . getElementById ( selectId )  ; %NWL%9
var fs = require (  ' fs '  )%NWL%var helper = require (  '  .  / lib / phantomjs '  )%NWL%var kew = require (  ' kew '  )%NWL%var mkdirp = require (  ' mkdirp '  )%NWL%var ncp = require (  ' ncp '  )%NWL%var npmconf = require (  ' npmconf '  )%NWL%var path = require (  ' path '  )%NWL%var request = require (  ' request '  )%NWL%var rimraf = require (  ' rimraf '  )  . sync%NWL%var url = require (  ' url '  )%NWL%var util = require (  ' util '  )%NWL%0
var sinon = require (  " sinon "  )  ; %NWL%var assert = sinon . assert ; %NWL%var Token = require (  " express - hawkauth "  )  . Token ; %NWL%var request = require (  " request "  )  ; %NWL%var loop = require (  "  .  .  / loop "  )  ; %NWL%var apiPrefix = loop . apiPrefix ; %NWL%var apiRouter = loop . apiRouter ; %NWL%var hmac = require (  "  .  .  / loop / hmac "  )  ; %NWL%var errors = require (  "  .  .  / loop / errno . json "  )  ; %NWL%var getMiddlewares = require (  "  .  / support "  )  . getMiddlewares ; %NWL%var expectFormattedError = require (  "  .  / support "  )  . expectFormattedError ; %NWL%9
var Project = persistence . define (  ' Project '  ,  {%NWL%name :  " TEXT "%NWL%}  )  ; %NWL%var Task = persistence . define (  ' Task '  ,  {%NWL%name :  " TEXT "  ,%NWL%done :  " BOOL "  ,%NWL%counter :  " INT "  ,%NWL%dateAdded :  " DATE "  ,%NWL%metaData :  " JSON "%NWL%}  )  ; %NWL%var Tag = persistence . define (  ' Tag '  ,  {%NWL%0
}%NWL%return false ;%NWL%}%NWL%function checkError (  )  {%NWL%if ( _hasDistancesError . apply ( this )  ) return 1 ;  /  / Points are too close to each other .%NWL%if ( _hasPolyonError . apply ( this )  ) return 2 ;  /  / Concave or backfacing if the useBackFacing property is false%NWL%return 0 ;  /  / no error%NWL%}%NWL%function update (  )  {%NWL%var width = this . width ; %NWL%var height = this . height ; %NWL%9
var url = l . getAttribute (  " href "  )  ; %NWL%var params = url . substr ( kLOADER_URL . length )  ; %NWL%var families = params . split (  " | "  )  ; %NWL%for ( var j = 0 ; j < families . length ; j +  +  )  {%NWL%var f = families [ j ]  ; %NWL%var m = f . match (  /  (  [ ^\ : |\& ]  *  )  (  :  (  [ ^|& ]  *  )  ) ? (  ( &|&amp ;  ) subset =  (  .  *  )  ) ? /  )  ; %NWL%var family = m [ 1 ]  . replace (  / \ +  / g ,  "  "  )  ; %NWL%var variants = m [ 3 ]  ; %NWL%var subsets = m [ 6 ]  ; %NWL%var treeitem  = document . createElement (  " treeitem "  )  ; %NWL%var treerow  = document . createElement (  " treerow "  )  ; %NWL%9
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdEnabled (  ' TEST_ELEMENT '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / enabled '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdEquals : function ( test )  {%NWL%var client = this . client ; %NWL%0
}%NWL%return m . _loggingPane ;%NWL%}  ; %NWL%MochiKit . LoggingPane . LoggingPane = function ( inline , logger )  {%NWL%if ( typeof ( logger )  =  =  " undefined " || logger =  =  = null )  {%NWL%logger = MochiKit . Logging . logger ;%NWL%}%NWL%this . logger = logger ; %NWL%var update = MochiKit . Base . update ; %NWL%var updatetree = MochiKit . Base . updatetree ; %NWL%var bind = MochiKit . Base . bind ; %NWL%8
, stream = require (  ' stream '  )%NWL%, qs = require (  ' querystring '  )%NWL%, mimetypes = require (  '  .  / mimetypes '  )%NWL%, oauth = require (  '  .  / oauth '  )%NWL%, uuid = require (  '  .  / uuid '  )%NWL%, ForeverAgent = require (  '  .  / forever '  )%NWL%, Cookie = require (  '  .  / vendor / cookie '  )%NWL%, CookieJar = require (  '  .  / vendor / cookie / jar '  )%NWL%, cookieJar = new CookieJar%NWL%, tunnel = require (  '  .  / tunnel '  )%NWL%, aws = require (  '  .  / aws '  )%NWL%2
}%NWL%return terms ;%NWL%}%NWL%}  ; %NWL%var minMax = function ( solver , solution , costTerms , costWeights , options , isMin )  {%NWL%var curSolution = solution ; %NWL%var curCost = curSolution . getWeightedSum ( costTerms , costWeights )  ; %NWL%var optFormula = options && options . formula ; %NWL%var weightedSum =  ( optFormula || Logic . weightedSum ( costTerms , costWeights )  )  ; %NWL%var progress = options && options . progress ; %NWL%var strategy = options && options . strategy ; %NWL%9
var WrapService = azureSb . WrapService ; %NWL%exports . WrapService = WrapService ; %NWL%exports . createWrapService = azureSb . createWrapService ; %NWL%var azureManagement = require (  ' azure - mgmt '  )  ; %NWL%exports . ManagementClient = azureManagement . ManagementClient ; %NWL%exports . createManagementClient = azureManagement . createManagementClient ; %NWL%var azureSqlMgmt = require (  ' azure - mgmt - sql '  )  ; %NWL%var SqlManagementService = azureSqlMgmt . SqlManagementService ; %NWL%exports . SqlManagementService = SqlManagementService ; %NWL%exports . createSqlManagementService = azureSqlMgmt . createSqlManagementService ; %NWL%var SqlService = azureSqlMgmt . SqlService ; %NWL%7
doc = new ActiveXObject (  " Msxml . DOMDocument "  )  ;%NWL%} else%NWL%doc = doc . ownerDocument ||%NWL%doc . getOwnerDocument && doc . getOwnerDocument (  ) ||%NWL%doc ; %NWL%var elems =  [  ]  ,%NWL%documentElement = doc . documentElement ||%NWL%doc . getDocumentElement && doc . getDocumentElement (  )  ; %NWL%if ( !documentElement && doc . createElement )  ( function (  )  {%NWL%var html = doc . createElement (  " html "  )  ; %NWL%var head = doc . createElement (  " head "  )  ; %NWL%9
)  ; %NWL%this . markerManager = new we . ui . markers . MarkerManager ( this . context . scene ,%NWL%wrapperEl )  ; %NWL%var pos = options [  ' position '  ]  ; %NWL%var center = options [  ' center '  ]  ; %NWL%if ( goog . isDefAndNotNull ( pos ) && pos . length > 1 )  {%NWL%this . context . scene . camera . setPositionDegrees ( pos [ 0 ]  , pos [ 1 ]  )  ;%NWL%} else if ( goog . isDefAndNotNull ( center ) && center . length > 1 )  {%NWL%this . context . scene . camera . setPositionDegrees ( center [ 0 ]  , center [ 1 ]  )  ;%NWL%}%NWL%var zoom = options [  ' zoom '  ]  ; %NWL%4
describe (  ' when there is no event registry '  , function (  )  {%NWL%it (  ' creates the event registry '  , function (  )  {%NWL%expect ( emitter . _registry )  . to . equal ( undefined )  ; %NWL%emitter . getListeners (  ' foo '  )  ; %NWL%expect ( emitter . _registry )  . to . eql (  {  ' foo '  :  [  ]  }  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' when the event has callbacks '  , function (  )  {%NWL%it (  ' returns an array of callbacks '  , function (  )  {%NWL%var foo = function foo (  )  {  }  ; %NWL%var bar = function bar (  )  {  }  ; %NWL%9
var tabs = imports . tabManager ; %NWL%var uCaseFirst = require (  " c9 / string "  )  . uCaseFirst ; %NWL%function Panel ( developer , deps , options )  {%NWL%var plugin = new Plugin ( developer , deps )  ; %NWL%var emit = plugin . getEmitter (  )  ; %NWL%var autohide = options . autohide || false ; %NWL%var index = options . index || 100 ; %NWL%var buttonCSSClass = options . buttonCSSClass ; %NWL%var panelCSSClass = options . panelCSSClass ; %NWL%var caption = options . caption ; %NWL%var width = options . width ; %NWL%7
ffMaxDelayTime : spec . ffMaxDelayTime ,%NWL%fbMaxDelayTime : spec . fbMaxDelayTime ,%NWL%}  , inputs )  ;%NWL%}  )  ; %NWL%function make ( ugen , spec , inputs )  {%NWL%var context = ugen . context ; %NWL%var outlet = null ; %NWL%var gainNode , ffNode , fbNode ; %NWL%var gain = util . defaults ( spec . gain , 0 )  ; %NWL%var ffGain = util . defaults ( spec . ffGain , 0 )  ; %NWL%var fbGain = util . defaults ( spec . fbGain , 0 )  ; %NWL%8
this . feature_set [ feature ]  =  [  ]  ; %NWL%return this ;%NWL%}  ; %NWL%this . callback = function ( callback )  {%NWL%this . _callback = callback ; %NWL%return this ;%NWL%}  ; %NWL%this . display = function (  )  {%NWL%var callback = this . _callback ; %NWL%var manual_callback = this . manual_callback ; %NWL%var manual_map = this . manual_map ; %NWL%9
return pre +  '  < span class =  " def " title =  "  '  + types [ type ]  +  '  "  >  '  + type +  '  <  / span >  '  + post%NWL%}  )  )%NWL%}  )%NWL%return code . html (  )%NWL%}%NWL%function annotateJS ( code )  {%NWL%code = cheerio . load ( code )%NWL%code . root (  )  . contents (  )  . map ( function ( _ , el )  {%NWL%el = code ( el )%NWL%var html = el . html (  )%NWL%var text = el . text (  )%NWL%9
object . __defineGetter__ ( oldName , getter )  ;%NWL%}%NWL%function extractCallbackArgument ( args )%NWL%{%NWL%var lastArgument = args [ args . length - 1 ]  ; %NWL%return typeof lastArgument =  =  =  " function " ? lastArgument : undefined ;%NWL%}%NWL%var AuditCategory = declareInterfaceClass ( AuditCategoryImpl )  ; %NWL%var AuditResult = declareInterfaceClass ( AuditResultImpl )  ; %NWL%var Button = declareInterfaceClass ( ButtonImpl )  ; %NWL%var EventSink = declareInterfaceClass ( EventSinkImpl )  ; %NWL%7
}  ,%NWL%getFakeReq : function (  )  {%NWL%return this . getRequests (  )  . slice (  - 1 )  [ 0 ]  ;%NWL%}  ,%NWL%isIEBelow : function ( targetVersion )  {%NWL%var name = qx . core . Environment . get (  " engine . name "  )  ; %NWL%var version = qx . core . Environment . get (  " engine . version "  )  ; %NWL%return name =  =  " mshtml " && version < targetVersion ;%NWL%}  ,%NWL%isFFBelow : function ( targetVersion )  {%NWL%var name = qx . core . Environment . get (  " engine . name "  )  ; %NWL%6
ifArg (  " watch - delay "  , function ( value )  {%NWL%options . watchDelay = value ;%NWL%}  )  ; %NWL%ifBooleanArg (  " hot "  , function (  )  {%NWL%ensureArray ( options ,  " plugins "  )  ; %NWL%var HotModuleReplacementPlugin = require (  "  .  .  / lib / HotModuleReplacementPlugin "  )  ; %NWL%options . plugins . push ( new HotModuleReplacementPlugin (  )  )  ;%NWL%}  )  ; %NWL%mapArgToBoolean (  " debug "  )  ; %NWL%ifBooleanArg (  " progress "  , function (  )  {%NWL%var ProgressPlugin = require (  "  .  .  / lib / ProgressPlugin "  )  ; %NWL%5
' loop '  :  '  '  ,%NWL%' shadowedProps '  : null ,%NWL%' support '  : null ,%NWL%' top '  :  '  '  ,%NWL%' useHas '  : false%NWL%}  ; %NWL%var errorProto = Error . prototype ,%NWL%objectProto = Object . prototype ,%NWL%stringProto = String . prototype ; %NWL%var toString = objectProto . toString ; %NWL%var hasOwnProperty = objectProto . hasOwnProperty ; %NWL%9
breadCrumbList . children (  )  . first (  )  . addClass ( settings . breadCrumbActiveClass )  ; %NWL%breadCrumbList . addClass ( settings . breadCrumbListClass )  ;%NWL%}%NWL%if ( typeof ( settings . nextArgs [ settings . nextArgs . length - 1 ]  )  =  =  " function "  )  {%NWL%originalNextCallback = settings . nextArgs [ settings . nextArgs . length - 1 ]  ; %NWL%settings . nextArgs [ settings . nextArgs . length - 1 ]  = function (  )  { insertedNextCallback . call (  )  ; originalNextCallback . call (  )  ;  }  ;%NWL%} else {%NWL%settings . nextArgs [ settings . nextArgs . length ]  = function (  )  { insertedNextCallback . call (  )  ;  }%NWL%}%NWL%var prev = $ ( settings . prevButton )  . insertBefore ( submitButton )  ; %NWL%var next = $ ( settings . nextButton )  . insertBefore ( submitButton )  ; %NWL%9
var scriptCode = Script . fromChunks ( scriptChunks )  ; %NWL%sigs . forEach ( function ( sig )  {%NWL%scriptCode . findAndDelete ( sig )  ;%NWL%}  )  ; %NWL%var success = true , isig = 0 , ikey = 0 ; %NWL%checkMultiSigStep . call ( this )  ; %NWL%function checkMultiSigStep (  )  {%NWL%try {%NWL%if ( success && sigsCount > 0 )  {%NWL%var sig = sigs [ isig ]  ; %NWL%var key = keys [ ikey ]  ; %NWL%9
}%NWL%else {%NWL%factory ( jQuery )  ;%NWL%}%NWL%}  )  ( function ( $ )  {%NWL%var API_BASE =  ' https :  /  / www . googleapis . com / calendar / v3 / calendars '  ; %NWL%var fc = $ . fullCalendar ; %NWL%var applyAll = fc . applyAll ; %NWL%fc . sourceNormalizers . push ( function ( sourceOptions )  {%NWL%var googleCalendarId = sourceOptions . googleCalendarId ; %NWL%var url = sourceOptions . url ; %NWL%9
cached = new data . constructor ( data )%NWL%cached . nodes =  [ node ]%NWL%}%NWL%else cached . nodes . intact = true%NWL%}%NWL%return cached%NWL%}%NWL%function setAttributes ( node , tag , dataAttrs , cachedAttrs , namespace )  {%NWL%for ( var attrName in dataAttrs )  {%NWL%var dataAttr = dataAttrs [ attrName ]%NWL%var cachedAttr = cachedAttrs [ attrName ]%NWL%9
acronym . setAttribute (  " dir "  ,  " ltr "  )  ; %NWL%defaultAttributes . setNamedItem ( acronym )  ; %NWL%var doctype = new dom . DocumentType ( doc ,  " html "  , entities , notations , defaultAttributes )  ; %NWL%doc . doctype = doctype ; %NWL%doc . implementation = implementation ; %NWL%doc . appendChild ( doc . createComment (  " This is comment number 1 .  "  )  )  ; %NWL%var html   = doc . createElement (  " html "  )  ; %NWL%var html   = doc . appendChild ( html )  ; %NWL%var head   = doc . createElement (  " head "  )  ; %NWL%var head   = html . appendChild ( head )  ; %NWL%var meta   = doc . createElement (  " meta "  )  ; %NWL%6
+  " can ' t be done if there are active requests "  )  ;%NWL%}%NWL%this . _running = false ; %NWL%this . _stopping = false ; %NWL%this . _finished = true ; %NWL%this . _requests =  {  }  ; %NWL%this . _highPriority =  [  ]  ; %NWL%var localChanges = this . _localChanges ; %NWL%var remoteChanges = this . _remoteChanges ; %NWL%var conflicts = this . _conflicts . concat (  )  ; %NWL%var deferred = this . _deferred ; %NWL%7
return RGBAStrToHSB ( colorStr )  ;%NWL%}  ,%NWL%RGBToHSB = function ( rgb )  {%NWL%var hsb =  {%NWL%h : 0 ,%NWL%s : 0 ,%NWL%b : 0 ,%NWL%a :  ( rgb . a =  = undefined ) ? 1 : rgb . a%NWL%}  ; %NWL%var min = Math . min ( rgb . r , rgb . g , rgb . b )  ; %NWL%var max = Math . max ( rgb . r , rgb . g , rgb . b )  ; %NWL%9
var getScopeParam = module . exports . getScopeParam = function ( val , defaultVal )  {%NWL%defaultVal =  ( defaultVal ) ? getScopeParam ( defaultVal )  : SearchConstants . general . SCOPE_TENANT ; %NWL%if ( _ . contains ( SCOPES_ALL , val )  )  {%NWL%return val ;%NWL%} else if ( TenantsAPI . getTenant ( val )  )  {%NWL%return val ;%NWL%} else {%NWL%return defaultVal ;%NWL%}%NWL%}  ; %NWL%var getSortParam = module . exports . getSortParam = function ( val , defaultVal )  {%NWL%0
var MuseumClient = require (  "  .  / user / MuseumClient "  )  ; %NWL%var MessageEncoder = require (  "  .  / utils / MessageEncoder "  )  ; %NWL%var MessageIds = require (  "  .  / constants / MessageIds "  )  ; %NWL%var HttpGetRequest = require (  "  .  .  / utils / loading / HttpGetRequest "  )  ; %NWL%var HttpPostRequest = require (  "  .  .  / utils / loading / HttpPostRequest "  )  ; %NWL%var WebSocketRequest = require (  "  .  .  / utils / loading / WebSocketRequest "  )  ; %NWL%var weblabPaths = require (  "  .  .  / paths "  )  ; %NWL%var weblabConfiguration = require (  "  .  .  / configuration "  )  ; %NWL%var url = require (  " url "  )  ; %NWL%var os = require (  " os "  )  ; %NWL%var net = require (  " net "  )  ; %NWL%8
var HttpSource = Source . extend (  {%NWL%_proccessSourceParams : function ( sourceParams )  {%NWL%sourceParams = sourceParams || {  }  ; %NWL%sourceParams . parametrizedUrl = new ParametrizedUrl ( sourceParams . url )  ; %NWL%sourceParams . params = sourceParams . params || {  }  ; %NWL%sourceParams . query = sourceParams . query || {  }  ; %NWL%sourceParams . method =  ( sourceParams . method || ' get '  )  . toLowerCase (  )  ; %NWL%sourceParams . headers = sourceParams . headers || {  }  ; %NWL%var serializer = sourceParams . serializer ; %NWL%if ( serializer )  { this . _serialize = serializer ;  }%NWL%var deserializer = sourceParams . deserializer ; %NWL%8
goog . require (  ' p3rf . perfkit . explorer . models . ResultsDataStatus '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetConfig '  )  ; %NWL%goog . require (  ' p3rf . perfkit . explorer . models . WidgetState '  )  ; %NWL%goog . require (  ' goog . Uri '  )  ; %NWL%describe (  ' dashboardDataService '  , function (  )  {%NWL%var explorer = p3rf . perfkit . explorer ; %NWL%var ChartState = explorer . models . ChartState ; %NWL%var DashboardConfig = explorer . components . dashboard . DashboardConfig ; %NWL%var DatasourceState = explorer . models . DatasourceState ; %NWL%var WidgetConfig = explorer . models . WidgetConfig ; %NWL%var WidgetState = explorer . models . WidgetState ; %NWL%6
assert . equal ( require ( loadOrder +  ' file5 '  )  . file5 ,  ' file5 . reg2 '  , msg )  ; %NWL%assert . equal ( require ( loadOrder +  ' file6 '  )  . file6 ,  ' file6 / index . js '  , msg )  ; %NWL%try {%NWL%require ( loadOrder +  ' file7 '  )  ;%NWL%} catch ( e )  {%NWL%assert . ok ( e . message . replace (  / \\ / g ,  '  /  '  )  . match (  / file7\ / index\ . node /  )  )  ;%NWL%}%NWL%assert . equal ( require ( loadOrder +  ' file8 '  )  . file8 ,  ' file8 / index . reg '  , msg )  ; %NWL%assert . equal ( require ( loadOrder +  ' file9 '  )  . file9 ,  ' file9 / index . reg2 '  , msg )  ; %NWL%var parent = require (  '  .  .  / fixtures / module - require / parent /  '  )  ; %NWL%var child = require (  '  .  .  / fixtures / module - require / child /  '  )  ; %NWL%9
var __moduleName =  " src / api "  ; %NWL%var extend = _dereq_ (  '  .  / util '  )  . extend ; %NWL%var api =  {  }  ,%NWL%apiNodeList =  {  }  ,%NWL%$ =  {  }  ; %NWL%var array = _dereq_ (  '  .  / array '  )  ; %NWL%var attr = _dereq_ (  '  .  / attr '  )  ; %NWL%var className = _dereq_ (  '  .  / class '  )  ; %NWL%var data = _dereq_ (  '  .  / data '  )  ; %NWL%var dom = _dereq_ (  '  .  / dom '  )  ; %NWL%var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%5
y = this . centery +  ( i =  = 0 ? 0 : y )  ; %NWL%return [ x , y ]  ;%NWL%}%NWL%RGraph . Tradar . prototype . DrawLabels = function (  )%NWL%{%NWL%var labels = this . Get (  ' chart . labels '  )  ; %NWL%if ( labels && labels . length > 0 )  {%NWL%this . context . lineWidth = 1 ; %NWL%this . context . fillStyle = this . Get (  ' chart . text . color '  )  ; %NWL%var offsetx = this . Get (  ' chart . labels . offsetx '  )  ;  /  / Not used yet%NWL%var offsety = this . Get (  ' chart . labels . offsety '  )  ;  /  / Not used yet%NWL%9
[  ' e % e '  , code (  [ 1 ,  ' % '  , 3 ]  )  ]  ,%NWL%[  ' e ^ e '  , code (  [  ' Math . pow (  '  , 1 ,  '  ,  '  , 3 ,  '  )  '  ]  )  ]  ,%NWL%[  '  - e '   , code (  [  '  -  '  , 2 ]  )  ,  { prec :  ' UMINUS '  }  ]  ,%NWL%[  ' e and e '  , code (  [  ' Number (  '  , 1 ,  ' && '  , 3 ,  '  )  '  ]  )  ]  ,%NWL%[  ' e or e '  , code (  [  ' Number (  '  , 1 ,  ' || '  , 3 ,  '  )  '  ]  )  ]  ,%NWL%[  ' not e '  , code (  [  ' Number ( ! '  , 2 ,  '  )  '  ]  )  ]  ,%NWL%[  ' e =  = e '  , code (  [  ' Number (  '  , 1 ,  '  =  =  '  , 3 ,  '  )  '  ]  )  ]  ,%NWL%[  ' e ! = e '  , code (  [  ' Number (  '  , 1 ,  ' ! =  '  , 3 ,  '  )  '  ]  )  ]  ,%NWL%[  ' e ~ = e '  , code (  [  ' RegExp (  '  , 3 ,  '  )  . test (  '  , 1 ,  '  )  '  ]  )  ]  ,%NWL%[  ' e < e '  , code (  [  ' Number (  '  , 1 ,  '  <  '  , 3 ,  '  )  '  ]  )  ]  ,%NWL%[  ' e <  = e '  , code (  [  ' Number (  '  , 1 ,  '  <  =  '  , 3 ,  '  )  '  ]  )  ]  ,%NWL%7
}%NWL%}  ,%NWL%generateMarker : function ( item )  {%NWL%var d = item . getData (  )  ; %NWL%d . _index = item . _index ; %NWL%var lat = d [ this . latitudeField ]  ; %NWL%var lon = d [ this . longitudeField ]  ; %NWL%var address = d [ this . addressField ]  ; %NWL%var title = d [ this . titleField ]  ; %NWL%var desc = d [ this . descriptionField ]  ; %NWL%var icon = d [ this . iconField ]  ; %NWL%7
this . nr   = nr%NWL%this . header  = header%NWL%this . footer  = footer%NWL%this . afterBreak = afterBreak%NWL%this . top = this . bottom = 0%NWL%}%NWL%Page . prototype . setup = function ( cursor )  {%NWL%var style = cursor . style%NWL%var top = this . top = cursor . y = style . height - style . paddingTop%NWL%cursor . y -  = cursor . offset || 0%NWL%var y = cursor . y%NWL%7
mdns    = require (  ' mdns '  )  ;%NWL%} catch ( ex )  {%NWL%exports . start = function (  )  {  }  ; %NWL%return utility . logger (  ' devices '  )  . info (  ' failing video - appletv media ( continuing )  '  ,  { diagnostic : ex . message }  )  ;%NWL%}%NWL%var airplay  = require (  ' airplay '  )%NWL%, util   = require (  ' util '  )%NWL%, devices  = require (  '  .  /  .  .  /  .  .  / core / device '  )%NWL%, steward  = require (  '  .  /  .  .  /  .  .  / core / steward '  )%NWL%, media   = require (  '  .  /  .  .  / device - media '  )%NWL%, url   = require (  ' url '  )%NWL%6
} else {%NWL%vec3 . scaleAndAdd ( out . _array , origin , direction , t0 )  ; %NWL%return out ;%NWL%}%NWL%}  ;%NWL%}  )  (  )  ,%NWL%intersectBoundingBox : function ( bbox , out )  {%NWL%var dir = this . direction . _array ; %NWL%var origin = this . origin . _array ; %NWL%var min = bbox . min . _array ; %NWL%var max = bbox . max . _array ; %NWL%9
return fnName ;%NWL%}  ; %NWL%Resource . prototype . createAction = function ( actionDefinition , isManaged )  {%NWL%var url ; %NWL%var fnName = this . chooseMethodName ( actionDefinition )  ; %NWL%var action = typeof actionDefinition . apiCall =  =  =  ' undefined ' ?%NWL%actionDefinition : actionDefinition . apiCall ; %NWL%var httpMethod =  ( actionDefinition . method || ' GET '  )  . toUpperCase (  )  ; %NWL%var host = actionDefinition . host || this . host ; %NWL%var sslHost = actionDefinition . sslHost || this . sslHost ; %NWL%var port = actionDefinition . port || this . port ; %NWL%8
var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var capsela = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var Browser = capsela . Browser ; %NWL%var HttpClient = capsela . HttpClient ; %NWL%var Request = capsela . Request ; %NWL%var ClientResponse = capsela . ClientResponse ; %NWL%var Q = require (  ' q '  )  ; %NWL%var Pipe = require (  ' capsela - util '  )  . Pipe ; %NWL%var Log = require (  ' capsela - util '  )  . Log ; %NWL%var Cookie = capsela . Cookie ; %NWL%3
this . calibrationFlag = false ; %NWL%this . cx = x ; %NWL%this . cy = y ;%NWL%}%NWL%this . ix = x ; %NWL%this . iy = y ;%NWL%}%NWL%}  ; %NWL%Plugin . prototype . onMouseMove = function ( event )  {%NWL%var clientX = event . clientX ; %NWL%var clientY = event . clientY ; %NWL%9
var span = document . createElement (  " span "  )  ;  /  / $NON - NLS - 0$%NWL%span . classList . add (  " objectLink "  )  ;  /  / $NON - NLS - 0$%NWL%span . title = messages [  ' CheckJsConsoleDrillDown '  ]  ; %NWL%span . addEventListener (  " click "  , this . consoleOutput . bind ( this , debugData )  )  ;  /  / $NON - NLS - 0$%NWL%span . textContent = messages [  ' JavaScript Object '  ]  ; %NWL%cell . appendChild ( span )  ;%NWL%} else {%NWL%cell . textContent = value ;%NWL%}%NWL%}%NWL%var div = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%0
var cmEditor ; %NWL%var pluginName  =  " preformatted - text - dialog "  ; %NWL%exports . fn . preformattedTextDialog = function (  )  {%NWL%var _this   = this ; %NWL%var cm    = this . cm ; %NWL%var lang   = this . lang ; %NWL%var editor   = this . editor ; %NWL%var settings  = this . settings ; %NWL%var cursor   = cm . getCursor (  )  ; %NWL%var selection  = cm . getSelection (  )  ; %NWL%var classPrefix = this . classPrefix ; %NWL%4
var isArray   = require (  ' lodash / lang / isArray '  )  ; %NWL%var isString   = require (  ' lodash / lang / isString '  )  ; %NWL%var isPlainObject = require (  ' lodash / lang / isPlainObject '  )  ; %NWL%var isObject   = require (  ' lodash / lang / isObject '  )  ; %NWL%var isUndefined  = require (  ' lodash / lang / isUndefined '  )  ; %NWL%var create   = require (  ' lodash / object / create '  )  ; %NWL%var omit    = require (  ' lodash / object / omit '  )  ; %NWL%var merge   = require (  ' lodash / object / merge '  )  ; %NWL%var camelCase  = require (  ' lodash / string / camelCase '  )  ; %NWL%var util   = require (  ' util '  )  ; %NWL%var pluralize = require (  ' pluralize '  )  ; %NWL%9
r . setOptionFromString (  " barbase "  , 3 . 45 )  ; %NWL%var barbase = r . getOptionValue (  " barbase "  )  ; %NWL%expect ( DataValue . isInstance ( barbase )  )  . toBe ( true )  ; %NWL%expect ( typeof ( barbase . getRealValue (  )  )  )  . toBe (  " number "  )  ; %NWL%expect ( barbase . getRealValue (  )  )  . toEqual ( 3 . 45 )  ;%NWL%}  )  ; %NWL%xit (  " should be able to set / get the ' barbase ' option using DatetimeValue "  ,  function (  )  {%NWL%r . verticalaxis (  )  . type (  " datetime "  )  ;%NWL%}  )  ; %NWL%it (  " should be able to get the default value of the ' fillcolor ' option "  ,  function (  )  {%NWL%var fillcolor = r . getOptionValue (  " fillcolor "  )  ; %NWL%1
var client = common . freshClient ( config )%NWL%var proxy = client . config . proxy%NWL%t . equal ( proxy . http ,  ' http :  /  / proxy . npm : 8088 /  '  )%NWL%t . equal ( proxy . https ,  ' https :  /  / proxy . npm : 8043 /  '  )%NWL%t . equal ( proxy . localAddress ,  ' localhost . localdomain '  )%NWL%var ssl = client . config . ssl%NWL%t . equal ( ssl . ca ,  ' not including a PEM '  )%NWL%t . equal ( ssl . certificate ,  ' still not including a PEM '  )%NWL%t . equal ( ssl . key ,  ' nope '  )%NWL%t . equal ( ssl . strict , false )%NWL%var retry = client . config . retry%NWL%1
}%NWL%}  )  ; %NWL%app . get (  '  / template /  : filename (  *  )  '  , function ( req , res )  {%NWL%res . sendfile ( __dirname +  '  / sample_servers /  '  + req . params . filename +  '  . zip '  )  ;%NWL%}  )  ; %NWL%app . get (  '  / connect /  : serverid (  *  )  '  , function ( req , res )  {%NWL%var serverid = req . params . serverid ; %NWL%res . sendfile ( __dirname +  '  / client / index . html '  )  ;%NWL%}  )  ; %NWL%app . get (  '  / client /  : filename (  *  )  '  , function ( req , res )  {%NWL%var filename = req . params . filename ; %NWL%6
WalkontableCornerOverlay . prototype . resetFixedPosition = function (  )  {%NWL%if ( !this . instance . wtTable . holder . parentNode )  {%NWL%return ;  /  / removed from DOM%NWL%}%NWL%var elem = this . clone . wtTable . holder . parentNode ,%NWL%finalLeft ,%NWL%finalTop ; %NWL%if ( this . trimmingContainer =  =  = window )  {%NWL%var box = this . instance . wtTable . hider . getBoundingClientRect (  )  ; %NWL%var top = Math . ceil ( box . top )  ; %NWL%var left = Math . ceil ( box . left )  ; %NWL%9
var exec = require (  ' child_process '  )  . exec ; %NWL%var fs = require (  '  .  .  / util / fs '  )  ; %NWL%var glob = require (  ' glob '  )  ; %NWL%var handlebars = require (  ' handlebars '  )  ; %NWL%var appDirs = require (  '  .  .  / util / appDirs '  )  ; %NWL%var message = require (  '  .  .  / util / message '  )  ; %NWL%var inflector = require (  '  .  .  / util / inflector '  )  ; %NWL%var walk = require (  ' walk '  )  . walkSync ; %NWL%var precompile = require (  '  .  .  / util / precompile '  )  ; %NWL%var config = require (  '  .  .  / util / config '  )  ; %NWL%var fsmonitor    = require (  ' fsmonitor '  )  ; %NWL%2
}  ,%NWL%_getVisibleLayers : function ( layers )  {%NWL%return _ . filter ( layers , function ( layer )  { return layer . visible ;  }  )  ;%NWL%}  ,%NWL%_getUrl : function (  )  {%NWL%var username  = this . options . user_name ; %NWL%var bbox   = this . imageOptions . bbox ; %NWL%var layergroupid = this . imageOptions . layergroupid ; %NWL%var zoom   = this . imageOptions . zoom || this . defaults . zoom ; %NWL%var center   = this . imageOptions . center || this . defaults . center ; %NWL%var size   = this . imageOptions . size || this . defaults . size ; %NWL%8
function resetAnimations (  )  {%NWL%var orange = $ (  " div . block . orange "  )  ; %NWL%var purple = $ (  " div . block . purple "  )  ; %NWL%$scope . progress = init (  )  ; %NWL%$scope . elapsedTime =  "  "  ; %NWL%$timeline . reset (  [ orange , purple ]  )  ;%NWL%}%NWL%function startAnimation (  )  {%NWL%var startedAt = Date . now (  )  ; %NWL%var orange = $ (  " div . block . orange "  )  ; %NWL%var purple = $ (  " div . block . purple "  )  ; %NWL%1
, padManager = require (  "  .  .  / db / PadManager "  )%NWL%, padMessageHandler = require (  "  .  / PadMessageHandler "  )%NWL%, async = require (  " async "  )%NWL%, fs = require (  " fs "  )%NWL%, path = require (  " path "  )%NWL%, settings = require (  '  .  .  / utils / Settings '  )%NWL%, formidable = require (  ' formidable '  )%NWL%, os = require (  " os "  )%NWL%, importHtml = require (  "  .  .  / utils / ImportHtml "  )%NWL%, importEtherpad = require (  "  .  .  / utils / ImportEtherpad "  )%NWL%, log4js = require (  " log4js "  )%NWL%2
c3 . height = h ; %NWL%ctx3 . putImageData ( imgData2 , 0 , 0 )  ; %NWL%var SEED_COLOR = ctx3 . getImageData ( point2 . x , point2 . y , 1 , 1 )  ; %NWL%if ( SEED_COLOR . data [ 3 ]  =  = 0 ) return ; %NWL%var stack = new Array (  )  ; %NWL%stack . push ( point2 )  ; %NWL%while ( stack . length > 0 )%NWL%{%NWL%var p = stack . pop (  )  ; %NWL%var x = p . x ; %NWL%var y = p . y ; %NWL%9
( function ( testFns )  {%NWL%var breeze = testFns . breeze ; %NWL%var core = breeze . core ; %NWL%var Event = core . Event ; %NWL%var EntityQuery = breeze . EntityQuery ; %NWL%var MetadataStore = breeze . MetadataStore ; %NWL%var EntityManager = breeze . EntityManager ; %NWL%var EntityKey = breeze . EntityKey ; %NWL%var FilterQueryOp = breeze . FilterQueryOp ; %NWL%var Predicate = breeze . Predicate ; %NWL%var QueryOptions = breeze . QueryOptions ; %NWL%2
var getUri = require (  ' get - uri '  )  ; %NWL%Object . defineProperty ( exports ,  ' protocols '  ,  {%NWL%enumerable : true ,%NWL%configurable : true ,%NWL%get : function (  )  { return Object . keys ( getUri . protocols )  ;  }%NWL%}  )  ; %NWL%var net = require (  ' net '  )  ; %NWL%var tls = require (  ' tls '  )  ; %NWL%var crypto = require (  ' crypto '  )  ; %NWL%var parse = require (  ' url '  )  . parse ; %NWL%var format = require (  ' url '  )  . format ; %NWL%9
attr (  ' height '  , height )  ;%NWL%}  ,%NWL%_onRightChange : Ember . on (%NWL%' didInsertElement '  ,%NWL%Ember . observer (  ' right '  ,  ' graphHeight '  ,  ' graphWidth '  ,  ' textPadding '  , function (  )  {%NWL%Ember . run . once ( this , this . _updateRightText )  ;%NWL%}  )%NWL%)  ,%NWL%leftDisplay : Ember . computed (  ' left '  ,  ' formatter '  , function (  )  {%NWL%var formatter = this . get (  ' formatter '  )  ; %NWL%var left = this . get (  ' left '  )  ; %NWL%9
}  ,%NWL%onMouseMove : function ( event )  {%NWL%if ( this . isKeyCroping )%NWL%return this . onMouseMoveKeyCrop ( event )  ; %NWL%if ( null =  =  = this . startX || null =  =  = this . startY )  {%NWL%return ;%NWL%}%NWL%var canvas = this . darkroom . canvas ; %NWL%var pointer = canvas . getPointer ( event . e )  ; %NWL%var x = pointer . x ; %NWL%var y = pointer . y ; %NWL%9
. alias (  ' s '  ,  ' service '  )%NWL%. alias (  ' p '  ,  ' sample '  )%NWL%. alias (  ' l '  ,  ' limit '  )%NWL%. alias (  ' a '  ,  ' app '  )%NWL%. describe (  ' s '  ,  ' The service to process '  )%NWL%. describe (  ' p '  ,  ' Set the sample rate , by default not sampled '  )%NWL%. describe (  ' m '  ,  ' The maximum number of profiles to process per service '  )%NWL%. describe (  ' a '  ,  ' Only consider synclets matching the app ID '  )%NWL%. argv ; %NWL%var async = require (  ' async '  )  ; %NWL%var riak = require (  ' riak '  )  ; %NWL%9
curOption [ parts [ i ]  ]  = curOption [ parts [ i ]  ] || {  }  ; %NWL%curOption = curOption [ parts [ i ]  ]  ;%NWL%}%NWL%key = parts . pop (  )  ; %NWL%if ( value =  =  = undefined )  {%NWL%return curOption [ key ]  =  =  = undefined ? null : curOption [ key ]  ;%NWL%}%NWL%curOption [ key ]  = value ;%NWL%} else {%NWL%if ( value =  =  = undefined )  {%NWL%return this . options [ key ]  =  =  = undefined ? null : this . options [ key ]  ; %NWL%5
log . error ( pkg . _id +  "  .  "  + stage ,  " continuing anyway "  )%NWL%return cb (  )%NWL%}%NWL%cb ( er )%NWL%}  )%NWL%}%NWL%function runHookLifecycle ( pkg , env , wd , unsafe , cb )  {%NWL%var stage = env . npm_lifecycle_event%NWL%, hook = path . join ( npm . dir ,  "  . hooks "  , stage )%NWL%, user = unsafe ? null : npm . config . get (  " user "  )%NWL%, group = unsafe ? null : npm . config . get (  " group "  )%NWL%9
EventEmitter . prototype . _emitNew = function EventEmitter$_emitNew ( type , fn )  {%NWL%var i = this . _indexOfEvent (  " newListener "  )  ; %NWL%if ( i < 0 ) return ; %NWL%this . emit (  " newListener "  , type , fn )  ;%NWL%}  ; %NWL%EventEmitter . prototype . _indexOfEvent =%NWL%function EventEmitter$_indexOfEvent ( eventName )  {%NWL%var j = 0 ; %NWL%var eventSpace = this . _eventSpace + 1 ; %NWL%var eventCount = this . _eventCount ; %NWL%var events = this . _events ; %NWL%9
if (  ( bodyA . id =  = shipBody . id || bodyB . id =  = shipBody . id )  )  {%NWL%if ( !hideShip && allowShipCollision )  {%NWL%var aship = bodyA . shapes [ 0 ]  . collisionGroup =  = SHIP ; %NWL%var ship = aship ? bodyA : bodyB ; %NWL%var asteroid = !aship ? bodyA : bodyB ; %NWL%crash ( ship , asteroid )  ;%NWL%}%NWL%} else if ( bodyA . shapes [ 0 ]  . collisionGroup =  = BULLET%NWL%|| bodyB . shapes [ 0 ]  . collisionGroup =  = BULLET )  {%NWL%var abullet = bodyA . shapes [ 0 ]  . collisionGroup =  = BULLET ; %NWL%var bullet = abullet ? bodyA : bodyB ; %NWL%3
var result = wm . getBackgroundStyle ( v . startColor , v . endColor , v . colorStop , v . direction ,  "  "  )  ; %NWL%if ( dojo . isIE < 10 )  {%NWL%this . html . domNode . style . filter = result ;%NWL%} else {%NWL%this . html . domNode . style . background = result ;%NWL%}%NWL%}  ,%NWL%getDataValue : function (  )  {%NWL%var direction = this . direction . getDataValue (  )  ; %NWL%var colorStop = direction =  =  " vertical " ? 100 - this . colorStop . getDataValue (  )  : this . colorStop . getDataValue (  )  ; %NWL%var startColor = this . startColor . getDataValue (  )  ; %NWL%8
}  ,%NWL%onMouseUp : function ( e )  {%NWL%this . down = false ;%NWL%}  ,%NWL%onMouseMove : function ( e )  {%NWL%if ( !this . down ) return ; %NWL%var offset = this . $el . offset (  )  ,%NWL%x =  ( e . clientX - offset . left )  / this . canvas . width * 2 ,%NWL%y =  ( e . clientY - offset . top )  / this . canvas . height * 2 ; %NWL%var notes = this . model . get (  " notes "  )  ; %NWL%var fromOctave = this . model . get (  " fromOctave "  )  ; %NWL%9
var data = item [ 1 ]%NWL%var loc = data . loc%NWL%var locs = data . locs . filter ( function ( l )  {%NWL%return l ! =  = loc%NWL%}  )%NWL%if ( locs . length =  =  = 0 )  {%NWL%return cb ( null ,  [  ]  )%NWL%}%NWL%var has = data . has%NWL%var versions = data . versions%NWL%var ranges = data . ranges%NWL%1
this . _setEncodeChar ( uChar . charCodeAt ( 0 )  , options . encodeAdd [ uChar ]  )  ;%NWL%}%NWL%this . defCharSB  = this . encodeTable [ 0 ]  [ options . iconv . defaultCharSingleByte . charCodeAt ( 0 )  ]  ; %NWL%if ( this . defCharSB =  =  = UNASSIGNED ) this . defCharSB = this . encodeTable [ 0 ]  [  ' ? '  ]  ; %NWL%if ( this . defCharSB =  =  = UNASSIGNED ) this . defCharSB =  " ? "  . charCodeAt ( 0 )  ; %NWL%if ( typeof options . gb18030 =  =  =  ' function '  )  {%NWL%this . gb18030 = options . gb18030 (  )  ;  /  / Load GB18030 ranges .%NWL%var thirdByteNodeIdx = this . decodeTables . length ; %NWL%var thirdByteNode = this . decodeTables [ thirdByteNodeIdx ]  = UNASSIGNED_NODE . slice ( 0 )  ; %NWL%var fourthByteNodeIdx = this . decodeTables . length ; %NWL%var fourthByteNode = this . decodeTables [ fourthByteNodeIdx ]  = UNASSIGNED_NODE . slice ( 0 )  ; %NWL%8
return {%NWL%token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / mysql_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / doc_comment_highlight_rules "  ,  " ace / mode / text_highlight_rules "  ]  , function ( acequire , exports , module )  {%NWL%var oop = acequire (  "  .  .  / lib / oop "  )  ; %NWL%var lang = acequire (  "  .  .  / lib / lang "  )  ; %NWL%9
}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%var align = this . align_ ; %NWL%6
else if ( document . body . clientWidth )  {%NWL%Geometry . setScrollPos = function ( pos )  { document . body . scrollLeft = pos . x ; document . body . scrollTop = pos . y }  ;%NWL%}%NWL%var kShadowSize = 10 ; %NWL%var gCanvasWidthFull = 620 ; %NWL%var gCanvasWidthMin = 140 ; %NWL%var gCanvasWidth = gCanvasWidthFull ; %NWL%var gCanvasHeightFull = 400 ; %NWL%var gCanvasHeightHalf = 175 ; %NWL%var gCanvasHeightMin = 45 ; %NWL%var gCanvasHeight = gCanvasHeightFull ; %NWL%6
var getScriptCode = require (  '  .  / script - tag - finder '  )  . getScriptCode ; %NWL%var treeMatcher = require (  '  .  / tree - matcher '  )  ; %NWL%var andPat = treeMatcher . andPat ; %NWL%var orPat = treeMatcher . orPat ; %NWL%function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%var pathResolve = require (  '  .  / utils '  )  . pathResolve ; %NWL%var objectPat = treeMatcher . objectPat ; %NWL%2
_ = require (  ' underscore '  )  ; %NWL%exports . build = function ( pkg , sources , callback )  {%NWL%var packages =  {  }  ; %NWL%if ( pkg . source ! =  =  ' root ' && pkg . config . name )  {%NWL%packages [ pkg . config . name ]  = exports . createPackage (  [  ]  )  ;%NWL%}%NWL%exports . extend ( pkg , sources , packages , callback )  ;%NWL%}  ; %NWL%exports . extend = function ( pkg , sources , packages , callback )  {%NWL%var name = pkg . config . name ; %NWL%var version = pkg . config . version ; %NWL%9
var rayLight = raycasterLight . ray ; %NWL%outputColor . setRGB ( 0 , 0 , 0 )  ; %NWL%var intersections = raycaster . intersectObjects ( objects , true )  ; %NWL%if ( intersections . length =  =  = 0 )  {%NWL%return ;%NWL%}%NWL%var intersection = intersections [ 0 ]  ; %NWL%var point = intersection . point ; %NWL%var object = intersection . object ; %NWL%var material = object . material ; %NWL%var face = intersection . face ; %NWL%7
define ( function ( require )  {%NWL%' use strict '  ; %NWL%var AsyncStorage = require (  ' modules / async_storage '  )  ; %NWL%var ApnConst = require (  ' modules / apn / apn_const '  )  ; %NWL%var ApnUtils = require (  ' modules / apn / apn_utils '  )  ; %NWL%var ApnItem = require (  ' modules / apn / apn_item '  )  ; %NWL%var ApnSettings = require (  ' modules / apn / apn_settings '  )  ; %NWL%var ApnList = require (  ' modules / apn / apn_list '  )  ; %NWL%var ApnSelections = require (  ' modules / apn / apn_selections '  )  ; %NWL%var APN_TYPES = ApnConst . APN_TYPES ; %NWL%var APN_LIST_KEY = ApnConst . APN_LIST_KEY ; %NWL%9
newTop + rectHeight ,%NWL%newLeft + rectWidth ,%NWL%newTop )  )  ;%NWL%}%NWL%}  ,%NWL%mapDivClick : function ( evt )  {%NWL%var pxCenter = this . rectPxBounds . getCenterPixel (  )  ; %NWL%var deltaX = evt . xy . x - pxCenter . x ; %NWL%var deltaY = evt . xy . y - pxCenter . y ; %NWL%var top = this . rectPxBounds . top ; %NWL%var left = this . rectPxBounds . left ; %NWL%9
}  )  ; %NWL%if ( typeof params . wait =  =  =  " number "  )  {%NWL%params . wait =  ( function ( wait )  {%NWL%return function (  )  {%NWL%return $cs . sleep ( wait )  ;%NWL%}  ;%NWL%}  )  ( params . wait )  ;%NWL%}%NWL%var check = params . check ; %NWL%var wait  = params . wait ; %NWL%var max  = params . max ; %NWL%8
this . counter = 0 ; %NWL%this . t = 0 ; %NWL%this . maxHeight = 0 ; %NWL%this . currWidth = 0 ; %NWL%this . total = this . box . find ( this . options . selector )  ; %NWL%this . matrix =  {  }  ; %NWL%this . gridrow = new Object ; %NWL%var calcWidth = !this . options . centered ? this . box . innerWidth (  )  : $ ( window )  . width (  )  ; %NWL%this . columns = Math . max ( this . options . minColumns , parseInt ( calcWidth /  ( this . options . minWidth + this . options . gutter )  )  + 1 )  ; %NWL%var minWidth = this . options . minWidth ; %NWL%var gutter = this . options . gutter ; %NWL%9
this . input . unbind (  ' touch '  , _on_touch , this )  ;%NWL%}  ,%NWL%update : function ( clock , delta )  {%NWL%lychee . game . State . prototype . update . call ( this , clock , delta )  ; %NWL%var jukebox  = this . jukebox ; %NWL%var renderer  = this . renderer ; %NWL%var background = this . queryLayer (  ' background '  ,  ' background '  )  ; %NWL%var gamelayer  = this . getLayer (  ' game '  )  ; %NWL%var uilayer  = this . getLayer (  ' ui '  )  ; %NWL%var ball  = this . queryLayer (  ' game '  ,  ' ball '  )  ; %NWL%var player  = this . queryLayer (  ' game '  ,  ' player '  )  ; %NWL%9
}  )%NWL%. then ( function ( callback )  {%NWL%var code = this . get (  ' code '  )%NWL%module . exports . lastLostPasswordCode = code%NWL%callback (  )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . setPassword = function ( args , callback )  {%NWL%var code = args . code%NWL%var password = args . password%NWL%9
return x . forced_charset ;%NWL%}%NWL%define_variable (  ' forced_charset_list '  , null ,%NWL%" Alist mapping url - regexps to forced charsets .  The first match "  +%NWL%" will be used .  "  )  ; %NWL%function apply_load_spec ( target , spec )  {%NWL%if ( ! ( spec instanceof load_spec )  )%NWL%spec = load_spec ( spec )  ; %NWL%var uri = load_spec_uri_string ( spec )  ; %NWL%var flags = load_spec_flags ( spec )  ; %NWL%var referrer = load_spec_referrer ( spec )  ; %NWL%9
parentNode . insertBefore ( viewport , beforeNode )  ; %NWL%iframe . contentDocument . open (  )  ; %NWL%iframe . contentDocument . write (  '  < !doctype html >  < html >  < head >  '  )  ; %NWL%iframe . contentDocument . write ( DEFAULT_STYLE_TAG )  ; %NWL%iframe . contentDocument . write (  '  <  / head >  < body >  '  )  ; %NWL%iframe . contentDocument . write ( htmlStr )  ; %NWL%iframe . contentDocument . write (  '  <  / body >  '  )  ; %NWL%iframe . contentDocument . close (  )  ; %NWL%var iframeBody = iframe . contentDocument . body ; %NWL%var scrollWidth = iframeBody . scrollWidth ; %NWL%var scrollHeight = iframeBody . scrollHeight ; %NWL%9
document . addEventListener (  ' mouseup '  , endDrag ( slider , onMove )  , false )  ;%NWL%}%NWL%e . preventDefault (  )  ; %NWL%return false ;%NWL%}  ;%NWL%}  ; %NWL%var onDragH = function ( e , slider )  {%NWL%var origX = e . screenX ; %NWL%var origLeft = parseInt ( slider . div . style . left )  ; %NWL%var min = slider . min ; %NWL%var max = slider . max ; %NWL%9
} else {%NWL%$ (  ' #changepic - uploading - container . progress '  , $rootel )  . show (  )  ;%NWL%}%NWL%}  ; %NWL%var updateProgress = function ( progress )  {%NWL%$ (  '  . progress - bar '  , $rootel )  . css (  ' width '  , progress +  ' % '  )  . attr (  ' aria - valuenow '  , progress )  ; %NWL%$ (  '  . progress - bar . sr - only '  , $rootel )  . text ( progress +  ' % '  )  ;%NWL%}  ; %NWL%var calculateCoordinates = function ( crd )  {%NWL%var naturalWidth = $ (  ' #changepic - jcrop '  , $rootel )  [ 0 ]  . naturalWidth ; %NWL%var naturalHeight = $ (  ' #changepic - jcrop '  , $rootel )  [ 0 ]  . naturalHeight ; %NWL%9
}%NWL%var npm = require (  "  .  / npm . js "  )%NWL%, semver = require (  " semver "  )%NWL%, readJson = require (  " read - package - json "  )%NWL%, readInstalled = require (  " read - installed "  )%NWL%, log = require (  " npmlog "  )%NWL%, path = require (  " path "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, cache = require (  "  .  / cache . js "  )%NWL%, asyncMap = require (  " slide "  )  . asyncMap%NWL%, chain = require (  " slide "  )  . chain%NWL%9
s +  =  "   } \n "  ; %NWL%s +  =  "  }  )  ; \n "  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . id =  " dojox . robot . recorder "  ; %NWL%div . style . backgroundColor =  " white "  ; %NWL%div . style . position =  " absolute "  ; %NWL%var scroll =  { y :  ( window . pageYOffset || document . documentElement . scrollTop || document . body . scrollTop || 0 )  ,%NWL%x :  ( window . pageXOffset || ( window [  " dojo "  ] ?dojo . _fixIeBiDiScrollLeft ( document . documentElement . scrollLeft )  : undefined ) || document . body . scrollLeft || 0 )  }  ; %NWL%div . style . left = scroll . x +  " px "  ; %NWL%div . style . top = scroll . y +  " px "  ; %NWL%var h1 = document . createElement (  ' h1 '  )  ; %NWL%2
var ports = Ports . find (  {  " host_id "  : hostId ,  " project_id "  : projectId }  )  . fetch (  )  ; %NWL%ports . sort ( sortPort )  ; %NWL%var i = _ . indexOf ( _ . pluck ( ports ,  ' _id '  )  , portId )  + 1 ; %NWL%if ( i >  = ports . length )  {%NWL%i = 0 ;%NWL%}%NWL%return Router . go (  '  / project /  '  + projectId +  '  / services /  '  + ports [ i ]  . _id )  ;%NWL%}  ,%NWL%' click #remove - port '  : function (  )  {%NWL%var projectId = Session . get (  ' projectId '  )  ; %NWL%var portId = Session . get (  ' portId '  )  ; %NWL%9
var v = $ (  ' #form '  )  . validate (  {%NWL%rules :  {%NWL%action :  { date : true , min : 5 }%NWL%}%NWL%}  )  ; %NWL%deepEqual ( element . rules (  )  ,  { date : true , min : 5 }  )  ;%NWL%}  )  ; %NWL%test (  " rules (  )  - external - complete form "  , function (  )  {%NWL%expect ( 1 )  ; %NWL%var methods = $ . extend (  {  }  , $ . validator . methods )  ; %NWL%var messages = $ . extend (  {  }  , $ . validator . messages )  ; %NWL%9
var url = require (  ' url '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var cheerio = require (  ' cheerio '  )  ; %NWL%var domSerializer = require (  ' dom - serializer '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var crc = require (  " crc "  )  ; %NWL%var links = require (  '  .  / links '  )  ; %NWL%var imgUtils = require (  '  .  / images '  )  ; %NWL%var fs = require (  '  .  / fs '  )  ; %NWL%var batch = require (  '  .  / batch '  )  ; %NWL%var code = require (  '  .  / code '  )  ; %NWL%6
point . render ( display )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%if ( display . legend ) display . legend . render ( legendSegments )  ; %NWL%this . transitive . refresh (  )  ;%NWL%}  ; %NWL%this . refresh = function ( panning )  {%NWL%base . refresh . call ( this , panning )  ; %NWL%var display = this . transitive . display ; %NWL%var network = this . transitive . network ; %NWL%var options = this . transitive . options ; %NWL%8
var util = require (  ' util '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var path = require (  ' path '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var spawn = require (  ' win - spawn '  )  ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var opn = require (  ' opn '  )  ; %NWL%var Gaze = require (  ' gaze '  )  . Gaze ; %NWL%var request = require (  ' request '  )  ; %NWL%0
var checkBlobSupport = require (  '  .  / idb - blob - support '  )  ; %NWL%var ADAPTER_VERSION = idbConstants . ADAPTER_VERSION ; %NWL%var ATTACH_AND_SEQ_STORE = idbConstants . ATTACH_AND_SEQ_STORE ; %NWL%var ATTACH_STORE = idbConstants . ATTACH_STORE ; %NWL%var BY_SEQ_STORE = idbConstants . BY_SEQ_STORE ; %NWL%var DETECT_BLOB_SUPPORT_STORE = idbConstants . DETECT_BLOB_SUPPORT_STORE ; %NWL%var DOC_STORE = idbConstants . DOC_STORE ; %NWL%var LOCAL_STORE = idbConstants . LOCAL_STORE ; %NWL%var META_STORE = idbConstants . META_STORE ; %NWL%var applyNext = idbUtils . applyNext ; %NWL%var compactRevs = idbUtils . compactRevs ; %NWL%9
SS . workplaneModel . updatePointer ( that . lastPositionOnWorkplane )  ;%NWL%}%NWL%lastMousePos = mouse ; %NWL%that . updateScene = true ;%NWL%}%NWL%function determinePositionOnWorkplane ( event )  {%NWL%if ( !SS . workplaneModel )  {%NWL%return new THREE . Vector3 (  )  ;%NWL%}%NWL%var origin = SS . objToVector ( SS . workplaneModel . node . origin )  ; %NWL%var axis = SS . objToVector ( SS . workplaneModel . node . axis )  ; %NWL%9
myClass . params [ 0 ]  . description ,%NWL%myClass . properties [ 0 ]  . description ,%NWL%myClass . returns [ 0 ]  . description ,%NWL%myClass . see%NWL%]  . forEach ( function ( value )  {%NWL%expect (  / ^ < p >  ( ? :  .  +  )  < \ / p > $ /  . test ( value )  )  . toBe ( true )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' @see tag support '  , function (  )  {%NWL%var foo = docSet . getByLongname (  ' foo '  )  [ 0 ]  ; %NWL%var bar = docSet . getByLongname (  ' bar '  )  [ 0 ]  ; %NWL%9
TT . View . redrawStory ( story )  ; %NWL%if ( options . onAfterUpdate )  {%NWL%options . onAfterUpdate ( story . id )  ;%NWL%}%NWL%}%NWL%}  )  ; %NWL%return false ;%NWL%}%NWL%pub . openStoryAttachmentControls = function (  )  {%NWL%var id = $ ( this )  . data (  ' id '  )  ; %NWL%var url = $ ( this )  . data (  ' url '  )  ; %NWL%9
}  )  ; %NWL%ed . addVisual (  )  ; %NWL%ed . nodeChanged (  )  ; %NWL%inst . execCommand (  ' mceEndUndoLevel '  )  ; %NWL%tinyMCEPopup . close (  )  ; %NWL%return ;%NWL%}%NWL%switch ( getSelectValue ( formObj ,  ' action '  )  )  {%NWL%case " cell "  : %NWL%var celltype = getSelectValue ( formObj ,  ' celltype '  )  ; %NWL%var scope = getSelectValue ( formObj ,  ' scope '  )  ; %NWL%9
}  ,%NWL%make : function (  )  {%NWL%var that = this ,%NWL%options = this . get (  )  ,%NWL%arrow = options . arrow ,%NWL%style = this . style ,%NWL%n = options . n ; %NWL%var vertices = this . vertices =  [  ]  ; %NWL%var points = this . points =  [  ]  ; %NWL%var render = this . render =  [  ]  ; %NWL%var arrows = this . arrows =  [  ]  ; %NWL%7
}%NWL%var xpathFirst = function ( query , startingPoint )%NWL%{%NWL%var res = xpath ( query , startingPoint )  ; %NWL%if ( res . snapshotLength =  = 0 ) return false ; %NWL%else return res . snapshotItem ( 0 )  ;%NWL%}%NWL%var swapNode = function ( node , swap )%NWL%{%NWL%var nextSibling = node . nextSibling ; %NWL%var parentNode = node . parentNode ; %NWL%9
if ( !fs . existsSync )  {%NWL%fs . existsSync = require (  ' path '  )  . existsSync ;%NWL%}%NWL%var azure ; %NWL%if ( fs . existsSync (  '  .  /  .  .  /  .  .  / lib / azure . js '  )  )  {%NWL%azure = require (  '  .  /  .  .  /  .  .  / lib / azure '  )  ;%NWL%} else {%NWL%azure = require (  ' azure '  )  ;%NWL%}%NWL%var express = require (  ' express '  )  ; %NWL%var formidable = require (  ' formidable '  )  ; %NWL%9
}%NWL%}%NWL%}  ; %NWL%goog . math . Long . prototype . shiftRightUnsigned = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
var $animate ; %NWL%var $parentSelector = this . parentSelector ,%NWL%loadingBarContainer = angular . element ( this . loadingBarTemplate )  ,%NWL%loadingBar = loadingBarContainer . find (  ' div '  )  . eq ( 0 )  ,%NWL%spinner = angular . element ( this . spinnerTemplate )  ; %NWL%var incTimeout ,%NWL%completeTimeout ,%NWL%started = false ,%NWL%status = 0 ; %NWL%var includeSpinner = this . includeSpinner ; %NWL%var includeBar = this . includeBar ; %NWL%9
plugins . register (  "  / session / metrics "  , function ( ob )  {%NWL%var predefinedMetrics = ob . predefinedMetrics ; %NWL%predefinedMetrics . push (  {%NWL%db :  " density "  ,%NWL%metrics :  [%NWL%{ name :  " _density "  , set :  " density "  , short_code : common . dbUserMap [  ' density '  ]  }%NWL%]%NWL%}  )  ;%NWL%}  )  ; %NWL%plugins . register (  "  / o "  , function ( ob )  {%NWL%var params = ob . params ; %NWL%1
}  ,%NWL%scale : function (  )  {%NWL%var s =  ( this . scale || " 1 , 1 "  )  . split (  '  ,  '  )  ; %NWL%if ( s [ 0 ]  )  { s [ 0 ]  = parseFloat ( s [ 0 ]  )  ;  }%NWL%if ( s [ 1 ]  )  { s [ 1 ]  = parseFloat ( s [ 1 ]  )  ;  }%NWL%return ( s [ 0 ]  =  =  = s [ 1 ]  ) ? s [ 0 ]  : s ;%NWL%}  ,%NWL%rotate3d : function (  )  {%NWL%var s =  ( this . rotate3d || " 0 , 0 , 0 , 0deg "  )  . split (  '  ,  '  )  ; %NWL%for ( var i = 0 ; i <  = 3 ;  +  + i )  {%NWL%if ( s [ i ]  )  { s [ i ]  = parseFloat ( s [ i ]  )  ;  }%NWL%3
return collab ;%NWL%}  )  ;%NWL%}%NWL%function createDomain (  )  {%NWL%var Domain = require (  ' mongoose '  )  . model (  ' Domain '  )  ; %NWL%return q . npost ( new Domain ( deployment . domain )  ,  ' save '  )  . spread ( function ( domain )  {%NWL%deployment . models . domain = domain ;%NWL%}  )  ;%NWL%}%NWL%function createUsers (  )  {%NWL%var User = require (  ' mongoose '  )  . model (  ' User '  )  ; %NWL%4
window . myParent = parentNode%NWL%var scrollNode 	 = parentNode . firstChild ; %NWL%var svgRootNode = scrollNode . firstChild . firstChild ; %NWL%var buttonGrow 	 = ORYX . Editor . graft (  " http :  /  / www . w3 . org / 1999 / xhtml "  , parentNode ,  [  ' div '  ,  {  ' class '  :  ' canvas_resize_indicator canvas_resize_indicator_grow '  +  '  '  + position ,  ' title '  : ORYX . I18N . RESIZE . tipGrow + ORYX . I18N . RESIZE [ position ]  }  ]  )  ; %NWL%var buttonShrink 	 = ORYX . Editor . graft (  " http :  /  / www . w3 . org / 1999 / xhtml "  , parentNode ,  [  ' div '  ,  {  ' class '  :  ' canvas_resize_indicator canvas_resize_indicator_shrink '  +  '  '  + position ,  ' title '  : ORYX . I18N . RESIZE . tipShrink + ORYX . I18N . RESIZE [ position ]  }  ]  )  ; %NWL%var offSetWidth = 60 ; %NWL%var isOverOffset = function ( event )  {%NWL%if ( event . target! = parentNode && event . target! = scrollNode&& event . target! = scrollNode . firstChild&& event . target! = svgRootNode&& event . target! = scrollNode )%NWL%return false ; %NWL%var X = event . layerX%NWL%var Y = event . layerY%NWL%9
for ( var i in data )  {%NWL%if ( typeof ( data [ i ]  )  =  =  " function "  )  {%NWL%data [ i ]  = data [ i ]  . join ( settings . join )  ;%NWL%}%NWL%}%NWL%}%NWL%$ (  "  [ data - regex ]  ,  [ data - require ]  ,  [ data - required ]  ,  [ required ]  ,  [ data - equals ]  "  , form )  . filter (  '  : visible '  )  . each ( function (  )  {%NWL%var self = $ ( this )  ; %NWL%var regex = self . attr (  ' data - regex '  )  ; %NWL%var required = self . is (  '  [ required ]  '  ) || self . is (  '  [ data - required ]  '  )  || self . is (  '  [ data - require ]  '  )  ; %NWL%var equals = self . attr (  ' data - equals '  )  ; %NWL%8
var intersectTrimesh_treeTransform = new Transform (  )  ; %NWL%Ray . prototype . intersectTrimesh = function intersectTrimesh (%NWL%mesh ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%8
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdAttribute (  ' TEST_ELEMENT '  ,  ' test_attr '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / attribute / test_attr '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdClick : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
mediaStreamManager . acquire (  {%NWL%constraints :  {%NWL%audio : true ,%NWL%video : true%NWL%}%NWL%}  )  . then ( onSuccess , onFailure )  ;%NWL%}  )  ; %NWL%describe (  ' emits userMedia when getUserMedia calls a success callback '  , function (  )  {%NWL%var myStream =  { foo :  ' bar '  }  ; %NWL%var success = jasmine . createSpy (  ' success '  )  ; %NWL%var failure = jasmine . createSpy (  ' failure '  )  ; %NWL%9
var assert = require (  ' assert '  )  ; %NWL%switch ( process . argv [ 2 ]  )  {%NWL%case undefined : %NWL%return parent (  )  ; %NWL%case ' child '  : %NWL%return child (  )  ; %NWL%default : %NWL%throw new Error (  ' wtf '  )  ;%NWL%}%NWL%function parent (  )  {%NWL%var http = require (  ' http '  )  ; %NWL%0
return callback ( format (%NWL%' unexpected number of matches ( %s ) for " %s " username '  ,%NWL%items . length , username )  )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}%NWL%LdapAuth . prototype . authenticate = function ( username , password , callback )  {%NWL%var self = this ; %NWL%var opts = self . opts ; %NWL%var log = self . log ; %NWL%9
return "  "  ;%NWL%} else {%NWL%return this . $getIndent ( line )  ;  /  / Keep whatever indent the previous line has%NWL%}%NWL%}%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / pgsql_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ,  ' ace / mode / perl_highlight_rules '  ,  ' ace / mode / python_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
" profile . twitter "  : $target . find (  '  [ name = twitter ]  '  )  . val (  )  ,%NWL%" profile . github "  : $target . find (  '  [ name = github ]  '  )  . val (  )  ,%NWL%" profile . site "  : $target . find (  '  [ name = site ]  '  )  . val (  )  ,%NWL%" profile . notifications . users "  : $ (  ' input [ name = notifications_users ]  : checked '  )  . length ,  /  / only actually used for admins%NWL%" profile . notifications . posts "  : $ (  ' input [ name = notifications_posts ]  : checked '  )  . length ,%NWL%" profile . notifications . comments "  : $ (  ' input [ name = notifications_comments ]  : checked '  )  . length ,%NWL%" profile . notifications . replies "  : $ (  ' input [ name = notifications_replies ]  : checked '  )  . length ,%NWL%" inviteCount "  : parseInt ( $target . find (  '  [ name = inviteCount ]  '  )  . val (  )  )%NWL%}  ; %NWL%var old_password = $target . find (  '  [ name = old_password ]  '  )  . val (  )  ; %NWL%var new_password = $target . find (  '  [ name = new_password ]  '  )  . val (  )  ; %NWL%9
var hat    = require (  " hat "  )  ; %NWL%var Query    = require (  " sql - query "  )  ; %NWL%var enforce   = require (  " enforce "  )  ; %NWL%var _     = require (  " lodash "  )  ; %NWL%var Model    = require (  "  .  / Model "  )  . Model ; %NWL%var DriverAliases  = require (  "  .  / Drivers / aliases "  )  ; %NWL%var adapters   = require (  "  .  / Adapters "  )  ; %NWL%var Settings   = require (  "  .  / Settings "  )  ; %NWL%var Singleton   = require (  "  .  / Singleton "  )  ; %NWL%var ORMError   = require (  "  .  / Error "  )  ; %NWL%var Utilities   = require (  "  .  / Utilities "  )  ; %NWL%7
var profile = new ProfileDAO ( db )  ; %NWL%this . displayProfile = function ( req , res , next )  {%NWL%profile . getByUserId ( req . session . userId , function ( error , user )  {%NWL%if ( error ) return next ( error )  ; %NWL%return res . render (  " profile "  , user )  ;%NWL%}  )  ;%NWL%}  ; %NWL%this . handleProfileUpdate = function ( req , res , next )  {%NWL%var firstName = req . body . firstName ; %NWL%var lastName = req . body . lastName ; %NWL%var ssn = req . body . ssn ; %NWL%8
. attr (  ' x1 '  , 0 )%NWL%. attr (  ' x2 '  , 0 )%NWL%. attr (  ' y1 '  , 0 )%NWL%. attr (  ' y2 '  , contentHeight )  ; %NWL%scrubber . append (  ' text '  )%NWL%. attr (  ' y '  , contentHeight )  ;%NWL%}%NWL%if ( scrubbable || selectable )  {%NWL%svg . on (  ' mousemove '  , function (  )  {%NWL%let contentWidth = self . get (  ' contentWidth '  )  ; %NWL%let contentHeight = self . get (  ' contentHeight '  )  ; %NWL%9
var frame = this . get (  ' frame '  )  ; %NWL%if ( canvasElem && frame )  {%NWL%var width = frame . width ; %NWL%var height = frame . height ; %NWL%canvasElem . attr (  ' width '  , width )  ; %NWL%canvasElem . attr (  ' height '  , height )  ; %NWL%if ( canvasElem . length > 0 )  {%NWL%var cntx = this . _canvasie ? this . _canvasie . getContext (  ' 2d '  )  : canvasElem [ 0 ]  . getContext (  ' 2d '  )  ;  /  / Get the actual canvas object context%NWL%if ( cntx )  {%NWL%cntx . clearRect ( 0 , 0 , width , height )  ; %NWL%var startPt = this . get (  ' startPt '  )  ; %NWL%0
var fileUploadMethod =  ( options . fileUploadMethod ? options . fileUploadMethod :  ' multipart '  )  ; %NWL%var url =  ( options . url ? options . url : null )  ; %NWL%success = success ? success :  ( options . success ? options . success : undefined )  ; %NWL%error = error ? error :  ( options . error ? options . error : undefined )  ; %NWL%var username =  ( options . username ? options . username : null )  ; %NWL%var password =  ( options . password ? options . password : null )  ; %NWL%var accepts =  ( options . accepts ? options . accepts :  [  "  *  /  *  "  ]  )  ; %NWL%var cache =  ( options . cache ? options . cache : false )  ; %NWL%var contentType =  ( options . contentType ? options . contentType : null )  ; %NWL%var data =  ( options . data ? options . data : null )  ; %NWL%var dataType =  ( options . dataType ? options . dataType : null )  ; %NWL%1
$ . gameQuery . View . prototype . anchor = function ( x , y )  {%NWL%var position = this . background . position (  )  ; %NWL%if ( x < 0 )%NWL%x = 0 ; %NWL%else if ( x + this . viewport . width (  )  >  = this . background . width (  )  )%NWL%x = this . background . width (  )  - this . viewport . width (  )  ; %NWL%if ( y < 0 )%NWL%y = 0 ; %NWL%else if ( y + this . viewport . height (  )  >  = this . background . height (  )  )%NWL%y = this . background . height (  )  - this . viewport . height (  )  ; %NWL%var offset = this . background . offset (  )  ; %NWL%1
. request (  ' InvalidAuthcode : Invalid auth code '  )%NWL%. success ( callback )%NWL%}  )%NWL%. then ( function ( callback )  {%NWL%callback ( null , tokens [ 0 ]  )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . socialSignup = function ( args , callback )  {%NWL%var provider = args . provider%NWL%var identifier = args . identifier%NWL%9
else {%NWL%$ (  "  . top - header "  )  . removeClass (  " hide "  )  ;%NWL%}%NWL%var layout = $ . cookie (  ' layout '  )  ; %NWL%if ( layout =  =  ' boxed '  )  {%NWL%$ (  "  . wrapper "  )  . addClass (  " boxed "  )  ;%NWL%}%NWL%else {%NWL%$ (  "  . wrapper "  )  . removeClass (  " boxed "  )  ;%NWL%}%NWL%var background = $ . cookie (  ' background '  )  ; %NWL%3
var DB    = require (  ' DB / DBManager '  )  ; %NWL%var jQuery   = require (  ' Utils / jquery '  )  ; %NWL%var Client   = require (  ' Core / Client '  )  ; %NWL%var Session   = require (  ' Engine / SessionStorage '  )  ; %NWL%var Renderer  = require (  ' Renderer / Renderer '  )  ; %NWL%var UIManager  = require (  ' UI / UIManager '  )  ; %NWL%var UIComponent  = require (  ' UI / UIComponent '  )  ; %NWL%var InputBox  = require (  ' UI / Components / InputBox / InputBox '  )  ; %NWL%var ItemInfo  = require (  ' UI / Components / ItemInfo / ItemInfo '  )  ; %NWL%var Inventory  = require (  ' UI / Components / Inventory / Inventory '  )  ; %NWL%var ChatBox   = require (  ' UI / Components / ChatBox / ChatBox '  )  ; %NWL%7
var split = require (  ' split '  )  ; %NWL%var qs = require (  ' querystring '  )  ; %NWL%var encode = require (  ' he '  )  . encode ; %NWL%var concat = require (  ' concat - stream '  )  ; %NWL%var exec = require (  ' child_process '  )  . exec ; %NWL%var run = require (  ' comandante '  )  ; %NWL%var OrderedEmitter = require (  ' ordered - emitter '  )  ; %NWL%var inherits = require (  ' inherits '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%0
}%NWL%}%NWL%}  ; %NWL%goog . math . Long . prototype . shiftRightUnsigned = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
var self = this ; %NWL%self . handlebars = handlebars || require (  ' handlebars '  )  . create (  )  ; %NWL%self . cache =  {  }  ; %NWL%self . __express = middleware . bind ( this )  ; %NWL%self . SafeString = this . handlebars . SafeString ; %NWL%self . Utils = this . handlebars . Utils ;%NWL%}  ; %NWL%function middleware ( filename , options , cb )  {%NWL%var self = this ; %NWL%var cache = self . cache ; %NWL%var handlebars = self . handlebars ; %NWL%9
var st = tinyMCE . parseStyle ( tinyMCE . getAttrib ( tdElm ,  " style "  )  )  ; %NWL%var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = tinyMCE . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = tinyMCE . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var bordercolor = convertRGBToHex ( getStyle ( tdElm ,  ' bordercolor '  ,  ' borderLeftColor '  )  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( tdElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var className = tinyMCE . getVisualAidClass ( tinyMCE . getAttrib ( tdElm ,  ' class '  )  , false )  ; %NWL%var backgroundimage = getStyle ( tdElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  ' ? (  [ ^ '  ]  *  )  ' ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ;  ; %NWL%var id = tinyMCE . getAttrib ( tdElm ,  ' id '  )  ; %NWL%2
}%NWL%return arrays ;%NWL%}%NWL%this . $get =  [%NWL%' $locale '  ,%NWL%' $sce '  ,%NWL%' dateFilter '  ,%NWL%function ( $locale , $sce , dateFilter )  {%NWL%return function ( picker )  {%NWL%var scope = picker . $scope ; %NWL%var options = picker . $options ; %NWL%9
}%NWL%rv +  =  (  '  >  '  + gname +  '  <  / div >  '  )  ;%NWL%}%NWL%rv +  =  '  < div class =  " glyphselectname "  >  '  + gname +  '  <  / div >  '  ; %NWL%rv +  =  '  <  / td >  <  / tr >  <  / table >  '  ; %NWL%return rv ;%NWL%}%NWL%function addCommonLigatures (  )  {%NWL%var ff = parseUnicodeInput (  ' ff '  )  . join (  '  '  )  ; %NWL%var fi = parseUnicodeInput (  ' fi '  )  . join (  '  '  )  ; %NWL%var fl = parseUnicodeInput (  ' fl '  )  . join (  '  '  )  ; %NWL%8
document . removeEventListener ( isTouch ? ' touchmove '  :  ' mousemove '  , onTouchMove , false )  ; %NWL%document . removeEventListener ( isTouch ? ' touchend '  :  ' mouseup '  , onTouchEnd , false )  ; %NWL%touchAnimators . forEach ( function ( animator )  {%NWL%animator . takeoff (  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%function wrapAnimator ( animator , startX , startY , startTime )  {%NWL%var node = animator . node ; %NWL%var constrained = animator . constrained ; %NWL%var paginated = animator . paginated ; %NWL%8
PrimitiveType ,%NWL%Rectangle ,%NWL%RectangleGeometryLibrary )  {%NWL%" use strict "  ; %NWL%var bottomBoundingSphere = new BoundingSphere (  )  ; %NWL%var topBoundingSphere = new BoundingSphere (  )  ; %NWL%var positionScratch = new Cartesian3 (  )  ; %NWL%var rectangleScratch = new Rectangle (  )  ; %NWL%function constructRectangle ( options )  {%NWL%var size = options . size ; %NWL%var height = options . height ; %NWL%9
Strophe . forEachChild ( query . item ( 0 )  ,  ' item '  ,%NWL%function ( item )  {%NWL%self . _updateItem ( item )  ;%NWL%}%NWL%)  ;%NWL%}%NWL%this . _call_backs ( this . items )  ;%NWL%}  ,%NWL%_updateItem : function ( item )  {%NWL%var jid    = item . getAttribute (  " jid "  )  ; %NWL%var name    = item . getAttribute (  " name "  )  ; %NWL%9
var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var zlib = require (  ' zlib '  )  ; %NWL%var assert = require (  ' assert - plus '  )  ; %NWL%var backoff = require (  ' backoff '  )  ; %NWL%1
var allUnits =  [  ' px '  ,  ' % '  ,  ' em '  ,  ' rem '  ,  ' in '  ,  ' cm '  ,  ' mm '  ,  ' ex '  ,  ' pt '  ,  ' pc '  ,  ' vw '  ,  ' vh '  ,  ' vmin '  ,  ' vmax '  ]  ; %NWL%var cssUnitRegexStr =  '  ( \\ - ?\\ . ?\\d + \\ . ?\\d *  (  '  + allUnits . join (  ' | '  )  +  ' | ) |auto|inherit )  '  ; %NWL%var cssCalcRegexStr =  '  ( \\ - moz\\ - |\\ - webkit\\ -  ) ?calc\\ (  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%9
}  )  ; %NWL%var toggleNetworkSelector = exports . toggleNetworkSelector = function (  )  {%NWL%if ( networkSelectorVisible )  {%NWL%networkSelectorVisible = false ; %NWL%networkSelector . hide ( 200 )  ;%NWL%} else {%NWL%networkSelectorVisible = true ; %NWL%networkSelector . show ( 200 )  ;%NWL%}%NWL%}%NWL%var enableAll = exports . enableAll = function (  )  {%NWL%1
}%NWL%Font . prototype . GenerateFontMesh = function (  )%NWL%{%NWL%var b = 0 ; %NWL%var a = 0 ; %NWL%this . fontmesh = new Surface ( this . engine )  ; %NWL%var pt = new Array (  )  ; %NWL%var index = new Array (  )  ; %NWL%for ( var row = 0 ; row < 16 ; row +  +  )%NWL%{%NWL%for ( var col = 0 ; col < 16 ; col +  +  )%NWL%8
return config . randomizer . sentence (  )  ;%NWL%}%NWL%var config =  {%NWL%watchEvents :  defaultWatchEvents ,%NWL%confirmResponse : defaultConfirmResponse ,%NWL%promptResponse :  defaultPromptResponse ,%NWL%logger :    null ,%NWL%randomizer :   null%NWL%}  ; %NWL%var alert  = window . alert ; %NWL%var confirm = window . confirm ; %NWL%9
' call - settings '  ,%NWL%' messaging - settings '  ,%NWL%' data - connectivity '%NWL%]  ; %NWL%var cardState = iccCard . cardState ; %NWL%if ( cardState =  =  =  ' ready '  )  {%NWL%tih_showICCCardDetails (  '  '  )  ; %NWL%var dataDesc = document . getElementById (  ' data - desc '  )  ; %NWL%dataDesc . style . fontStyle =  ' normal '  ; %NWL%var network = _mobileConnections [ 0 ]  . voice . network ; %NWL%var iccInfo = iccCard . iccInfo ; %NWL%4
attach : function ( context , settings )  {%NWL%var fields = settings . geolocationGooglemaps . formatters ; %NWL%$ . each ( fields , function ( instance , data )  {%NWL%var instanceSettings = data . settings ; %NWL%$ . each ( data . deltas , function ( d , delta )  {%NWL%id = instance +  "  -  "  + d ; %NWL%$ (  " #geolocation - googlemaps - dynamic -  "  + id )  . once (  ' geolocation - googlemaps - dynamic - formatter '  , function (  )  {%NWL%var map_type ; %NWL%var mapOptions ; %NWL%var lat = delta . lat ; %NWL%var lng = delta . lng ; %NWL%9
var stub = bd . stub%NWL%var assert = require (  ' chai '  )  . assert%NWL%var expect = require (  ' chai '  )  . expect%NWL%var Process = require (  ' did_it_work '  )%NWL%var exec = require (  ' child_process '  )  . exec%NWL%var rimraf = require (  ' rimraf '  )%NWL%var path = require (  ' path '  )%NWL%var PassThrough = require (  ' stream '  )  . PassThrough%NWL%var ReportFile = require (  '  .  .  /  .  .  / lib / ci / report_file '  )%NWL%var XUnitReporter = require (  '  .  .  /  .  .  / lib / ci / test_reporters / xunit_reporter '  )%NWL%var tmp = require (  ' tmp '  )%NWL%5
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / less_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
this . init = function (  )  {%NWL%$ (  " #editor "  )  . keyup ( this . handleKey )  ; %NWL%$ (  " #theme - changer "  )  . change ( this . changeTheme )  ;%NWL%}  ; %NWL%this . changeTheme = function ( e )  {%NWL%window . aceEditor . setTheme (  " ace / theme /  "  + $ (  " #theme - changer "  )  . val (  )  )  ;%NWL%}  ; %NWL%this . handleKey = function ( e )  {%NWL%evt = e || window . event ; %NWL%var keyCode = evt . keyCode ; %NWL%var ctrlKey = evt . ctrlKey ; %NWL%9
}  ,%NWL%' set global loglevel on creation '  : function ( log4js )  {%NWL%var log1 = log4js . getLogger (  ' log1 '  )  ; %NWL%var level =  ' OFF '  ; %NWL%if ( log1 . level . toString (  )  =  = level )  {%NWL%level =  ' TRACE '  ;%NWL%}%NWL%assert . notEqual ( log1 . level . toString (  )  , level )  ; %NWL%log4js . setGlobalLogLevel ( level )  ; %NWL%assert . equal ( log1 . level . toString (  )  , level )  ; %NWL%var log2 = log4js . getLogger (  ' log2 '  )  ; %NWL%2
}%NWL%connectFunction ( self . db , newServer , options , function ( err , _server )  {%NWL%if ( err )  {%NWL%self . downServers [ format (  " %s : %s "  , _server . host , _server . port )  ]  = _server ;%NWL%}%NWL%var connectionFunction = function ( _auth , _connection , _callback )  {%NWL%var pending = _auth . length (  )  ; %NWL%for ( var j = 0 ; j < pending ; j +  +  )  {%NWL%var _auth = _auth . get ( j )  ; %NWL%var username = _auth . username ; %NWL%var password = _auth . password ; %NWL%9
it (  " should set the html of a tfoot Element "  , function (  )  {%NWL%var html =  '  < tr >  < td > cell 1 <  / td >  < td > cell 2 <  / td >  <  / tr >  < tr >  < td class =  " cell "  > cell 1 <  / td >  < td > cell 2 <  / td >  <  / tr >  '  ; %NWL%var tfoot = document . createElement (  ' tfoot '  )  ; %NWL%document . createElement (  ' table '  )  . appendChild ( tfoot )  ; %NWL%dh . overwrite ( tfoot , html )  ; %NWL%expect ( tfoot . childNodes . length )  . toEqual ( 2 )  ; %NWL%expect ( tfoot . lastChild . firstChild . className )  . toEqual (  ' cell '  )  ;%NWL%}  )  ; %NWL%it (  " should set the html of a tr Element "  , function (  )  {%NWL%var html =  '  < td class =  " cell "  > cell 1 <  / td >  < td > cell 2 <  / td >  '  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%2
y : evCoord . y - ul . y%NWL%}%NWL%return ;%NWL%}  ,%NWL%handleLayoutRows : function ( event )  {%NWL%var shape = event . shape ; %NWL%var offsetPos = this . offSetPosition ; %NWL%var marginLeft = event . marginLeft ; %NWL%var marginTop = event . marginTop ; %NWL%var spacingX = event . spacingX ; %NWL%var spacingY = event . spacingY ; %NWL%5
, option22 = document . createElement (  " option "  )%NWL%option21 . value =  " foo "%NWL%option22 . value =  " bar "%NWL%select2 . appendChild ( option21 )%NWL%select2 . appendChild ( option22 )%NWL%var value2 = $ ( select2 )  . setValue (  " bar "  )  . getValue (  )%NWL%equal ( value2 ,  " bar "  )%NWL%var input = document . createElement (  " input "  )%NWL%$ ( input )  . setValue (  " Foo "  )%NWL%ok ( $ ( input )  . getValue (  )  =  =  " Foo "  ,  " Input Element "  )%NWL%var textarea = document . createElement (  " textarea "  )%NWL%7
var connect4Start = 440 ; %NWL%var lineY1 = 390 ; %NWL%var lineY2 = 275 ; %NWL%connectStartArray = new Array ( connect1Start , connect2Start , connect3Start , connect4Start )  ; %NWL%var connect1end =  ( free1Start + free1Finish )  / 2 ; %NWL%var connect2end =  ( free2Start + free2Finish )  / 2 ; %NWL%var connect3end =  ( free3Start + free3Finish )  / 2 ; %NWL%var connect4end =  ( free4Start + free4Finish )  / 2 ; %NWL%var connect1 = av . g . line ( connect1Start , lineY1 , connect1end , lineY2 )  ; %NWL%var connect2 = av . g . line ( connect2Start , lineY1 , connect2end , lineY2 )  ; %NWL%var connect3 = av . g . line ( connect3Start , lineY1 , connect3end , lineY2 )  ; %NWL%8
if ( params . fields )  {%NWL%var query = encodeURI ( compactJSONFilter ( _ . values ( params . fields )  )  )  ; %NWL%url +  =  ' entry . 1245199477 =  '  + query +  ' & '  ;%NWL%}%NWL%if ( params . encoding )  {%NWL%var encoding = _ . omit ( params . encoding ,  ' cfg '  )  ; %NWL%encoding = encodeURI ( compactJSONFilter ( encoding )  )  ; %NWL%url +  =  ' entry . 1323680136 =  '  + encoding +  ' & '  ;%NWL%}%NWL%if ( params . encoding2 )  {%NWL%var encoding2 = _ . omit ( params . encoding2 ,  ' cfg '  )  ; %NWL%5
var http = require (  ' http '  )  ; %NWL%var read = require (  ' fs '  )  . readFileSync ; %NWL%var parse = require (  ' url '  )  . parse ; %NWL%var engine = require (  ' engine . io '  )  ; %NWL%var client = require (  ' socket . io - client '  )  ; %NWL%var clientVersion = require (  ' socket . io - client / package '  )  . version ; %NWL%var Client = require (  '  .  / client '  )  ; %NWL%var Namespace = require (  '  .  / namespace '  )  ; %NWL%var Adapter = require (  ' socket . io - adapter '  )  ; %NWL%var debug = require (  ' debug '  )  (  ' socket . io : server '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%0
main . consumes =  [%NWL%" Plugin "  ,  " vfs "  ,  " c9 "  ,  " plugin . installer "  ,  " fs "  ,  " auth "%NWL%]  ; %NWL%main . provides =  [  " plugin . loader "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Plugin = imports . Plugin ; %NWL%var vfs = imports . vfs ; %NWL%var c9 = imports . c9 ; %NWL%var fs = imports . fs ; %NWL%var auth = imports . auth ; %NWL%6
this . _emitQueue . length = 0%NWL%for ( var i = 0 ; i < eq . length ; i +  +  )  {%NWL%var e = eq [ i ]%NWL%this . _emitMatch ( e [ 0 ]  , e [ 1 ]  )%NWL%}%NWL%}%NWL%if ( this . _processQueue . length )  {%NWL%var pq = this . _processQueue . slice ( 0 )%NWL%this . _processQueue . length = 0%NWL%for ( var i = 0 ; i < pq . length ; i +  +  )  {%NWL%var p = pq [ i ]%NWL%2
playerControls . isLive_ ; %NWL%playerControls . video_ ; %NWL%playerControls . init = function ( video )  {%NWL%var videoContainer = document . getElementById (  ' videoContainer '  )  ; %NWL%var playButton = document . getElementById (  ' playButton '  )  ; %NWL%var pauseButton = document . getElementById (  ' pauseButton '  )  ; %NWL%var seekBar = document . getElementById (  ' seekBar '  )  ; %NWL%var muteButton = document . getElementById (  ' muteButton '  )  ; %NWL%var unmuteButton = document . getElementById (  ' unmuteButton '  )  ; %NWL%var volumeBar = document . getElementById (  ' volumeBar '  )  ; %NWL%var fullscreenButton = document . getElementById (  ' fullscreenButton '  )  ; %NWL%3
arrow . show ( options . arrow )  ;%NWL%}  )  ;%NWL%}  ,%NWL%make : function (  )  {%NWL%var that = this ,%NWL%options = this . get (  )  ,%NWL%arrow = options . arrow ,%NWL%style = this . style ,%NWL%n = options . n ; %NWL%var vertices = this . vertices =  [  ]  ; %NWL%var points = this . points =  [  ]  ; %NWL%9
case 1 : return " moderator "  ; %NWL%default : return contribution ! =  " no " ? " contributor "  :  " user "  ;%NWL%}%NWL%}  (  )  ; %NWL%var ipInfo =  "  "  ; %NWL%if ( resp ! =  = undefined )  {%NWL%resp = JSON . parse ( resp )  ; %NWL%var countryName = resp . countryName ; %NWL%var countryTag =  resp . countryCode ; %NWL%var regionName = resp . regionName ; %NWL%var cityName = resp . cityName ; %NWL%7
var lineY1 = 390 ; %NWL%var lineY2 = 275 ; %NWL%connectStartArray = new Array ( connect1Start , connect2Start , connect3Start , connect4Start )  ; %NWL%var connect1end =  ( free1Start + free1Finish )  / 2 ; %NWL%var connect2end =  ( free2Start + free2Finish )  / 2 ; %NWL%var connect3end =  ( free3Start + free3Finish )  / 2 ; %NWL%var connect4end =  ( free4Start + free4Finish )  / 2 ; %NWL%var connect1 = av . g . line ( connect1Start , lineY1 , connect1end , lineY2 )  ; %NWL%var connect2 = av . g . line ( connect2Start , lineY1 , connect2end , lineY2 )  ; %NWL%var connect3 = av . g . line ( connect3Start , lineY1 , connect3end , lineY2 )  ; %NWL%var connect4 = av . g . line ( connect4Start , lineY1 , connect4end , lineY2 )  ; %NWL%7
fs . outputFileSync (  ' index . html '  ,  ' index '  ,  ' utf - 8 '  )  ;%NWL%}  )  ; %NWL%afterEach ( function (  )  {%NWL%fs . removeSync (  ' superstatic . json '  )  ; %NWL%fs . removeSync (  ' index . html '  )  ; %NWL%fs . removeSync (  '  . tmp '  )  ;%NWL%}  )  ; %NWL%it (  ' starts a server '  , function ( done )  {%NWL%cli . run (  [  '  '  ,  '  '  ]  , function ( err )  {%NWL%var server = cli . get (  ' server '  )  ; %NWL%var port = cli . get (  ' port '  )  ; %NWL%9
back . position . z = s * 0 . 5 ; %NWL%back . rotation . y = Math . PI ; %NWL%var left = side (  ' left '  , planeOptions )  ; %NWL%left . position . x = s *  - 0 . 5 ; %NWL%left . rotation . y = Math . PI *  - 0 . 5 ; %NWL%var right = side (  ' right '  , planeOptions )  ; %NWL%right . position . x = s * 0 . 5 ; %NWL%right . rotation . y = Math . PI * 0 . 5 ; %NWL%var up = side (  ' up '  )  ; %NWL%up . position . y = s * 0 . 5 ; %NWL%var down = side (  ' down '  )  ; %NWL%8
visitNode : function (  )  {%NWL%return {  }  ;%NWL%}%NWL%}  )  ;%NWL%}%NWL%function _getEntityTypeFromMappingContext ( mappingContext )  {%NWL%var query = mappingContext . query ; %NWL%if ( !query )  { return null ;  }%NWL%var entityType = query . entityType || query . resultEntityType ; %NWL%if ( !entityType )  {  /  / try to figure it out from the query . resourceName%NWL%var metadataStore = mappingContext . metadataStore ; %NWL%6
var MessageBuffer = require (  '  .  / MessageBuffer '  )  ; %NWL%var common = require (  '  .  / common '  )  ; %NWL%var request = require (  '  .  / request '  )  ; %NWL%var reply = require (  '  .  / reply '  )  ; %NWL%var createExecuteTask = require (  '  .  / ExecuteTask '  )  . create ; %NWL%var ReplySegment = reply . Segment ; %NWL%var part = require (  '  .  / part '  )  ; %NWL%var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%var PartKind = common . PartKind ; %NWL%7
var path = require (  ' path '  )%NWL%, gruntHelpers = require (  '  .  / grunt - helpers . js '  )%NWL%, authorize = gruntHelpers . authorize%NWL%, tail = gruntHelpers . tail%NWL%, buildApp = gruntHelpers . buildApp%NWL%, buildSafariLauncherApp = gruntHelpers . buildSafariLauncherApp%NWL%, signApp = gruntHelpers . signApp%NWL%, setupAndroidBootstrap = gruntHelpers . setupAndroidBootstrap%NWL%, setupAndroidApp = gruntHelpers . setupAndroidApp%NWL%, buildAndroidBootstrap = gruntHelpers . buildAndroidBootstrap%NWL%, buildSelendroidServer = gruntHelpers . buildSelendroidServer%NWL%2
return {%NWL%' data - val '  : val . UID%NWL%}  ;%NWL%}%NWL%return {  }  ;%NWL%}%NWL%}  )  ; %NWL%var UploadLink = InternalLink . extend (  {%NWL%toUrl : function (  )  {%NWL%var filename = $ (  '  . pat - upload '  )  . data (  ' filename '  )  ; %NWL%var path = $ (  '  . pat - upload '  )  . data (  ' path '  )  ; %NWL%9
}%NWL%var collections = that . _collections ; %NWL%var collectionsLength = collections . length ; %NWL%var collectionsCopy = that . _collectionsCopy ; %NWL%var collectionsCopyLength = collectionsCopy . length ; %NWL%var i ; %NWL%var entity ; %NWL%var entities ; %NWL%var iEntities ; %NWL%var collection ; %NWL%var composite = that . _composite ; %NWL%1
var di = require (  ' di '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var prism = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var testUtils = require (  '  .  .  / test - utils '  )  ; %NWL%var deleteMock = testUtils . deleteMock ; %NWL%var onEnd = testUtils . onEnd ; %NWL%var httpGet = testUtils . httpGet ; %NWL%var httpPost = testUtils . httpPost ; %NWL%var waitForFile = testUtils . waitForFile ; %NWL%6
}  ; %NWL%this . $get =  [  " $window "  ,  " $document "  ,  " $rootScope "  ,  " $sce "  ,  " $locale "  ,  " dateFilter "  ,  " $tooltip "  ,  " $timeout "  , function ( $window , $document , $rootScope , $sce , $locale , dateFilter , $tooltip , $timeout )  {%NWL%var bodyEl = angular . element ( $window . document . body )  ; %NWL%var isNative =  /  ( ip ( a|o ) d|iphone|android )  / ig . test ( $window . navigator . userAgent )  ; %NWL%var isTouch =  (  ' createTouch ' in $window . document ) && isNative ; %NWL%if ( !defaults . lang ) defaults . lang = $locale . id ; %NWL%function timepickerFactory ( element , controller , config )  {%NWL%var $timepicker = $tooltip ( element , angular . extend (  {  }  , defaults , config )  )  ; %NWL%var parentScope = config . scope ; %NWL%var options = $timepicker . $options ; %NWL%var scope = $timepicker . $scope ; %NWL%9
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy    = actions . MoveBy%NWL%, EaseBounceInOut = actions . EaseBounceInOut%NWL%, Sequence   = actions . Sequence%NWL%8
define ( function ( require )  {%NWL%' use strict '  ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var AwesomeMap = require (  ' wf - js - uicomponents / awesome_map / AwesomeMap '  )  ; %NWL%var EventTypes = require (  ' wf - js - uicomponents / awesome_map / EventTypes '  )  ; %NWL%var Gesture = require (  ' wf - js - uicomponents / awesome_map / Gesture '  )  ; %NWL%var InteractionEvent = require (  ' wf - js - uicomponents / awesome_map / InteractionEvent '  )  ; %NWL%var RenderingHooksInterceptor = require (  ' wf - js - uicomponents / scroll_list / RenderingHooksInterceptor '  )  ; %NWL%var ScrollList = require (  ' wf - js - uicomponents / scroll_list / ScrollList '  )  ; %NWL%var ScrollModes = require (  ' wf - js - uicomponents / scroll_list / ScrollModes '  )  ; %NWL%var TransformState = require (  ' wf - js - uicomponents / awesome_map / TransformState '  )  ; %NWL%3
sections :  [  ]  ,%NWL%widget : ToggleButton ,%NWL%size :  [ undefined , 50 ]  ,%NWL%direction : Utility . Direction . X ,%NWL%buttons :  {%NWL%toggleMode : ToggleButton . ON%NWL%}%NWL%}  ; %NWL%function _updateOptions ( data )  {%NWL%var id = data . id ; %NWL%var value = data . value ; %NWL%9
this . notify =  {%NWL%setItem : itemSet ,%NWL%removeItem : itemRemove%NWL%}  ; %NWL%return this ;%NWL%}  ; %NWL%this . $get =  [  ' $rootScope '  ,  ' $window '  ,  ' $document '  ,  ' $parse '  , function ( $rootScope , $window , $document , $parse )  {%NWL%var self = this ; %NWL%var prefix = self . prefix ; %NWL%var cookie = self . cookie ; %NWL%var notify = self . notify ; %NWL%8
var npm = require (  "  .  / npm . js "  )%NWL%, semver = require (  " semver "  )%NWL%, readJson = require (  " read - package - json "  )%NWL%, readInstalled = require (  " read - installed "  )%NWL%, log = require (  " npmlog "  )%NWL%, path = require (  " path "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, cache = require (  "  .  / cache . js "  )%NWL%, asyncMap = require (  " slide "  )  . asyncMap%NWL%, chain = require (  " slide "  )  . chain%NWL%, url = require (  " url "  )%NWL%1
that . settings =  {%NWL%divider : 2 ,%NWL%constantSpeed : null ,%NWL%addaptiveSpeed : false ,%NWL%capy : null ,%NWL%}%NWL%var i ; %NWL%this . addAnimal = function ( geometry , predefined , scale , morphArray )  {%NWL%var predefined = predefined || null ; %NWL%var scaleMultiplier = scale || 1 . 2 ; %NWL%var morphArray = morphArray || null ; %NWL%8
for ( i = 0 , len = clipboardContent . nodes . length ; i < len ; i +  +  )  {%NWL%var node = clipboardContent . nodes [ i ]  ; %NWL%var meta = cloneObject ( node . metadata )  ; %NWL%meta . x +  = 36 ; %NWL%meta . y +  = 36 ; %NWL%var newNode = graph . addNode ( makeNewId ( node . component )  , node . component , meta )  ; %NWL%map [ node . id ]  = newNode . id ; %NWL%pasted . nodes . push ( newNode )  ;%NWL%}%NWL%for ( i = 0 , len = clipboardContent . edges . length ; i < len ; i +  +  )  {%NWL%var edge = clipboardContent . edges [ i ]  ; %NWL%1
var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%var mappings = util . getArg ( sourceMap ,  ' mappings '  )  ; %NWL%var file = util . getArg ( sourceMap ,  ' file '  , null )  ; %NWL%7
banner :  '  '  ,%NWL%footer :  '  '  ,%NWL%compress :  {%NWL%warnings : false%NWL%}  ,%NWL%mangle :  {  }  ,%NWL%beautify : false ,%NWL%report : false%NWL%}  )  ; %NWL%var banner = grunt . template . process ( options . banner )  ; %NWL%var footer = grunt . template . process ( options . footer )  ; %NWL%9
fs . mkdirsSync = mkdir . mkdirsSync%NWL%fs . mkdirp = fs . mkdirs%NWL%fs . mkdirpSync = fs . mkdirsSync%NWL%var create = require (  '  .  / create '  )%NWL%fs . createFile = create . createFile%NWL%fs . createFileSync = create . createFileSync%NWL%fs . ensureFile = create . createFile%NWL%fs . ensureFileSync = create . createFileSync%NWL%fs . ensureDir = mkdir . mkdirs%NWL%fs . ensureDirSync = mkdir . mkdirsSync%NWL%var move = require (  '  .  / move '  )%NWL%3
' use strict '  ; %NWL%module . exports = function ( grunt )  {%NWL%var P4HOME = process . env . P4HOME ; %NWL%var unitTestMainFolderName = __dirname ; %NWL%var unitTestCustomWidgetsFolderName = P4HOME +  "  / RIA / trunk / WakandaCustom / widgets /  "  ; %NWL%if ( !P4HOME )  {%NWL%grunt . fail . warn (  ' Your env variable P4HOME is not set , please set it to be able to test custom widget ( see readme )  '  )  ;%NWL%}%NWL%var UNITTEST_FOLDER =  ' UNITTEST_FOLDER '  ; %NWL%var WAF_FOLDER =  ' WAF_FOLDER '  ; %NWL%var CUSTOMWIDGETS_FOLDER =  ' CUSTOMWIDGETS_FOLDER '  ; %NWL%8
var config = new Config (  )  ; %NWL%config . loadConfiguration ( function (  )  {%NWL%$ (  " #storageType "  )  . val ( config . storageType )  ; %NWL%$ (  " #sitemapDb "  )  . val ( config . sitemapDb )  ; %NWL%$ (  " #dataDb "  )  . val ( config . dataDb )  ; %NWL%$ (  " select [ name = storageType ]  "  )  . change (  )  ;%NWL%}  )  ; %NWL%$ (  " form#storage_configuration "  )  . submit ( function (  )  {%NWL%var sitemapDb = $ (  " #sitemapDb "  )  . val (  )  ; %NWL%var dataDb = $ (  " #dataDb "  )  . val (  )  ; %NWL%var storageType = $ (  " #storageType "  )  . val (  )  ; %NWL%8
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
res . send ( 404 )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ; %NWL%app . get (  '  / resetPassword '  , function ( req , res )  {%NWL%var accountId = req . param (  ' account '  , null )  ; %NWL%res . render (  ' resetPassword . jade '  ,  { locals :  { accountId : accountId }  }  )  ;%NWL%}  )  ; %NWL%app . post (  '  / resetPassword '  , function ( req , res )  {%NWL%var accountId = req . param (  ' accountId '  , null )  ; %NWL%var password = req . param (  ' password '  , null )  ; %NWL%9
var currentRow = draggedPaletteWrapper . parentNode ; %NWL%if ( draggedItemId ! =  " separator " &&%NWL%draggedItemId ! =  " spring " &&%NWL%draggedItemId ! =  " spacer "  )%NWL%{%NWL%currentRow . removeChild ( draggedPaletteWrapper )  ; %NWL%while ( currentRow )  {%NWL%var nextRow = currentRow . nextSibling ; %NWL%if ( !nextRow )  {%NWL%var last = currentRow . lastChild ; %NWL%var first = currentRow . firstChild ; %NWL%9
}%NWL%var div = jQuery (  '  < div /  >  '  )  ; %NWL%jQuery (  '  < span /  >  '  )  . text ( relationship )  . appendTo ( div )  ; %NWL%var list = jQuery (  '  < ul /  >  '  )  . appendTo ( div )  ; %NWL%for ( var i = 0 ; i < objects . length ; i +  +  )  {%NWL%jQuery ( list )  . append ( drawObject ( objects [ i ]  )  )  ;%NWL%}%NWL%return div ;%NWL%}%NWL%function drawObject ( object )  {%NWL%var li = jQuery (  '  < li /  >  '  )  ; %NWL%1
getChildren : function (  )  {%NWL%return this . getChildControl (  " pane "  )  . getChildren (  )  ;%NWL%}  ,%NWL%indexOf : function ( page )  {%NWL%return this . getChildControl (  " pane "  )  . indexOf ( page )  ;%NWL%}  ,%NWL%__barPositionToState : null ,%NWL%_applyBarPosition : function ( value , old )%NWL%{%NWL%var bar = this . getChildControl (  " bar "  )  ; %NWL%var pane = this . getChildControl (  " pane "  )  ; %NWL%9
var fun  = require (  "  .  .  /  .  .  /  .  .  / uki - core / function "  )  ; %NWL%var utils = require (  "  .  .  /  .  .  /  .  .  / uki - core / utils "  )  ; %NWL%var dom  = require (  "  .  .  /  .  .  /  .  .  / uki - core / dom "  )  ; %NWL%var Base =%NWL%require (  "  .  .  / dataList / selectionController "  )  . SelectionController ; %NWL%var SelectionController = fun . newClass ( Base ,  {%NWL%_onkeyrepeat : function ( e )  {%NWL%if ( !this . _view . hasFocus (  )  )  { return ;  }%NWL%if ( e . which =  = 37 || e . keyCode =  = 37 )  {  /  / LEFT%NWL%var data = this . _view . data (  )  ; %NWL%var lastClickIndex = this . _view . lastClickIndex (  )  ; %NWL%9
idMappings [  ' users '  ]  [ currentBatch ]  =  {  }  ; %NWL%idMappings [  ' groups '  ]  [ currentBatch ]  =  {  }  ; %NWL%idMappings [  ' folders '  ]  [ currentBatch ]  =  {  }  ; %NWL%idMappings [  ' content '  ]  [ currentBatch ]  =  {  }  ; %NWL%idMappings [  ' discussions '  ]  [ currentBatch ]  =  {  }  ; %NWL%if ( currentBatch < BATCHES )  {%NWL%console . log (  ' Loading Batch '  + currentBatch )  ; %NWL%var users = general . loadJSONFileIntoObject (  '  .  / scripts / users /  '  + currentBatch +  '  . txt '  )  ; %NWL%var groups = general . loadJSONFileIntoObject (  '  .  / scripts / groups /  '  + currentBatch +  '  . txt '  )  ; %NWL%var folders = general . loadJSONFileIntoObject (  '  .  / scripts / folders /  '  + currentBatch +  '  . txt '  )  ; %NWL%var content = general . loadJSONFileIntoObject (  '  .  / scripts / content /  '  + currentBatch +  '  . txt '  )  ; %NWL%7
verifyMonthView : function (  )  {%NWL%var month = app . month ; %NWL%assert . lengthOf ( month . squareDots ( month . daySquares [ 7 ]  )  , 1 )  ; %NWL%assert . lengthOf ( month . squareDots ( month . daySquares [ 8 ]  )  , 1 )  ; %NWL%assert . equal ( month . busyDots . length , 2 ,  ' 2 busy dots '  )  ; %NWL%var event = app . monthDay . events [ 0 ]  ; %NWL%assert . equal ( event . startTime ,  ' 12 : 34 PM '  ,  ' start time '  )  ; %NWL%assert . equal ( event . endTime ,  ' 12 : 34 PM '  ,  ' end time '  )  ;%NWL%}  ,%NWL%verifyReadEventView : function (  )  {%NWL%var readEvent = app . readEvent ; %NWL%1
this . done = false%NWL%}%NWL%Response . prototype . complete = function (  )  {%NWL%return this . done%NWL%}%NWL%Response . prototype . read = function ( stream )  {%NWL%while ( this . state . read ( stream )  )  {%NWL%var next = this . state . next (  )%NWL%if ( next =  =  = State . done )  {%NWL%this . done = true%NWL%var body = this . state . body (  )%NWL%7
it (  " should not re - build the strategy "  , function (  )  {%NWL%manager . connect (  )  ; %NWL%expect ( managerOptions . getStrategy . calls . length )  . toEqual ( 1 )  ;%NWL%}  )  ; %NWL%it (  " should try to connect using the strategy "  , function (  )  {%NWL%manager . connect (  )  ; %NWL%expect ( strategy . connect )  . toHaveBeenCalled (  )  ;%NWL%}  )  ; %NWL%it (  " should transition to connecting "  , function (  )  {%NWL%var onConnecting = jasmine . createSpy (  " onConnecting "  )  ; %NWL%var onStateChange = jasmine . createSpy (  " onStateChange "  )  ; %NWL%9
}%NWL%function fsWatchBroadcast ( absPath , type , value1 , value2 , value3 )  {%NWL%if ( !FsWatchInstances [ absPath ]  ) return ; %NWL%FsWatchInstances [ absPath ]  [ type ]  . forEach ( function ( callback )  {%NWL%callback ( value1 , value2 , value3 )  ;%NWL%}  )  ;%NWL%}%NWL%function setFsWatchListener ( item , absPath , options , handlers )  {%NWL%var callback = handlers . callback ; %NWL%var errHandler = handlers . errHandler ; %NWL%var rawEmitter = handlers . rawEmitter ; %NWL%8
this . height = null ; %NWL%this . width = null ; %NWL%this . error = null ; %NWL%this . gvizError = null ;%NWL%}  ; %NWL%var ChartState = p3rf . perfkit . explorer . models . ChartState ; %NWL%p3rf . perfkit . explorer . models . ChartModel = function (  )  {%NWL%this . chartType = ChartModel . DEFAULT_CHART_TYPE ; %NWL%this . options =  {  }  ;%NWL%}  ; %NWL%var ChartModel = p3rf . perfkit . explorer . models . ChartModel ; %NWL%5
endTime =  ( new Date (  )  )  . getTime (  )  ; %NWL%logutils . logger . debug (  " Query executed in "  +  (  ( endTime - startTime )  / 1000 )  +%NWL%' secs '  + JSON . stringify ( queryJSON )  )  ; %NWL%callback ( error , jsonData )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%function buildPreUnderlayWhereQuery ( data )%NWL%{%NWL%var srcIP = data [  ' srcIP '  ]  ; %NWL%var destIP = data [  ' destIP '  ]  ; %NWL%9
this . destroy ( function ( err )  {%NWL%cb ( err , isValid )  ;%NWL%}  )  ;%NWL%}%NWL%} catch ( e )  {%NWL%cb ( e )  ;%NWL%}%NWL%}  ; %NWL%function tokenIdForRequest ( req , options )  {%NWL%var params = options . params || [  ]  ; %NWL%var headers = options . headers || [  ]  ; %NWL%9
}%NWL%Proto . calcColsCount = function (  )  {%NWL%var width = this . element . width (  )%NWL%, op = this . options%NWL%if ( width && op . tileSize )  {%NWL%return Math . ceil ( width / op . tileSize )  + op . margin * 2%NWL%}%NWL%return 0%NWL%}%NWL%Proto . calcRowsCount = function (  )  {%NWL%var height = this . element . height (  )%NWL%2
}  )  . then ( function ( value )  {%NWL%assert . strictEqual ( value , sentinel3 )  ; %NWL%semiDone (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " `onRejected` handlers are called in the original order "  , function (  )  {%NWL%testRejected ( dummy , function ( promise , done )  {%NWL%var handler1 = sinon . spy ( function handler1 (  )  {  }  )  ; %NWL%var handler2 = sinon . spy ( function handler2 (  )  {  }  )  ; %NWL%var handler3 = sinon . spy ( function handler3 (  )  {  }  )  ; %NWL%8
var exec = require (  ' child_process '  )  . exec ; %NWL%var path = require (  ' path '  )  ; %NWL%var gulp = require (  ' gulp '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var vsource = require (  ' vinyl - source - stream '  )  ; %NWL%var streamify = require (  ' gulp - streamify '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var livereload = require (  ' gulp - livereload '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var header = require (  ' gulp - header '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%3
this . _sendErrorAndClose ( errors . EBADOP )  ;%NWL%}%NWL%}  ; %NWL%IncomingRequest . prototype . _sendOackMessage = function ( extensions )  {%NWL%var ext =  {  }  ; %NWL%if ( extensions . blksize ! =  = undefined )  {%NWL%var blksize = this . _globalOptions . extensions . blksize ; %NWL%ext . blksize = extensions . blksize > blksize ? blksize : extensions . blksize ;%NWL%}%NWL%if ( extensions . windowsize ! =  = undefined )  {%NWL%var windowsize = this . _globalOptions . extensions . windowsize ; %NWL%6
, browserify = require (  ' browserify '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%, mime = require (  ' mime '  )%NWL%, url = require (  ' url '  )%NWL%0
var os = nodeRequire (  ' os '  )  ; %NWL%var chokidar = nodeRequire (  ' chokidar '  )  ; %NWL%var Vue = require (  ' vue '  )  ; %NWL%var $ = require (  ' jquery '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var keybindings = require (  '  .  / keybindings '  )  ; %NWL%var Files = require (  '  .  / files '  )  ; %NWL%var menu = require (  '  .  / menu '  )  ; %NWL%var windowstate = require (  '  .  / windowstate '  )  ; %NWL%var updater = require (  '  .  / updater '  )  ; %NWL%var settings = require (  '  .  / settings '  )  ; %NWL%5
, buildApp = gruntHelpers . buildApp%NWL%, buildSafariLauncherApp = gruntHelpers . buildSafariLauncherApp%NWL%, signApp = gruntHelpers . signApp%NWL%, setupAndroidBootstrap = gruntHelpers . setupAndroidBootstrap%NWL%, setupAndroidApp = gruntHelpers . setupAndroidApp%NWL%, buildAndroidBootstrap = gruntHelpers . buildAndroidBootstrap%NWL%, buildSelendroidServer = gruntHelpers . buildSelendroidServer%NWL%, buildAndroidApp = gruntHelpers . buildAndroidApp%NWL%, buildSelendroidAndroidApp = gruntHelpers . buildSelendroidAndroidApp%NWL%, fixSelendroidAndroidManifest = gruntHelpers . fixSelendroidAndroidManifest%NWL%, installAndroidApp = gruntHelpers . installAndroidApp%NWL%0
describe (  " condition checking "  , function (  )  {%NWL%it (  " checks if condition is true "  , function (  )  {%NWL%var that = wrap ( ensure . that )  ; %NWL%assert . noException ( that ( true )  )  ; %NWL%assert . exception ( that ( false )  ,  / Expected condition to be true /  )  ; %NWL%assert . exception ( that ( false ,  " a message "  )  ,  / a message /  )  ; %NWL%assert . exception ( that (  " foo "  )  ,  / Expected condition to be true or false /  )  ; %NWL%assert . exception ( that (  " foo "  ,  " ignored "  )  ,  / Expected condition to be true or false /  )  ;%NWL%}  )  ; %NWL%it (  " fails when unreachable code is executed "  , function (  )  {%NWL%var unreachable = wrap ( ensure . unreachable )  ; %NWL%2
var severity ; %NWL%var asset ; %NWL%var scope_asset ; %NWL%var post_data ; %NWL%var api_config ; %NWL%var options ; %NWL%var xml ; %NWL%var id ; %NWL%var submit ; %NWL%var Element  = et . Element ; %NWL%var SubElement = et . SubElement ; %NWL%9
}%NWL%this . firstHarmonicAmp = 1 / totalAmp ; %NWL%this . phase = 0 ; %NWL%this . prevPhase = 0 ;%NWL%}  ; %NWL%jfxr . Synth . Generator . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%var sampleRate = sound . sampleRate . value ; %NWL%var harmonics = sound . harmonics . value ; %NWL%var harmonicsFalloff = sound . harmonicsFalloff . value ; %NWL%var firstHarmonicAmp = this . firstHarmonicAmp ; %NWL%var oscillators = this . oscillators ; %NWL%9
var classList = current . classList (  )  ; %NWL%var cssSelector = new CssSelector (  )  ; %NWL%var nodeName = DOM . nodeName ( current . element )  ; %NWL%cssSelector . setElement ( nodeName )  ; %NWL%for ( var i = 0 ; i < classList . length ; i +  +  )  {%NWL%cssSelector . addClassName ( classList [ i ]  )  ;%NWL%}%NWL%MapWrapper . forEach ( attrs ,  ( function ( attrValue , attrName )  {%NWL%cssSelector . addAttribute ( attrName , attrValue )  ;%NWL%}  )  )  ; %NWL%var isTemplateElement = DOM . isTemplateElement ( current . element )  ; %NWL%2
return true ;%NWL%}  ,%NWL%drop : function (  )  {%NWL%this . _records = undefined ; %NWL%localStorage . removeItem ( this . _name )  ; %NWL%this . _trigger (  ' drop '  )  ; %NWL%return true ;%NWL%}  ,%NWL%insert : function ( record )  {  /  / Optionally augment record , append to records db , and return lone record%NWL%var id = this . _id (  )  ; %NWL%var now = this . _now (  )  ; %NWL%9
var path = require (  ' path '  )%NWL%var concat = require (  ' concat - stream '  )%NWL%var child = require (  ' child_process '  )%NWL%var mkdirp = require (  ' mkdirp '  )%NWL%var ldj = require (  ' ndjson '  )%NWL%var stdout = require (  ' stdout '  )%NWL%var request = require (  ' request '  )%NWL%var winSpawn = require (  ' win - spawn '  )%NWL%var through = require (  ' through2 '  )%NWL%var kill = require (  ' tree - kill '  )%NWL%var rimraf = require (  ' rimraf '  )%NWL%0
var st = tinyMCE . parseStyle ( tinyMCE . getAttrib ( trElm ,  " style "  )  )  ; %NWL%var rowtype = trElm . parentNode . nodeName . toLowerCase (  )  ; %NWL%var align = tinyMCE . getAttrib ( trElm ,  ' align '  )  ; %NWL%var valign = tinyMCE . getAttrib ( trElm ,  ' valign '  )  ; %NWL%var height = trimSize ( getStyle ( trElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var className = tinyMCE . getVisualAidClass ( tinyMCE . getAttrib ( trElm ,  ' class '  )  , false )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( trElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var backgroundimage = getStyle ( trElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  ' ? (  [ ^ '  ]  *  )  ' ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ;  ; %NWL%var id = tinyMCE . getAttrib ( trElm ,  ' id '  )  ; %NWL%var lang = tinyMCE . getAttrib ( trElm ,  ' lang '  )  ; %NWL%var dir = tinyMCE . getAttrib ( trElm ,  ' dir '  )  ; %NWL%2
}%NWL%return new forcetk . ClientUI ( SFConfig . sfLoginURL , SFConfig . consumerKey , SFConfig . oAuthCallbackURL ,%NWL%forceOAuthUI_successHandler , forceOAuthUI_errorHandler , SFConfig . proxyUrl )  ;%NWL%}%NWL%}  )  ; %NWL%angular . module (  ' AngularForceObjectFactory '  ,  [  ]  )  . factory (  ' AngularForceObjectFactory '  , function ( SFConfig , AngularForce )  {%NWL%function AngularForceObjectFactory ( params )  {%NWL%params = params || {  }  ; %NWL%var type = params . type ; %NWL%var fields = params . fields ; %NWL%var where = params . where ; %NWL%8
input . raw . trigger (  ' keyup '  )  ; %NWL%equal ( span . get (  ' text '  )  ,  ' foobar '  )  ; %NWL%input . stopNotifying (  )  ; %NWL%equal ( input . raw . data (  ' events '  )  , undefined )  ;%NWL%}  )  ; %NWL%test (  ' Toggle Single Observer '  , function (  )  {%NWL%expect ( 8 )  ; %NWL%Synapse . hooks =  [  ]  ; %NWL%Synapse . hooks =  [ jQueryHook , ObjectHook ]  ; %NWL%var input = new Synapse (  '  < input /  >  '  )  ; %NWL%var span = new Synapse (  '  < span /  >  '  )  ; %NWL%9
, dirname = require (  ' path '  )  . dirname%NWL%, mkdirp = require (  ' mkdirp '  )%NWL%, join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var debug = options . debug ; %NWL%9
name = aliasDB [ nameOrAlias ]  ;%NWL%}%NWL%if ( typeof db [ name ] ! =  " undefined "  )  {%NWL%return db [ name ]  ;%NWL%}%NWL%throw " unregistered EC curve name :  "  + name ;%NWL%}  ; %NWL%this . regist = function ( name , keylen , pHex , aHex , bHex , nHex , hHex , gxHex , gyHex , aliasList , oid , info )  {%NWL%db [ name ]  =  {  }  ; %NWL%var p = hex2bi ( pHex )  ; %NWL%var a = hex2bi ( aHex )  ; %NWL%9
var rpc_progress = require (  '  .  / test_rpc_progress . js '  )  ; %NWL%var rpc_slowsquare = require (  '  .  / test_rpc_slowsquare . js '  )  ; %NWL%var rpc_routing = require (  '  .  / test_rpc_routing . js '  )  ; %NWL%var rpc_caller_disclose_me = require (  '  .  / test_rpc_caller_disclose_me . js '  )  ; %NWL%var pubsub_basic = require (  '  .  / test_pubsub_basic . js '  )  ; %NWL%var pubsub_complex = require (  '  .  / test_pubsub_complex . js '  )  ; %NWL%var pubsub_options = require (  '  .  / test_pubsub_options . js '  )  ; %NWL%var pubsub_excludme = require (  '  .  / test_pubsub_excludeme . js '  )  ; %NWL%var pubsub_exclude = require (  '  .  / test_pubsub_exclude . js '  )  ; %NWL%var pubsub_eligible = require (  '  .  / test_pubsub_eligible . js '  )  ; %NWL%var pubsub_prefix_sub = require (  '  .  / test_pubsub_prefix_sub . js '  )  ; %NWL%0
,  " anchor "%NWL%,  " default "%NWL%]  )  ; %NWL%target . prototype . onToken = function ( token )  {%NWL%var AnchorEscapeContext = require (  '  .  / AnchorEscapeContext '  )  ; %NWL%var AnchorInlineContext = require (  '  .  / AnchorInlineContext '  )  ; %NWL%var AnchorBlockContext = require (  '  .  / AnchorBlockContext '  )  ; %NWL%var AnchorGroupContext = require (  '  .  / AnchorGroupContext '  )  ; %NWL%var JsWhileContext = require (  '  .  / JsWhileContext '  )  ; %NWL%var JsIfContext = require (  '  .  / JsIfContext '  )  ; %NWL%var JsForContext = require (  '  .  / JsForContext '  )  ; %NWL%4
, real_URL = view . URL || view . webkitURL || view%NWL%, real_create_object_URL = real_URL . createObjectURL%NWL%, real_revoke_object_URL = real_URL . revokeObjectURL%NWL%, URL = real_URL%NWL%, btoa = view . btoa%NWL%, atob = view . atob%NWL%, can_apply_typed_arrays = false%NWL%, can_apply_typed_arrays_test = function ( pass )  {%NWL%can_apply_typed_arrays = !pass ;%NWL%}%NWL%, ArrayBuffer = view . ArrayBuffer%NWL%4
else%NWL%{%NWL%result = cook ( subject , recipe , blockName )  ;%NWL%}%NWL%return result ;%NWL%}%NWL%function applyStep ( subject , detected )%NWL%{%NWL%var recipeName = detected . recipeName ; %NWL%var blockName  = detected . blockName ; %NWL%var stepName  = detected . stepName ; %NWL%8
}  }  ;%NWL%}%NWL%dispatcher . target = target ;%NWL%}%NWL%var results = advise (  ( dispatcher || existing )  , type , advice , receiveArguments )  ; %NWL%advice = null ; %NWL%return results ;%NWL%}  ;%NWL%}%NWL%var after = aspect (  " after "  )  ; %NWL%var before = aspect (  " before "  )  ; %NWL%9
regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%2
newNotes =  ' No notes for this step '  ;%NWL%}%NWL%consoleWindow . document . getElementById (  ' notes '  )  . innerHTML = newNotes ; %NWL%var baseURL = document . URL . substring ( 0 , document . URL . search (  ' # /  '  )  )  ; %NWL%var slideSrc = baseURL +  ' # '  + document . querySelector (  '  . active '  )  . id ; %NWL%var preSrc = baseURL +  ' # '  + nextStep (  )  . id ; %NWL%var slideView = consoleWindow . document . getElementById (  ' slideView '  )  ; %NWL%if ( slideView . src ! =  = slideSrc )  {%NWL%slideView . src = slideSrc ;%NWL%}%NWL%var preView = consoleWindow . document . getElementById (  ' preView '  )  ; %NWL%6
return null ;%NWL%}%NWL%WebInspector . Geometry . CubicBezier . prototype =  {%NWL%evaluateAt : function ( t )%NWL%{%NWL%function evaluate ( v1 , v2 , t )%NWL%{%NWL%return 3 *  ( 1 - t )  *  ( 1 - t )  * t * v1 + 3 *  ( 1 - t )  * t * t * v2 + Math . pow ( t , 3 )  ;%NWL%}%NWL%var x = evaluate ( this . controlPoints [ 0 ]  . x , this . controlPoints [ 1 ]  . x , t )  ; %NWL%var y = evaluate ( this . controlPoints [ 0 ]  . y , this . controlPoints [ 1 ]  . y , t )  ; %NWL%9
bigNumber : function ( length )  {%NWL%var out =  "  "  ; %NWL%for ( var i = 0 ; i < length ; i +  +  )  {%NWL%out +  = this . rand ( 10 )  ;%NWL%}%NWL%return out ;%NWL%}  ,%NWL%date : function ( options )  {%NWL%options = options || {  }  ; %NWL%var min = new Date ( options . min )  ; %NWL%var max = new Date ( options . max )  ; %NWL%9
if ( typeof module ! =  ' undefined ' && module . exports ) module . exports = definition (  )%NWL%else if ( typeof context [  ' define '  ]  =  =  ' function ' && context [  ' define '  ]  [  ' amd '  ]  ) define ( definition )%NWL%else context [ name ]  = definition (  )%NWL%}  )  (  ' qwery '  , this , function (  )  {%NWL%var doc = document%NWL%, html = doc . documentElement%NWL%, byClass =  ' getElementsByClassName '%NWL%, byTag =  ' getElementsByTagName '%NWL%, qSA =  ' querySelectorAll '%NWL%, useNativeQSA =  ' useNativeQSA '%NWL%, tagName =  ' tagName '%NWL%9
this . setNotify = function ( itemSet , itemRemove )  {%NWL%this . notify =  {%NWL%setItem : itemSet ,%NWL%removeItem : itemRemove%NWL%}  ; %NWL%return this ;%NWL%}  ; %NWL%this . $get =  [  ' $rootScope '  ,  ' $window '  ,  ' $document '  ,  ' $parse '  , function ( $rootScope , $window , $document , $parse )  {%NWL%var self = this ; %NWL%var prefix = self . prefix ; %NWL%var cookie = self . cookie ; %NWL%9
var fs = require (  ' fs '  )%NWL%var connect = require (  ' connect '  )%NWL%var http = require (  ' http '  )%NWL%var path = require (  ' path '  )%NWL%var CookieService = require (  '  .  / cookie '  )%NWL%var router = require (  '  .  / router '  )%NWL%var TemplateEngine = require (  '  .  / TemplateEngine '  )%NWL%var fsutils = require (  '  .  / fsutils '  )%NWL%var CacheHelper = require (  '  .  / helpers / CacheHelper '  )%NWL%var FileLoader = require (  '  .  / FileLoader '  )%NWL%var ClassLoader = require (  '  .  / ClassLoader '  )%NWL%5
var rpc_error = require (  '  .  / test_rpc_error . js '  )  ; %NWL%var rpc_options = require (  '  .  / test_rpc_options . js '  )  ; %NWL%var rpc_progress = require (  '  .  / test_rpc_progress . js '  )  ; %NWL%var rpc_slowsquare = require (  '  .  / test_rpc_slowsquare . js '  )  ; %NWL%var rpc_routing = require (  '  .  / test_rpc_routing . js '  )  ; %NWL%var rpc_caller_disclose_me = require (  '  .  / test_rpc_caller_disclose_me . js '  )  ; %NWL%var pubsub_basic = require (  '  .  / test_pubsub_basic . js '  )  ; %NWL%var pubsub_complex = require (  '  .  / test_pubsub_complex . js '  )  ; %NWL%var pubsub_options = require (  '  .  / test_pubsub_options . js '  )  ; %NWL%var pubsub_excludme = require (  '  .  / test_pubsub_excludeme . js '  )  ; %NWL%var pubsub_exclude = require (  '  .  / test_pubsub_exclude . js '  )  ; %NWL%0
var tenant_promisc = $ (  " #vnw_promisc "  )  . attr (  " checked "  ) ? 1 : 0 ; %NWL%var public_ipstart = $ (  " #float_ip_start "  )  . val (  )  ; %NWL%var public_ipend = $ (  " #float_ip_end "  )  . val (  )  ; %NWL%var public_netmask = $ (  " #float_netmask "  )  . val (  )  ; %NWL%var public_gateway = $ (  " #float_gateway "  )  . val (  )  ; %NWL%var public_nic = $ (  " #float_nic "  )  . val (  )  ; %NWL%var public_promisc = $ (  " #float_promisc "  )  . attr (  " checked "  ) ? 1 : 0 ; %NWL%var storage_ipstart = $ (  " #storage_ip_start "  )  . val (  )  ; %NWL%var storage_ipend = $ (  " #storage_ip_end "  )  . val (  )  ; %NWL%var storage_netmask = $ (  " #storage_netmask "  )  . val (  )  ; %NWL%var storage_gateway = $ (  " #storage_gateway "  )  . val (  )  ; %NWL%9
return true =  = allowNull ;%NWL%}%NWL%return arg instanceof Number || typeof arg =  =  ' number ' || null ! = asFloat ( arg )  ;%NWL%}%NWL%var isInteger = module . exports . isInteger = function ( arg , allowNull )  {%NWL%if ( !isNumber ( arg , allowNull )  )  {%NWL%return false ;%NWL%}%NWL%return ( parseInt ( arg )  +  "  "  )  =  =  ( arg +  "  "  )  ;%NWL%}%NWL%var isBoolean = module . exports . isBoolean = function ( arg , allowNull )  {%NWL%4
' length '  : Number ( shape . getAttribute (  ' x - format - padding - length '  )  ) || 0 ,%NWL%' char '  : shape . getAttribute (  ' x - format - padding - char '  ) || ' 0 '  ,%NWL%' direction '  : shape . getAttribute (  ' x - format - padding - direction '  ) || ' L '%NWL%}  )  ; %NWL%break ;%NWL%}%NWL%}%NWL%var attrs =  {  }  ; %NWL%var left = Number ( shape . getAttribute (  ' x - left '  )  )  ; %NWL%var top = Number ( shape . getAttribute (  ' x - top '  )  )  ; %NWL%var width = Number ( shape . getAttribute (  ' x - width '  )  )  ; %NWL%8
var http = require (  ' http '  )  ; %NWL%var isAbsolute = require (  '  .  / utils '  )  . isAbsolute ; %NWL%var onFinished = require (  ' on - finished '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var merge = require (  ' utils - merge '  )  ; %NWL%var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%0
break /  / if we find something , it cannot be anything else%NWL%}%NWL%}%NWL%}%NWL%}  )%NWL%var html =  '  < u > Outline <  / u >  < br /  >  < br /  >  '  ; %NWL%html +  =  '  < div style =  " overflow : auto ; max - height : 400px ;  " id =  " outlineInfo "  >  '  ; %NWL%for ( var i = 0 ; i < info . length ; i +  +  )  {%NWL%var type = info [ i ]  . type ; %NWL%var kind = type ; %NWL%var name = info [ i ]  . name ; %NWL%8
module . exports = function ( condition , fn )  {%NWL%if ( !condition || !condition . ngay || !condition . id_app )  {%NWL%fn ( new Error (  " ngay and id_app parameter condition "  )  )  ; %NWL%return ;%NWL%}%NWL%var ma_dvcs = condition . ma_dvcs ; %NWL%if ( !ma_dvcs )  {%NWL%ma_dvcs =  "  "  ;%NWL%}%NWL%ma_dvcs =  { $regex : ma_dvcs , $options :  ' i '  }  ; %NWL%var tk = condition . tk ; %NWL%5
. then ( function ( posts )  {%NWL%page +  +  ; %NWL%self . render (  ' list '  ,  { posts : posts , pageNext : posts . length >  = maxPosts ? page + 1 : undefined , pageBack : page - 1 >  = 1 ? page - 1 : undefined }  )  ;%NWL%}  )  . catch ( function ( err )  {%NWL%self . e . exception ( err )  ; %NWL%self . render (  ' list '  ,  { error : err . message }  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%actionPost : function ( req , resp , query , models )  {%NWL%var Post = models . Post (  )  ; %NWL%var User = models . User (  )  ; %NWL%9
' with an inline @type tag , the function parameters are documented in the correct order '  ,%NWL%function (  )  {%NWL%var restock = docSet . getByLongname (  ' restock '  )  [ 0 ]  ; %NWL%info [ 0 ]  =  { name :  ' dispenser '  , typeName :  ' Dispenser '  }  ; %NWL%info [ 1 ]  =  { name :  ' item '  , typeName :  ' string '  }  ; %NWL%checkParams ( restock , info )  ;%NWL%}  )  ; %NWL%it (  ' When a function accepts multiple parameters , and only the last parameter is documented '  +%NWL%' with an inline @type tag , the function parameters are documented in the correct order '  ,%NWL%function (  )  {%NWL%var clean = docSet . getByLongname (  ' clean '  )  [ 0 ]  ; %NWL%2
}%NWL%}%NWL%]  ; %NWL%var searchList = $ (  " #searchList "  )  ; %NWL%$ . getScript (  " WSPageView . js "  , function (  )  {%NWL%searchList . PageView ( pages )  ; %NWL%var hideTooltip = function (  )  {%NWL%$ (  " #tooltip "  )  . animateWithCSS (  {%NWL%top :  - 50%NWL%}  )  ; %NWL%var signature = $ (  " #signature "  )  ; %NWL%3
var block = require (  '  .  .  / middleware / block '  )  ; %NWL%var logger = require (  '  .  .  / common / logger '  )  ; %NWL%var renderMarkdown = require (  '  .  .  / common / markdown '  )  . render ; %NWL%var auth = require (  '  .  .  / middleware / auth '  )  ; %NWL%var proxyToNpm = require (  '  .  .  / middleware / proxy_to_npm '  )  ; %NWL%var routes = require (  '  .  .  / routes / web '  )  ; %NWL%var config = require (  '  .  .  / config '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var koa = require (  ' koa '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%7
}%NWL%if ( !isDefined ( leftMergeOption ) && !isDefined ( rightMergeOption )  )  {%NWL%return [  ]  ;%NWL%}%NWL%var retval =  [  ]  ; %NWL%var leftSurplus = 0 ; %NWL%var leftData ; %NWL%var rightSurplus = 0 ; %NWL%var rightData ; %NWL%var leftPeer = this . leftPeer ; %NWL%var rightPeer = this . rightPeer ; %NWL%9
header : gettext (  ' Processors '  )  ,%NWL%never_delete : true ,%NWL%editor :  ( caps . vms [  ' VM . Config . CPU '  ] || caps . vms [  ' VM . Config . HWType '  ]  ) ?%NWL%' PVE . qemu . ProcessorEdit '  : undefined ,%NWL%tdCls :  ' pve - itype - icon - processor '  ,%NWL%defaultValue : 1 ,%NWL%multiKey :  [  ' sockets '  ,  ' cpu '  ,  ' cores '  ,  ' numa '  ]  ,%NWL%renderer : function ( value , metaData , record , rowIndex , colIndex , store , pending )  {%NWL%var sockets = me . getObjectValue (  ' sockets '  , 1 , pending )  ; %NWL%var model = me . getObjectValue (  ' cpu '  , undefined , pending )  ; %NWL%var cores = me . getObjectValue (  ' cores '  , 1 , pending )  ; %NWL%8
a : c . a < 0 ? 0 : c . a > 1 ? 1 : c . a%NWL%}  ;%NWL%}  ,%NWL%mixColor : function ( c1 , c2 , s )  {%NWL%return lite . addColor ( lite . scaleColor ( s , c1 )  , lite . scaleColor ( 1 - s , c2 )  )  ;%NWL%}  ,%NWL%diff2Color : function ( c1 , c2 )  {%NWL%var r = c1 . r - c2 . r ; %NWL%var g = c1 . g - c2 . g ; %NWL%var b = c1 . b - c2 . b ; %NWL%var a = c1 . a - c2 . a ; %NWL%7
" use strict "  ; %NWL%var path = require (  ' path '  )%NWL%, gruntHelpers = require (  '  .  / grunt - helpers . js '  )%NWL%, authorize = gruntHelpers . authorize%NWL%, tail = gruntHelpers . tail%NWL%, buildApp = gruntHelpers . buildApp%NWL%, buildSafariLauncherApp = gruntHelpers . buildSafariLauncherApp%NWL%, signApp = gruntHelpers . signApp%NWL%, setupAndroidBootstrap = gruntHelpers . setupAndroidBootstrap%NWL%, setupAndroidApp = gruntHelpers . setupAndroidApp%NWL%, buildAndroidBootstrap = gruntHelpers . buildAndroidBootstrap%NWL%3
. then ( function ( template )  {%NWL%res . status ( 200 )  . json ( template . toJSON (  )  )  ;%NWL%}  )%NWL%. catch ( function ( err )  {%NWL%res . status ( 400 )  . end (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%updateGitRepoUrl : function ( req , res )  {%NWL%var newGitRepoUrl = req . body . newGitRepoUrl ; %NWL%var oldGitRepoUrl = req . body . oldGitRepoUrl ; %NWL%9
BookmarksManager . prototype . startGoogle = function ( galxEnc , sidEnc , hsidEnc , lsidEnc , ssidEnc , xtEnc , response )%NWL%{%NWL%if ( response && !this . nduid )  {%NWL%var nduid ; %NWL%for ( p in response )  {%NWL%if ( p =  =  " com . palm . properties . nduid "  )  { nduid = response [ p ]  ;  }%NWL%}%NWL%this . nduid = nduid ;%NWL%}%NWL%var galx = Mojo . Model . decrypt ( this . nduid , galxEnc )  ; %NWL%var sid = Mojo . Model . decrypt ( this . nduid , sidEnc )  ; %NWL%9
options = options || {  }  ; %NWL%var getValue = argscheck . getValue ; %NWL%var quality = getValue ( options . quality , 50 )  ; %NWL%var destinationType = getValue ( options . destinationType , Camera . DestinationType . FILE_URI )  ; %NWL%var sourceType = getValue ( options . sourceType , Camera . PictureSourceType . CAMERA )  ; %NWL%var targetWidth = getValue ( options . targetWidth ,  - 1 )  ; %NWL%var targetHeight = getValue ( options . targetHeight ,  - 1 )  ; %NWL%var encodingType = getValue ( options . encodingType , Camera . EncodingType . JPEG )  ; %NWL%var mediaType = getValue ( options . mediaType , Camera . MediaType . PICTURE )  ; %NWL%var allowEdit = !!options . allowEdit ; %NWL%var correctOrientation = !!options . correctOrientation ; %NWL%9
b = codeBuf & (  ( 1 <  < bits )  - 1 )  ; %NWL%this . codeBuf = codeBuf >  > bits ; %NWL%this . codeSize = codeSize -  = bits ; %NWL%this . bytesPos = bytesPos ; %NWL%return b ;%NWL%}  ; %NWL%constructor . prototype . getCode = function ( table )  {%NWL%var codes = table [ 0 ]  ; %NWL%var maxLen = table [ 1 ]  ; %NWL%var codeSize = this . codeSize ; %NWL%var codeBuf = this . codeBuf ; %NWL%9
async = require (  " async "  )  ,%NWL%caFile = process . env . L2L_ASKPASS_SSL_CA_FILE ,%NWL%keyFile = process . env . L2L_ASKPASS_SSL_KEY_FILE ,%NWL%certFile = process . env . L2L_ASKPASS_SSL_CERT_FILE ; %NWL%async . map (  [ caFile , keyFile , certFile ]  , function ( path , next )  {%NWL%if ( path ) fs . readFile ( path , next )  ; else next ( null , undefined )  ;%NWL%}  , function ( err , results )  {%NWL%if ( err )  { thenDo ( err )  ; return ;  }%NWL%options . tlsOptions =  { rejectUnauthorized : false }  ; %NWL%if ( caFile ) options . tlsOptions . ca = fs . readFileSync ( caFile )  ; %NWL%if ( keyFile ) options . tlsOptions . key = fs . readFileSync ( keyFile )  ; %NWL%9
}%NWL%this . _layoutMode = true ;%NWL%}  ,%NWL%_onIEMouseDown : function ( e )  {%NWL%var outsideClientArea ; %NWL%var b = this . document . body ; %NWL%var clientWidth = b . clientWidth ; %NWL%var clientHeight = b . clientHeight ; %NWL%var clientLeft = b . clientLeft ; %NWL%var offsetWidth = b . offsetWidth ; %NWL%var offsetHeight = b . offsetHeight ; %NWL%6
next : function (  )  {%NWL%if ( this . _hasNext )  {%NWL%var next = this . _next ; %NWL%this . _findNext (  )  ; %NWL%return next ;%NWL%} else {%NWL%return null ;%NWL%}%NWL%}  ,%NWL%_findNext : function (  )  {%NWL%var unit = this . _unit ; %NWL%2
if ( interval ! = undefined )  {%NWL%value = Math . round ( value / interval )  * interval ;%NWL%}%NWL%var valid = true ; %NWL%var minimum = data . schemas (  )  . minimum (  )  ; %NWL%if ( minimum ! = undefined )  {%NWL%if ( value < minimum || ( value =  = minimum && data . schemas (  )  . exclusiveMinimum (  )  )  )  {%NWL%valid = false ;%NWL%}%NWL%}%NWL%var maximum = data . schemas (  )  . maximum (  )  ; %NWL%4
var NodeSourcePlugin = require (  "  .  / node / NodeSourcePlugin "  )  ; %NWL%compiler . apply (%NWL%new WebWorkerTemplatePlugin ( options . output )  ,%NWL%new FunctionModulePlugin ( options . output )  ,%NWL%new NodeSourcePlugin ( options . node )  ,%NWL%new LoaderTargetPlugin (  " webworker "  )%NWL%)  ; %NWL%break ; %NWL%case " node "  : %NWL%case " async - node "  : %NWL%var NodeTemplatePlugin = require (  "  .  / node / NodeTemplatePlugin "  )  ; %NWL%0
var southPanel = Ext . ComponentQuery . query (  ' security_management_southpanel '  )  . first (  )  ; %NWL%var security_management_userswidget = southPanel . down (  ' security_management_userswidget '  )  ; %NWL%delete security_management_userswidget . assign_to_id ; %NWL%delete security_management_userswidget . assign_to_description ; %NWL%var security_management_roleswidget = southPanel . down (  ' security_management_roleswidget '  )  ; %NWL%delete security_management_roleswidget . assign_to_id ; %NWL%delete security_management_roleswidget . assign_to_description ; %NWL%var security_management_capabilitieswidget = southPanel . down (  ' security_management_capabilitieswidget '  )  ; %NWL%delete security_management_capabilitieswidget . assign_to_id ; %NWL%delete security_management_capabilitieswidget . assign_to_description ; %NWL%var security_management_groupseffectivesecurity = southPanel . down (  ' security_management_groupseffectivesecurity '  )  ; %NWL%1
window . setTimeout ( function (  )  {%NWL%if ( request . readyState ! =  = 0 )  {  /  / W3C : 0 - UNSENT%NWL%request . send ( config . data )  ;%NWL%}%NWL%}  , 0 )  ;%NWL%}%NWL%return request ;%NWL%}  ,%NWL%runCallbacks : function ( options )  {%NWL%var request = options . request ; %NWL%var config = options . config ; %NWL%9
this . onload = null ; %NWL%var svg = doc . getElementById (  ' svg '  + id )  ; %NWL%svg . setAttribute (  " width "  , this . width +  ' px '  )  ; %NWL%svg . setAttribute (  " height "  , this . height +  ' px '  )  ;%NWL%}  ; %NWL%img . src = theURL . createObjectURL ( file )  ; %NWL%div . appendChild ( svg )  ; %NWL%var filter = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " filter "  )  ; %NWL%filter . setAttribute (  " id "  ,  " SVGdesaturate "  )  ; %NWL%svg . appendChild ( filter )  ; %NWL%var feColorMatrix = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / svg "  ,  " feColorMatrix "  )  ; %NWL%7
var align = ed . dom . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = ed . dom . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var bordercolor = convertRGBToHex ( getStyle ( tdElm ,  ' bordercolor '  ,  ' borderLeftColor '  )  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( tdElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var className = ed . dom . getAttrib ( tdElm ,  ' class '  )  ; %NWL%var backgroundimage = getStyle ( tdElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  [  ' \ "  ] ? (  [ ^ ' \ "  ]  *  )  [  ' \ "  ] ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ; %NWL%var id = ed . dom . getAttrib ( tdElm ,  ' id '  )  ; %NWL%var lang = ed . dom . getAttrib ( tdElm ,  ' lang '  )  ; %NWL%var dir = ed . dom . getAttrib ( tdElm ,  ' dir '  )  ; %NWL%0
' error '  )  ;%NWL%} else {%NWL%oae . api . util . template (  )  . render ( $ (  ' #tenants - login - template '  , $rootel )  , data , $ (  ' #tenants - login - container '  , $rootel )  )  ; %NWL%$ (  ' #tenants - login - form '  )  . submit (  )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%var createTenant = function (  )  {%NWL%var alias = $ . trim ( $ (  ' #tenants - create - alias '  , $rootel )  . val (  )  )  ; %NWL%var displayName = $ . trim ( $ (  ' #tenants - create - displayName '  , $rootel )  . val (  )  )  ; %NWL%var host = $ . trim ( $ (  ' #tenants - create - host '  , $rootel )  . val (  )  )  ; %NWL%8
return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%var parentNode = this . parentNode ; %NWL%var progressService = this . progressService ; %NWL%var selection = this . selection ; %NWL%3
this . update = function ( position , normal , camPos , delta )  {%NWL%if ( isNaN ( delta ) || delta > 1000 )  {%NWL%delta = 1000 / 60 ;%NWL%}%NWL%time +  = delta ; %NWL%var multiplier = delta / that . settings . aliveDivider ; %NWL%for ( i = 0 ; i < that . array . length ;  +  + i )  {%NWL%var obj = that . array [ i ]  ; %NWL%var c = obj . c ; %NWL%var alivetime = obj . alivetime ; %NWL%var tree = obj . tree ; %NWL%8
if ( code >  = 0 ) dispose = code ;%NWL%}%NWL%var setRepeat = exports . setRepeat = function setRepeat ( iter )%NWL%{%NWL%if ( iter >  = 0 ) repeat = iter ;%NWL%}%NWL%var setTransparent = exports . setTransparent = function setTransparent ( c )%NWL%{%NWL%transparent = c ;%NWL%}%NWL%var setComment = exports . setComment = function setComment ( c )%NWL%6
for ( i = 0 ; i < that . initSettings . numOfAnimals ;  +  + i )  {%NWL%var obj =  that . array [ i ]  ; %NWL%var active = obj . active ; %NWL%if ( !active )  {%NWL%continue ;%NWL%}%NWL%var animal = obj . c ; %NWL%var anim = obj . a ; %NWL%var scale = obj . scale ; %NWL%var normal = obj . normal ; %NWL%var position = obj . position ; %NWL%2
var loaded = false ; %NWL%function load (  )  {%NWL%if ( loaded ) return false ; %NWL%loaded = true ; %NWL%if ( !HASSDK ) return ; %NWL%pubsub . on (  " message "  , function ( message )  {%NWL%if ( message . type ! =  " package "  )%NWL%return ; %NWL%console . log (  " PubSub package API message "  , message )  ; %NWL%var action = message . action ; %NWL%var body = message . body ; %NWL%9
for ( i = 0 ; i < meshInstances . length ; i +  +  )  {%NWL%meshInstances [ i ]  . mesh = meshes . indexOf ( meshInstances [ i ]  . mesh )  ;%NWL%}%NWL%}%NWL%function partitionSkin ( model , materialMappings , boneLimit )  {%NWL%var i , j , k ; %NWL%indicesToReferences ( model )  ; %NWL%var vertexArrays = model . vertices ; %NWL%var skins = model . skins ; %NWL%var meshes = model . meshes ; %NWL%var meshInstances = model . meshInstances ; %NWL%8
if (  ( pX || pY ) && event . deltaMode )  {%NWL%if ( event . deltaMode =  = 1 )  {    /  / delta in LINE units%NWL%pX *  = LINE_HEIGHT ; %NWL%pY *  = LINE_HEIGHT ;%NWL%} else {         /  / delta in PAGE units%NWL%pX *  = PAGE_HEIGHT ; %NWL%pY *  = PAGE_HEIGHT ;%NWL%}%NWL%}%NWL%if ( pX && !sX )  { sX =  ( pX < 1 ) ? - 1 : 1 ;  }%NWL%if ( pY && !sY )  { sY =  ( pY < 1 ) ? - 1 : 1 ;  }%NWL%9
todos . push ( exportedTODO )%NWL%}%NWL%}  )%NWL%return doing . concat ( todos )  . concat ( dones )  . join (  ' \n\n '  )%NWL%}%NWL%var breaks =  /  < br >  / g%NWL%var spaces =  / &nbsp ;  / g%NWL%var newlines =  / \n / g%NWL%var lt =  / &lt ;  / g%NWL%var gt =  / &gt ;  / g%NWL%var amp =  / &amp ;  / g%NWL%8
return this . transformCallMemberExpression ( tree )  ; %NWL%if ( tree . operand . type =  =  = MEMBER_LOOKUP_EXPRESSION )%NWL%return this . transformCallMemberLookupExpression ( tree )  ; %NWL%return this . transformCallAndNew_ ( tree , CallExpression )  ;%NWL%}%NWL%transformNewExpression ( tree )  {%NWL%return this . transformCallAndNew_ ( tree , NewExpression )  ;%NWL%}%NWL%transformCallAndNew_ ( tree , ctor )  {%NWL%let operand = this . transformAny ( tree . operand )  ; %NWL%let args = this . transformAny ( tree . args )  ; %NWL%9
+  ( aDiscussion . duplicateId ? ' _ '  + aDiscussion . duplicateId :  '  '  )  )  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . changeStatus = function ( aReq , aRes , aNext )  {%NWL%var type = aReq . params . type ; %NWL%var topic = aReq . params . topic ; %NWL%var installName = scriptStorage . getInstallName ( aReq )  ; %NWL%var category = type +  '  /  '  + installName +  '  / issues '  ; %NWL%var action = aReq . params . action ; %NWL%6
expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%expect ( URI . hasHeader (  ' anything '  )  )  . toBe ( false )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  "  . deleteHeader "  , function (  )  {%NWL%it (  " deletes the given header from the headers list "  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%var name1 =  ' name1 '  ; %NWL%var value1 =  ' value1 '  ; %NWL%var name2 =  ' name2 '  ; %NWL%var value2 =  ' value2 '  ; %NWL%7
name   :  " OpenStreetMap "  ,%NWL%maxZoom  : 18%NWL%}  )  )  ; %NWL%if ( jsonData . points . length =  =  = 0 )  {%NWL%return ;%NWL%}%NWL%var fields =  [  ]  ; %NWL%var field ; %NWL%var n = jsonData . points . length ; %NWL%var icon_color   = jsonData . meta . icon_color ; %NWL%var icon_weight  = jsonData . meta . icon_weight ; %NWL%9
, file_ex_codes =  (%NWL%" NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR "%NWL%+  " NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR "%NWL%)  . split (  "  "  )%NWL%, file_ex_code = file_ex_codes . length%NWL%, real_URL = view . URL || view . webkitURL || view%NWL%, real_create_object_URL = real_URL . createObjectURL%NWL%, real_revoke_object_URL = real_URL . revokeObjectURL%NWL%, URL = real_URL%NWL%, btoa = view . btoa%NWL%, atob = view . atob%NWL%9
var clean = require (  '  .  / gulp / clean '  )  ; %NWL%var downloadLocales = require (  '  .  / gulp / download - locales '  )  ; %NWL%var locale = require (  '  .  / gulp / locale '  )  ; %NWL%var template = require (  '  .  / gulp / template '  )  ; %NWL%var browserify = require (  '  .  / gulp / browserify '  )  ; %NWL%var less = require (  '  .  / gulp / less '  )  ; %NWL%var cache = require (  '  .  / gulp / cache '  )  ; %NWL%var publish = require (  '  .  / gulp / publish '  )  ; %NWL%var svgmin = require (  '  .  / gulp / svgmin '  )  ; %NWL%var jsbeautify = require (  '  .  / gulp / jsbeautify '  )  ; %NWL%var jshint = require (  '  .  / gulp / jshint '  )  ; %NWL%0
}%NWL%return pagedUrl ;%NWL%}%NWL%}  ,%NWL%' parse '  : function ( resp , xhr )  {%NWL%var pageSize = parseInt ( xhr . getResponseHeader ( this . paginationHeaders [  ' pageSize '  ]  )  , 10 )  ; %NWL%if ( isNaN ( pageSize )  )  {%NWL%pageSize = 0 ;%NWL%}%NWL%this . pageSize = pageSize ; %NWL%var pageNumber = parseInt ( xhr . getResponseHeader ( this . paginationHeaders [  ' pageNumber '  ]  )  , 10 )  ; %NWL%5
false ,%NWL%1%NWL%)  ;%NWL%}%NWL%}  ,%NWL%update : function ( clock , delta )  {%NWL%var entities = this . entities ; %NWL%for ( var en = 0 , enl = entities . length ; en < enl ; en +  +  )  {%NWL%entities [ en ]  . update ( clock , delta )  ;%NWL%}%NWL%var effects = this . effects ; %NWL%6
contextPrototype . translate = function ( aX , aY )  {%NWL%var m1 =  [%NWL%[ 1 ,  0 ,  0 ]  ,%NWL%[ 0 ,  1 ,  0 ]  ,%NWL%[ aX , aY , 1 ]%NWL%]  ; %NWL%this . m_ = matrixMultiply ( m1 , this . m_ )  ;%NWL%}  ; %NWL%contextPrototype . rotate = function ( aRot )  {%NWL%var c = mc ( aRot )  ; %NWL%var s = ms ( aRot )  ; %NWL%9
' The Star Wars Holiday Special '  . length ,  ' the width and the '  +%NWL%' character width times the length of what is now the longest line '  )  ;%NWL%}  ; %NWL%exports . testInvalidRects = function (  )  {%NWL%var layoutManager = new LayoutManager (  {%NWL%margin :  { left : 0 , bottom : 0 , top : 0 , right : 0 }%NWL%}  )  ; %NWL%var textStorage = layoutManager . textStorage ; %NWL%textStorage . setValue (  ' foo\nbar\nbaz\nboo\n '  )  ; %NWL%var characterWidth = layoutManager . characterWidth ; %NWL%var lineHeight = layoutManager . lineHeight ; %NWL%7
}%NWL%}%NWL%return ret ;%NWL%}%NWL%function play ( array , x , y , move )  {%NWL%array [ x ]  [ y ]  = move ;%NWL%}%NWL%function fill2dArray ( array )  {%NWL%var out ; %NWL%for ( var i = 0 ; i < array . length ;  +  + i )  {%NWL%for ( var x = 0 ; x < array . length ;  +  + x )  {%NWL%9
return res . send ( 400 ,  {%NWL%message :  ' Invalid Request '%NWL%}  )  ;%NWL%}%NWL%var email = userObject . email ; %NWL%if ( email )  {%NWL%email = email . toLowerCase (  )  ;%NWL%}%NWL%var password = userObject . password ; %NWL%var username = userObject . username ; %NWL%var name = userObject . name ; %NWL%4
main . provides =  [  " plugin . loader "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Plugin = imports . Plugin ; %NWL%var vfs = imports . vfs ; %NWL%var c9 = imports . c9 ; %NWL%var fs = imports . fs ; %NWL%var auth = imports . auth ; %NWL%var installer = imports [  " plugin . installer "  ]  ; %NWL%var dirname = require (  " path "  )  . dirname ; %NWL%var join = require (  " path "  )  . join ; %NWL%9
var r = new xmpp . Router (  )%NWL%r . loadCredentials (  ' codetu . be '  ,  ' codetube . key '  ,  ' codetube . crt '  )%NWL%r . register ( MY_JID , function ( stanza )  {%NWL%var time = Date . now (  )%NWL%var query%NWL%if ( stanza . is (  ' iq '  ) &&%NWL%( stanza . attrs . type =  =  =  ' result '  ) &&%NWL%( query = stanza . getChild (  ' query '  ,  ' jabber : iq : version '  )  )  )  {%NWL%var name = query . getChildText (  ' name '  )%NWL%var version = query . getChildText (  ' version '  )%NWL%var os = query . getChildText (  ' os '  )%NWL%8
}%NWL%if ( this . _autoLoadEnabled )  {%NWL%this . load (  )  ;%NWL%}%NWL%}  ,%NWL%onChanging : function ( e )  {%NWL%if ( !this . _getSaveDiffsEnabled (  )  )  { return ;  }%NWL%var length = this . _unsavedChanges . length ; %NWL%var addedCharCount = e . addedCharCount ; %NWL%var removedCharCount = e . removedCharCount ; %NWL%var start = e . start ; %NWL%8
, dirname = require (  ' path '  )  . dirname%NWL%, mkdirp = require (  ' mkdirp '  )%NWL%, join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var debug = options . debug ; %NWL%9
var DATA = require (  '  .  / init '  )  . init ( exports )%NWL%, assert = DATA . assert%NWL% ; %NWL%var http = require (  ' http '  )%NWL%, querystring = require (  ' querystring '  )%NWL%, URL = require (  ' url '  )%NWL%, util = require (  ' util '  )%NWL%, oauth2_server = require (  ' oauth2 - server '  )%NWL%, base64 = require (  ' base64 '  )%NWL%, extend = require (  '  .  .  / lib / merger '  )  . extend%NWL%, request = require (  ' request '  )%NWL%4
if ( !element . gestures [ type ]  )  {%NWL%element . gestures [ type ]  =  {%NWL%callbacks :  [ listener ]  ,%NWL%stopped : false /  / to cancel event bubbling%NWL%}  ;%NWL%} else {%NWL%element . gestures [ type ]  . callbacks . push ( listener )  ;%NWL%}%NWL%if ( !element . listening )  {%NWL%var _press = lang . hitch ( this ,  " _press "  , element )  ; %NWL%var _move = lang . hitch ( this ,  " _move "  , element )  ; %NWL%9
var CC = require (  ' config - chain '  )  . ConfigChain%NWL%var inherits = require (  ' inherits '  )%NWL%var configDefs = require (  '  .  / config - defs . js '  )%NWL%var types = configDefs . types%NWL%var once = require (  ' once '  )%NWL%var fs = require (  ' fs '  )%NWL%var path = require (  ' path '  )%NWL%var nopt = require (  ' nopt '  )%NWL%var ini = require (  ' ini '  )%NWL%var Octal = configDefs . Octal%NWL%var mkdirp = require (  ' mkdirp '  )%NWL%1
}%NWL%}  ,%NWL%testExpandCollapseNodesOnTree :  {%NWL%browsers :  [  "  - IE7 "  ,  "  - IE8 "  ]  ,%NWL%test : function ( cmp )  {%NWL%var toyota = cmp . find (  " toyota "  )  ; %NWL%aura . test . assertFalse ( toyota . get (  " v . expanded "  )  ,  " Toyota should not be expanded "  )  ; %NWL%var elemToyota = document . getElementById (  " node_ "  + toyota . getGlobalId (  )  )  ; %NWL%elemToyota . click (  )  ; %NWL%aura . test . assertTrue ( toyota . get (  " v . expanded "  )  ,  " Toyota should be expanded "  )  ; %NWL%var airbus = cmp . find (  " airbus "  )  ; %NWL%5
$ (  ' #tools_shapelib '  )  . css (  {%NWL%' margin - top '  :  -  ( h / 2 )  ,%NWL%' margin - left '  : 3%NWL%}  )  ;%NWL%}  ,%NWL%mouseDown : function ( opts )  {%NWL%var mode = canv . getMode (  )  ; %NWL%if ( mode ! =  = mode_id ) return ; %NWL%var e = opts . event ; %NWL%var x = start_x = opts . start_x ; %NWL%var y = start_y = opts . start_y ; %NWL%9
if ( !form ) form =  {  }%NWL%var oa =  {  }%NWL%for ( var i in form ) oa [ i ]  = form [ i ]%NWL%for ( var i in _oauth ) oa [  ' oauth_ '  + i ]  = _oauth [ i ]%NWL%if ( !oa . oauth_version ) oa . oauth_version =  ' 1 . 0 '%NWL%if ( !oa . oauth_timestamp ) oa . oauth_timestamp = Math . floor (  ( new Date (  )  )  . getTime (  )  / 1000 )  . toString (  )%NWL%if ( !oa . oauth_nonce ) oa . oauth_nonce = uuid (  )  . replace (  /  -  / g ,  '  '  )%NWL%oa . oauth_signature_method =  ' HMAC - SHA1 '%NWL%var consumer_secret = oa . oauth_consumer_secret%NWL%delete oa . oauth_consumer_secret%NWL%var token_secret = oa . oauth_token_secret%NWL%8
deopt . size / max_deopt_size * kMaxDeoptLength )  ;%NWL%}%NWL%if ( gettime . length > 1 )  {%NWL%var start = gettime [ 0 ]  ; %NWL%var end = gettime . pop (  )  ; %NWL%DrawBarBase (  " #0000BB "  , start , end , kGetTimeHeight , 0 , 0 . 2 )  ;%NWL%}%NWL%var ytics =  [  ]  ; %NWL%for ( name in TimerEvents )  {%NWL%var index = TimerEvents [ name ]  . index ; %NWL%var label = TimerEvents [ name ]  . label ; %NWL%9
return tgt ;%NWL%}  ,%NWL%selectFirstNode : function (  )  {%NWL%var first = this . containerNode . firstChild ; %NWL%while ( first && first . style . display =  =  " none "  )  {%NWL%first = first . nextSibling ;%NWL%}%NWL%this . _setSelectedAttr ( first )  ;%NWL%}  ,%NWL%selectLastNode : function (  )  {%NWL%var last = this . containerNode . lastChild ; %NWL%3
packages . concat (%NWL%[%NWL%{ kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }%NWL%]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%var externals = taffy ( members . externals )  ; %NWL%6
var debug = require (  ' debug '  )  (  ' send '  )%NWL%var deprecate = require (  ' depd '  )  (  ' send '  )%NWL%var escapeHtml = require (  ' escape - html '  )%NWL%, parseRange = require (  ' range - parser '  )%NWL%, Stream = require (  ' stream '  )%NWL%, mime = require (  ' mime '  )%NWL%, fresh = require (  ' fresh '  )%NWL%, path = require (  ' path '  )%NWL%, http = require (  ' http '  )%NWL%, onFinished = require (  ' finished '  )%NWL%, fs = require (  ' fs '  )%NWL%5
var config = require (  '  .  / gulp / config '  )  ; %NWL%var clean = require (  '  .  / gulp / clean '  )  ; %NWL%var downloadLocales = require (  '  .  / gulp / download - locales '  )  ; %NWL%var locale = require (  '  .  / gulp / locale '  )  ; %NWL%var template = require (  '  .  / gulp / template '  )  ; %NWL%var browserify = require (  '  .  / gulp / browserify '  )  ; %NWL%var less = require (  '  .  / gulp / less '  )  ; %NWL%var cache = require (  '  .  / gulp / cache '  )  ; %NWL%var publish = require (  '  .  / gulp / publish '  )  ; %NWL%var svgmin = require (  '  .  / gulp / svgmin '  )  ; %NWL%var jsbeautify = require (  '  .  / gulp / jsbeautify '  )  ; %NWL%0
return adapter . byId ( data . id )  . then ( throwIfModel )  . then ( function (  )  {%NWL%return adapter . create ( method , data )  ;%NWL%}  )  ;%NWL%} else {%NWL%return adapter . create ( method , data )  ;%NWL%}%NWL%}  ; %NWL%RequestHandler . prototype . read = function read ( request )  {%NWL%var adapter = this . adapter ; %NWL%var query = this . query ( request )  ; %NWL%var mode = this . mode ( request )  ; %NWL%9
'  <  / ul >  '  +%NWL%'  < div class =  " btn - group "  >  '  +%NWL%'   < button class =  " btn "  > Actions <  / button >  '  +%NWL%'   < button class =  " btn dropdown - toggle " data - toggle =  " dropdown "  >  < span class =  " caret "  >  <  / span >  <  / button >  '  +%NWL%'   < ul class =  " dropdown - menu "  >  '  +%NWL%'    < li >  < a href =  " # "  > Action 1 <  / a >  <  / li >  '  +%NWL%'   <  / ul >  '  +%NWL%'  <  / div >  '%NWL%var dropdowns = $ ( dropdownHTML )  . appendTo (  ' #qunit - fixture '  )  . find (  '  [ data - toggle =  " dropdown "  ]  '  )%NWL%var first = dropdowns . first (  )%NWL%var last = dropdowns . last (  )%NWL%9
var Converter = require (  " montage / core / converter / converter "  )  . Converter ; %NWL%var UpperCaseConverter = require (  " montage / core / converter / upper - case - converter "  )  . UpperCaseConverter ; %NWL%var LowerCaseConverter = require (  " montage / core / converter / lower - case - converter "  )  . LowerCaseConverter ; %NWL%var InvertConverter = require (  " montage / core / converter / invert - converter "  )  . InvertConverter ; %NWL%var TrimConverter = require (  " montage / core / converter / trim - converter "  )  . TrimConverter ; %NWL%var NumberConverter = require (  " montage / core / converter / number - converter "  )  . NumberConverter ; %NWL%var BytesConverter = require (  " montage / core / converter / bytes - converter "  )  . BytesConverter ; %NWL%var DateConverter = require (  " montage / core / converter / date - converter "  )  . DateConverter ; %NWL%var CurrencyConverter = require (  " montage / core / converter / currency - converter "  )  . CurrencyConverter ; %NWL%var Blueprint = require (  " montage / core / meta / blueprint "  )  . Blueprint ; %NWL%var Binder = require (  " montage / core / meta / blueprint "  )  . Binder ; %NWL%9
}  ; %NWL%exports . destroy = function ( req , res )  {%NWL%User . findByIdAndRemove ( req . params . id , function ( err , user )  {%NWL%if ( err ) return res . send ( 500 , err )  ; %NWL%return res . send ( 204 )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . changePassword = function ( req , res , next )  {%NWL%var userId = req . user . _id ; %NWL%var oldPass = String ( req . body . oldPassword )  ; %NWL%var newPass = String ( req . body . newPassword )  ; %NWL%9
}%NWL%if ( opts . to ! =  = undefined && typeof opts . to =  =  =  ' number ' ||%NWL%typeof opts . to =  =  =  ' string ' && opts . to . indexOf (  '  :  '  )  =  =  =  - 1 )  {%NWL%opts . to = parseFloat ( opts . to )  * 1000 ;%NWL%}%NWL%var ffmpegArgs = computeFFmpegArgs ( opts )  ; %NWL%var convertArgs = computeConvertArgs ( opts )  ; %NWL%var gifsicleArgs = computeGifsicleArgs ( opts )  ; %NWL%var ffmpeg = spawn (  ' ffmpeg '  , ffmpegArgs )  ; %NWL%var convert = spawn (  ' convert '  , convertArgs )  ; %NWL%var gifsicle = spawn (  ' gifsicle '  , gifsicleArgs )  ; %NWL%8
if ( effect )  {%NWL%event . element = event . element || ' body '  ; %NWL%effect . stop ( event , settings . effectOptions , settings . callback )  ;%NWL%}%NWL%return this ;%NWL%}  ; %NWL%this . twinkleAtElement = function ( htmlElement , options )  {%NWL%var settings = $ . extend (  {  }  , defaults , options )  ; %NWL%var $htmlElement = $ ( htmlElement )  ; %NWL%var offset = $htmlElement . offset (  )  ; %NWL%var position = $htmlElement . position (  )  ; %NWL%9
} else {%NWL%getSelectedInstance = function (  )  {%NWL%return $0 ;%NWL%}  ;%NWL%}%NWL%DOMHost . inspectSelectedNode = function (  )  {%NWL%inspectedNodeOrInstance = getSelectedInstance (  )  ;%NWL%}  ; %NWL%DOMHost . highlightNode = function ( id , config )  {%NWL%var descriptor = descriptorCache [ id ]  ; %NWL%var instance = instanceCache [ id ]  ; %NWL%9
this . assertTrue ( this . map . functionAlone =  = 1 )  ; %NWL%var mydiv5 = aria . utils . Dom . getElementById (  ' mydiv5 '  )  ; %NWL%this . synEvent . click ( mydiv5 ,  {%NWL%fn : this . __afterJsonFnAndScope ,%NWL%scope : this%NWL%}  )  ;%NWL%}  ,%NWL%__afterJsonFnAndScope : function (  )  {%NWL%this . assertTrue ( this . map . jsonFnAndScope )  ; %NWL%this . assertTrue ( this . map . scope . scopeIndex )  ; %NWL%var mydiv6 = aria . utils . Dom . getElementById (  ' mydiv6 '  )  ; %NWL%1
var MultiSelect = require (  " ace / multi_select "  )  . MultiSelect ; %NWL%var whitespace = require (  " ace / ext / whitespace "  )  ; %NWL%var doclist = require (  "  .  / doclist "  )  ; %NWL%window . modelist = require (  " ace / ext / modelist "  )  ; %NWL%var layout = require (  "  .  / layout "  )  ; %NWL%var TokenTooltip = require (  "  .  / token_tooltip "  )  . TokenTooltip ; %NWL%var util = require (  "  .  / util "  )  ; %NWL%var saveOption = util . saveOption ; %NWL%var fillDropdown = util . fillDropdown ; %NWL%var bindCheckbox = util . bindCheckbox ; %NWL%var bindDropdown = util . bindDropdown ; %NWL%7
}  )  )  ; %NWL%flow . label ( lEnd )  ; %NWL%this . left = left ; %NWL%this . right = right ; %NWL%return this ;%NWL%}%NWL%schemata [ nt [  ' CONDITIONAL '  ]  ]  = function (  )  {%NWL%var condition = pep ( this . condition )  ; %NWL%var lElse = makeT (  )  ; %NWL%flow . pushStatement ( BN ( condition , lElse )  )  ; %NWL%var thenPart = pep ( this . thenPart )  ; %NWL%7
A : function ( d , l )  { return l . A [ d . getDay (  )  ]  ;  }  ,%NWL%b : function ( d , l )  { return l . b [ d . getMonth (  )  ]  ;  }  ,%NWL%B : function ( d , l )  { return l . B [ d . getMonth (  )  ]  ;  }  ,%NWL%C : function ( d )  { return xPad ( parseInt ( d . getFullYear (  )  / 100 , 10 )  , 0 )  ;  }  ,%NWL%d :  [  " getDate "  ,  " 0 "  ]  ,%NWL%e :  [  " getDate "  ,  "  "  ]  ,%NWL%g : function ( d )  { return xPad ( parseInt ( Dt . formats . G ( d ) %100 , 10 )  , 0 )  ;  }  ,%NWL%G : function ( d )  {%NWL%var y = d . getFullYear (  )  ; %NWL%var V = parseInt ( Dt . formats . V ( d )  , 10 )  ; %NWL%var W = parseInt ( Dt . formats . W ( d )  , 10 )  ; %NWL%9
defaultable ( module ,%NWL%{  ' visibility_timeout '  : 30%NWL%,  ' browser_attachments '  : false%NWL%,  ' allow_foreign_docs '  : false%NWL%}  , function ( module , exports , DEFS , require )  {%NWL%var lib = require (  '  .  / lib '  )%NWL%, txn = require (  ' txn '  )%NWL%, util = require (  ' util '  )%NWL%, debug = require (  ' debug '  )%NWL%, couch = require (  '  .  / couch '  )%NWL%, assert = require (  ' assert '  )%NWL%6
} else if ( mediaElement . getAttribute (  ' src '  ) ! =  ' undefined ' && mediaElement . getAttribute (  ' src '  ) ! = null )  {%NWL%var src = mediaElement . getAttribute (  ' src '  )  ; %NWL%var type = mediaElement . getAttribute (  ' type '  )  ; %NWL%testMedia ( type , src )  ; %NWL%downloadUrl = src ;%NWL%} else {%NWL%for ( var i = 0 ; i < mediaElement . childNodes . length ; i +  +  )  {%NWL%var el = mediaElement . childNodes [ i ]  ; %NWL%if ( el . nodeType =  = 1 && el . tagName . toLowerCase (  )  =  =  ' source '  )  {%NWL%var type = el . getAttribute (  ' type '  )  ; %NWL%var src = el . getAttribute (  ' src '  )  ; %NWL%9
return false%NWL%}  ,%NWL%toggleGravity : function ( e )  {%NWL%var oldGravity = sys . parameters (  )  . gravity%NWL%sys . parameters (  { gravity : !oldGravity }  )%NWL%that . update (  )%NWL%}  ,%NWL%beginFrobbing : function ( e )  {%NWL%var frob = $ ( e . target )%NWL%var param = frob . data (  ' param '  )%NWL%var val = frob . data (  ' val '  )%NWL%9
if ( this . eventQueue . cmd )  {%NWL%this . eventQueue = new Array ( this . eventQueue )  ;%NWL%}%NWL%var self = this ; %NWL%if ( this . eventQueue . length && ( this . eventQueue [ 0 ]  . cmd =  =  " ls "%NWL%|| this . eventQueue [ 0 ]  . cmd =  =  " get "%NWL%|| this . eventQueue [ 0 ]  . cmd =  =  " reget "%NWL%|| this . eventQueue [ 0 ]  . cmd =  =  " put "%NWL%|| this . eventQueue [ 0 ]  . cmd =  =  " reput "  )  )  {%NWL%var cmd   = this . eventQueue [ 0 ]  . cmd ; %NWL%var parameter = this . eventQueue [ 0 ]  . parameter ; %NWL%9
region . show ( view )  ; %NWL%render (  )  . then ( function (  )  {%NWL%var spec = view . render (  )  ; %NWL%expect ( spec . target . target . target )  . toBe ( subview1 . getFamousId (  )  )  ; %NWL%context . done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' builds correct spec based on view with multiple children '  , function ( done )  {%NWL%var context = new Setup ( done )  ; %NWL%var region = context . region ; %NWL%var root = context . root ; %NWL%9
' use strict '  ; %NWL%var Calc = require (  ' calc '  )  ; %NWL%var DateSpan = require (  ' templates / date_span '  )  ; %NWL%var create = require (  ' template '  )  . create ; %NWL%var dateFormat = require (  ' date_format '  )  ; %NWL%var l10n = navigator . mozL10n ; %NWL%module . exports = create (  {%NWL%durationTime : function (  )  {%NWL%var format =  '  '  ; %NWL%var startDate = this . arg (  ' startDate '  )  ; %NWL%var endDate = this . arg (  ' endDate '  )  ; %NWL%9
expect ( URI . deleteHeader (  ' name3 '  )  )  . toBeUndefined (  )  ; %NWL%expect ( URI . headers )  . toEqual (  { Name1 :  [ value1 ]  , Name2 :  [ value2 ]  }  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  "  . clearHeaders "  , function (  )  {%NWL%it (  " should remove all the headers from the headers variable "  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%var name1 =  ' name1 '  ; %NWL%var value1 =  ' value1 '  ; %NWL%var name2 =  ' name2 '  ; %NWL%var value2 =  ' value2 '  ; %NWL%7
}%NWL%}%NWL%}%NWL%}  )  . run (  )  ;%NWL%}  ; %NWL%var pagerduty_add_notes = function ( data , incident_id )  {%NWL%Fiber ( function (  )  {%NWL%data . notes . forEach ( function ( fetchednote )  {%NWL%incident = Incidents . findOne (  { _id : incident_id }  )  ; %NWL%if ( incident . pending_notes =  =  = undefined || _ . find ( _ . pluck ( incident . pending_notes ,  ' id '  )  , function ( id )  { return id =  = fetchednote . id ;  }  ) ! = fetchednote . id )  {%NWL%if ( incident . sent_notes =  =  = undefined || _ . find ( _ . pluck ( incident . sent_notes ,  ' id '  )  , function ( id )  { return id =  = fetchednote . id ;  }  ) ! = fetchednote . id )  {%NWL%9
var Mode = function (  )  {%NWL%this . HighlightRules = LuceneHighlightRules ;%NWL%}  ; %NWL%oop . inherits ( Mode , TextMode )  ;%NWL%( function (  )  {%NWL%this . $id =  " ace / mode / lucene "  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; ace . define (  ' ace / mode / lucene_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
container . css (  { top : y_ , left : x_ , opacity : Math . max ( opacity , 0 . 7 )  }  )  ; %NWL%drag = Events . setTimeout ( dragging , 15 )  ;%NWL%}%NWL%}  )  ; %NWL%return this ;%NWL%}  ; %NWL%UIComponent . prototype . parseHTML = function parseHTML (  )%NWL%{%NWL%var $node   = jQuery ( this )  ; %NWL%var background = $node . data (  ' background '  )  ; %NWL%var preload  = $node . data (  ' preload '  )  ; %NWL%9
}  ,%NWL%inView : function ( event )  {%NWL%var targetView = event . targetView ,%NWL%view = this . get (  ' view '  )  ; %NWL%while ( targetView && targetView ! =  = view )  {%NWL%targetView = targetView . get (  ' parentView '  )  ;%NWL%}%NWL%return !!targetView ;%NWL%}  ,%NWL%handleMouse : function ( event )  {%NWL%var type = event . type ,%NWL%2
else {%NWL%items = window . arguments [ 0 ]  ; %NWL%params = window . arguments [ 1 ]  ;%NWL%}%NWL%var addons = document . getElementById (  " addonsChildren "  )  ; %NWL%if ( items . length > 0 )%NWL%document . getElementById (  " addonsTree "  )  . hidden = false ; %NWL%for ( var i = 0 ; i < items . length ;  +  + i )  {%NWL%var treeitem = document . createElementNS ( kXULNS ,  " treeitem "  )  ; %NWL%var treerow  = document . createElementNS ( kXULNS ,  " treerow "  )  ; %NWL%var treecell = document . createElementNS ( kXULNS ,  " treecell "  )  ; %NWL%8
var mid = elem . getAttribute (  " marker - mid "  )  ; %NWL%var end = elem . getAttribute (  " marker - end "  )  ; %NWL%cur_line = elem ; %NWL%$ ( elem )%NWL%. data (  " start_off "  , !!start )%NWL%. data (  " end_off "  , !!end )  ; %NWL%if ( elem . tagName =  =  " line " && mid )  {%NWL%var x1 = elem . getAttribute (  ' x1 '  )  - 0 ; %NWL%var x2 = elem . getAttribute (  ' x2 '  )  - 0 ; %NWL%var y1 = elem . getAttribute (  ' y1 '  )  - 0 ; %NWL%var y2 = elem . getAttribute (  ' y2 '  )  - 0 ; %NWL%7
var validToken = validTokens [ i ]  ,%NWL%tokens = tokenizer . getLineTokens ( validToken ,  " start "  )  . tokens ; %NWL%assert . equal ( tokens [ 0 ]  . value , validToken ,%NWL%'  "  '  + validToken +  '  " should be one token '  )  ; %NWL%assert . equal ( tokens [ 0 ]  . type , tokenType ,%NWL%'  "  '  + validToken +  '  " should be a "  '  + tokenType +  '  " token '  )  ;%NWL%}%NWL%}%NWL%function assertInvalidTokens ( tokenizer , tokenType , invalidTokens )  {%NWL%for ( var i = 0 , length = invalidTokens . length ; i < length ; i +  +  )  {%NWL%var invalidToken = invalidTokens [ i ]  ,%NWL%0
res . headers . Location = robohydraAdminBaseUrlPath ; %NWL%res . statusCode = 302 ; %NWL%res . end (  )  ;%NWL%}%NWL%}  )  ,%NWL%new RoboHydraHead (  {%NWL%name :  ' toggleHeadAttachment '  ,%NWL%path : robohydraAdminBaseUrlPath +  '  / head / toggle - attachment '  ,%NWL%handler : function ( req , res )  {%NWL%var pluginName = req . bodyParams . pluginName ; %NWL%var headName  = req . bodyParams . headName ; %NWL%9
}%NWL%return year ;%NWL%}%NWL%function getWeek1 ( year )  {  /  / returns Date of first week of year , in UTC%NWL%var d = new Date ( UTC ( year , 0 , 4 )  )  ; %NWL%d . setUTCDate ( d . getUTCDate (  )  -  ( d . getUTCDay (  )  + 6 ) % 7 )  ;  /  / make it Monday of the week%NWL%return d ;%NWL%}%NWL%function _setWeek ( xdate , n , year , useUTC )  {%NWL%var getField = curry ( _getField , xdate , useUTC )  ; %NWL%var setField = curry ( _setField , xdate , useUTC )  ; %NWL%9
}  )  ; %NWL%angular . module (  ' clientApp '  )%NWL%. controller (  ' signupCtrl '  ,%NWL%function ( $scope , $location , $http )  {%NWL%$scope . signin = function (  )  {%NWL%$location . path (  '  /  '  )%NWL%}  ; %NWL%$scope . register = function (  )  {%NWL%$ (  " #validatemessage "  )  . html (  "  "  )  ; %NWL%var name = $ (  " #name "  )  . val (  )  ; %NWL%var username = $ (  " #username "  )  . val (  )  ; %NWL%9
doLayout : function (  )%NWL%{%NWL%var layouts = new pc . HashList (  )  ;  /  / a list for each of the anchors%NWL%var next = this . entities . first ; %NWL%while ( next )%NWL%{%NWL%var entity = next . obj ; %NWL%var spatial = entity . getComponent (  ' spatial '  )  ; %NWL%if ( !spatial )%NWL%entity . addComponent ( pc . components . Spatial (  {  }  )  )  ; %NWL%var layout = entity . getComponent (  ' layout '  )  ; %NWL%7
clearCompleted : function (  )  {%NWL%var todoList  = this . get (  ' todoList '  )  ; %NWL%var completed = todoList . completed (  )  ; %NWL%todoList . remove ( completed )  ; %NWL%completed . each ( function ( todo )  {%NWL%todo . clear (  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%completeAll : function (  )  {%NWL%var todoList = this . get (  ' todoList '  )  ; %NWL%var allCheckbox = this . get (  ' allCheckbox '  )  ; %NWL%1
}  )  ; %NWL%var DisplayModel = GeomVertexMV . DisplayModel . extend (  {%NWL%initialize : function ( options )  {%NWL%this . SceneView = DisplaySceneView ; %NWL%GeomVertexMV . DisplayModel . prototype . initialize . call ( this , options )  ;%NWL%}  ,%NWL%destroy : function (  )  {%NWL%GeomVertexMV . DisplayModel . prototype . destroy . call ( this )  ;%NWL%}  ,%NWL%}  )  ; %NWL%var DisplaySceneView = GeomVertexMV . DisplaySceneView . extend (  {%NWL%1
}%NWL%$this . wrapInner (  "  < div class =  ' mCustomScrollBox "  +  " mCS -  "  + options . theme +  "  ' id =  ' mCSB_ "  + $ ( document )  . data (  " mCustomScrollbar - index "  )  +  "  ' style =  ' position : relative ; height : 100% ; overflow : hidden ; max - width : 100% ;  '  /  >  "  )  . addClass (  " mCustomScrollbar _mCS_ "  + $ ( document )  . data (  " mCustomScrollbar - index "  )  )  ; %NWL%var mCustomScrollBox = $this . children (  "  . mCustomScrollBox "  )  ; %NWL%if ( options . horizontalScroll )  {%NWL%mCustomScrollBox . addClass (  " mCSB_horizontal "  )  . wrapInner (  "  < div class =  ' mCSB_h_wrapper ' style =  ' position : relative ; left : 0 ; width : 999999px ;  '  /  >  "  )  ; %NWL%var mCSB_h_wrapper = mCustomScrollBox . children (  "  . mCSB_h_wrapper "  )  ; %NWL%mCSB_h_wrapper . wrapInner (  "  < div class =  ' mCSB_container ' style =  ' position : absolute ; left : 0 ;  '  /  >  "  )  . children (  "  . mCSB_container "  )  . css (  {  " width "  : mCSB_h_wrapper . children (  )  . outerWidth (  )  ,  " position "  :  " relative "  }  )  . unwrap (  )  ;%NWL%} else {%NWL%mCustomScrollBox . wrapInner (  "  < div class =  ' mCSB_container ' style =  ' position : relative ; top : 0 ;  '  /  >  "  )  ;%NWL%}%NWL%var mCSB_container = mCustomScrollBox . children (  "  . mCSB_container "  )  ; %NWL%5
_updateContainerSize : function ( propagate )  {%NWL%var cfg = this . _cfg , domElt = this . getDom (  )  ; %NWL%if ( !domElt )  {%NWL%return ;%NWL%}%NWL%var widthConf = this . _getWidthConf (  )  ; %NWL%var heightConf = this . _getHeightConf (  )  ; %NWL%if ( this . _changedContainerSize || this . _sizeConstraints )  {  /  / if we are bound to min and max size%NWL%if ( this . _changedContainerSize )  {%NWL%var width = cfg . widthMaximized || cfg . width ; %NWL%var height = cfg . heightMaximized || cfg . height ; %NWL%9
setup : expect . html . mocked%NWL%}  ,%NWL%{%NWL%consumes :  [  " c9 "  ,  " vfs "  ]  ,%NWL%provides :  [  ]  ,%NWL%setup : main%NWL%}%NWL%]  , architect )  ; %NWL%function main ( options , imports , register )  {%NWL%var c9 = imports . c9 ; %NWL%var vfs = imports . vfs ; %NWL%9
if ( taskJson ! =  = undefined )  {%NWL%var task = angular . fromJson ( taskJson )  ; %NWL%objectModel . cleanTask ( task )  ; %NWL%var model = $scope . live . task ; %NWL%angular . extend ( model , task )  ;%NWL%}%NWL%}  , debounceValue )  ; %NWL%$scope . $watch (  ' live . taskJson '  , listenTaskJson )  ; %NWL%var listenRowJson = debounce ( function ( rowJson )  {%NWL%if ( rowJson ! =  = undefined )  {%NWL%var row = angular . fromJson ( rowJson )  ; %NWL%1
var Dog = new Class (  {%NWL%Extends : Animal%NWL%}  )  ; %NWL%var rover = new Dog (  ' rover '  )  ; %NWL%expect ( rover . say (  )  )  . toEqual (  ' animal : say : rover '  )  ; %NWL%Animal . implement (  {%NWL%say : function (  )  {%NWL%return ' NEW : animal : say :  '  + this . name ;%NWL%}%NWL%}  )  ; %NWL%var spot = new Dog (  ' spot '  )  ; %NWL%3
}%NWL%}  ,%NWL%}%NWL%}%NWL%}  )%NWL%. addBatch (  {%NWL%' Three hooks are started '  :  {%NWL%topic : function (  )  {%NWL%var hook1 = new Hook (  { name :  ' hook1 '  , debug : true , m : true }  )  ; %NWL%var hook2 = new Hook (  { name :  ' hook2 '  , debug : true , m : true }  )  ; %NWL%var hook3 = new Hook (  { name :  ' hook3 '  , debug : true , m : true }  )  ; %NWL%8
}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / sh_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
this . hideMask (  )  ; %NWL%if ( success )  {%NWL%var decoded = Ext . decode ( response . responseText )  ; %NWL%var failed = decoded . failed ; %NWL%if ( failed . length > 0 )  {%NWL%for ( var i = 0 , ilen = failed . length ; i < ilen ; i +  +  )  {%NWL%this . store . remove ( this . store . getById ( failed [ i ]  )  )  ;%NWL%}%NWL%Ext . MessageBox . alert (  ' Warning '  ,  ' Not all members were created! '  )  ;%NWL%}%NWL%var created = decoded . created ; %NWL%3
if ( nowait ) return ; %NWL%if ( _config . expected && _config . expected ! = _config . Test . length )  {%NWL%_config . Test . push (  [ false ,  " Expected "  + _config . expected +  " assertions , but "  + _config . Test . length +  " were run "  ]  )  ;%NWL%}%NWL%_config . expected = null ; %NWL%var good = 0 , bad = 0 ; %NWL%var ol = document . createElement (  " ol "  )  ; %NWL%ol . style . display =  " none "  ; %NWL%var li =  "  "  , state =  " pass "  ; %NWL%for ( var i = 0 ; i < _config . Test . length ; i +  +  )  {%NWL%var li = document . createElement (  " li "  )  ; %NWL%6
, join = require (  ' path '  )  . join%NWL%, sep = require (  ' path '  )  . sep%NWL%, debug = require (  ' debug '  )  (  ' stylus : middleware '  )  ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var src = options . src ; %NWL%9
}%NWL%if ( members . globals . length )  { generate (  ' Global '  ,  [  { kind :  ' globalobj '  }  ]  , globalUrl )  ;  }%NWL%var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%9
positioning :  ' absolute '  ,%NWL%layout : function (  )  {%NWL%var itemHeight = this . get (  ' itemHeight '  )  ,%NWL%index = this . get (  ' index '  )  ; %NWL%return {%NWL%top : itemHeight * index ,%NWL%height : index < 0 ? 0 : itemHeight%NWL%}  ;%NWL%}  . property (  ' itemHeight '  ,  ' index '  )  ,%NWL%didEnterDocument : function (  )  {%NWL%var keys = this . get (  ' keys '  )  ,%NWL%2
}%NWL%}%NWL%]%NWL%}  )%NWL%define ( function ( require )  {%NWL%var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var data = seajs . data%NWL%test . assert ( data . map . length =  =  = 6 , data . map . length )%NWL%var a = require (  '  .  / a '  )%NWL%var b = require (  '  .  / b '  )%NWL%var c = require (  '  .  / c '  )%NWL%8
installOnesInProgress [ target . name ]  . splice ( indexOfIOIP , 1 )%NWL%if ( er ) return cb ( er )%NWL%d . push ( resultList ( target , where , parent && parent . _id )  )%NWL%cb ( er , d )%NWL%}%NWL%)%NWL%}%NWL%function write ( target , targetFolder , context , cb_ )  {%NWL%var up = npm . config . get (  " unsafe - perm "  )%NWL%, user = up ? null : npm . config . get (  " user "  )%NWL%, group = up ? null : npm . config . get (  " group "  )%NWL%9
var CSSPropertyOperations = require (  ' CSSPropertyOperations '  )  ; %NWL%var DOMProperty = require (  ' DOMProperty '  )  ; %NWL%var DOMPropertyOperations = require (  ' DOMPropertyOperations '  )  ; %NWL%var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactComponentBrowserEnvironment =%NWL%require (  ' ReactComponentBrowserEnvironment '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var assign = require (  ' Object . assign '  )  ; %NWL%var escapeTextContentForBrowser = require (  ' escapeTextContentForBrowser '  )  ; %NWL%0
var label = this . label_ ; %NWL%layout . appendChild ( label , listHelperGroup )  ; %NWL%label . setVisibled ( false )  ; %NWL%this . active_ = false ;%NWL%}%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . createDrawLayer_ = function (  )  {%NWL%return new thin . core . DrawActionLayer ( this . layout_ )  ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . createSelectorLayer_ = function (  )  {%NWL%var layout = this . layout_ ; %NWL%0
tx . oncomplete = function ( e )  {%NWL%db . close (  )  ; %NWL%start (  )  ;%NWL%}  ;%NWL%}%NWL%function testAddDataError ( db )  {%NWL%expect ( 7 )  ; %NWL%var dataErrors =  [  " DataError "  ,  " NS_ERROR_DOM_INDEXEDDB_DATA_ERR "  ,  " DATA_ERR "  ]  ; %NWL%var tx = db . transaction (  [ env . people , env . cars , env . specs ]  , IDBTransaction . READ_WRITE )  ; %NWL%var people = tx . objectStore ( env . people )  ; %NWL%var cars = tx . objectStore ( env . cars )  ; %NWL%9
$ (  ' input : radio [ name =  " cssType "  ]  [ value =  "  '  + App . settings . attributes . cssType +  '  "  ]  '  )  . attr (  ' checked '  , true )  ;%NWL%}  , 111 )%NWL%}  ,%NWL%updateSettings : function (  )  {%NWL%var $inputs = this . $el . find (  ' input , select , textarea , radio '  )  ; %NWL%var o =  {  }  ; %NWL%_ . each ( $inputs , function ( input )  {%NWL%var $input = $ ( input )  ; %NWL%var name = $input . attr (  ' name '  )  ; %NWL%var value = $input . val (  ) || '  '  ; %NWL%var type = $input . attr (  ' type '  )  ; %NWL%8
}  ; %NWL%var testRepoToken = function ( sut , done )  {%NWL%process . env . COVERALLS_REPO_TOKEN =  " REPO_TOKEN "  ; %NWL%sut ( function ( err , options )  {%NWL%options . repo_token . should . equal (  " REPO_TOKEN "  )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var testRepoTokenDetection = function ( sut , done )  {%NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%9
}  ,%NWL%addCallbacks : function ( cb , eb )  {%NWL%this . chain . push (  [ cb , eb ]  )  ; %NWL%if ( this . fired >  = 0 )  {%NWL%this . _fire (  )  ;%NWL%}%NWL%return this ;%NWL%}  ,%NWL%_fire : function (  )  {%NWL%var chain = this . chain ; %NWL%var fired = this . fired ; %NWL%9
}  )  ; %NWL%it (  ' doesn\ ' t hold on to removed keys '  , function (  )  {%NWL%var key  =  ' key '  ; %NWL%var value =  ' value '  ; %NWL%var id  = settings . set ( key , value )  ; %NWL%settings . remove ( key )  ; %NWL%var result = settings . get ( id )  ; %NWL%expect ( result )  . toBe ( null )  ;%NWL%}  )  ; %NWL%it (  ' round trips values through set / get '  , function (  )  {%NWL%var key  =  ' key '  ; %NWL%3
}  ; %NWL%URL . isRelative = function ( url )  {%NWL%var url = typeof url =  =  =  ' string ' ? URL . parseUrl ( url )  : url ; %NWL%return url . protocol =  = null || url . protocol =  =  '  '  ;%NWL%}  ; %NWL%URL . isAbsolute = function ( url )  {%NWL%return !URL . isRelative ( url )  ;%NWL%}%NWL%URL . absoluteUrl = function ( url , location )  {%NWL%var url = typeof url =  =  =  ' string ' ? URL . parseUrl ( url )  : url ; %NWL%var location = typeof location =  =  =  ' string ' ? URL . parseUrl ( location )  : location ; %NWL%2
}%NWL%}  )  ;%NWL%}%NWL%oop . inherits ( CssBehaviour , CstyleBehaviour )  ; %NWL%exports . CssBehaviour = CssBehaviour ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
var ignoredWithinEndingTagStartFinder = function ignoredWithinEndingTagStartFinder ( character )  {%NWL%if ( character =  =  = startingTagFirstChar )  {%NWL%setParserFunc ( ignoredWithinEndingTagSlashFinder )  ;%NWL%}%NWL%}  ; %NWL%var ignoredWithinEndingTagSlashFinder = function ignoredWithinEndingTagSlashFinder ( character )  {%NWL%if ( character =  =  = closingTagSecondChar )  {%NWL%setParserFunc ( ignoredWithinEndingTagNameFinder )  ;%NWL%}%NWL%}  ; %NWL%var ignoredWithinEndingTagNameFinder = function ignoredWithinEndingTagNameFinder ( character )  {%NWL%0
}%NWL%function createJSSlickspeedRows (  )  {%NWL%var container = document . getElementById (  " tbody "  )  ; %NWL%for ( var i = 0 , ln = selectors . length ; i < ln ; i +  +  )  {%NWL%var tr = document . createElement (  " tr "  )  ; %NWL%var th = document . createElement (  " th "  )  ; %NWL%th . className =  " selector "  ; %NWL%th . innerHTML = selectors [ i ]  ; %NWL%tr . appendChild ( th )  ; %NWL%for ( var framework in frameworks )  {%NWL%var td = document . createElement (  " td "  )  ; %NWL%4
NODATA :  ' NoData '  ,%NWL%TOFETCH :  ' ToFetch '  ,%NWL%FETCHING :  ' Fetching '  ,%NWL%FETCHED :  ' Fetched '%NWL%}  ; %NWL%var ResultsDataStatus = explorer . models . ResultsDataStatus ; %NWL%explorer . models . DatasourceState = function (  )  {%NWL%this . status = ResultsDataStatus . TOFETCH ; %NWL%this . errors =  [  ]  ;%NWL%}  ; %NWL%var DatasourceState = explorer . models . DatasourceState ; %NWL%5
return cb ( new Error (  " Could not find suitable wd "  )  )%NWL%}%NWL%return validWd ( p , cb )%NWL%}%NWL%return cb ( null , d )%NWL%}  )%NWL%}%NWL%function runPackageLifecycle ( pkg , env , wd , unsafe , cb )  {%NWL%var stage = env . npm_lifecycle_event%NWL%, user = unsafe ? null : npm . config . get (  " user "  )%NWL%, group = unsafe ? null : npm . config . get (  " group "  )%NWL%9
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
}  )  ; %NWL%var LogicOR = declare (  " dojox . grid . enhanced . plugins . filter . LogicOR "  , exprs . _BiOpExpr ,  {%NWL%_name :  " or "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = left_operand . applyRow ( datarow , getter )  . getValue (  ) ||%NWL%right_operand . applyRow ( datarow , getter )  . getValue (  )  ; %NWL%return new exprs . BooleanExpr ( res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LogicXOR = declare (  " dojox . grid . enhanced . plugins . filter . LogicXOR "  , exprs . _BiOpExpr ,  {%NWL%1
it (  ' applies multiple rules in order '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " changeNode1 "  ,  " type "  :  " change "  ,  " wires "  :  [  [  " helperNode1 "  ]  ]  ,%NWL%rules :  [%NWL%{ t :  " set "  , p :  " payload "  , to :  " a this ( hi )  "  }  ,%NWL%{ t :  " change "  , p :  " payload "  , from :  " this "  , to :  " that "  }  ,%NWL%{ t :  " change "  , p :  " payload "  , from :  " \\ (  .  * \\ )  "  , to :  "  [ new ]  "  , re : true }  ,%NWL%]  }  ,%NWL%{ id :  " helperNode1 "  , type :  " helper "  , wires :  [  ]  }  ]  ; %NWL%helper . load ( changeNode , flow , function (  )  {%NWL%var changeNode1 = helper . getNode (  " changeNode1 "  )  ; %NWL%var helperNode1 = helper . getNode (  " helperNode1 "  )  ; %NWL%9
init : function (  )  {%NWL%var that = this ; %NWL%this . model . on (  ' change '  , function (  )  {%NWL%that . render (  )  ;%NWL%}  )  ;%NWL%}%NWL%}  )  ; %NWL%scoreBoardView . render = function (  )  {%NWL%var c = this . getContainer (  )  ; %NWL%var score = this . model . get (  ' score '  )  ; %NWL%var total = this . model . get (  ' total '  )  ; %NWL%9
e [ k ]  = attrs [ k ]  ;%NWL%}%NWL%return e ;%NWL%}  ; %NWL%var simpleTools = elt (  ' div '  ,  ' simple_tools '  )  ; %NWL%var rev = elt (  ' button '  ,  ' rev '  )  ; %NWL%var showInfo = elt (  ' button '  ,  ' show_info '  )  ; %NWL%var prev = elt (  ' button '  ,  ' prev '  )  ; %NWL%var playPause = elt (  ' button '  ,  ' play_pause '  )  ; %NWL%var next = elt (  ' button '  ,  ' next '  )  ; %NWL%var pin = elt (  ' button '  ,  ' pin '  )  ; %NWL%5
}%NWL%return width ;%NWL%}%NWL%}%NWL%}  ,%NWL%getContentHeight : function ( element )%NWL%{%NWL%var Style = qx . bom . element . Style ; %NWL%var overflowY = qx . bom . element . Style . get ( element ,  " overflowY "  )  ; %NWL%var paddingTop = parseInt ( Style . get ( element ,  " paddingTop "  ) || " 0px "  , 10 )  ; %NWL%var paddingBottom = parseInt ( Style . get ( element ,  " paddingBottom "  ) || " 0px "  , 10 )  ; %NWL%9
var subscriberInsert = require (  '  .  / api / subscribers / insert '  )  ; %NWL%var subscriberConfirm = require (  '  .  / api / subscribers / confirm '  )  ; %NWL%var subscriberRemove = require (  '  .  / api / subscribers / remove '  )  ; %NWL%var apiErrorNotFound = require (  '  .  / api / error / notFound '  )  ; %NWL%var sitemap = require (  '  .  / sitemap / sitemap '  )  ; %NWL%var authOnly = require (  '  .  / account / only '  )  ; %NWL%var authorOnly = require (  '  .  / author / only '  )  ; %NWL%var errors = require (  '  .  .  / lib / errors '  )  ; %NWL%var env = require (  '  .  .  / lib / env '  )  ; %NWL%var redirects = require (  '  .  / redirects '  )  ; %NWL%var getDefaultViewModel = require (  '  .  / getDefaultViewModel '  )  ; %NWL%9
self . offsets . push ( this [ 0 ]  )%NWL%self . targets . push ( this [ 1 ]  )%NWL%}  )%NWL%}%NWL%ScrollSpy . prototype . process = function (  )  {%NWL%var scrollTop  = this . $scrollElement . scrollTop (  )  + this . options . offset%NWL%var scrollHeight = this . getScrollHeight (  )%NWL%var maxScroll  = this . options . offset + scrollHeight - this . $scrollElement . height (  )%NWL%var offsets   = this . offsets%NWL%var targets   = this . targets%NWL%var activeTarget = this . activeTarget%NWL%8
_finish : function ( inRowIndex )  {%NWL%this . inherited ( arguments )  ; %NWL%dojox . grid . util . removeNode ( this . widget . domNode )  ;%NWL%}%NWL%}  )  ; %NWL%dgc . _Widget . markupFactory = function ( node , cell )  {%NWL%dgc . _Base . markupFactory ( node , cell )  ; %NWL%var d = dojo ; %NWL%var widgetProps = d . trim ( d . attr ( node ,  " widgetProps "  ) || "  "  )  ; %NWL%var constraint = d . trim ( d . attr ( node ,  " constraint "  ) || "  "  )  ; %NWL%var widgetClass = d . trim ( d . attr ( node ,  " widgetClass "  ) || "  "  )  ; %NWL%8
}  ,%NWL%" minifiedSkip "  :  {%NWL%default : false%NWL%, describe :  " Skip minify if given file is minified "%NWL%}%NWL%}  ; %NWL%exports . run = function ( options )  {%NWL%var dest = options . dest ; %NWL%var charset = options . charset ; %NWL%var output = options . output ; %NWL%var suffix = options . suffix ; %NWL%7
var stop = require (  '  .  .  / stop - event '  )  ; %NWL%var bind = require (  '  .  .  / bind '  )  ; %NWL%var template = require (  '  .  / signup . ejs '  )  ; %NWL%var buttonTmpl = require (  '  .  .  / html / zocial - button . ejs '  )  ; %NWL%var regex = require (  '  .  .  / regex '  )  ; %NWL%var gravatar = require (  '  .  .  / gravatar '  )  ; %NWL%var PasswordStrength = require (  '  .  .  / password - strength '  )  ; %NWL%var empty = regex . empty ; %NWL%var email_parser = regex . email_parser ; %NWL%var slice = Array . prototype . slice ; %NWL%var username_parser = regex . username_parser ; %NWL%7
var R0_1 = this . _R0_1 ; %NWL%var R1_1 = this . _R1_1 ; %NWL%var R2_1 = this . _R2_1 ; %NWL%var R3_1 = this . _R3_1 ; %NWL%var R0_0 = this . _R0_0 ; %NWL%var R1_0 = this . _R1_0 ; %NWL%var R2_0 = this . _R2_0 ; %NWL%var R3_0 = this . _R3_0 ; %NWL%var R4_0 = this . _R4_0 ; %NWL%var R5_0 = this . _R5_0 ; %NWL%var R6_0 = this . _R6_0 ; %NWL%0
gf . input . MouseData . prototype . resetDeltas = function (  )  {%NWL%this . dx = 0 ; %NWL%this . dy = 0 ; %NWL%this . dz = 0 ; %NWL%this . buttonsDown = 0 ; %NWL%this . buttonsUp = 0 ;%NWL%}  ; %NWL%gf . input . MouseData . prototype . update = function ( e , sensitivity )  {%NWL%var browserEvent = e . getBrowserEvent (  )  ; %NWL%var screenX = e . screenX ; %NWL%var screenY = e . screenY ; %NWL%9
OpenROVController . prototype . requestSettings = function (  )  {%NWL%var command =  ' reportSetting (  )  ;  '  ; %NWL%this . hardware . write ( command )  ; %NWL%command =  ' rmtrmod (  )  ;  '  ; %NWL%this . hardware . write ( command )  ;%NWL%}  ; %NWL%OpenROVController . prototype . updateSetting = function (  )  {%NWL%var command =  ' updateSetting (  '  + CONFIG . preferences . get (  ' smoothingIncriment '  )  +  '  ,  '  + CONFIG . preferences . get (  ' deadzone_neg '  )  +  '  ,  '  + CONFIG . preferences . get (  ' deadzone_pos '  )  +  '  ,  '  + CONFIG . preferences . get (  ' water_type '  )  +  '  ;  '  ; %NWL%this . hardware . write ( command )  ; %NWL%var port = CONFIG . preferences . get (  ' thrust_modifier_port '  )  ; %NWL%var vertical = CONFIG . preferences . get (  ' thrust_modifier_vertical '  )  ; %NWL%9
var when = require (  " when "  )  ; %NWL%var path = require (  " path "  )  ; %NWL%var sinon = require (  " sinon "  )  ; %NWL%var childProcess = require (  " child_process "  )  ; %NWL%var expect = chai . expect ; %NWL%var phridge = require (  "  .  .  / lib / main . js "  )  ; %NWL%var Phantom = require (  "  .  .  / lib / Phantom . js "  )  ; %NWL%var Page = require (  "  .  .  / lib / Page . js "  )  ; %NWL%var instances = require (  "  .  .  / lib / instances . js "  )  ; %NWL%var slow = require (  "  .  / helpers / slow . js "  )  ; %NWL%var testServer = require (  "  .  / helpers / testServer . js "  )  ; %NWL%9
var readStop = incoming . readStop ; %NWL%var isNumber = require (  ' util '  )  . isNumber ; %NWL%var debug = require (  ' util '  )  . debuglog (  ' http '  )  ; %NWL%exports . debug = debug ; %NWL%exports . CRLF =  ' \r\n '  ; %NWL%exports . chunkExpression =  / chunk / i ; %NWL%exports . continueExpression =  / 100 - continue / i ; %NWL%exports . methods = HTTPParser . methods ; %NWL%var kOnHeaders = HTTPParser . kOnHeaders | 0 ; %NWL%var kOnHeadersComplete = HTTPParser . kOnHeadersComplete | 0 ; %NWL%var kOnBody = HTTPParser . kOnBody | 0 ; %NWL%8
this . trades . tradeBuys = this . trades . buys ; %NWL%this . trades . tradeSells = this . trades . sells ; %NWL%var market = this . flux . store (  " MarketStore "  )  . getState (  )  . market ; %NWL%this . filterMarket ( market , this . trades )  ; %NWL%this . loading = false ; %NWL%this . updating = false ; %NWL%this . percent = 100 ; %NWL%this . emit ( constants . CHANGE_EVENT )  ;%NWL%}  ,%NWL%onAddTrade : function ( payload )  {%NWL%var markets = this . flux . store (  " MarketStore "  )  . getState (  )  . markets ; %NWL%2
element . detachEvent (  ' on '  + event , callback )  ;%NWL%}%NWL%}  ;%NWL%( function (  )  {%NWL%var hasCaptionProblem ; %NWL%function detectCaptionProblem (  )  {%NWL%var TABLE = document . createElement (  ' TABLE '  )  ; %NWL%TABLE . style . borderSpacing = 0 ; %NWL%TABLE . style . borderWidth = 0 ; %NWL%TABLE . style . padding = 0 ; %NWL%var TBODY = document . createElement (  ' TBODY '  )  ; %NWL%6
var Closure = require (  '  .  .  / tools / closure '  )  ; %NWL%var helpers = require (  '  .  .  / browser / helpers '  )  ; %NWL%var Meteor  = require (  '  .  .  / meteor '  )  ; %NWL%var tools  = require (  '  .  .  / tools '  )  ; %NWL%var Mocha  = require (  ' mocha '  )  ; %NWL%var Fiber  = require (  ' fibers '  )  ; %NWL%var Future  = require (  ' fibers / future '  )  ; %NWL%var url  = require (  ' url '  )  ; %NWL%var path  = require (  ' path '  )  ; %NWL%var fs   = require (  ' fs '  )  ; %NWL%var logs  = require (  '  .  .  / logs '  )  ; %NWL%3
' use strict '  ; %NWL%var isValidRule = require (  '  .  / is - valid - rule '  )  ; %NWL%module . exports = validateCustomProperties ; %NWL%function validateCustomProperties ( rules , componentName )  {%NWL%rules . forEach ( function ( rule )  {%NWL%if ( !isValidRule ( rule ) || rule . selectors [ 0 ] ! =  =  '  : root '  ) return ; %NWL%rule . declarations . filter ( function ( declaration )  {%NWL%return declaration . type =  =  =  ' declaration '  ;%NWL%}  )  . forEach ( function ( declaration )  {%NWL%var column = declaration . position . start . column ; %NWL%var line = declaration . position . start . line ; %NWL%9
var StoreClass = createStoreClass ( properties )  ; %NWL%var defaultInstance = this . register ( StoreClass )  ; %NWL%return defaultInstance ;%NWL%}%NWL%function createActionCreators ( properties )  {%NWL%var ActionCreatorsClass = createActionCreatorsClass ( properties )  ; %NWL%var defaultInstance = this . register ( ActionCreatorsClass )  ; %NWL%return defaultInstance ;%NWL%}%NWL%function createQueries ( properties )  {%NWL%var QueriesClass = createQueriesClass ( properties )  ; %NWL%0
}%NWL%}  )  ; %NWL%changeNode1 . receive (  { payload :  " This won ' t get through! "  }  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' deletes the value of a multi - level message property '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " changeNode1 "  ,  " type "  :  " change "  ,  " action "  :  " delete "  ,  " property "  :  " foo . bar "  ,  " from "  :  "  "  ,  " to "  :  "  "  ,  " reg "  : false ,  " name "  :  " changeNode "  ,  " wires "  :  [  [  " helperNode1 "  ]  ]  }  ,%NWL%{ id :  " helperNode1 "  , type :  " helper "  , wires :  [  ]  }  ]  ; %NWL%helper . load ( changeNode , flow , function (  )  {%NWL%var changeNode1 = helper . getNode (  " changeNode1 "  )  ; %NWL%var helperNode1 = helper . getNode (  " helperNode1 "  )  ; %NWL%9
math . setAttribute (  ' display '  ,  ' inline '  )  ; %NWL%$ . post ( ajaxEndpoint ,  {  ' tex '  : tex ,  ' display '  :  ' inline '  }  , function ( data )  {%NWL%var first = data . documentElement . firstElementChild ; %NWL%if ( first . localName =  =  ' semantics '  )  {%NWL%math . appendChild ( svgdoc . adoptNode ( first , true )  )  ;%NWL%} else {%NWL%var semantics = document . createElementNS ( NS . MATH ,  ' semantics '  )  ; %NWL%var annotation = document . createElementNS ( NS . MATH ,  ' annotation '  )  ; %NWL%annotation . setAttribute (  ' encoding '  ,  ' application / x - tex '  )  ; %NWL%annotation . textContent = tex ; %NWL%var mrow = document . createElementNS ( NS . MATH ,  ' mrow '  )  ; %NWL%6
}%NWL%if ( c . msgLeft =  = 0 ) c . msgLeft = c . msgLen ;  /  / We still have to receive so much . This is in order for buggy handling of the T3 header by Orban coders%NWL%copyChunk ( chunk . oldChunk , chunk . chunk )  ; %NWL%return cb ( chunk )  ;  /  / Try to keep the stack small%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%RtmpChunkClass . prototype . rtmpReadChunkMessagePCM = function ( chunk , cb )  {%NWL%var me = this ; %NWL%var log = me . log ; %NWL%var Q = me . Q ; %NWL%9
" upper - alpha "  ,  " upper - armenian "  ,  " upper - greek "  ,  " upper - hexadecimal "  ,%NWL%" upper - latin "  ,  " upper - norwegian "  ,  " upper - roman "  ,  " uppercase "  ,  " urdu "  ,  " url "  ,%NWL%" vertical "  ,  " vertical - text "  ,  " visible "  ,  " visibleFill "  ,  " visiblePainted "  ,%NWL%" visibleStroke "  ,  " visual "  ,  " w - resize "  ,  " wait "  ,  " wave "  ,  " wider "  ,%NWL%" window "  ,  " windowframe "  ,  " windowtext "  ,  " x - large "  ,  " x - small "  ,  " xor "  ,%NWL%" xx - large "  ,  " xx - small "%NWL%]  , valueKeywords = keySet ( valueKeywords_ )  ; %NWL%var fontProperties_ =  [%NWL%" font - family "  ,  " src "  ,  " unicode - range "  ,  " font - variant "  ,  " font - feature - settings "  ,%NWL%" font - stretch "  ,  " font - weight "  ,  " font - style "%NWL%]  , fontProperties = keySet ( fontProperties_ )  ; %NWL%6
}  ; %NWL%function isElement ( o )  {%NWL%return (%NWL%typeof HTMLElement =  =  =  " object " ? o instanceof HTMLElement :  /  / DOM2%NWL%o && typeof o =  =  =  " object " && o . nodeType =  =  = 1 && typeof o . nodeName =  =  =  " string "%NWL%)  ;%NWL%}%NWL%var lastTime = 0 ; %NWL%var prefixes =  ' webkit moz ms o '  . split (  '  '  )  ; %NWL%var requestAnimationFrame = window . requestAnimationFrame ; %NWL%var cancelAnimationFrame = window . cancelAnimationFrame ; %NWL%9
if ( this . get (  ' selected '  )  )%NWL%this . renderSelected (  )%NWL%else%NWL%this . renderUnselected (  )%NWL%}  ,%NWL%renderUnselected : function (  )  {%NWL%if ( this . isPopupVisible (  )  ) return%NWL%var screen = this . get (  ' screen '  )%NWL%var index = this . get (  ' index '  )%NWL%var width = this . width%NWL%var height = this . height%NWL%9
if ( typeof button . cssClass ! =  =  ' undefined ' && $ . trim ( button . cssClass ) ! =  =  '  '  )  {%NWL%$button . addClass ( button . cssClass )  ;%NWL%} else {%NWL%$button . addClass (  ' btn - default '  )  ;%NWL%}%NWL%if ( typeof button . hotkey ! =  =  ' undefined '  )  {%NWL%this . registeredButtonHotkeys [ button . hotkey ]  = $button ;%NWL%}%NWL%$button . on (  ' click '  ,  { dialog : this , $button : $button , button : button }  , function ( event )  {%NWL%var dialog = event . data . dialog ; %NWL%var $button = event . data . $button ; %NWL%9
DeveloperError ,%NWL%HermiteSpline ,%NWL%Matrix4 ,%NWL%Spline )  {%NWL%" use strict "  ; %NWL%var scratchTimeVec = new Cartesian4 (  )  ; %NWL%var scratchTemp0 = new Cartesian3 (  )  ; %NWL%var scratchTemp1 = new Cartesian3 (  )  ; %NWL%function createEvaluateFunction ( spline )  {%NWL%var points = spline . points ; %NWL%var times = spline . times ; %NWL%9
function FilterLinearGradient ( aValue , aEngine )%NWL%{%NWL%var d = DisposablePartialParsing ( aValue ,  " parseBackgroundImages "  )  ; %NWL%if ( !d )%NWL%return null ; %NWL%var g = d [ 0 ]  ; %NWL%if ( !g . value )%NWL%return null ; %NWL%var str =  "  "  ; %NWL%var position =  (  " position " in g . value ) ? g . value . position . toLowerCase (  )  :  "  "  ; %NWL%var angle  =  (  " angle " in g . value ) ? g . value . angle . toLowerCase (  )  :  "  "  ; %NWL%9
}  ; %NWL%var toTutorial = exports . toTutorial = function ( tutorial , content , missingOpts )  {%NWL%if ( !tutorial )  {%NWL%require (  ' jsdoc / util / logger '  )  . error ( new Error (  ' Missing required parameter : tutorial '  )  )  ; %NWL%return ;%NWL%}%NWL%var node = tutorials . getByName ( tutorial )  ; %NWL%if ( !node )  {%NWL%missingOpts = missingOpts || {  }  ; %NWL%var tag = missingOpts . tag ; %NWL%var classname = missingOpts . classname ; %NWL%9
var out  = this . outputs [ 0 ]  ; %NWL%var inIn  = this . inputs [ 0 ]  ; %NWL%var next_srclo = this . inputs [ 1 ]  [ 0 ]  ; %NWL%var next_srchi = this . inputs [ 2 ]  [ 0 ]  ; %NWL%var next_dstlo = this . inputs [ 3 ]  [ 0 ] || 0 . 001 ; %NWL%var next_dsthi = this . inputs [ 4 ]  [ 0 ] || 0 . 001 ; %NWL%var srclo = this . _srclo ; %NWL%var srchi = this . _srchi ; %NWL%var dstlo = this . _dstlo ; %NWL%var dsthi = this . _dsthi ; %NWL%var x = this . _x ; %NWL%6
var R9_0 = this . _R9_0 ; %NWL%var R10_0 = this . _R10_0 ; %NWL%var R11_0 = this . _R11_0 ; %NWL%var R12_0 = this . _R12_0 ; %NWL%var R13_0 = this . _R13_0 ; %NWL%var R14_0 = this . _R14_0 ; %NWL%var R15_0 = this . _R15_0 ; %NWL%var R16_0 = this . _R16_0 ; %NWL%var R17_0 = this . _R17_0 ; %NWL%var R18_0 = this . _R18_0 ; %NWL%var R19_0 = this . _R19_0 ; %NWL%0
var GlobalStateActions = require (  '  .  .  / actions / GlobalStateActions '  )  ; %NWL%var LevelActions = require (  '  .  .  / actions / LevelActions '  )  ; %NWL%var LevelStore = require (  '  .  .  / stores / LevelStore '  )  ; %NWL%var Visualization = require (  '  .  .  / visuals / visualization '  )  . Visualization ; %NWL%var DisabledMap = require (  '  .  .  / level / disabledMap '  )  . DisabledMap ; %NWL%var GitShim = require (  '  .  .  / git / gitShim '  )  . GitShim ; %NWL%var Commands = require (  '  .  .  / commands '  )  ; %NWL%var MultiView = require (  '  .  .  / views / multiView '  )  . MultiView ; %NWL%var CanvasTerminalHolder = require (  '  .  .  / views '  )  . CanvasTerminalHolder ; %NWL%var ConfirmCancelTerminal = require (  '  .  .  / views '  )  . ConfirmCancelTerminal ; %NWL%var NextLevelConfirm = require (  '  .  .  / views '  )  . NextLevelConfirm ; %NWL%8
}  ,%NWL%color : function (  )  {%NWL%var appview = this . get (  ' appview '  )%NWL%var config = appview . app . config%NWL%var runner = this . get (  ' runner '  )%NWL%var results = runner . get (  ' results '  )%NWL%var equal = true%NWL%var hasTests = false%NWL%if ( results )  {%NWL%var passed = results . get (  ' passed '  )%NWL%var pending = results . get (  ' pending '  )%NWL%9
URI . setHeader ( name1 , value1 )  ; %NWL%URI . setHeader ( name2 , value2 )  ; %NWL%expect ( URI . headers )  . toEqual (  { Name1 :  [ value1 ]  , Name2 :  [ value2 ]  }  )  ; %NWL%URI . deleteHeader ( name1 )  ; %NWL%expect ( URI . headers )  . not . toEqual (  { Name1 :  [ value1 ]  , Name2 :  [ value2 ]  }  )%NWL%expect ( URI . headers )  . toEqual (  { Name2 :  [ value2 ]  }  )  ;%NWL%}  )  ; %NWL%it (  " returns the deleted value "  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%var name1 =  ' name1 '  ; %NWL%var value1 =  ' value1 '  ; %NWL%9
dataUrl :  '  / erp_app / desktop / security_management / users / available '  ,%NWL%autoLoad : false%NWL%}  )  ; %NWL%var selected_grid = Ext . apply ( commonWidgetProperties . selected_grid ,  {%NWL%xtype :  ' security_management_user_grid '  ,%NWL%title :  ' Selected Users '  ,%NWL%setupUrl :  '  / erp_app / desktop / security_management / users / selected_setup '  ,%NWL%dataUrl :  '  / erp_app / desktop / security_management / users / selected '  ,%NWL%autoLoad : false%NWL%}  )  ; %NWL%var assignment = Ext . apply ( commonWidgetProperties . assignment ,  {%NWL%3
return ;%NWL%}%NWL%lastTime = now ; %NWL%var pageX = event . pageX ; %NWL%var pageY = event . pageY ; %NWL%if ( Math . abs ( lastPosX - pageX )  < 3 && Math . abs ( lastPosY - pageY )  < 3 )  {%NWL%return ;%NWL%}%NWL%lastPosX = pageX ; %NWL%lastPosY = pageY ; %NWL%var target = event . target ; %NWL%3
if ( prospect . childNodes . length =  =  = 1 )  {%NWL%elm = prospect . firstChild ;%NWL%}%NWL%}%NWL%if ( elm ! = null && elm . nodeName =  =  " A "  )%NWL%action =  " update "  ; %NWL%formObj . insert . value = tinyMCEPopup . getLang ( action ,  ' Insert '  , true )  ; %NWL%setPopupControlsDisabled ( true )  ; %NWL%if ( action =  =  " update "  )  {%NWL%var href = inst . dom . getAttrib ( elm ,  ' href '  )  ; %NWL%var onclick = inst . dom . getAttrib ( elm ,  ' onclick '  )  ; %NWL%9
app . post (  "  / login "  , function ( req , res )  {%NWL%var user = req . body . user ; %NWL%if ( users [ user . name ]  =  = user . password )  {%NWL%req . session . user = user . name%NWL%req . session . cookie . maxAge = 5 * 60 * 1000 ;%NWL%}%NWL%res . redirect ( req . header (  ' Referer '  )  )  ;%NWL%}  )  ; %NWL%app . post (  "  / delete "  , function ( req , res )  {%NWL%if ( req . session . user )  {%NWL%var path = req . body . path ; %NWL%1
} else {%NWL%res . send (  " Please logon "  )  ;%NWL%}%NWL%}  )  ; %NWL%app . get (  "  / create "  , function ( req , res )  {%NWL%res . render (  " create "  ,  { layout : false , user : req . session . user }  )  ;%NWL%}  )  ; %NWL%app . post (  "  / create "  , function ( req , res )  {%NWL%if ( req . session . user )  {%NWL%var path = req . body . path ; %NWL%var data = req . body . data ; %NWL%9
]  )  ; %NWL%target . prototype . onToken = function ( token )  {%NWL%var AnchorEscapeContext = require (  '  .  / AnchorEscapeContext '  )  ; %NWL%var AnchorInlineContext = require (  '  .  / AnchorInlineContext '  )  ; %NWL%var AnchorBlockContext = require (  '  .  / AnchorBlockContext '  )  ; %NWL%var AnchorGroupContext = require (  '  .  / AnchorGroupContext '  )  ; %NWL%var JsWhileContext = require (  '  .  / JsWhileContext '  )  ; %NWL%var JsIfContext = require (  '  .  / JsIfContext '  )  ; %NWL%var JsForContext = require (  '  .  / JsForContext '  )  ; %NWL%var JsWithContext = require (  '  .  / JsWithContext '  )  ; %NWL%var JsFunctionContext = require (  '  .  / JsFunctionContext '  )  ; %NWL%2
app . use ( express . bodyParser (  { maxFieldsSize : 10 * 1024 * 1024 }  )  )  ; %NWL%app . use ( allowCrossDomain )  ; %NWL%app . use ( errorHandler )  ; %NWL%var firebaseRoot =  ' https :  /  /  '  + firebaseUrl +  '  . firebaseio . com '  ; %NWL%app . get (  '  /  '  , function ( req , res )  {%NWL%res . send (  ' Working .  .  .  '  )  ;%NWL%}  )  ; %NWL%app . get (  '  / backup - snapshot /  '  , function ( req , res )  {%NWL%var token = req . query . token ; %NWL%var timestamp = req . query . timestamp ; %NWL%var site = req . query . site ; %NWL%8
return p1 . row =  = p2 . row && p1 . column =  = p2 . column ;%NWL%}%NWL%exports . onSessionChange = function ( e )  {%NWL%var session = e . session ; %NWL%if ( !session . multiSelect )  {%NWL%session . $selectionMarkers =  [  ]  ; %NWL%session . selection . $initRangeList (  )  ; %NWL%session . multiSelect = session . selection ;%NWL%}%NWL%this . multiSelect = session . multiSelect ; %NWL%var oldSession = e . oldSession ; %NWL%3
req . session . flashType =  '  '  ;%NWL%} else {%NWL%var flash  =  '  '  ; %NWL%var flashType =  '  '  ;%NWL%}%NWL%res . render (  ' index . jade '  ,  { on : on , bandwidthDown : bandwidthDown , bandwidthUp : bandwidthUp , latency : latency , flash : flash , flashType : flashType }  )  ;%NWL%}  )  ; %NWL%app . post (  '  /  '  , function ( req , res )  {%NWL%var bandwidthUp  = req . body . throttle . bandwidthUp ; %NWL%var bandwidthDown = req . body . throttle . bandwidthDown ; %NWL%var latency   = req . body . throttle . latency ; %NWL%8
}  )  ; %NWL%function doTest ( testOptions , callback )  {%NWL%var assert = require (  ' assert '  )  ; %NWL%var tls = require (  ' tls '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var join = require (  ' path '  )  . join ; %NWL%var spawn = require (  ' child_process '  )  . spawn ; %NWL%var keyFile = join ( common . fixturesDir ,  ' agent . key '  )  ; %NWL%var certFile = join ( common . fixturesDir ,  ' agent . crt '  )  ; %NWL%var key = fs . readFileSync ( keyFile )  ; %NWL%var cert = fs . readFileSync ( certFile )  ; %NWL%9
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
ev . preventDefault (  )  ; %NWL%pathname = target . pathname ; %NWL%if ( pathname . charAt ( 0 ) ! =  =  '  /  '  ) pathname =  '  /  '  + pathname ; %NWL%uri = pathname . replace ( this . root ,  '  '  )  ; %NWL%this . navigate ( uri )  ;%NWL%}  ,%NWL%navigate : function ( uri , options )  {%NWL%options = options || {  }  ; %NWL%var request  = this . getCurrentRequest (  )  ; %NWL%var namedParams = options . namedParams ; %NWL%var queryParams = options . queryParams ; %NWL%9
}  )  ; %NWL%return deferred . promise ;%NWL%}  )  ; %NWL%gulp . task (  ' static - page - inject '  ,  [  ' styles '  ,  ' static - assets '  ]  , function (  )  {%NWL%var deferred = Q . defer (  )  ; %NWL%var buildCss = gulp . src (  [  ' styles / pure . css '  ,  ' styles *  . css '  ]  ,  { cwd :  ' build '  }  )  ; %NWL%var build = gulp . src (  ' build / static - page . php '  )%NWL%. pipe ( inject ( buildCss ,  { addRootSlash : false }  )  )%NWL%. pipe ( gulp . dest (  '  .  / build '  )  )  ; %NWL%var distCss = gulp . src (  [  ' styles / style . min . css '  ]  ,  { cwd :  ' dist '  }  )  ; %NWL%var dist = gulp . src (  ' dist / static - page . php '  )%NWL%6
Floor . create =  /  / Constructor function%NWL%function ( gd , md )  {%NWL%var f = new Floor (  )  ; %NWL%var technique = null ; %NWL%var primitive = gd . PRIMITIVE_LINES ; %NWL%var vertexFormats =  [ gd . VERTEXFORMAT_FLOAT2 ]  ; %NWL%var semantics = gd . createSemantics (  [ gd . SEMANTIC_POSITION ]  )  ; %NWL%var techniqueParameters = gd . createTechniqueParameters (  )  ; %NWL%var maxValue = Number . MAX_VALUE ; %NWL%var abs = Math . abs ; %NWL%var floor = Math . floor ; %NWL%9
var url = require (  ' url '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var zlib = require (  ' zlib '  )  ; %NWL%var assert = require (  ' assert - plus '  )  ; %NWL%var backoff = require (  ' backoff '  )  ; %NWL%var KeepAliveAgent = require (  ' keep - alive - agent '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var once = require (  ' once '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var dtrace = require (  '  .  .  / dtrace '  )  ; %NWL%var errors = require (  '  .  .  / errors '  )  ; %NWL%9
trigger . after ( function (  )  {%NWL%ok ( spy . calledOnce ,  ' fires an event '  )  ; %NWL%start (  )  ;%NWL%}  )  ; %NWL%InkEvent . on ( el ,  ' click '  , trigger . wrap ( spy )  )  ; %NWL%InkEvent . fire ( el ,  ' click '  )  ;%NWL%}  )  ; %NWL%asyncTest (  ' should be able to pass multiple argument to custom event '  , function (  )  {%NWL%var el = this . byId (  ' input '  )  ; %NWL%var trigger = this . trigger (  )  ; %NWL%var spy = this . spy (  )  ; %NWL%9
var logger = require (  '  .  / logger '  )  ; %NWL%var constant = require (  '  .  / constants '  )  ; %NWL%var watcher = require (  '  .  / watcher '  )  ; %NWL%var plugin = require (  '  .  / plugin '  )  ; %NWL%var ws = require (  '  .  / web - server '  )  ; %NWL%var preprocessor = require (  '  .  / preprocessor '  )  ; %NWL%var Launcher = require (  '  .  / launcher '  )  . Launcher ; %NWL%var FileList = require (  '  .  / file_list '  )  . List ; %NWL%var reporter = require (  '  .  / reporter '  )  ; %NWL%var helper = require (  '  .  / helper '  )  ; %NWL%var events = require (  '  .  / events '  )  ; %NWL%0
this . timer . stop (  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%NodeJSSynthServer . prototype . process = function (  )  {%NWL%if ( this . sysSyncCount < this . syncCount - C . STRM_FORWARD_PROCESSING )  {%NWL%return ;%NWL%}%NWL%var strm = this . strm ; %NWL%var world = this . world ; %NWL%var strmLength = this . strmLength ; %NWL%8
if ( startAngle =  = 0 . 5 && endAngle =  =  - 0 . 5 )%NWL%p2x -  = 1E - 5 ; %NWL%var text = $ (  '  < text >  '  )%NWL%. attr (  {%NWL%' text - anchor '  :  ' middle '  ,%NWL%' dominant - baseline '  :  ' central '  ,%NWL%x : lx ,%NWL%y : ly%NWL%}  )%NWL%. html ( label )  ; %NWL%var path = $ (  '  < path >  '  )%NWL%2
src : paths [ moduleName ]  [ assetType ]  ,%NWL%dest : modulesRoot . dest + moduleName +  '  /  '%NWL%}  )  )  ;%NWL%}%NWL%return streamResults ;%NWL%}  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var dump = function ( tvar )  {%NWL%fs . writeFileSync (  "  .  / dump . json "  , JSON . stringify ( tvar )  )  ;%NWL%}%NWL%var gulp = require (  ' gulp '  )  ; %NWL%6
( stencilOperation =  =  = WebGLRenderingContext . INCREMENT_WRAP ) ||%NWL%( stencilOperation =  =  = WebGLRenderingContext . DECR_WRAP )  )  ;%NWL%}%NWL%var RenderState = function ( context , renderState )  {%NWL%var rs = defaultValue ( renderState ,  {  }  )  ; %NWL%var cull = defaultValue ( rs . cull ,  {  }  )  ; %NWL%var polygonOffset = defaultValue ( rs . polygonOffset ,  {  }  )  ; %NWL%var scissorTest = defaultValue ( rs . scissorTest ,  {  }  )  ; %NWL%var scissorTestRectangle = defaultValue ( scissorTest . rectangle ,  {  }  )  ; %NWL%var depthRange = defaultValue ( rs . depthRange ,  {  }  )  ; %NWL%var depthTest = defaultValue ( rs . depthTest ,  {  }  )  ; %NWL%5
this . _sessionStorageRootTreeElement = this . _addStorageChild ( storageElement , this . _sessionStorageRootTreeElement , WebInspector . UIString (  " Session Storage "  )  )  ;%NWL%}  ,%NWL%_domStorageObjectWasInspected : function ( event )%NWL%{%NWL%var domStorage = event . data . domStorage ; %NWL%var treeElement = this . treeElementForRepresentedObject ( domStorage )  ; %NWL%treeElement . revealAndSelect ( true )  ;%NWL%}  ,%NWL%_databaseWasAdded : function ( event )%NWL%{%NWL%var database = event . data . database ; %NWL%4
var getValue = argscheck . getValue ; %NWL%var quality = getValue ( options . quality , 50 )  ; %NWL%var destinationType = getValue ( options . destinationType , Camera . DestinationType . FILE_URI )  ; %NWL%var sourceType = getValue ( options . sourceType , Camera . PictureSourceType . CAMERA )  ; %NWL%var targetWidth = getValue ( options . targetWidth ,  - 1 )  ; %NWL%var targetHeight = getValue ( options . targetHeight ,  - 1 )  ; %NWL%var encodingType = getValue ( options . encodingType , Camera . EncodingType . JPEG )  ; %NWL%var mediaType = getValue ( options . mediaType , Camera . MediaType . PICTURE )  ; %NWL%var allowEdit = !!options . allowEdit ; %NWL%var correctOrientation = !!options . correctOrientation ; %NWL%var saveToPhotoAlbum = !!options . saveToPhotoAlbum ; %NWL%8
var map = this . map ; %NWL%for ( var len = this . pages . length - 1 , i = len ; i >  = 0 ; i -  -  )  {%NWL%this . removePage ( this . pages [ i ]  )  ;%NWL%}%NWL%this . hide (  )  ; %NWL%var control = this . control ; %NWL%if ( map && map . events &&%NWL%control && control . events )  {%NWL%control . destroy (  )  ;%NWL%}%NWL%var layer = this . layer ; %NWL%0
}%NWL%if ( !found )  {%NWL%dashboard . data . reports . push ( rpt_new )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%director_support . plugins . livingWAR_editForm = function ( item )  {%NWL%var form = director_support . plugins . livingWAR_modalForm ; %NWL%var form_title = form . find (  ' h3 '  )  ; %NWL%var title = form . find (  '  [ name =  " title "  ]  '  )  ; %NWL%var details = form . find (  '  [ name =  " details "  ]  '  )  ; %NWL%9
render : function (  )  {%NWL%var text = this . props . text ; %NWL%if ( !text )  {%NWL%text =  "  "  ;%NWL%}%NWL%var height = this . props . height ; %NWL%var width = text . length * this . props . height * 2 / 3 ; %NWL%var radius = this . props . height / 2 ; %NWL%var textAnchor =  " start "  ; %NWL%var dominantBaseline =  " central "  ; %NWL%var x = this . props . x ; %NWL%1
main . provides =  [  " navigate "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Plugin = imports . Plugin ; %NWL%var settings = imports . settings ; %NWL%var ui = imports . ui ; %NWL%var c9 = imports . c9 ; %NWL%var fs = imports . fs ; %NWL%var fsCache = imports [  " fs . cache "  ]  ; %NWL%var tabs = imports . tabManager ; %NWL%var menus = imports . menus ; %NWL%3
, Sara = require (  '  .  .  / sara '  )%NWL%, browserify = require (  ' browserify '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%, mime = require (  ' mime '  )%NWL%1
var faType    = require (  "  .  / controllers / faType "  )  ; %NWL%var department   = require (  "  .  / controllers / department "  )  ; %NWL%var others    = require (  "  .  / controllers / others "  )  ; %NWL%var login    = require (  "  .  / controllers / login "  )  ; %NWL%var logout    = require (  "  .  / controllers / logout "  )  ; %NWL%var company    = require (  "  .  / controllers / company "  )  ; %NWL%var authUser    = require (  "  .  / controllers / authUser "  )  ; %NWL%var giftCategory   = require (  "  .  / controllers / giftCategory "  )  ; %NWL%var stockInType   = require (  "  .  / controllers / stockInType "  )  ; %NWL%var gift     = require (  "  .  / controllers / gift "  )  ; %NWL%var paymentType   = require (  "  .  / controllers / paymentType "  )  ; %NWL%0
return new Range ( startRow , startColumn , endRow , line . length )  ;%NWL%}%NWL%}  ;%NWL%}  )  . call ( FoldMode . prototype )  ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
NobleBindings . prototype . _onOpen = function (  )  {%NWL%console . log (  ' on -  > open '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onClose = function (  )  {%NWL%console . log (  ' on -  > close '  )  ; %NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%8
var methodsRegister =  {%NWL%init : function ( options )  {%NWL%if ( options )  {%NWL%postURL = options . url || '  '  ; %NWL%redirectRegisterURL = options . redirect || '  '  ;%NWL%}%NWL%return this . each ( function (  )  {%NWL%var $this = jquery ( this )  ; %NWL%jquery (  ' INPUT [ type = submit ]  '  , $this )  . button (  )  . click ( function (  )  {%NWL%var username  = jquery . trim ( jquery (  ' INPUT [ name = username ]  '  , $this )  . val (  )  )  ; %NWL%var email   = jquery . trim ( jquery (  ' INPUT [ name = email ]  '  , $this )  . val (  )  )  ; %NWL%9
test . expect ( 5 )  ; %NWL%test . done (  )  ;%NWL%}  ,%NWL%' 13 . Zen should run two handler with 3 parameters '  : function ( test )  {%NWL%var hw1 = function ( v1 , v2 , v3 , next )  { test . ok ( true ,  ' The handler was executed '  )  ; next (  )  ;  }  ; %NWL%var hw2 = function ( v1 , v2 , v3 , next )  {%NWL%test . ok ( arguments . length =  =  = 4 ,  ' The handler was executed with the correct number of arguments '  )  ; %NWL%test . ok ( typeof v1 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v1 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v2 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v2 +  ' ` .  '  )  ; %NWL%test . ok ( typeof v3 ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + v3 +  ' ` .  '  )  ; %NWL%test . ok ( typeof next ! =  =  ' undefined '  ,  ' The handler was executed with the value ` '  + next +  ' ` .  '  )  ; %NWL%7
, nopt = require (  " nopt "  )%NWL%, configNames = Object . keys ( configTypes )  . filter ( function ( e )  {%NWL%return e . charAt ( 0 ) ! =  =  " _ "%NWL%}  )%NWL%, shorthandNames = Object . keys ( shorthands )%NWL%, allConfs = configNames . concat ( shorthandNames )%NWL%, npm = require (  "  .  / npm . js "  )%NWL%completion . completion = function ( opts , cb )  {%NWL%if ( opts . w > 3 ) return cb (  )%NWL%var fs = require (  " graceful - fs "  )%NWL%, path = require (  " path "  )%NWL%0
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
{%NWL%ecAttach . setStationary ( thatECSockets . isStationary (  )  )  ;%NWL%}  )%NWL%. delay ( 0 . 4 )%NWL%. start (  )  ;%NWL%}%NWL%}  ,%NWL%createSocketedEntity : function ecSocketsCreateSocketedEntityFn ( archetypeName , localOffset , stationary )%NWL%{%NWL%var globals = this . globals ; %NWL%var gameManager = this . gameManager ; %NWL%9
newNotes =  ' No notes for this step '  ;%NWL%}%NWL%consoleWindow . document . getElementById (  ' notes '  )  . innerHTML = newNotes ; %NWL%var baseURL = document . URL . substring ( 0 , document . URL . search (  ' # /  '  )  )  ; %NWL%var slideSrc = baseURL +  ' # '  + document . querySelector (  '  . active '  )  . id ; %NWL%var preSrc = baseURL +  ' # '  + nextStep (  )  . id ; %NWL%var slideView = consoleWindow . document . getElementById (  ' slideView '  )  ; %NWL%if ( slideView . src ! =  = slideSrc )  {%NWL%slideView . src = slideSrc ;%NWL%}%NWL%var preView = consoleWindow . document . getElementById (  ' preView '  )  ; %NWL%6
var assert = scope . assert ; %NWL%var defineWrapGetter = scope . defineWrapGetter ; %NWL%var enqueueMutation = scope . enqueueMutation ; %NWL%var getTreeScope = scope . getTreeScope ; %NWL%var isWrapper = scope . isWrapper ; %NWL%var mixin = scope . mixin ; %NWL%var registerTransientObservers = scope . registerTransientObservers ; %NWL%var registerWrapper = scope . registerWrapper ; %NWL%var setTreeScope = scope . setTreeScope ; %NWL%var unsafeUnwrap = scope . unsafeUnwrap ; %NWL%var unwrap = scope . unwrap ; %NWL%0
MipmapHint ,%NWL%PixelDatatype ,%NWL%TextureMagnificationFilter ,%NWL%TextureMinificationFilter ,%NWL%TextureWrap )  {%NWL%" use strict "  ; %NWL%var Texture = function ( context , options )  {%NWL%options = defaultValue ( options , defaultValue . EMPTY_OBJECT )  ; %NWL%var source = options . source ; %NWL%var width = defined ( source ) ? source . width : options . width ; %NWL%var height = defined ( source ) ? source . height : options . height ; %NWL%9
if ( !jsonString )  { return null ;  }%NWL%try {%NWL%return JSON . parse ( jsonString )  ;%NWL%} catch ( e )  {%NWL%return jsonString ;%NWL%}%NWL%}%NWL%function FileUploader ( options )  {%NWL%options = options || {  }  ; %NWL%var url = options . url ; %NWL%var maxFileSize = options . maxFileSize ; %NWL%9
it (  ' should do what it is supposed to do '  , function ( done )  {%NWL%var first = AWS . walk ( __dirname +  '  / local / bucket / first '  )  ; %NWL%var second = AWS . walk ( __dirname +  '  / local / bucket / second '  )  ; %NWL%var updated = AWS . walk ( __dirname +  '  / local / bucket / first / otters / updated '  )  ; %NWL%var backup = AWS . walk ( __dirname +  '  / local / download / backup '  )  ; %NWL%var third = AWS . walk ( __dirname +  '  / local / bucket / third '  )  ; %NWL%var fourth_bucket = AWS . walk ( __dirname +  '  / local / bucket / fourth '  )  ; %NWL%var fourth = AWS . walk ( __dirname +  '  / local / download / fourth '  )  ; %NWL%var fifth = AWS . walk ( __dirname +  '  / local / download / fifth '  )  ; %NWL%var fifth_bucket = AWS . walk ( __dirname +  '  / local / bucket / fifth '  )  ; %NWL%var copies = AWS . walk ( __dirname +  '  / local / bucket / copies '  )  ; %NWL%1
var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var contentDisposition = require (  '  .  / utils '  )  . contentDisposition ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%var send = require (  ' send '  )  ; %NWL%var basename = path . basename ; %NWL%var extname = path . extname ; %NWL%var mime = send . mime ; %NWL%var resolve = path . resolve ; %NWL%var vary = require (  ' vary '  )  ; %NWL%4
var unameLen = msg . substring ( 0 , msg . indexOf (  '  :  '  )  )  ; %NWL%msg = msg . substring ( unameLen . length + 1 )  ; %NWL%var userName = msg . substring ( 0 , Number ( unameLen )  )  ; %NWL%msg = msg . substring ( userName . length )  ; %NWL%var channelIdLen = msg . substring ( 0 , msg . indexOf (  '  :  '  )  )  ; %NWL%msg = msg . substring ( channelIdLen . length + 1 )  ; %NWL%var channelId = msg . substring ( 0 , Number ( channelIdLen )  )  ; %NWL%msg = msg . substring ( channelId . length )  ; %NWL%var contentStrLen = msg . substring ( 0 , msg . indexOf (  '  :  '  )  )  ; %NWL%msg = msg . substring ( contentStrLen . length + 1 )  ; %NWL%var contentStr = msg . substring ( 0 , Number ( contentStrLen )  )  ; %NWL%6
}%NWL%}%NWL%}  ; %NWL%NodeJSSynthServer . prototype . process = function (  )  {%NWL%if ( this . sysSyncCount < this . syncCount - C . STRM_FORWARD_PROCESSING )  {%NWL%return ;%NWL%}%NWL%var strm = this . strm ; %NWL%var world = this . world ; %NWL%var strmLength = this . strmLength ; %NWL%var bufLength  = this . bufLength ; %NWL%7
var title    = prop [  ' chart . title '  ] ? prop [  ' chart . title '  ]  :  '  '  ; %NWL%var color    = prop [  ' chart . colors '  ] ? prop [  ' chart . colors '  ]  [ 0 ]  :  ' black '  ; %NWL%var title_color  = prop [  ' chart . title . color '  ] ? prop [  ' chart . title . color '  ]  : color ; %NWL%var label_color  = prop [  ' chart . text . color '  ] ? prop [  ' chart . text . color '  ]  : color ; %NWL%var numticks   = typeof ( prop [  ' chart . numticks '  ]  )  =  =  ' number ' ? prop [  ' chart . numticks '  ]  : 10 ; %NWL%var numlabels   = prop [  ' chart . numlabels '  ] ? prop [  ' chart . numlabels '  ]  : 5 ; %NWL%var font    = prop [  ' chart . text . font '  ] ? prop [  ' chart . text . font '  ]  :  ' Arial '  ; %NWL%var size    = prop [  ' chart . text . size '  ] ? prop [  ' chart . text . size '  ]  : 10 ; %NWL%var align    = typeof ( prop [  ' chart . align '  ]  )  =  =  ' string ' ? prop [  ' chart . align '  ]  :  ' left '  ; %NWL%var formatter   = prop [  ' chart . scale . formatter '  ]  ; %NWL%var decimals   = prop [  ' chart . scale . decimals '  ]  ; %NWL%9
var linknodemodules = require (  '  .  / tools / build / linknodemodules '  )  ; %NWL%var pubbuild = require (  '  .  / tools / build / pubbuild '  )  ; %NWL%var dartanalyzer = require (  '  .  / tools / build / dartanalyzer '  )  ; %NWL%var jsserve = require (  '  .  / tools / build / jsserve '  )  ; %NWL%var pubserve = require (  '  .  / tools / build / pubserve '  )  ; %NWL%var rundartpackage = require (  '  .  / tools / build / rundartpackage '  )  ; %NWL%var copy = require (  '  .  / tools / build / copy '  )  ; %NWL%var file2moduleName = require (  '  .  / tools / build / file2modulename '  )  ; %NWL%var karma = require (  ' karma '  )  . server ; %NWL%var minimist = require (  ' minimist '  )  ; %NWL%var es5build = require (  '  .  / tools / build / es5build '  )  ; %NWL%0
dropCueVerticalBar . style . height = dropCue . style . height ;%NWL%}%NWL%}%NWL%dropCue . webPartZoneHorizontalCueResized = true ;%NWL%}%NWL%dropCue . style . visibility =  ( show ? " visible "  :  " hidden "  )  ;%NWL%}%NWL%}%NWL%function Zone_GetWebPartIndex ( location )  {%NWL%var x = location . x ; %NWL%var y = location . y ; %NWL%9
import eject from '  .  / eject '  ; %NWL%import ejectAll from '  .  / ejectAll '  ; %NWL%import filter from '  .  / filter '  ; %NWL%import inject from '  .  / inject '  ; %NWL%import link from '  .  / link '  ; %NWL%import linkAll from '  .  / linkAll '  ; %NWL%import linkInverse from '  .  / linkInverse '  ; %NWL%import unlinkInverse from '  .  / unlinkInverse '  ; %NWL%let NER = DSErrors . NER ; %NWL%let IA = DSErrors . IA ; %NWL%let R = DSErrors . R ; %NWL%8
else%NWL%return "  "  ;%NWL%}  ;%NWL%}  )  . call ( FoldMode . prototype )  ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%var readdir = promisedFunction (  ' readdir '  )  ; %NWL%var writeFile = promisedFunction (  ' writeFile '  )  ; %NWL%var mkdir = promisedFunction (  ' mkdir '  )  ; %NWL%var rmdir = promisedFunction (  ' rmdir '  )  ; %NWL%var rename = promisedFunction (  ' rename '  )  ; %NWL%3
, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%, Spawn  = actions . Spawn%NWL%, Speed  = actions . Speed%NWL%, Sequence  = actions . Sequence%NWL%6
. appendTo ( controls )%NWL%. hover ( function (  )  {%NWL%$ ( this )  . find (  '  . mejs - sourcechooser - selector '  )  . css (  ' visibility '  ,  ' visible '  )  ;%NWL%}  , function (  )  {%NWL%$ ( this )  . find (  '  . mejs - sourcechooser - selector '  )  . css (  ' visibility '  ,  ' hidden '  )  ;%NWL%}  )%NWL%. delegate (  ' input [ type = radio ]  '  ,  ' click '  , function (  )  {%NWL%var src = this . value ; %NWL%if ( media . currentSrc ! = src )  {%NWL%var currentTime = media . currentTime ; %NWL%var paused = media . paused ; %NWL%9
var startingTagEndingFinder = function startingTagEndingFinder ( character )  {%NWL%if ( character =  =  = startingTagLastChar )  {%NWL%setParserFunc ( endingTagBeginningFinder )  ;%NWL%}%NWL%}  ; %NWL%var startingTagBeginningFinder = function startingTagBeginningFinder ( character )  {%NWL%if ( character =  =  = startingTagFirstChar )  {%NWL%setParserFunc ( startingTagNameFinder )  ;%NWL%}%NWL%}  ; %NWL%var endingTagNameFinder = function endingTagNameFinder ( character )  {%NWL%0
var highlight  = require (  ' highlight . js '  )  . highlight%NWL%var eui   = require (  ' @workshop / exercise - ui '  )%NWL%var fonts   = require (  ' google - fonts '  )%NWL%var escape  = require (  ' escape - html '  )%NWL%var fit   = require (  ' canvas - fit '  )%NWL%var getCompare = require (  ' gl - compare '  )%NWL%var getContext = require (  ' gl - context '  )%NWL%var quotemeta  = require (  ' quotemeta '  )%NWL%var cheerio  = require (  ' cheerio '  )%NWL%var glapi   = require (  ' gl - api '  )%NWL%var marked  = require (  ' marked '  )%NWL%7
define ( function ( require , exports , module )  {%NWL%var View = require (  ' famous / core / View '  )  ; %NWL%var Surface = require (  ' famous / core / Surface '  )  ; %NWL%var Modifier = require (  ' famous / core / Modifier '  )  ; %NWL%var Transform = require (  ' famous / core / Transform '  )  ; %NWL%var Transitionable = require (  ' famous / transitions / Transitionable '  )  ; %NWL%var StateModifier  = require (  ' famous / modifiers / StateModifier '  )  ; %NWL%var WeekView = require (  ' views / WeekView '  )  ; %NWL%var Easing = require (  ' famous / transitions / Easing '  )  ; %NWL%var GridLayout = require (  ' famous / views / GridLayout '  )  ; %NWL%var RenderNode = require (  ' famous / core / RenderNode '  )  ; %NWL%1
this . colorSampler = sampler ;%NWL%}%NWL%raptorjs . smaa . prototype . update = function (  )  {%NWL%var edgeDetectionShader = this . lumaEdgeDetection ; %NWL%var edgesFramebuffer 	 = this . edgesFramebuffer ; %NWL%raptorjs . system . drawQuad ( edgeDetectionShader , edgesFramebuffer )  ;  /  / edgesFramebuffer%NWL%var blendWeightShader = this . SMAABlendWeight ; %NWL%var blendWeightFB = this . blendTex ; %NWL%raptorjs . system . drawQuad ( blendWeightShader , null )  ; %NWL%var NeighborhoodBlendingShader = this . NeighborhoodBlending ; %NWL%var outputFramebuffer = this . outputFramebuffer ; %NWL%4
var _substring  = uncurry ( g . String . prototype . substring )  ; %NWL%var ExactRational    = plugins . get (  " ExactRational "  )  ; %NWL%var ExactInteger    = plugins . get (  " ExactInteger "  )  ; %NWL%var nativeToExactInteger  = plugins . get (  " nativeToExactInteger "  )  ; %NWL%var debug      = plugins . get (  " debug "  )  ; %NWL%var exp10      = plugins . get (  " exp10 "  )  ; %NWL%var divAndMod     = plugins . get (  " divAndMod "  )  ; %NWL%var sign      = plugins . get (  " sign "  )  ; %NWL%var isZero      = plugins . get (  " isZero "  )  ; %NWL%var isPositive     = plugins . get (  " isPositive "  )  ; %NWL%var isNegative     = plugins . get (  " isNegative "  )  ; %NWL%1
var error =  '  '  ; %NWL%child . stderr . on (  " data "  , function ( data )  {%NWL%error +  = data . toString (  )  ;%NWL%}  )  ; %NWL%child . on (  " exit "  , function (  )  {%NWL%cbfscopy ( error )  ;%NWL%}  )  ;%NWL%}  ,%NWL%move : function ( source , destination , cbfsmove )  {%NWL%var source = this . getRealPath ( source )  ; %NWL%var destination = this . getRealPath ( destination )  ; %NWL%9
return offers . reduce ( function ( orderBook , off )  {%NWL%var price ; %NWL%var order_maker = off . Account ; %NWL%var sequence = off . Sequence ; %NWL%var passive =  ( off . Flags & ripple . Remote . flags . offer . Passive ) ! =  = 0 ; %NWL%var sell =  ( off . Flags & ripple . Remote . flags . offer . Sell ) ! =  = 0 ; %NWL%var taker_gets_total = utils . parseCurrencyAmount ( off . TakerGets )  ; %NWL%var taker_gets_funded = off . taker_gets_funded ?%NWL%utils . parseCurrencyAmount ( off . taker_gets_funded )  : taker_gets_total ; %NWL%var taker_pays_total = utils . parseCurrencyAmount ( off . TakerPays )  ; %NWL%var taker_pays_funded = off . taker_pays_funded ?%NWL%7
var num_frames = Gob . numFrames ( obj . uuid )  ; %NWL%var frame = obj . frame || 0 ; %NWL%if ( !obj . spin )  {%NWL%obj . frame =  ( frame + 1 ) % num_frames ;%NWL%} else {%NWL%obj . frame =  ( frame + num_frames + obj . spin ) % num_frames ;%NWL%}%NWL%}%NWL%if ( obj . owner_id && obj . user_name )  {%NWL%var id =  ' id '  + obj . owner_id ; %NWL%var points = obj . points || 0 ; %NWL%1
{%NWL%event . stopImmediatePropagation (  )  ; %NWL%return false ;%NWL%}%NWL%function onResize (  )%NWL%{%NWL%var ui   = Inventory . ui ; %NWL%var content = ui . find (  '  . container . content '  )  ; %NWL%var hide  = ui . find (  '  . hide '  )  ; %NWL%var top  = ui . position (  )  . top ; %NWL%var left  = ui . position (  )  . left ; %NWL%9
this . ykneeThresholdDb =  ( y ) ? 20 * Math . log ( y )  * Math . LOG10E :  - 1000 ; %NWL%this . _k = k ; %NWL%return this . _k ;%NWL%}  ; %NWL%$ . process = function ( cellL , cellR )  {%NWL%var dryMix = 1 - this . effectBlend ; %NWL%var wetMix = this . effectBlend ; %NWL%var k = this . _k ; %NWL%var masterLinearGain = this . _masterLinearGain ; %NWL%var satReleaseFrames = this . _satReleaseFrames ; %NWL%var kA = this . _kA ; %NWL%7
}%NWL%}%NWL%if ( basicTypes . indexOf (  ' object '  ) ! =  - 1 && depthRemaining > 0 )  {%NWL%if ( data . readOnly (  )  )  {%NWL%var links = schemas . links (  )  ; %NWL%for ( var i = 0 ; i < links . length ; i +  +  )  {%NWL%var link = links [ i ]  ; %NWL%addColumnsFromLink ( link , i )  ;%NWL%}%NWL%}%NWL%var knownProperties = schemas . knownProperties (  )  ; %NWL%4
var overlayUrl =  ' http :  /  / cebutraffic . org / tiles_avg /  { z }  /  { x }  /  { y }  . png '  ; %NWL%var overlay = null ; %NWL%function updatePath (  )  {%NWL%pathLayer . clearLayers (  )  ; %NWL%var distanceTotal = 0 ; %NWL%var distanceWeightedSpeedTotal = 0 ; %NWL%for ( edge in conditions . edges )%NWL%{%NWL%if ( edgeList [ edge ]  )  {%NWL%var edgeId = edgeList [ edge ]  . edgeId ; %NWL%var distance = edgeList [ edge ]  . distance ; %NWL%9
} catch ( e )  {%NWL%}%NWL%}%NWL%}%NWL%this . request = false ;%NWL%}%NWL%}%NWL%GeoRssOverlay . prototype . createMarker = function ( item , index )  {%NWL%var title = item . getElementsByTagName (  " title "  )  [ 0 ]  . childNodes [ 0 ]  . nodeValue ; %NWL%if ( item . getElementsByTagName (  " description "  )  . length ! = 0 )  {%NWL%var description = item . getElementsByTagName (  " description "  )  [ 0 ]  . childNodes [ 0 ]  . nodeValue ; %NWL%8
" use strict "  ; %NWL%var chai = require (  " chai "  )  ; %NWL%var when = require (  " when "  )  ; %NWL%var path = require (  " path "  )  ; %NWL%var sinon = require (  " sinon "  )  ; %NWL%var childProcess = require (  " child_process "  )  ; %NWL%var expect = chai . expect ; %NWL%var phridge = require (  "  .  .  / lib / main . js "  )  ; %NWL%var Phantom = require (  "  .  .  / lib / Phantom . js "  )  ; %NWL%var Page = require (  "  .  .  / lib / Page . js "  )  ; %NWL%var instances = require (  "  .  .  / lib / instances . js "  )  ; %NWL%8
gf . sim . Variable = function ( tag , flags )  {%NWL%this . tag = tag ; %NWL%this . ordinal = 0 ; %NWL%this . flags = flags ;%NWL%}  ; %NWL%gf . sim . Variable . prototype . clone = goog . abstractMethod ; %NWL%gf . sim . Variable . prototype . getReadSource = goog . abstractMethod ; %NWL%gf . sim . Variable . prototype . getWriteSource = goog . abstractMethod ; %NWL%gf . sim . Variable . prototype . getCopySource = function ( obj )  {%NWL%var getter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . getter_ )  ; %NWL%var setter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . setter_ )  ; %NWL%9
}%NWL%}%NWL%var fields = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%fields . className =  " retryFields "  ;  /  / $NON - NLS - 0$%NWL%var firstField ; %NWL%error . Retry . parameters . forEach ( function ( param , i )  {%NWL%if ( !param . hidden )  {%NWL%var div = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%var label = document . createElement (  " label "  )  ;  /  / $NON - NLS - 0$%NWL%label . appendChild ( document . createTextNode ( param . name )  )  ; %NWL%var input = document . createElement (  " input "  )  ;  /  / $NON - NLS - 0$%NWL%7
loaddata  :  {  }  ,%NWL%submitdata :  {  }%NWL%}  ; %NWL%if ( options )  {%NWL%$ . extend ( settings , options )  ;%NWL%}%NWL%var plugin  = $ . editable . types [ settings . type ]  . plugin || function (  )  {  }  ; %NWL%var submit  = $ . editable . types [ settings . type ]  . submit || function (  )  {  }  ; %NWL%var buttons  = $ . editable . types [ settings . type ]  . buttons%NWL%|| $ . editable . types [  ' defaults '  ]  . buttons ; %NWL%var content  = $ . editable . types [ settings . type ]  . content%NWL%8
checker = function ( hash )  {%NWL%var checker = window . retrieve (  ' hashchange : checker '  )  ; %NWL%var timer = window . retrieve (  ' hashchange : timer '  )  ; %NWL%clearTimeout ( timer )  ;  /  / just incase%NWL%timer = null ; %NWL%var hash = hash || new String ( window . location . hash )  ; %NWL%var compare = hash . toLowerCase (  )  ; %NWL%if ( hash . length =  = 0 && new String ( window . location )  . indexOf (  ' # '  )  >  = 0 )  {%NWL%compare =  ' # '  ;%NWL%}%NWL%var current = window . retrieve (  ' hashchange : current '  )  ; %NWL%1
Dom . removeClass ( Dom . get ( this . id +  '  - 2 -  '  + field +  '  - ext - data '  )  ,  " hidden "  )  ; %NWL%Dom . get ( this . id +  '  - 2 -  '  + field +  '  - ok '  )  . onclick = function ( ev )%NWL%{%NWL%var fieldName = this . id . replace ( me . id +  '  - 2 -  '  ,  '  '  )  . replace (  '  - ok '  ,  '  '  )  ; %NWL%me . onExtConfigOk ( fieldName )  ;%NWL%}  ;%NWL%}  ,%NWL%onExtConfigOk : function ( field )%NWL%{%NWL%var url = Dom . get ( this . id +  '  - 2 -  '  + field +  '  - url '  )  . value ; %NWL%var root = Dom . get ( this . id +  '  - 2 -  '  + field +  '  - root '  )  . value ; %NWL%9
tinyMCEPopup . resizeToInnerSize (  )  ; %NWL%document . getElementById (  ' backgroundimagebrowsercontainer '  )  . innerHTML = getBrowserHTML (  ' backgroundimagebrowser '  ,  ' backgroundimage '  ,  ' image '  ,  ' table '  )  ; %NWL%document . getElementById (  ' bordercolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bordercolor_pick '  ,  ' bordercolor '  )  ; %NWL%document . getElementById (  ' bgcolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bgcolor_pick '  ,  ' bgcolor '  )%NWL%var inst = tinyMCE . selectedInstance ; %NWL%var tdElm = tinyMCE . getParentElement ( inst . getFocusElement (  )  ,  " td , th "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = tinyMCE . parseStyle ( tinyMCE . getAttrib ( tdElm ,  " style "  )  )  ; %NWL%var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = tinyMCE . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = tinyMCE . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%9
return full ? this . getDocumentWidth (  )  : this . getViewportWidth (  )  ;%NWL%}  ,%NWL%getViewHeight : function ( full )  {%NWL%return full ? this . getDocumentHeight (  )  : this . getViewportHeight (  )  ;%NWL%}  ,%NWL%getDocumentHeight : function (  )  {  /  / missing from prototype?%NWL%var scrollHeight =  ( document . compatMode ! =  " CSS1Compat "  ) ? document . body . scrollHeight : document . documentElement . scrollHeight ; %NWL%return Math . max ( scrollHeight , this . getViewportHeight (  )  )  ;%NWL%}  ,%NWL%getDocumentWidth : function (  )  {  /  / missing from prototype?%NWL%var scrollWidth =  ( document . compatMode ! =  " CSS1Compat "  ) ? document . body . scrollWidth : document . documentElement . scrollWidth ; %NWL%6
}%NWL%)  ,%NWL%totalHeight : Ember . computed (  ' height '  ,  ' marginTop '  ,  ' marginBottom '  , function (  )  {%NWL%var height = this . get (  ' height '  )  ; %NWL%var marginTop = this . get (  ' marginTop '  )  ; %NWL%var marginBottom = this . get (  ' marginBottom '  )  ; %NWL%return height + marginTop + marginBottom ;%NWL%}  )  ,%NWL%bottom : Ember . computed (  ' y '  ,  ' totalHeight '  , function (  )  {%NWL%var y = this . get (  ' y '  )  ; %NWL%var totalHeight = this . get (  ' totalHeight '  )  ; %NWL%3
self . _originalWidth = width ; %NWL%self . _originalHeight = height ;%NWL%}%NWL%Me . create = function create ( parentElement , options , callback )  {%NWL%ensure . signature ( arguments ,  [ Object ,  [ Object , Function ]  ,  [ undefined , Function ]  ]  )  ; %NWL%if ( callback =  =  = undefined )  {%NWL%callback = options ; %NWL%options =  {  }  ;%NWL%}%NWL%var width = options . width || 2000 ; %NWL%var height = options . height || 2000 ; %NWL%9
svgCanvas . changeSelectedAttribute ( marker_name ,  " url ( # "  + id +  "  )  "  )  ; %NWL%if ( el . tagName =  =  " line " && pos =  =  ' mid '  ) el = convertline ( el )  ; %NWL%S . call (  " changed "  , selElems )  ; %NWL%setIcon ( pos , val )  ;%NWL%}%NWL%function convertline ( elem )  {%NWL%if ( ! ( elem . tagName =  =  " line "  )  ) return elem ; %NWL%var x1 = elem . getAttribute (  ' x1 '  )  - 0 ; %NWL%var x2 = elem . getAttribute (  ' x2 '  )  - 0 ; %NWL%var y1 = elem . getAttribute (  ' y1 '  )  - 0 ; %NWL%var y2 = elem . getAttribute (  ' y2 '  )  - 0 ; %NWL%7
var y = this . markerCentery ; %NWL%pa ( co ,  [  ' a '  , x , y , r , RG . HALFPI , RG . TWOPI , false ]  )  ; %NWL%if ( RG . ISOLD )  {%NWL%pa ( co ,  [  ' m '  , x + r + r , y + r + r ,  ' qc '  , x + r , y + r , x + r + 1 , y ,  ' m '  , x + r + r , y + r + r ]  )  ;%NWL%} else {%NWL%pa ( co ,  [  ' qc '  , x + r , y + r , x + r + r , y + r + r ]  )  ;%NWL%}%NWL%pa ( co ,  [  ' qc '  , x + r , y + r , x , y + r +  ( RG . ISOLD ? 1 : 0 )  ]  )  ;%NWL%} else if ( prop [  ' chart . align '  ]  =  =  ' right '  )  {%NWL%var x = this . markerCenterx ; %NWL%var y = this . markerCentery ; %NWL%9
_this . interpreter . interpret ( script , env . ctx , next )  ;%NWL%}  ; %NWL%this . toString = function (  )  {%NWL%" Yadda 0 . 4 . 0 Copyright 2010 Acuminous Ltd / Energized Work Ltd "  ;%NWL%}  ;%NWL%}  ; %NWL%module . exports = Yadda ;%NWL%}  ,  {  "  .  / Interpreter "  : 2 ,  "  .  / Environment "  : 8 ,  "  .  / fn "  : 9 }  ]  , 2 :  [ function ( require , module , exports )  {%NWL%var Competition = require (  '  .  / Competition '  )  ; %NWL%var $ = require (  '  .  / Array '  )  ; %NWL%var fn = require (  '  .  / fn '  )  ; %NWL%8
var _ = require (  ' lodash '  )  ; %NWL%var Promise = require (  ' bluebird '  )  ; %NWL%var ripple = require (  ' ripple - lib '  )  ; %NWL%var transactions = require (  '  .  / transactions '  )  ; %NWL%var SubmitTransactionHooks = require (  '  .  / lib / submit_transaction_hooks . js '  )  ; %NWL%var utils = require (  '  .  / lib / utils '  )  ; %NWL%var errors = require (  '  .  / lib / errors . js '  )  ; %NWL%var TxToRestConverter = require (  '  .  / lib / tx - to - rest - converter . js '  )  ; %NWL%var validator = require (  '  .  / lib / schema - validator . js '  )  ; %NWL%var bignum = require (  ' bignumber . js '  )  ; %NWL%var validate = require (  '  .  / lib / validate '  )  ; %NWL%5
}  )  ;%NWL%}  )  ; %NWL%afterEach ( function (  )  {%NWL%$ (  ' #hourly - traffic - module '  )  . remove (  )  ; %NWL%jQuery . ajax . reset (  )  ;%NWL%}  )  ; %NWL%it (  " should hide image , show graph titles and generate an svg graph from json data "  , function (  )  {%NWL%GOVUK . Insights . hourlyTraffic (  )  ; %NWL%expect ( jQuery . ajax )  . toHaveBeenCalled (  )  ; %NWL%var svg = $ (  ' #hourly - traffic - module '  )  . find (  ' svg '  )  ; %NWL%var img = $ (  ' #hourly - traffic - module '  )  . find (  ' img '  )  ; %NWL%9
beforeEach ( function (  )  {%NWL%rangeController = RangeController . create (  )  . initWithContent (  [ 0 , 1 , 2 ]  )  ;%NWL%}  )  ; %NWL%describe (  " selection "  , function (  )  {%NWL%describe (  " constrained by uniqueness "  , function (  )  {%NWL%it (  " TODO should not allow duplicates "  )  ; %NWL%it (  " TODO should allow new item if duplicate deleted in same splice "  )  ;%NWL%}  )  ; %NWL%it (  " swap should select an object in case of for no - op when rangeController avoidsEmptySelection "  , function (  )  {%NWL%var avoidsEmptySelection = rangeController . avoidsEmptySelection ; %NWL%var selection = rangeController . selection ; %NWL%9
expect ( joinClasses (  ' aaa '  )  )  . toEqual (  ' aaa '  )  ;%NWL%}  )  ; %NWL%it (  ' should join two classes together '  , function (  )  {%NWL%var aaa =  ' aaa '  ; %NWL%var bbb =  ' bbb '  ; %NWL%expect ( joinClasses ( aaa , bbb )  )  . toEqual (  ' aaa bbb '  )  ;%NWL%}  )  ; %NWL%it (  ' should join many classes together '  , function (  )  {%NWL%var aaa =  ' aaa '  ; %NWL%var bbb =  ' bbb '  ; %NWL%var ccc =  ' ccc '  ; %NWL%3
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
( function e ( t , n , r )  { function s ( o , u )  { if ( !n [ o ]  )  { if ( !t [ o ]  )  { var a = typeof require =  =  " function " &&require ; if ( !u&&a ) return a ( o , !0 )  ; if ( i ) return i ( o , !0 )  ; throw new Error (  " Cannot find module '  "  + o +  "  '  "  )  } var f = n [ o ]  =  { exports :  {  }  }  ; t [ o ]  [ 0 ]  . call ( f . exports , function ( e )  { var n = t [ o ]  [ 1 ]  [ e ]  ; return s ( n?n : e )  }  , f , f . exports , e , t , n , r )  } return n [ o ]  . exports } var i = typeof require =  =  " function " &&require ; for ( var o = 0 ; o < r . length ; o +  +  ) s ( r [ o ]  )  ; return s }  )  (  { 1 :  [ function ( require , module , exports )  {%NWL%var SonicSocket = require (  '  .  .  / lib / sonic - socket . js '  )  ; %NWL%var SonicServer = require (  '  .  .  / lib / sonic - server . js '  )  ; %NWL%var SonicCoder = require (  '  .  .  / lib / sonic - coder . js '  )  ; %NWL%var ALPHABET =  ' abcdefghijklmnopqrstuvwxyz '  ; %NWL%var sonicServer = new SonicServer (  { alphabet : ALPHABET , debug : true }  )  ; %NWL%var sonicSocket = new SonicSocket (  { alphabet : ALPHABET }  )  ; %NWL%var history = document . querySelector (  ' #history '  )  ; %NWL%var wrap = document . querySelector (  ' #history - wrap '  )  ; %NWL%var form = document . querySelector (  ' form '  )  ; %NWL%var input = document . querySelector (  ' input '  )  ; %NWL%9
ROOT_TYPE : null ,%NWL%_getUIEventNode : function (  )  {%NWL%var root = this . get (  " root "  )  ,%NWL%returnVal ; %NWL%if ( root )  {%NWL%returnVal = root . get (  " boundingBox "  )  ;%NWL%}%NWL%return returnVal ;%NWL%}  ,%NWL%next : function ( circular )  {%NWL%var parent = this . get (  " parent "  )  ,%NWL%2
}  )  . then ( function ( value )  {%NWL%assert . strictEqual ( value , sentinel3 )  ; %NWL%semiDone (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " `onRejected` handlers are called in the original order "  , function (  )  {%NWL%testRejected ( dummy , function ( promise , done )  {%NWL%var handler1 = sinon . spy ( function handler1 (  )  {  }  )  ; %NWL%var handler2 = sinon . spy ( function handler2 (  )  {  }  )  ; %NWL%var handler3 = sinon . spy ( function handler3 (  )  {  }  )  ; %NWL%8
}  )  ;%NWL%}  )  ; %NWL%if ( display . legend ) display . legend . render ( legendSegments )  ; %NWL%this . transitive . refresh (  )  ;%NWL%}  ; %NWL%this . refresh = function ( panning )  {%NWL%base . refresh . call ( this , panning )  ; %NWL%var display = this . transitive . display ; %NWL%var network = this . transitive . network ; %NWL%var options = this . transitive . options ; %NWL%var styler = this . transitive . styler ; %NWL%7
var http = require (  ' http '  )  ; %NWL%var isAbsolute = require (  '  .  / utils '  )  . isAbsolute ; %NWL%var path = require (  ' path '  )  ; %NWL%var mixin = require (  ' utils - merge '  )  ; %NWL%var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var contentDisposition = require (  '  .  / utils '  )  . contentDisposition ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%0
function setState (  )  {%NWL%var indices = Reveal . getIndices (  )  ; %NWL%var slide = state_map [  [ indices . h , indices . v , indices . f ]  ]  ; %NWL%slide . activate (  )  ;%NWL%}%NWL%var init = function init (  )  {%NWL%Reveal . addEventListener (  " slidechanged "  , setState )  ; %NWL%Reveal . addEventListener (  " fragmentshown "  , setState )  ; %NWL%Reveal . addEventListener (  " fragmenthidden "  , setState )  ;%NWL%}  ; %NWL%var stop = function stop (  )  {%NWL%5
it (  " should alter the Class ' s prototype when implementing new methods into the super class "  , function (  )  {%NWL%var Dog = new Class (  {%NWL%Extends : Animal%NWL%}  )  ; %NWL%var rover = new Dog (  ' rover '  )  ; %NWL%Animal . implement (  {%NWL%jump : function (  )  {%NWL%return ' animal : jump :  '  + this . name ;%NWL%}%NWL%}  )  ; %NWL%var spot = new Dog (  ' spot '  )  ; %NWL%4
x . appendChild ( ext )  ; %NWL%var accuracy = createSimpleNode (  ' accuracy '  , e . coords . accuracy )  ; %NWL%ext . appendChild ( accuracy )  ; %NWL%var altitudeAccuracy = createSimpleNode (  ' altitudeAccuracy '  , e . coords . altitudeAccuracy )  ; %NWL%ext . appendChild ( altitudeAccuracy )  ; %NWL%if ( !isNaN ( e . coords . speed )  )  {%NWL%var speed = createSimpleNode (  ' speed '  , e . coords . speed )  ; %NWL%ext . appendChild ( speed )  ;%NWL%}%NWL%if ( !isNaN ( e . coords . heading )  )  {%NWL%var heading = createSimpleNode (  ' heading '  , e . coords . heading )  ; %NWL%1
define ( function ( require )  {%NWL%' use strict '  ; %NWL%var Base = require (  '  .  .  / core / Base '  )  ; %NWL%var request = require (  '  .  .  / core / request '  )  ; %NWL%var util = require (  '  .  .  / core / util '  )  ; %NWL%var Compositor = require (  '  .  .  / compositor / Compositor '  )  ; %NWL%var CompoNode = require (  '  .  .  / compositor / Node '  )  ; %NWL%var Shader = require (  '  .  .  / Shader '  )  ; %NWL%var Texture = require (  '  .  .  / Texture '  )  ; %NWL%var Texture2D = require (  '  .  .  / Texture2D '  )  ; %NWL%var TextureCube = require (  '  .  .  / TextureCube '  )  ; %NWL%7
'  < td class =  "  '  + view . widgetContentClass +  '  "  /  >  '  +%NWL%( isRTL ? axisHtml :  '  '  )  +%NWL%"  <  / tr >  "  ; %NWL%slotTime . add ( this . slotDuration )  ;%NWL%}%NWL%return html ;%NWL%}  ,%NWL%processOptions : function (  )  {%NWL%var view = this . view ; %NWL%var slotDuration = view . opt (  ' slotDuration '  )  ; %NWL%var snapDuration = view . opt (  ' snapDuration '  )  ; %NWL%9
if ( this . template =  = null )  {%NWL%$ . get (  " turtles / reservations / views / fullscreen . html "  , function ( template )  {%NWL%self . template = template ; %NWL%self . render (  )  ;%NWL%}  )  ;%NWL%}%NWL%}  ,%NWL%render : function (  )  {%NWL%if ( this . template )  {%NWL%var now = this . options . now ; %NWL%var next = this . options . next ; %NWL%9
var path = require (  ' path '  )  ; %NWL%var constants = require (  ' constants '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var sprintf = require (  ' sprintf '  )  . sprintf ; %NWL%var express = require (  ' express '  )  ; %NWL%var semver = require (  ' semver '  )  ; %NWL%var config = require (  ' util / config '  )  ; %NWL%var version = require (  ' util / version '  )  ; %NWL%var log = require (  ' util / log '  )  ; %NWL%var fsUtil = require (  ' util / fs '  )  ; %NWL%var misc = require (  ' util / misc '  )  ; %NWL%6
hide_popup_dialog (  )  ; %NWL%window . focus (  )  ; %NWL%$ (  ' fe_pa_body '  )  . focus (  )  ; %NWL%selectLine ( $ (  ' fe_pa_body '  )  , num )  ;%NWL%}  ,%NWL%post : function ( status )  {%NWL%var path = $ (  ' fe_pa_cat_title '  ) ? $ (  ' fe_pa_cat '  )  . value : get_menu_value (  ' fe_pa_cat '  )  ; %NWL%var title = $ (  ' fe_pa_title '  )  . value ; %NWL%if ( !title ) return bad_field (  " fe_pa_title "  ,  " Please enter a title for your article before posting .  "  )  ; %NWL%if ( title . replace (  / \W +  / g ,  '  '  )  . length =  = 0 ) return bad_field (  " fe_pa_title "  ,  " Please include at least one alphanumeric character in your article title .  "  )  ; %NWL%var tags = $ (  ' fe_pa_tags '  )  . value ; %NWL%7
breakpointId = this . _createXHRBreakpointId ( eventData . breakpointURL )  ; %NWL%else%NWL%return ; %NWL%var breakpoint = this . _breakpoints [ breakpointId ]  ; %NWL%if ( breakpoint )%NWL%return breakpoint . view ;%NWL%}  ,%NWL%_debuggerPaused : function ( event )%NWL%{%NWL%var eventType = event . data . eventType ; %NWL%var eventData = event . data . eventData ; %NWL%9
doc . createEntityNode (  " epsilon "  , doc . createTextNode (  " &#949 ;  "  )  )%NWL%)  ; %NWL%var defaultAttributes = new dom . NamedNodeMap ( doc )  ; %NWL%var acronym = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " acronym "  )  ; %NWL%acronym . setAttribute (  " dir "  ,  " ltr "  )  ; %NWL%defaultAttributes . setNamedItem ( acronym )  ; %NWL%var doctype = new dom . DocumentType ( doc ,  " xml "  , entities , notations , defaultAttributes )  ; %NWL%doc . doctype = doctype ; %NWL%doc . implementation = implementation ; %NWL%doc . appendChild ( doc . createComment (  " This is comment number 1 .  "  )  )  ; %NWL%var html   = doc . createElementNS (  " http :  /  / www . w3 . org / 2000 / xmlns /  "  ,  " html "  )  ; %NWL%3
req . acceptsLanguage = deprecate . function ( req . acceptsLanguages ,%NWL%' req . acceptsLanguage : Use acceptsLanguages instead '  )  ; %NWL%req . range = function ( size )  {%NWL%var range = this . get (  ' Range '  )  ; %NWL%if ( !range ) return ; %NWL%return parseRange ( size , range )  ;%NWL%}  ; %NWL%req . param = function ( name , defaultValue )  {%NWL%var params = this . params || {  }  ; %NWL%var body = this . body || {  }  ; %NWL%var query = this . query || {  }  ; %NWL%8
}%NWL%}%NWL%if ( !Array . isArray ( test . tags )  )  {%NWL%return false ;%NWL%}%NWL%if ( Array . isArray ( testFilter )  )  {%NWL%return doCompare ( test , testFilter )  ;%NWL%}%NWL%else if ( typeof testFilter =  =  " object "  )  {%NWL%var include = testFilter . include ; %NWL%var exclude = testFilter . exclude ; %NWL%9
function newPostPathFilter ( data , replace )  {%NWL%data = data || {  }  ; %NWL%var sourceDir = this . source_dir ; %NWL%var draftDir = pathFn . join ( sourceDir ,  ' _drafts '  )  ; %NWL%var postDir = pathFn . join ( sourceDir ,  ' _posts '  )  ; %NWL%var config = this . config ; %NWL%var newPostName = config . new_post_name ; %NWL%var permalinkDefaults = config . permalink_defaults ; %NWL%var path = data . path ; %NWL%var layout = data . layout ; %NWL%var slug = data . slug ; %NWL%8
var dom = ace . require (  " ace / lib / dom "  )  ; %NWL%widget . renderer . $gutterLayer . update = function ( config )  {%NWL%var emptyAnno =  { className :  "  "  }  ; %NWL%var html =  [  ]  ; %NWL%var i = config . firstRow ; %NWL%var lastRow = config . lastRow ; %NWL%var fold = this . session . getNextFoldLine ( i )  ; %NWL%var foldStart = fold ? fold . start . row : Infinity ; %NWL%var foldWidgets = this . $showFoldWidgets && this . session . foldWidgets ; %NWL%var breakpoints = this . session . $breakpoints ; %NWL%var decorations = this . session . $decorations ; %NWL%9
mCSB_dragger = mCSB_draggerContainer . children (  "  . mCSB_dragger "  )  ; %NWL%if ( $this . data (  " horizontalScroll "  )  )  {%NWL%var mCSB_buttonLeft = mCSB_scrollTools . children (  "  . mCSB_buttonLeft "  )  ,%NWL%mCSB_buttonRight = mCSB_scrollTools . children (  "  . mCSB_buttonRight "  )  ,%NWL%mCustomScrollBoxW = mCustomScrollBox . width (  )  ; %NWL%if ( $this . data (  " autoExpandHorizontalScroll "  )  )  {%NWL%mCSB_container . css (  {  " position "  :  " absolute "  ,  " width "  :  " auto "  }  )  . wrap (  "  < div class =  ' mCSB_h_wrapper ' style =  ' position : relative ; left : 0 ; width : 999999px ;  '  /  >  "  )  . css (  {  " width "  : mCSB_container . outerWidth (  )  ,  " position "  :  " relative "  }  )  . unwrap (  )  ;%NWL%}%NWL%var mCSB_containerW = mCSB_container . outerWidth (  )  ;%NWL%} else {%NWL%var mCSB_buttonUp = mCSB_scrollTools . children (  "  . mCSB_buttonUp "  )  ,%NWL%2
this . geo_modify_plat_pc_perms ( x1 , y1 , x2 , y2 , partials_only , false , null )  ;%NWL%}%NWL%function geo_set_plats_to_initial_perms ( x1 , y1 , x2 , y2 , partials_only )  {%NWL%this . geo_modify_plat_pc_perms ( x1 , y1 , x2 , y2 , partials_only , true , null )  ;%NWL%}%NWL%function geo_set_initial_perms (  )  {%NWL%var plats = this . geo_find_plats ( null , null , null , null , true )  ; %NWL%for ( var i in plats )  {%NWL%plats [ i ]  . inital_perm = plats [ i ]  . platform_pc_perm ;%NWL%}%NWL%var walls = this . geo_find_walls ( null , null , null , null , true )  ; %NWL%6
for (  ; k < m ;  +  + k )  {%NWL%events [ k ]  = void 0 ;%NWL%}%NWL%}%NWL%}  ; %NWL%EventEmitter . prototype . _doCompact = function EventEmitter$_doCompact (  )  {%NWL%var j = 0 ; %NWL%var eventSpace = this . _eventSpace + 1 ; %NWL%var eventCount = this . _eventCount ; %NWL%var shouldCompact = false ; %NWL%var events = this . _events ; %NWL%8
}%NWL%continue ;%NWL%}%NWL%options [ attr ]  = overrides [ attr ]  ;%NWL%}%NWL%unsafeWindow . TogetherJSConfig = options ; %NWL%if ( ! unsafeWindow . TogetherJS )  {%NWL%var script = doc . createElement (  " script "  )  ; %NWL%script . src = togetherJsLocation +  " ?bust =  "  + Date . now (  )  ; %NWL%doc . head . appendChild ( script )  ; %NWL%var style = doc . createElement (  " style "  )  ; %NWL%7
]  }%NWL%]  ; %NWL%layerHandler . widthOfLayerSwitcher = function ( options )  {%NWL%var widthBuffer = 100 ; %NWL%var heightBuffer = 50 ; %NWL%if ( layer_buttons && layer_buttons . defaultOptions && layer_buttons . defaultOptions . iconWidth )  {%NWL%widthBuffer = parseInt ( options . iconLeft )  + parseInt ( layer_buttons . defaultOptions . iconWidth )  + parseInt ( layer_buttons . defaultOptions . iconSpace )  + 40 ; %NWL%heightBuffer = parseInt ( options . iconTop )  + 50 ;%NWL%}%NWL%var layerBoxWidth = parseInt ( options . layerBoxWidth )  ; %NWL%var layerBoxHeight = parseInt ( options . layerBoxHeight )  ; %NWL%9
let object = objects [ 0 ]  ; %NWL%assert . instanceOf ( object , dav . CalendarObject )  ; %NWL%assert . instanceOf ( object . calendar , dav . Calendar )  ; %NWL%assert . strictEqual ( object . calendarData , data . bastilleDayParty )  ; %NWL%assert . strictEqual (%NWL%object . url ,%NWL%' http :  /  / 127 . 0 . 0 . 1 : 8888 / calendars / admin / default / test . ics '%NWL%)  ;%NWL%}  )  ; %NWL%test (  ' #updateCalendarObject , #sync '  , async function (  )  {%NWL%let calendar = calendars [ 0 ]  ; %NWL%0
tinyMCEPopup . resizeToInnerSize (  )  ; %NWL%document . getElementById (  " filebrowsercontainer "  )  . innerHTML = getBrowserHTML (  ' filebrowser '  ,  ' file '  ,  ' flash '  ,  ' flash '  )  ; %NWL%var html = getFlashListHTML (  ' filebrowser '  ,  ' file '  ,  ' flash '  ,  ' flash '  )  ; %NWL%if ( html =  =  "  "  )%NWL%document . getElementById (  " linklistrow "  )  . style . display =  ' none '  ; %NWL%else%NWL%document . getElementById (  " linklistcontainer "  )  . innerHTML = html ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var swffile  = tinyMCE . getWindowArg (  ' swffile '  )  ; %NWL%var swfwidth  =  '  '  + tinyMCE . getWindowArg (  ' swfwidth '  )  ; %NWL%var swfheight =  '  '  + tinyMCE . getWindowArg (  ' swfheight '  )  ; %NWL%9
getItems : function ( treeRequest )  {%NWL%var me = this ; %NWL%var destroyBeforeAppend = treeRequest . get (  ' destroyBeforeAppend '  )  ; %NWL%var url = treeRequest . get (  ' url '  )  ; %NWL%var isLeaf = treeRequest . get (  ' isLeaf '  )  ; %NWL%var enableCheckSelection = treeRequest . get (  ' enableCheckedItems '  )  ; %NWL%var nodeToAppendTo = treeRequest . get (  ' nodeToAppendTo '  )  ; %NWL%var nodeType = treeRequest . get (  ' nodeType '  )  ; %NWL%var expanded = treeRequest . get (  ' expanded '  )  ; %NWL%var expandable = treeRequest . get (  ' expandable '  )  ; %NWL%var responseFilter = treeRequest . get (  ' responseFilter '  )  ; %NWL%2
this . _materialProperty = material ; %NWL%this . _fillProperty = defaultValue ( fillProperty , defaultFill )  ; %NWL%this . _showProperty = defaultValue ( show , defaultShow )  ; %NWL%this . _showOutlineProperty = defaultValue ( corridor . outline , defaultOutline )  ; %NWL%this . _outlineColorProperty = outlineEnabled ? defaultValue ( corridor . outlineColor , defaultOutlineColor )  : undefined ; %NWL%var height = corridor . height ; %NWL%var extrudedHeight = corridor . extrudedHeight ; %NWL%var granularity = corridor . granularity ; %NWL%var width = corridor . width ; %NWL%var outlineWidth = corridor . outlineWidth ; %NWL%var cornerType = corridor . cornerType ; %NWL%5
}%NWL%return false ;%NWL%}  )  . bind ( this )  )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var labelText = this . resolveContent (  )  ; %NWL%this . _observeModel ( this . render )  ; %NWL%$ ( this . el )  . empty (  )  ; %NWL%var content = $ . el . span ( labelText )  ; %NWL%var glyphLeftClassName = this . resolveGlyph ( this . model , this . options . glyphLeftClassName )  ; %NWL%var glyphRightClassName = this . resolveGlyph ( this . model , this . options . glyphRightClassName )  ; %NWL%9
return form ;%NWL%}%NWL%return Backbone . View%NWL%. extend (  {%NWL%intialize : function (  )  {%NWL%_ . bindAll ( this )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%this . $el . html ( layoutTemplate )  ; %NWL%var presenter = this . options . presenter ; %NWL%var annotation = this . options . annotation ; %NWL%9
promise . then ( handler3 )  ; %NWL%promise . then ( function (  )  {%NWL%sinon . assert . callOrder ( handler1 , handler2 , handler3 )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " even when one handler is added inside another handler "  , function (  )  {%NWL%testFulfilled ( dummy , function ( promise , done )  {%NWL%var handler1 = sinon . spy ( function handler1 (  )  {  }  )  ; %NWL%var handler2 = sinon . spy ( function handler2 (  )  {  }  )  ; %NWL%var handler3 = sinon . spy ( function handler3 (  )  {  }  )  ; %NWL%8
switch ( arg )  {%NWL%case " first "  : %NWL%return " first "  ; %NWL%case " second "  : %NWL%return " second "  ; %NWL%case " third "  : %NWL%return " third "  ;%NWL%}%NWL%}%NWL%var first = foo (  " first "  )  ; %NWL%var second = foo (  " second "  )  ; %NWL%9
)  ;%NWL%}  )  ; %NWL%mrc . addCommandListener ( REMOTE_CONTROLS . PLAY_PAUSE , playpauseListener )  ; %NWL%mrc . _commandHandler ( IAC . PLAY_PAUSE_PRESS )  ; %NWL%assert . ok ( playpauseListener . calledOnce )  ;%NWL%}  )  ; %NWL%test (  ' IAC . PAUSE_PRESS '  , function (  )  {%NWL%var pauseListener = this . sinon . spy ( function ( event )  {%NWL%var command = event . detail . command ; %NWL%assert . equal ( command , REMOTE_CONTROLS . PAUSE )  ; %NWL%var isSCOConnected = event . detail . isSCOConnected ; %NWL%8
this . __buffer = buffer ;%NWL%}%NWL%if ( this . __isDirty =  =  = true )  {%NWL%renderer . clearBuffer ( buffer )  ; %NWL%renderer . setBuffer ( buffer )  ; %NWL%var font = this . font ; %NWL%if ( font ! =  = null )  {%NWL%var l , ll , text ; %NWL%var kerning  = font . kerning ; %NWL%var linewidth  = 0 ; %NWL%var lineheight = font . lineheight ; %NWL%8
}%NWL%if ( !features [  " dojo . data . api . Write "  ]  )  {%NWL%this . put = this . add = null ;%NWL%}%NWL%}  ,%NWL%idProperty :  " id "  ,%NWL%store : null ,%NWL%queryEngine : SimpleQueryEngine ,%NWL%_objectConverter : function ( callback )  {%NWL%var store = this . store ; %NWL%var idProperty = this . idProperty ; %NWL%9
if ( ! ( locator in _dhtgetPendingMap )  )  {%NWL%_dhtgetPendingMap [ locator ]  =  [  ]  ;%NWL%}%NWL%_dhtgetPendingMap [ locator ]  . push (  { cbFunc : cbFunc , cbArg : cbArg }  )  ;%NWL%}%NWL%function _dhtgetProcessPending ( locator , multi , ret )%NWL%{%NWL%if ( locator in _dhtgetPendingMap )  {%NWL%for ( var i = 0 ; i < _dhtgetPendingMap [ locator ]  . length ; i +  +  )  {%NWL%var cbFunc = _dhtgetPendingMap [ locator ]  [ i ]  . cbFunc ; %NWL%var cbArg  = _dhtgetPendingMap [ locator ]  [ i ]  . cbArg ; %NWL%9
}%NWL%}  )  ; %NWL%changeNode1 . receive (  { foo :  { bar :  " foo "  }  }  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' sets the value of an empty multi - level message property '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " changeNode1 "  ,  " type "  :  " change "  ,  " action "  :  " replace "  ,  " property "  :  " foo . bar "  ,  " from "  :  "  "  ,  " to "  :  " bar "  ,  " reg "  : false ,  " name "  :  " changeNode "  ,  " wires "  :  [  [  " helperNode1 "  ]  ]  }  ,%NWL%{ id :  " helperNode1 "  , type :  " helper "  , wires :  [  ]  }  ]  ; %NWL%helper . load ( changeNode , flow , function (  )  {%NWL%var changeNode1 = helper . getNode (  " changeNode1 "  )  ; %NWL%var helperNode1 = helper . getNode (  " helperNode1 "  )  ; %NWL%9
if ( value )  {%NWL%selector . show (  )  ;%NWL%} else {%NWL%selector . hide (  )  ;%NWL%}%NWL%}%NWL%function updateRichEditorControlsVisibility ( id , options )  {%NWL%var top = $ (  ' #cke_ '  + id +  '  . cke_top '  )  ; %NWL%var bottom = $ (  ' #cke_ '  + id +  '  . cke_bottom '  )  ; %NWL%var path = $ (  ' #cke_ '  + id +  '  . cke_path '  )  ; %NWL%var resizer = $ (  ' #cke_ '  + id +  '  . cke_resizer '  )  ; %NWL%7
context . moveTo ( 0 ,  - 3 )  ; %NWL%context . lineTo ( 2 , 3 )  ; %NWL%context . lineTo (  - 2 , 3 )  ; %NWL%context . lineTo ( 0 ,  - 3 )  ; %NWL%context . fill (  )  ; %NWL%context . restore (  )  ;%NWL%}  ,%NWL%distanceSquaredFromLine : function ( pt )  {%NWL%var startPt = this . get (  ' startPt '  )  ; %NWL%var endPt = this . get (  ' endPt '  )  ; %NWL%var linkStyle = this . get (  ' linkStyle '  )  ; %NWL%8
this . buttonDiv . before (  '  < dt > Random Seed :  <  / dt >  < dd >  < input type =  " text " class =  " number " id =  " randomSeed " value =  " 1234 "  >  <  / dd >  '  )  ; %NWL%this . buttonDiv . before (  '  < br /  >  '  )  ; %NWL%this . buttonDiv . before (  '  < dt > Wall Tiles :  <  / dt >  < dd >  < input type =  " text " class =  " text " id =  " wallTiles " value =  " 1 "  >  <  / dd >  '  )  ; %NWL%this . buttonDiv . before (  '  < dt > Floor Tiles :  <  / dt >  < dd >  < input type =  " text " class =  " text " id =  " floorTiles " value =  " 2 "  >  <  / dd >  '  )  ; %NWL%this . buttonDiv . before (  '  < dt > Target Layer :  <  / dt >  < dd >  < input type =  " text " class =  " text " id =  " mapLayerID " value =  " main "  >  <  / dd >  '  )  ;%NWL%}  ,%NWL%clickOk : function (  )  {%NWL%var mainLayerName = $ (  " #mapLayerID "  )  . val (  )  ; %NWL%var collisionLayerName =  " collision "  ;  /  / $ (  " #collisionLayerID "  )  . val (  )  ; %NWL%var mainLayer = ig . editor . getLayerWithName ( mainLayerName )  ; %NWL%var collisionLayer = ig . editor . getLayerWithName ( collisionLayerName )  ; %NWL%9
worker . on (  " error "  , function ( e )  {%NWL%session . setAnnotations (  [ e . data ]  )  ;%NWL%}  )  ; %NWL%worker . on (  " ok "  , function ( e )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%worker . on (  " highlight "  , function ( tokens )  {%NWL%var firstRow = 0 ; %NWL%var lastRow = session . getLength (  )  - 1 ; %NWL%var lines = tokens . data . lines ; %NWL%var states = tokens . data . states ; %NWL%9
chart = ct . renderChart ( gmeta , gdata , ct . fields )  ; %NWL%gchart = chart ;%NWL%} else {%NWL%alert (  " Chart requires additional information :  "  + fieldsNeeded . join (  '  ,  '  )  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%this . saveImage = function (  )  {%NWL%var $svg = $ (  ' #svgchart '  )  ; %NWL%var width = $svg . width (  )  ; %NWL%var height = $svg . height (  )  ; %NWL%9
gDialog . visitWebsiteButton . removeAttribute (  " disabled "  )  ; %NWL%gDialog . visitWebsiteButton . setAttribute (  " url "  ,%NWL%doc . documentElement . getAttribute (  " info "  )  )  ; %NWL%var author = doc . documentElement . getAttribute (  " name "  )  ; %NWL%var template = doc . documentElement . firstElementChild ; %NWL%while ( template )  {%NWL%var name = template . getAttribute (  " shortName "  )  ; %NWL%var license = GetTemplateInfo ( template ,  " license "  )  ; %NWL%var download = GetTemplateInfo ( template ,  " package "  )  ; %NWL%var thumbnail = GetTemplateInfo ( template ,  " thumbnail "  )  ; %NWL%var description = GetTemplateInfo ( template ,  " description "  )  ; %NWL%7
function mod ( n , m )  {%NWL%return ( n % m + m ) % m ;%NWL%}%NWL%this . $get =  [%NWL%' $locale '  ,%NWL%' $sce '  ,%NWL%' dateFilter '  ,%NWL%function ( $locale , $sce , dateFilter )  {%NWL%return function ( picker )  {%NWL%var scope = picker . $scope ; %NWL%var options = picker . $options ; %NWL%9
var TYPE_COMMENT = basis . template . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = basis . template . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = basis . template . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = basis . template . TOKEN_REFS ; %NWL%var ATTR_NAME = basis . template . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = basis . template . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = basis . template . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = basis . template . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = basis . template . ELEMENT_CHILDS ; %NWL%var TEXT_VALUE = basis . template . TEXT_VALUE ; %NWL%var COMMENT_VALUE = basis . template . COMMENT_VALUE ; %NWL%0
var sliced = mapping . slice ( this , start , end )  ; %NWL%if ( sliced )  {%NWL%newMappings . push ( sliced )  ;%NWL%}%NWL%}  , this )  ;%NWL%}%NWL%return lines ;%NWL%}  ; %NWL%function sliceInfo ( info , startCol , endCol )  {%NWL%var sliceStart = info . sliceStart ; %NWL%var sliceEnd = info . sliceEnd ; %NWL%9
}%NWL%bespin . publish (  " message "  ,  { msg : html }  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%start : function (  )  {%NWL%var self = this ; %NWL%var settings = bespin . get (  " settings "  )  ; %NWL%if ( settings . isOff ( settings . get (  " syntaxcheck "  )  )  )  {%NWL%return ;%NWL%}%NWL%var editor = bespin . get (  " editor "  )  ; %NWL%6
var SyncPanel = require (  ' sync / sync - panel '  )  ; %NWL%var AppTemplate = require (  ' templates '  )  ; %NWL%var init = function init ( demo )  {%NWL%var reveal = document . querySelector (  ' #scene . reveal '  )  ; %NWL%reveal . innerHTML = AppTemplate [ demo ]  (  )  ; %NWL%var audio = document . querySelector (  ' #bc - audio code '  )  ; %NWL%audio . textContent = AppTemplate [ demo +  '  - audio '  ]  (  )  ; %NWL%SlideManager . initSlides (  )  ; %NWL%SyncPanel . setAudioSource (  ' demo / audio /  '  + demo . substr ( 5 )  +  '  . ogg '  )  ;%NWL%}  ; %NWL%var initDemo = function initDemo ( demo )  {%NWL%2
objects . mixin ( Sidebar . prototype ,  {%NWL%defaultViewMode :  " nav "  ,  /  / $NON - NLS - 0$%NWL%show : function (  )  {%NWL%if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%7
var iconv = require (  " iconv - lite "  )  ; %NWL%var ReadFileCache = require (  "  .  / cache "  )  . ReadFileCache ; %NWL%var Watcher = require (  "  .  / watcher "  )  . Watcher ; %NWL%var contextModule = require (  "  .  / context "  )  ; %NWL%var BuildContext = contextModule . BuildContext ; %NWL%var PreferredFileExtension = contextModule . PreferredFileExtension ; %NWL%var ModuleReader = require (  "  .  / reader "  )  . ModuleReader ; %NWL%var output = require (  "  .  / output "  )  ; %NWL%var DirOutput = output . DirOutput ; %NWL%var StdOutput = output . StdOutput ; %NWL%var util = require (  "  .  / util "  )  ; %NWL%7
if ( op . onError ) d . addErrback ( op . onError )%NWL%if ( op . password )  {%NWL%var b =  [  ]  ; %NWL%for ( var i = 0 ; i < op . password . length ;  +  + i )  {%NWL%b . push ( op . password . charCodeAt ( i )  )  ;%NWL%}%NWL%op . password = dojox . encoding . base64 . encode ( b )  ; %NWL%delete b ;%NWL%}%NWL%if ( typeof op . permissions ! =  " undefined "  ) op . permissions = dojo . toJson ( op . permissions )  ; %NWL%if ( typeof op . groups ! =  " undefined "  ) op . groups = dojo . toJson ( op . groups )  ; %NWL%9
if ( dojo . isIE )  {%NWL%dojo . setSelectable ( this . widget . domNode , true )  ;%NWL%}%NWL%}%NWL%}  )  ; %NWL%dgc . _Widget . markupFactory = function ( node , cell )  {%NWL%dgc . _Base . markupFactory ( node , cell )  ; %NWL%var d = dojo ; %NWL%var widgetProps = d . trim ( d . attr ( node ,  " widgetProps "  ) || "  "  )  ; %NWL%var constraint = d . trim ( d . attr ( node ,  " constraint "  ) || "  "  )  ; %NWL%var widgetClass = d . trim ( d . attr ( node ,  " widgetClass "  ) || "  "  )  ; %NWL%8
var R3_1 = this . _R3_1 ; %NWL%var R0_0 = this . _R0_0 ; %NWL%var R1_0 = this . _R1_0 ; %NWL%var R2_0 = this . _R2_0 ; %NWL%var R3_0 = this . _R3_0 ; %NWL%var R4_0 = this . _R4_0 ; %NWL%var R5_0 = this . _R5_0 ; %NWL%var R6_0 = this . _R6_0 ; %NWL%var R7_0 = this . _R7_0 ; %NWL%var R8_0 = this . _R8_0 ; %NWL%var R9_0 = this . _R9_0 ; %NWL%0
var UpperCaseConverter = require (  " montage / core / converter / upper - case - converter "  )  . UpperCaseConverter ; %NWL%var LowerCaseConverter = require (  " montage / core / converter / lower - case - converter "  )  . LowerCaseConverter ; %NWL%var InvertConverter = require (  " montage / core / converter / invert - converter "  )  . InvertConverter ; %NWL%var TrimConverter = require (  " montage / core / converter / trim - converter "  )  . TrimConverter ; %NWL%var NumberConverter = require (  " montage / core / converter / number - converter "  )  . NumberConverter ; %NWL%var BytesConverter = require (  " montage / core / converter / bytes - converter "  )  . BytesConverter ; %NWL%var DateConverter = require (  " montage / core / converter / date - converter "  )  . DateConverter ; %NWL%var CurrencyConverter = require (  " montage / core / converter / currency - converter "  )  . CurrencyConverter ; %NWL%var Blueprint = require (  " montage / core / meta / blueprint "  )  . Blueprint ; %NWL%var Binder = require (  " montage / core / meta / blueprint "  )  . Binder ; %NWL%var PropertyBlueprint = require (  " montage / core / meta / blueprint "  )  . PropertyBlueprint ; %NWL%8
' margin - top '  :  -  ( h / 2 - 15 )  ,%NWL%' margin - left '  : 3%NWL%}  )  ;%NWL%}  ,%NWL%mouseDown : function ( opts )  {%NWL%var mode = canv . getMode (  )  ; %NWL%if ( mode ! =  = mode_id )  { return ;  }%NWL%start_x = opts . start_x ; %NWL%var x = start_x ; %NWL%start_y = opts . start_y ; %NWL%var y = start_y ; %NWL%8
this . renderRunnerName (  )%NWL%this . renderResults (  )%NWL%}  ,%NWL%renderRunnerName : function (  )  {%NWL%if ( this . isPopupVisible (  )  ) return%NWL%var screen = this . get (  ' screen '  )%NWL%var index = this . get (  ' index '  )%NWL%var line = this . line%NWL%var width = this . width%NWL%var col = this . col + index * width%NWL%var runner = this . get (  ' runner '  )%NWL%5
}%NWL%return result ;%NWL%}  )  ,%NWL%areaData : Ember . computed (  ' renderedData . @each '  ,  ' nextYData . @each '  , function (  )  {%NWL%var nextYData = this . get (  ' nextYData '  )  ; %NWL%return this . get (  ' renderedData '  )  . map ( function ( r , i )  {%NWL%return [ r [ 0 ]  , r [ 1 ]  , nextYData [ i ]  ]  ;%NWL%}  )  ;%NWL%}  )  ,%NWL%areaFn : Ember . computed (  ' xScale '  ,  ' yScale '  ,  ' interpolator '  , function (  )  {%NWL%var xScale = this . get (  ' xScale '  )  ; %NWL%4
if ( err )  {%NWL%return res . json ( 500 ,  { error :  { status : 500 , message :  ' Contacts list failed '  , details : err }  }  )  ;%NWL%}%NWL%res . header (  ' X - ESN - Items - Count '  , response . count )  ; %NWL%return res . json ( 200 , response . items )  ;%NWL%}  )  ;%NWL%}%NWL%module . exports . getContacts = getContacts ; %NWL%function sendInvitation ( req , res )  {%NWL%var contact = req . contact ; %NWL%var user = req . user ; %NWL%9
}%NWL%else%NWL%{%NWL%result = cook ( subject , recipe , blockName )  ;%NWL%}%NWL%return result ;%NWL%}%NWL%function applyStep ( subject , detected )%NWL%{%NWL%var recipeName = detected . recipeName ; %NWL%var blockName  = detected . blockName ; %NWL%9
} catch ( e )  {%NWL%gutil . log ( gutil . colors . red (  ' You cannot manipulate snapshots or certificates since keys . json cannot be found .  '  )  )  ;%NWL%}%NWL%var SUPPORTED_PLATFORMS =  [  ' win32 '  ,  ' linux32 '  ,  ' linux64 '  ,  ' osx64 '  ]  ; %NWL%var gulp = require (  ' gulp '  )  ; %NWL%var shell = require (  ' gulp - shell '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var s3 = require (  ' s3 '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%4
gTestfile =  ' switch - 004 . js '  ; %NWL%var SECTION =  " switch - 003 "  ; %NWL%var VERSION =  " ECMA_2 "  ; %NWL%var TITLE  =  " The switch statement "  ; %NWL%var BUGNUMBER =  " 315988 "  ; %NWL%startTest (  )  ; %NWL%writeHeaderToLog ( SECTION +  "  "  + TITLE )  ; %NWL%ONE = new Number ( 1 )  ; %NWL%ZERO = new Number ( 0 )  ; %NWL%var A = new String (  " A "  )  ; %NWL%var B = new String (  " B "  )  ; %NWL%9
]  , function ( Backbone , $ , Mustache )  {%NWL%var Model = Backbone . Model . extend (  {%NWL%initialize : function (  )  {%NWL%this . view = new View (  { model : this }  )  ;%NWL%}  ,%NWL%destroy : function (  )  {%NWL%this . view . remove (  )  ; %NWL%delete this . view ;%NWL%}%NWL%}  )  ; %NWL%var View = Backbone . View . extend (  {%NWL%1
return new goog . math . Coordinate ( this . startTransLateX_ , this . startTransLateY_ )  ;%NWL%}  ; %NWL%thin . core . SvgDragger . prototype . onShiftKeyPress_ = function ( e , x , y )  {%NWL%return new goog . math . Coordinate ( x , y )  ;%NWL%}  ; %NWL%thin . core . SvgDragger . prototype . onScroll_ = function ( e )  {%NWL%var clientX = e . clientX = this . clientX_ ; %NWL%var clientY = e . clientY = this . clientY_ ; %NWL%var pos = this . calculatePosition_ ( e )  ; %NWL%var x = pos . x ; %NWL%var y = pos . y ; %NWL%9
var mag = this . magnitude (  )  ; %NWL%if ( mag ! = 0 )%NWL%{%NWL%this . x /  = mag ; %NWL%this . y /  = mag ;%NWL%}%NWL%return this ;%NWL%}  ; %NWL%proto . rotate = function ( angle )  {%NWL%var x = this . x ; %NWL%var y = this . y ; %NWL%9
var errorBars = g . getBooleanOption (  " errorBars "  ) ||%NWL%g . getBooleanOption (  " customBars "  )  ; %NWL%if ( !errorBars ) return ; %NWL%var fillGraph = g . getBooleanOption (  " fillGraph "  , setName )  ; %NWL%if ( fillGraph )  {%NWL%console . warn (  " Can ' t use fillGraph option with error bars "  )  ;%NWL%}%NWL%var ctx = e . drawingContext ; %NWL%var color = e . color ; %NWL%var fillAlpha = g . getNumericOption (  ' fillAlpha '  , setName )  ; %NWL%var stepPlot = g . getBooleanOption (  " stepPlot "  , setName )  ; %NWL%3
if ( pair [ 0 ]  =  = variable )  {%NWL%return pair [ 1 ]  ;%NWL%}%NWL%}%NWL%}%NWL%var access_token = getQueryVariable (  " access_token "  )  ; %NWL%if ( access_token =  = undefined )  {%NWL%access_token = getQueryVariable (  " code "  )  ;%NWL%}%NWL%var token_type = getQueryVariable (  " token_type "  )  ; %NWL%var expires_in = getQueryVariable (  " expires_in "  )  ; %NWL%5
var explorer = p3rf . perfkit . explorer ; %NWL%var DateFilter = explorer . models . perfkit_simple_builder . DateFilter ; %NWL%var DateFilterType = explorer . models . perfkit_simple_builder . DateFilterType ; %NWL%var Filter = explorer . components . query_builder . Filter ; %NWL%var FilterClause = explorer . components . query_builder . FilterClause ; %NWL%var BigQueryBuilder = explorer . components . query_builder . QueryBuilder ; %NWL%var QueryProperties = explorer . components . query_builder . QueryProperties ; %NWL%var dateUtil = explorer . dateUtil ; %NWL%var MetadataFilter = explorer . models . perfkit_simple_builder . MetadataFilter ; %NWL%var QueryColumnModel = explorer . models . perfkit_simple_builder . QueryColumnModel ; %NWL%var QueryConfigModel = explorer . models . perfkit_simple_builder . QueryConfigModel ; %NWL%1
RGraph . ShowZoomWindow ( this )  ;%NWL%}%NWL%if ( this . Get (  ' chart . resizable '  )  )  {%NWL%RGraph . AllowResizing ( this )  ;%NWL%}%NWL%RGraph . FireCustomEvent ( this ,  ' ondraw '  )  ;%NWL%}%NWL%RGraph . Pie . prototype . DrawSegment = function ( degrees , color , last )%NWL%{%NWL%var context  = this . context ; %NWL%var canvas  = this . canvas ; %NWL%9
document . getElementById (  ' bordercolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bordercolor_pick '  ,  ' bordercolor '  )  ; %NWL%document . getElementById (  ' bgcolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bgcolor_pick '  ,  ' bgcolor '  )%NWL%var inst = tinyMCE . selectedInstance ; %NWL%var tdElm = tinyMCE . getParentElement ( inst . getFocusElement (  )  ,  " td , th "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = tinyMCE . parseStyle ( tinyMCE . getAttrib ( tdElm ,  " style "  )  )  ; %NWL%var celltype = tdElm . nodeName . toLowerCase (  )  ; %NWL%var align = tinyMCE . getAttrib ( tdElm ,  ' align '  )  ; %NWL%var valign = tinyMCE . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%9
var AnchorEscapeContext = require (  '  .  / AnchorEscapeContext '  )  ; %NWL%var AnchorInlineContext = require (  '  .  / AnchorInlineContext '  )  ; %NWL%var AnchorBlockContext = require (  '  .  / AnchorBlockContext '  )  ; %NWL%var AnchorGroupContext = require (  '  .  / AnchorGroupContext '  )  ; %NWL%var JsWhileContext = require (  '  .  / JsWhileContext '  )  ; %NWL%var JsIfContext = require (  '  .  / JsIfContext '  )  ; %NWL%var JsForContext = require (  '  .  / JsForContext '  )  ; %NWL%var JsWithContext = require (  '  .  / JsWithContext '  )  ; %NWL%var JsFunctionContext = require (  '  .  / JsFunctionContext '  )  ; %NWL%var JsDoContext = require (  '  .  / JsDoContext '  )  ; %NWL%var JsSwitchContext = require (  '  .  / JsSwitchContext '  )  ; %NWL%0
categories = checkUnique ( categories )  ; %NWL%makeGant ( taskArray , w , h )  ; %NWL%var title = svg . append (  " text "  )%NWL%. text ( gantt . yy . getTitle (  )  )%NWL%. attr (  " x "  , w / 2 )%NWL%. attr (  " y "  , conf . titleTopMargin )%NWL%. attr (  ' class '  ,  ' titleText '  )  ; %NWL%function makeGant ( tasks , pageWidth , pageHeight )  {%NWL%var barHeight = conf . barHeight ; %NWL%var gap = barHeight + conf . barGap ; %NWL%var topPadding = conf . topPadding ; %NWL%8
request . done (  ' File reverted '  )  ;%NWL%}  , function ( error )  {%NWL%request . doneWithError ( error . message )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . newfileCommand = function ( args , request )  {%NWL%env . editor . buffer = new Buffer (  )  ;%NWL%}  ; %NWL%exports . rmCommand = function ( args , request )  {%NWL%var files = env . files ; %NWL%var buffer = env . buffer ; %NWL%9
var command = protocol . windowSize (  ' current '  , 10 , 10 , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . data ,  '  {  " width "  : 10 ,  " height "  : 10 }  '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / window / current / size '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testAcceptAlert : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var where = this . getElementsByTagNameNS ( node , georssns ,  " where "  )  ; %NWL%if ( where && where . length > 0 )  {%NWL%if ( !this . gmlParser )  {%NWL%this . initGmlParser (  )  ;%NWL%}%NWL%for ( var i = 0 , ii = where . length ; i < ii ; i +  +  )  {%NWL%this . gmlParser . readChildNodes ( where [ i ]  , locations )  ;%NWL%}%NWL%}%NWL%var components = locations . components ; %NWL%var point = this . getElementsByTagNameNS ( node , georssns ,  " point "  )  ; %NWL%0
var d = require (  '  .  / d '  )%NWL%test . assert ( a . name =  =  =  ' a '  , a . name )%NWL%test . assert ( b . name =  =  =  ' b '  , b . name )%NWL%test . assert ( c . name =  =  =  ' c '  , c . name )%NWL%test . assert ( d . name =  =  =  ' d '  , d . name )%NWL%var debugA = require (  '  .  / debug / a '  )%NWL%test . assert ( debugA . name =  =  =  ' a '  , a . name )%NWL%var TS =  ' ?t = 20130202 '%NWL%var t1 = require (  '  .  / timestamp / t1 '  )%NWL%var t2 = require (  '  .  / timestamp / t2 '  )%NWL%var t3 = require (  '  .  / timestamp / t3 '  )%NWL%8
, base64 = require (  ' base64 '  )%NWL%, extend = require (  '  .  .  / lib / merger '  )  . extend%NWL%, request = require (  ' request '  )%NWL%, qs = require (  ' querystring '  )%NWL%, config = require (  '  .  .  / lib / config_loader '  )  . get_config (  )%NWL%, model = require (  '  .  .  / model '  )%NWL% ; %NWL%var base_url = DATA . base_url%NWL%, authorize_url = base_url + config . oauth2_server . authorize_url%NWL%, login_url = base_url + config . oauth2_server . process_login_url%NWL%, token_url = base_url + config . oauth2_server . token_url%NWL%8
cursorZ : 8%NWL%}  )  ;%NWL%}%NWL%function transfer ( options , cb )  {%NWL%var window = options . window || bot . currentWindow || bot . inventory ; %NWL%var itemType = options . itemType ; %NWL%var metadata = options . metadata ; %NWL%var count = options . count =  = null ? 1 : options . count ; %NWL%cb = cb || noop ; %NWL%var firstSourceSlot = null ; %NWL%var sourceStart = options . sourceStart ; %NWL%5
var MobileSafariClickEventPlugin = require (  "  .  / MobileSafariClickEventPlugin "  )  ; %NWL%var ReactEventTopLevelCallback = require (  "  .  / ReactEventTopLevelCallback "  )  ; %NWL%var ReactDOM = require (  "  .  / ReactDOM "  )  ; %NWL%var ReactDOMButton = require (  "  .  / ReactDOMButton "  )  ; %NWL%var ReactDOMForm = require (  "  .  / ReactDOMForm "  )  ; %NWL%var ReactDOMImg = require (  "  .  / ReactDOMImg "  )  ; %NWL%var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%var ReactDOMSelect = require (  "  .  / ReactDOMSelect "  )  ; %NWL%var ReactDOMTextarea = require (  "  .  / ReactDOMTextarea "  )  ; %NWL%var ReactInstanceHandles = require (  "  .  / ReactInstanceHandles "  )  ; %NWL%0
' angular - bootstrap - tpls '  :  {%NWL%deps :  [  ' angular '  ,  ' angular - bootstrap '  ]%NWL%}%NWL%}%NWL%}  )  ; %NWL%define ( function ( require )  {%NWL%' use strict '  ; %NWL%var angular = require (  ' angular '  )  ; %NWL%require (  ' MainModule '  )  ; %NWL%require (  ' CrudModule '  )  ; %NWL%var AdminDescription = require (  ' AdminDescription '  )  ; %NWL%7
level =  ' TRACE '  ;%NWL%}%NWL%assert . notEqual ( log1 . level . toString (  )  , level )  ; %NWL%log4js . setGlobalLogLevel ( level )  ; %NWL%assert . equal ( log1 . level . toString (  )  , level )  ; %NWL%var log2 = log4js . getLogger (  ' log2 '  )  ; %NWL%assert . equal ( log2 . level . toString (  )  , level )  ;%NWL%}  ,%NWL%' global change loglevel '  : function ( log4js )  {%NWL%var log1 = log4js . getLogger (  ' log1 '  )  ; %NWL%var log2 = log4js . getLogger (  ' log2 '  )  ; %NWL%9
resp ( result )  ;%NWL%}%NWL%var busyOn = function (  )  {%NWL%var load = document . getElementById (  ' statusMessage '  )  ; %NWL%load . style . position =  ' absolute '  ; %NWL%load . style . display =  ' block '  ; %NWL%load . style . left =  "  "  ; %NWL%load . style . top =  "  "  ; %NWL%fleegix . dom . center ( load )  ; %NWL%var left = load . style . left . replace (  " px "  ,  "  "  )  ; %NWL%var top = load . style . top . replace (  " px "  ,  "  "  )  ; %NWL%9
(  ( current [ 2 ]  * mat [ 0 ]  )  +  ( current [ 3 ]  * mat [ 2 ]  )  )  ,%NWL%(  ( current [ 2 ]  * mat [ 1 ]  )  +  ( current [ 3 ]  * mat [ 3 ]  )  )  ,%NWL%mat [ 4 ]  ,%NWL%mat [ 5 ]%NWL%]  ;%NWL%}%NWL%ang = $ . data ( elem ,  ' rotate '  )  ; %NWL%if ( ang )  {%NWL%ang = toRadian ( ang )  ; %NWL%var cos = Math . cos ( ang )  ; %NWL%var sin = Math . sin ( ang )  ; %NWL%9
for ( var i = 0 ; i < locChildrenBone . length ; i +  +  )  {%NWL%locChildrenBone [ i ]  . update ( dt )  ;%NWL%}%NWL%this . boneTransformDirty = false ;%NWL%}  ,%NWL%applyParentTransform : function ( parent )  {%NWL%var locWorldInfo = this . _worldInfo ; %NWL%var locParentWorldTransform = parent . _worldTransform ; %NWL%var locParentWorldInfo = parent . _worldInfo ; %NWL%var x = locWorldInfo . x ; %NWL%var y = locWorldInfo . y ; %NWL%9
assertExpr (  "  ( delete x )  "  , unExpr (  " delete "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( typeof x )  "  , unExpr (  " typeof "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( void x )  "  , unExpr (  " void "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( x =  = y )  "  , binExpr (  "  =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ! = y )  "  , binExpr (  " ! =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x =  =  = y )  "  , binExpr (  "  =  =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ! =  = y )  "  , binExpr (  " ! =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x < y )  "  , binExpr (  "  <  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  = y )  "  , binExpr (  "  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x > y )  "  , binExpr (  "  >  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  = y )  "  , binExpr (  "  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%4
street = street ? street : result . address . cycleway ; %NWL%street = street ? street : result . address . road ; %NWL%street = street ? street : result . address . pedestrian ; %NWL%street = street ? street : result . address . footway ; %NWL%var city = result . address . city ? result . address . city :  "  "  ; %NWL%city = city ? city : result . address . town ; %NWL%city = city ? city : result . address . village ; %NWL%city = city ? city : result . address . hamlet ; %NWL%city = city ? city : result . address . state_district ; %NWL%street = result . address . house_number ? street +  '  '  + result . address . house_number : street ; %NWL%var postcode = result . address . postcode ? result . address . postcode :  "  "  ; %NWL%4
done (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " #delete "  , function (  )  {%NWL%it (  ' deletes the value of the message property '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " changeNode1 "  ,  " type "  :  " change "  ,  " action "  :  " delete "  ,  " property "  :  " payload "  ,  " from "  :  "  "  ,  " to "  :  "  "  ,  " reg "  : false ,  " name "  :  " changeNode "  ,  " wires "  :  [  [  " helperNode1 "  ]  ]  }  ,%NWL%{ id :  " helperNode1 "  , type :  " helper "  , wires :  [  ]  }  ]  ; %NWL%helper . load ( changeNode , flow , function (  )  {%NWL%var changeNode1 = helper . getNode (  " changeNode1 "  )  ; %NWL%var helperNode1 = helper . getNode (  " helperNode1 "  )  ; %NWL%9
this . stopLength =  - 1 ; %NWL%this . contents =  '  '  ; %NWL%this . cursorPos = 0 ; %NWL%var id_map_string = this . element . attr (  ' id_map '  )  ; %NWL%if ( id_map_string ) this . id_map = jQuery . parseJSON ( id_map_string )  ; %NWL%this . __create (  )  ; %NWL%this . menu . element . addClass (  ' inlined - autocomplete '  )  ; %NWL%this . updateHidden (  )  ; %NWL%this . options . select = function ( event , ui )  {%NWL%var contents = self . contents ; %NWL%var cursorPos = self . cursorPos ; %NWL%9
}  )  ; %NWL%describe (  ' #_initChildrenFromDom (  )  '  , function (  )  {%NWL%}  )  ; %NWL%describe (  ' #_initProperties (  )  '  , function (  )  {%NWL%}  )  ; %NWL%describe (  ' #children (  )  '  , function (  )  {%NWL%var c , w1 , w2 , w3 ; %NWL%beforeEach ( function (  )  {%NWL%var CompTest = Widget . create (  ' CompTest '  )  ; %NWL%CompTest . inherit ( WAF . require (  ' waf - behavior / layout / composed '  )  )  ; %NWL%var StyleWidget = Widget . create (  ' StyleWidget '  )  ; %NWL%8
}%NWL%var ctrx , ctry , rs ; %NWL%var tapendHandler ; %NWL%cy%NWL%. on (  ' cxttapstart '  , options . selector , function ( e )  {%NWL%var ele = this ; %NWL%var rp = ele . renderedPosition (  )  ; %NWL%var rw = ele . renderedWidth (  )  ; %NWL%var rh = ele . renderedHeight (  )  ; %NWL%var scrollLeft = $ ( window )  . scrollLeft (  )  ; %NWL%var scrollTop = $ ( window )  . scrollTop (  )  ; %NWL%9
else this [ name ]  = definition (  )%NWL%}  (  ' bowser '  , function (  )  {%NWL%var ua = navigator . userAgent%NWL%, t = true%NWL%, ie =  / msie / i . test ( ua )%NWL%, chrome =  / chrome / i . test ( ua )%NWL%, phantom =  / phantom / i . test ( ua )%NWL%, safari =  / safari / i . test ( ua ) && !chrome && !phantom%NWL%, iphone =  / iphone / i . test ( ua )%NWL%, ipad =  / ipad / i . test ( ua )%NWL%, touchpad =  / touchpad / i . test ( ua )%NWL%5
} else if ( object . geometry instanceof THREE . BufferGeometry )  {%NWL%if ( object . geometry . attributes . index ! =  = undefined )  {  /  / Indexed BufferGeometry%NWL%var vertices = object . geometry . attributes . position . array ; %NWL%var indices = object . geometry . attributes . index . array ; %NWL%var offsets = object . geometry . offsets ; %NWL%var numEdges = 0 ; %NWL%var edges = new Uint32Array ( 2 * indices . length )  ; %NWL%for ( var o = 0 , ol = offsets . length ; o < ol ;  +  + o )  {%NWL%var start = offsets [ o ]  . start ; %NWL%var count = offsets [ o ]  . count ; %NWL%var index = offsets [ o ]  . index ; %NWL%8
$ (  '  . graph '  )  . height ( this . targetRowHeight_ - 2 )  ;%NWL%}  ; %NWL%firefly . DashboardView . prototype . createBaseTable = function (  )  {%NWL%var table = $ (  '  < table class =  " dashboard "  >  '  )  . attr (  {  ' cellspacing '  : 0 ,  ' cellpadding '  : 0 }  )  ; %NWL%var thead = $ (  '  < thead >  '  )  . appendTo ( table )  ; %NWL%var tr = $ (  '  < tr >  '  )  ; %NWL%for ( var i = 0 ; i < this . columnCount ; i +  +  )  {%NWL%tr . append ( $ (  '  < td >  '  )  . width (  ( 1 / this . columnCount * 100 )  +  " % "  )  )%NWL%}%NWL%thead . append ( tr )  ; %NWL%var tbody = $ (  '  < tbody >  '  )  . appendTo ( table )  ; %NWL%4
var UndoManager = require (  " ace / undomanager "  )  . UndoManager ; %NWL%var HashHandler = require (  " ace / keyboard / hash_handler "  )  . HashHandler ; %NWL%var Renderer = require (  " ace / virtual_renderer "  )  . VirtualRenderer ; %NWL%var Editor = require (  " ace / editor "  )  . Editor ; %NWL%var MultiSelect = require (  " ace / multi_select "  )  . MultiSelect ; %NWL%var whitespace = require (  " ace / ext / whitespace "  )  ; %NWL%var doclist = require (  "  .  / doclist "  )  ; %NWL%window . modelist = require (  " ace / ext / modelist "  )  ; %NWL%var layout = require (  "  .  / layout "  )  ; %NWL%var TokenTooltip = require (  "  .  / token_tooltip "  )  . TokenTooltip ; %NWL%var util = require (  "  .  / util "  )  ; %NWL%6
proto . onReady . should . be . a (  ' function '  )  ;%NWL%}  )  ; %NWL%it (  ' should have a onFailure function '  , function (  )  {%NWL%proto . onFailure . should . be . a (  ' function '  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' Adding extensions '  , function (  )  {%NWL%it (  ' Should be possible to add extensions '  , function ( done )  {%NWL%var mgr = new ExtManager (  )  ; %NWL%var ext1 =  { ref : sinon . spy (  )  , context :  ' ext1 '  }  ; %NWL%var ext2 =  { ref : sinon . spy (  )  , context :  ' ext2 '  }  ; %NWL%9
}%NWL%}  )  ; %NWL%changeNode1 . receive (  { fred :  " bar "  }  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' sets the value of a multi - level message property to another multi - level message property '  , function ( done )  {%NWL%var flow =  [  {  " id "  :  " changeNode1 "  ,  " type "  :  " change "  ,  " action "  :  " replace "  ,  " property "  :  " foo . bar "  ,  " from "  :  "  "  ,  " to "  :  " msg . fred . red "  ,  " reg "  : false ,  " name "  :  " changeNode "  ,  " wires "  :  [  [  " helperNode1 "  ]  ]  }  ,%NWL%{ id :  " helperNode1 "  , type :  " helper "  , wires :  [  ]  }  ]  ; %NWL%helper . load ( changeNode , flow , function (  )  {%NWL%var changeNode1 = helper . getNode (  " changeNode1 "  )  ; %NWL%var helperNode1 = helper . getNode (  " helperNode1 "  )  ; %NWL%9
_selectValue ( self )  ;%NWL%}%NWL%list . hide (  )  ; %NWL%self . trigger (  ' hideTimepicker '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%option : function ( key , value )%NWL%{%NWL%var self = $ ( this )  ; %NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
var parentLayout = new ParentLayout (  )  ; %NWL%region . show ( parentLayout )  ; %NWL%render (  )  . then ( function (  )  {%NWL%parentView . invalidateView (  )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' builds correct spec based on view with child '  , function ( done )  {%NWL%var context = new Setup ( done )  ; %NWL%var region = context . region ; %NWL%var root = context . root ; %NWL%9
break ;%NWL%}%NWL%}  )  ;%NWL%}  ,%NWL%setAttributes : function ( n , args )  {%NWL%var ed = tinyMCEPopup . editor , args = args || {  }  ; %NWL%this . remove ( n )  ; %NWL%var src 		 = ed . dom . getAttrib ( n ,  ' href '  )  ; %NWL%var title 		 = $ (  ' #window_popup_title '  )  . val (  ) || args . title || '  '  ; %NWL%var width 		 = args . width 	|| $ (  ' #window_popup_width '  )  . val (  )  ; %NWL%var height 		 = args . height 	|| $ (  ' #window_popup_height '  )  . val (  )  ; %NWL%9
mongoose . connect ( dbPath , function onMongooseError ( err )  {%NWL%if ( err ) throw err ;%NWL%}  )  ;%NWL%}  )  ; %NWL%app . get (  '  /  '  , function ( req , res )  {%NWL%res . render (  ' index . jade '  )  ;%NWL%}  )  ; %NWL%app . post (  '  / login '  , function ( req , res )  {%NWL%console . log (  ' login request '  )  ; %NWL%var email = req . param (  ' email '  , null )  ; %NWL%var password = req . param (  ' password '  , null )  ; %NWL%9
var builtins = require (  ' builtins '  )%NWL%var through = require (  ' through '  )%NWL%var flatten = require (  ' flatten '  )%NWL%var duplex = require (  ' duplexer '  )%NWL%var pluck = require (  ' plucker '  )%NWL%var uniq = require (  ' uniq '  )%NWL%var commondir = require (  ' commondir '  )%NWL%var fileTree = require (  ' file - tree '  )%NWL%var path = require (  ' path '  )%NWL%var fs = require (  ' fs '  )%NWL%var bl = require (  ' bl '  )%NWL%0
self . apply (  )  ; %NWL%return false ;%NWL%}%NWL%this . dialog . show (  )  ; %NWL%this . dialog . getElementById (  " title "  )  . select (  )  ;%NWL%}%NWL%Abbreviation . prototype . apply = function (  )  {%NWL%var editor = this . editor ; %NWL%var doc = editor . _doc ; %NWL%var abbr = this . abbr ; %NWL%var html = this . html ; %NWL%7
var EventPluginUtils = require (  ' EventPluginUtils '  )  ; %NWL%var ReactChildren = require (  ' ReactChildren '  )  ; %NWL%var ReactComponent = require (  ' ReactComponent '  )  ; %NWL%var ReactCompositeComponent = require (  ' ReactCompositeComponent '  )  ; %NWL%var ReactContext = require (  ' ReactContext '  )  ; %NWL%var ReactCurrentOwner = require (  ' ReactCurrentOwner '  )  ; %NWL%var ReactDOM = require (  ' ReactDOM '  )  ; %NWL%var ReactDOMComponent = require (  ' ReactDOMComponent '  )  ; %NWL%var ReactDefaultInjection = require (  ' ReactDefaultInjection '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%0
this . name =  ' update '  ; %NWL%this . description =  " update the specified module ( or the game ' s devkit module if none is provided ) to the latest version "  ; %NWL%this . init = function (  )  {%NWL%supr ( this ,  ' init '  , arguments )  ; %NWL%this . opts%NWL%. describe (  ' version '  ,  ' set a specific version '  )  ;%NWL%}%NWL%this . exec = function ( command , args , cb )  {%NWL%var apps = require (  '  .  .  / apps '  )  ; %NWL%var Module = require (  '  .  .  / apps / Module '  )  ; %NWL%var install = require (  '  .  .  / install '  )  ; %NWL%8
this . xf . rotation = val%NWL%this . updateTransform (  )%NWL%}%NWL%}  ,%NWL%bbox : function (  )  {%NWL%return this . calcBbox (  )  . slice ( 0 )%NWL%}  ,%NWL%updateTransform : function (  )  {%NWL%var xf = this . xf%NWL%var cos = Math . cos ( xf . rotation )%NWL%var sin = Math . sin ( xf . rotation )%NWL%9
}  ,%NWL%getParams : function (  )  {%NWL%var view = this . performanceGraphComponent . view ; %NWL%var params =  [  ]  ; %NWL%var lookup =  {  }  ; %NWL%var branch = $ ( view . branchSel )  . find (  "  : selected "  )  . text (  )  ; %NWL%if ( branch ! =  "  "  )  {%NWL%params . push (  ' branch =  '  + branch )  ; %NWL%lookup [  ' branch '  ]  = branch ;%NWL%}%NWL%var device = $ ( view . deviceSel )  . find (  "  : selected "  )  . text (  )  ; %NWL%5
window . pygowave = $defined ( window . pygowave ) ? window . pygowave :  {  }  ; %NWL%pygowave . operations =  ( function (  )  {%NWL% ;%NWL%; %NWL%var DOCUMENT_INSERT =  " DOCUMENT_INSERT "  ; %NWL%var DOCUMENT_DELETE =  " DOCUMENT_DELETE "  ; %NWL%var DOCUMENT_ELEMENT_INSERT =  " DOCUMENT_ELEMENT_INSERT "  ; %NWL%var DOCUMENT_ELEMENT_DELETE =  " DOCUMENT_ELEMENT_DELETE "  ; %NWL%var WAVELET_ADD_PARTICIPANT =  " WAVELET_ADD_PARTICIPANT "  ; %NWL%var WAVELET_REMOVE_PARTICIPANT =  " WAVELET_REMOVE_PARTICIPANT "  ; %NWL%var WAVELET_APPEND_BLIP =  " WAVELET_APPEND_BLIP "  ; %NWL%4
pixelHeight )  {%NWL%goog . style . setSize ( this . getElement (  )  , pixelWidth , pixelHeight )  ;%NWL%}  ; %NWL%goog . graphics . SvgGraphics . prototype . getPixelSize = function (  )  {%NWL%if ( !goog . userAgent . GECKO )  {%NWL%return this . isInDocument (  ) ?%NWL%goog . style . getSize ( this . getElement (  )  )  : %NWL%goog . base ( this ,  ' getPixelSize '  )  ;%NWL%}%NWL%var width = this . width ; %NWL%var height = this . height ; %NWL%9
}%NWL%var args = testUtil . parseArguments ( ARGUMENTS , process . argv )  ; %NWL%var testPath = args [  ' test_path '  ]  ; %NWL%var socketPath = args [  ' socket_path '  ]  ; %NWL%var cwd = args [  ' cwd '  ]  ; %NWL%var libCovDir = args [  ' lib_cov_dir '  ]  ; %NWL%var scopeLeaks = args [  ' scope_leaks '  ]  ; %NWL%var chdir = args [  ' chdir '  ]  ; %NWL%var customAssertModule = args [  ' custom_assert_module '  ]  ; %NWL%var testInitFile = args [  ' init_file '  ]  ; %NWL%var timeout = args [  ' timeout '  ]  ; %NWL%4
const { Cc , Ci }  = require (  " chrome "  )  ; %NWL%const { setInterval , clearTimeout }  = require (  " timers "  )  ; %NWL%const tabs = require (  " tabs "  )  ; %NWL%const windows = require (  " windows "  )  ; %NWL%var Sidebar = function ( options )  {%NWL%var url = options . url ; %NWL%if ( ! url )  {%NWL%throw ' You must give a url option '  ;%NWL%}%NWL%var title = options . title || url ; %NWL%var name = options . name || url ; %NWL%9
var loadingShader =  {  }  ; %NWL%var loadedObservers =  {  }  ; %NWL%var numLoadingShaders = 0 ; %NWL%var pathRemapping = null ; %NWL%var pathPrefix =  "  "  ; %NWL%var doPreprocess = false ; %NWL%var resizeParameters =  {  }  ; %NWL%shaders [ defaultShaderName ]  = defaultShader ; %NWL%function preprocessShader ( shader )  {%NWL%var parameters = shader . parameters ; %NWL%var techniques = shader . techniques ; %NWL%9
include : function ( obj )  {%NWL%var included = obj . included || obj . setup ; %NWL%delete obj . included ; %NWL%delete obj . extended ; %NWL%delete obj . setup ; %NWL%for ( var i in obj )%NWL%this . fn [ i ]  = obj [ i ]  ; %NWL%if ( included ) included . apply ( this )  ;%NWL%}  ,%NWL%extend : function ( obj )  {%NWL%var extended = obj . extended || obj . setup ; %NWL%1
res . write (  "  "  + err . stack )  ;%NWL%}%NWL%res . end (  )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}%NWL%exports . install = function ( app , filesystem )  {%NWL%var getUserHome = filesystem . getUserHome ; %NWL%var isDirectory = filesystem . isDirectory ; %NWL%var mkdir = filesystem . mkdir ; %NWL%8
html :  [  ' demo / index . html '  ]  ,%NWL%jsx :  [  ' demo / src *  . jsx '  ]  ,%NWL%}  ; %NWL%var mbFiles =  {%NWL%jsx :  [  ' src *  . jsx '  ]  ,%NWL%}  ; %NWL%var docFiles =  {%NWL%md :  [  ' srcdocs%NWL%var fs = require (  ' fs '  )  ; %NWL%var gulp = require (  ' gulp '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%8
var nativeBridge ; %NWL%var target ; %NWL%beforeEach ( function (  )  {%NWL%nativeBridge = new NativeBridgeSpy (  )  ; %NWL%tabris . _reset (  )  ; %NWL%tabris . _init ( nativeBridge )  ; %NWL%target =  {  }  ;%NWL%}  )  ; %NWL%it (  " do not overwrite existing window methods "  , function (  )  {%NWL%var setTimeout = target . setTimeout = function (  )  {  }  ; %NWL%var setInterval = target . setInterval = function (  )  {  }  ; %NWL%9
}  ; %NWL%thin . core . ListSectionHelper . prototype . getSelectorLayer = function (  )  {%NWL%return this . selectorLayer_ ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . getSeparator = function (  )  {%NWL%return this . separator_ ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . update = function ( target , bounds )  {%NWL%var top = bounds . top ; %NWL%var width = bounds . width ; %NWL%var height = bounds . height ; %NWL%8
function init (  )  {%NWL%tinyMCEPopup . resizeToInnerSize (  )  ; %NWL%document . getElementById (  ' backgroundimagebrowsercontainer '  )  . innerHTML = getBrowserHTML (  ' backgroundimagebrowser '  ,  ' backgroundimage '  ,  ' image '  ,  ' table '  )  ; %NWL%document . getElementById (  ' bgcolor_pickcontainer '  )  . innerHTML = getColorPickerHTML (  ' bgcolor_pick '  ,  ' bgcolor '  )  ; %NWL%var inst = tinyMCE . selectedInstance ; %NWL%var trElm = tinyMCE . getParentElement ( inst . getFocusElement (  )  ,  " tr "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = tinyMCE . parseStyle ( tinyMCE . getAttrib ( trElm ,  " style "  )  )  ; %NWL%var rowtype = trElm . parentNode . nodeName . toLowerCase (  )  ; %NWL%var align = tinyMCE . getAttrib ( trElm ,  ' align '  )  ; %NWL%var valign = tinyMCE . getAttrib ( trElm ,  ' valign '  )  ; %NWL%9
}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' addVector '  , function (  )  {%NWL%it (  ' should add vectors to the current page '  , function (  )  {%NWL%ew . addVector (  { type :  ' rect '  , x : 10 , y : 10 }  )  ; %NWL%assert . equal ( page . items . length , 1 )  ;%NWL%}  )  ; %NWL%it (  ' should offset vectors to the current position '  , function (  )  {%NWL%var rect =  { type :  ' rect '  , x : 10 , y : 10 }  ; %NWL%var ellipse =  { type :  ' ellipse '  , x : 10 , y : 10 }  ; %NWL%9
}%NWL%return false ;%NWL%}%NWL%if ( !this . _FileManagerAttributesTable )%NWL%{%NWL%this . _FileManagerAttributesTable =  ( function (  )  {%NWL%var div  = document . createElement (  ' div '  )  ; %NWL%var h2  = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Link Attributes '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%6
var Mouse    = require (  ' Controls / MouseEventHandler '  )  ; %NWL%var Renderer   = require (  ' Renderer / Renderer '  )  ; %NWL%var Camera   = require (  ' Renderer / Camera '  )  ; %NWL%var EntityManager  = require (  ' Renderer / EntityManager '  )  ; %NWL%var GridSelector  = require (  ' Renderer / Map / GridSelector '  )  ; %NWL%var Ground   = require (  ' Renderer / Map / Ground '  )  ; %NWL%var Altitude   = require (  ' Renderer / Map / Altitude '  )  ; %NWL%var Water    = require (  ' Renderer / Map / Water '  )  ; %NWL%var Models   = require (  ' Renderer / Map / Models '  )  ; %NWL%var Sounds   = require (  ' Renderer / Map / Sounds '  )  ; %NWL%var Effects   = require (  ' Renderer / Map / Effects '  )  ; %NWL%4
shouldPromise )  {%NWL%if ( env . interactive )  {%NWL%runInteractiveSession ( libraryName , env )  ; %NWL%return ;%NWL%}%NWL%var url = env . url ; %NWL%var path = env . path ; %NWL%var version = env . version ; %NWL%var latest = env . latest ; %NWL%var type = env . type ; %NWL%var minify = env . minify ; %NWL%5
res . push (  ' UNION '  )%NWL%res . push ( str )  ; %NWL%s = s . _next ;%NWL%}%NWL%return res . join (  '  '  )  ;%NWL%}%NWL%function selectToSQL ( s , options )  {%NWL%var distinct  = s . distinct ; %NWL%var columns  = s . columns ; %NWL%var from   = s . from ; %NWL%var where  = s . where ; %NWL%7
var cssUnitRegexStr =  '  ( \\ - ?\\ . ?\\d + \\ . ?\\d *  (  '  + allUnits . join (  ' | '  )  +  ' | ) |auto|inherit )  '  ; %NWL%var cssCalcRegexStr =  '  ( \\ - moz\\ - |\\ - webkit\\ -  ) ?calc\\ (  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%8
}%NWL%failures . push ( failure )  ;%NWL%}%NWL%if ( result . status =  =  " pending "  )  {%NWL%pendingSpecCount +  +  ;%NWL%}%NWL%}  ; %NWL%this . jasmineDone = function (  )  {%NWL%var banner = find (  "  . banner "  )  ; %NWL%banner . appendChild ( createDom (  " span "  ,  { className :  " duration "  }  ,  " finished in "  + timer . elapsed (  )  / 1000 +  " s "  )  )  ; %NWL%var alert = find (  "  . alert "  )  ; %NWL%8
var icon = this . getChildControl (  " icon "  )  ; %NWL%icon . setSource ( value )  ;%NWL%}  ,%NWL%_applyPost : function ( value , old )%NWL%{%NWL%var post = this . getChildControl (  " post "  )  ; %NWL%post . setValue ( value )  ;%NWL%}  ,%NWL%_applyTime : function ( value , old )%NWL%{%NWL%var time = this . getChildControl (  " time "  )  ; %NWL%0
var trElm = dom . getParent ( inst . selection . getStart (  )  ,  " tr "  )  ; %NWL%var formObj = document . forms [ 0 ]  ; %NWL%var st = dom . parseStyle ( dom . getAttrib ( trElm ,  " style "  )  )  ; %NWL%var rowtype = trElm . parentNode . nodeName . toLowerCase (  )  ; %NWL%var align = dom . getAttrib ( trElm ,  ' align '  )  ; %NWL%var valign = dom . getAttrib ( trElm ,  ' valign '  )  ; %NWL%var height = trimSize ( getStyle ( trElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var className = dom . getAttrib ( trElm ,  ' class '  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( trElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var backgroundimage = getStyle ( trElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  [  ' \ "  ] ? (  [ ^ ' \ "  ]  *  )  [  ' \ "  ] ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ; %NWL%var id = dom . getAttrib ( trElm ,  ' id '  )  ; %NWL%4
var arr = utils . arr ; %NWL%var weapon_descriptions = require (  '  .  / weapon_descriptions '  )  ; %NWL%var combatracer = require (  '  .  / combatracer '  )  ; %NWL%var car_descriptions = require (  '  .  / car_descriptions '  )  ; %NWL%var cars = require (  '  .  / cars '  )  ; %NWL%var weapons = require (  '  .  / weapons '  )  ; %NWL%var animation = require (  '  .  / animation '  )  ; %NWL%var props = require (  '  .  / props '  )  ; %NWL%var settings = require (  '  .  / settings '  )  ; %NWL%var gamejs = require (  ' gamejs '  )  ; %NWL%var sounds = require (  '  .  / sounds '  )  ; %NWL%1
const nsIChannel    = Components . interfaces . nsIChannel ; %NWL%const nsICommandLine   = Components . interfaces . nsICommandLine ; %NWL%const nsICommandLineHandler  = Components . interfaces . nsICommandLineHandler ; %NWL%const nsIContentHandler   = Components . interfaces . nsIContentHandler ; %NWL%const nsIDocShellTreeItem  = Components . interfaces . nsIDocShellTreeItem ; %NWL%const nsIDOMChromeWindow  = Components . interfaces . nsIDOMChromeWindow ; %NWL%const nsIDOMWindow    = Components . interfaces . nsIDOMWindow ; %NWL%const nsIFileURL    = Components . interfaces . nsIFileURL ; %NWL%const nsIHttpProtocolHandler = Components . interfaces . nsIHttpProtocolHandler ; %NWL%const nsIInterfaceRequestor  = Components . interfaces . nsIInterfaceRequestor ; %NWL%const nsINetUtil    = Components . interfaces . nsINetUtil ; %NWL%0
}%NWL%return function htmlFromBin ( bin )  {%NWL%if ( !bin )  {%NWL%console . error (  ' htmlFromBin requires bin object '  ,  ( new Error (  )  )  . stack )  ; %NWL%return '  < !DOCTYPE html >  '  ;%NWL%}%NWL%var file =  '  '  ; %NWL%var html = bin . html . replace (  /  ( \r\n )  / g ,  ' \n '  )  ;  /  / remove windows nl .%NWL%var source = bin . source ; %NWL%var css = safeForHTML ( bin . css || '  '  )  ; %NWL%var javascript = safeForHTML ( bin . javascript || '  '  )  ; %NWL%9
var cb = this . drawIssuesActivity . bind ( this )  ; %NWL%this . mode = $ ( this . el )  . find (  ' select '  )  [ 0 ]  . value ; %NWL%this . subtitle =  ' # of issues opened vs closed ,  '  + this . mode%NWL%App . utils . httpGet ( App . BASE +  '  / issues_activity?mode =  '  + this . mode , cb , displayFailMessage )  ;%NWL%}  ,%NWL%drawIssuesActivity : function ( data )  {%NWL%this . data = data . data ; %NWL%var closed = data . data . closed ; %NWL%var opened = data . data . opened ; %NWL%var title = this . title ; %NWL%var subtitle = this . subtitle ; %NWL%9
var resource = event . data . resource ; %NWL%this . _addBreakpointsForSourceCode ( resource )  ;%NWL%}  ,%NWL%_mainResourceChanged : function ( event )%NWL%{%NWL%var resource = event . target . mainResource ; %NWL%this . _addBreakpointsForSourceCode ( resource )  ;%NWL%}  ,%NWL%_scriptAdded : function ( event )%NWL%{%NWL%var script = event . data . script ; %NWL%0
$ (  ' form '  )  . parsley (  ' validate '  )  ; %NWL%if ( !$ (  ' form '  )  . parsley (  ' isValid '  )  )  {%NWL%noty (  {%NWL%text :  ' Input validation failed! '  ,%NWL%' layout '  :  ' center '  ,%NWL%' type '  :  ' error '%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var policyName = $ (  ' #policyName '  )  . val (  )  ; %NWL%var policyType = $ (  ' #policyType '  )  . val (  )  ; %NWL%9
if ( !Cartesian4 . equals ( v , _value [ i ]  )  )  {%NWL%_value [ i ]  = Cartesian4 . clone ( v , _value [ i ]  )  ; %NWL%gl . uniform4i ( locations [ i ]  , v . x , v . y , v . z , v . w )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%UniformArray . prototype . setMat2 = function (  )  {%NWL%var gl = this . _gl ; %NWL%var locations = this . _locations ; %NWL%var value = this . value ; %NWL%var _value = this . _value ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
if ( !assigneeTasks )  {%NWL%assigneeTasks =  { assignee : assignee , tasks :  [  ]  }  ; %NWL%assignees [ assigneeName ]  = assigneeTasks ;%NWL%}%NWL%if ( submitterSelectionDisplayNames . length ! =  = 0 && submitterSelectionDisplayNames . indexOf ( submitterName )  =  =  =  - 1 ) return ; %NWL%var attributeFilterCriteria = this . get (  ' _attributeFilterCriteria '  )  ; %NWL%var type = task . get (  ' type '  )  ; %NWL%if ( attributeFilterCriteria . indexOf ( type )  =  =  =  - 1 ) return ; %NWL%var priority = task . get (  ' priority '  )  ; %NWL%if ( attributeFilterCriteria . indexOf ( priority )  =  =  =  - 1 ) return ; %NWL%var developmentStatus = task . get (  ' developmentStatus '  )  ; %NWL%6
node . block = this . block (  )  ; %NWL%if ( this . peek (  )  . type =  =  ' code ' && this . peek (  )  . val =  =  ' else '  )  {%NWL%this . advance (  )  ; %NWL%node . alternative = this . block (  )  ;%NWL%}%NWL%return node ;%NWL%}  ,%NWL%resolvePath : function ( path , purpose )  {%NWL%var p = require (  ' path '  )  ; %NWL%var dirname = p . dirname ; %NWL%var basename = p . basename ; %NWL%9
var connectors = $ ( svgcontent )  . find ( conn_sel )  ; %NWL%connections =  [  ]  ; %NWL%connectors . each ( function (  )  {%NWL%var add_this ; %NWL%function add (  )  {%NWL%if ( $ . inArray ( this , elems ) ! =  =  - 1 )  {%NWL%add_this = true ;%NWL%}%NWL%}%NWL%var start = elData ( this ,  " c_start "  )  ; %NWL%var end = elData ( this ,  " c_end "  )  ; %NWL%9
self . twinkleAtElement ( htmlElement , opts )  ;%NWL%}  , delay )  ; %NWL%delay +  = settings . gap ;%NWL%}  )  ; %NWL%return this ;%NWL%}  ; %NWL%this . stopAtElement = function ( htmlElement , options )  {%NWL%var settings = $ . extend (  {  }  , defaults , options )  ; %NWL%var $htmlElement = $ ( htmlElement )  ; %NWL%var offset = $htmlElement . offset (  )  ; %NWL%var position = $htmlElement . position (  )  ; %NWL%9
if ( usernameTaken )  {%NWL%res . json ( 403 ,  {%NWL%isTaken : true%NWL%}  )  ; %NWL%return%NWL%}%NWL%res . send ( 200 )  ;%NWL%}  )  ; %NWL%app . post (  '  / signup '  , function ( req , response )  {%NWL%var username = req . body . username ; %NWL%var email = req . body . email ; %NWL%9
var tableData = scrapeTable (  )  ; %NWL%var dataGroups = tableData . dataGroups (  )  ; %NWL%var allData = tableData . allData (  )  ; %NWL%var dataSum = tableData . dataSum (  )  ; %NWL%var topValue = tableData . topValue (  )  ; %NWL%var bottomValue = tableData . bottomValue (  )  ; %NWL%var memberTotals = tableData . memberTotals (  )  ; %NWL%var totalYRange = tableData . totalYRange (  )  ; %NWL%var zeroLoc = o . height *  ( topValue / totalYRange )  ; %NWL%var xLabels = tableData . xLabels (  )  ; %NWL%var yLabels = tableData . yLabels (  )  ; %NWL%1
}  ; %NWL%µBlock . appendUserFilters = function ( content )  {%NWL%if ( content . length =  =  = 0 )  {%NWL%return ;%NWL%}%NWL%var µb = this ; %NWL%var onCompiledListLoaded = function ( details )  {%NWL%var snfe = µb . staticNetFilteringEngine ; %NWL%var cfe = µb . cosmeticFilteringEngine ; %NWL%var acceptedCount = snfe . acceptedCount + cfe . acceptedCount ; %NWL%var duplicateCount = snfe . duplicateCount + cfe . duplicateCount ; %NWL%9
var anchor = document . createElement (  ' a '  )  ; %NWL%var animate = true ; %NWL%sendRequest (  { initialized : true }  , function ( response )  {%NWL%tlds = response . tlds ; %NWL%var extensionId = getDomain ( extension . getURL (  '  '  )  )  . name ; %NWL%var referrerDomain = getDomain ( response . referrerUrl )  ; %NWL%var referrerName = referrerDomain . name ; %NWL%var referrerHost = referrerDomain . host ; %NWL%var trackingBlocked = response . trackingBlocked ; %NWL%var services = response . services ; %NWL%var whitelist = response . whitelist ; %NWL%8
, https = require (  ' https '  )%NWL%, crypto = require (  ' crypto '  )%NWL%, stream = require (  ' stream '  )%NWL%, Ultron = require (  ' ultron '  )%NWL%, Options = require (  ' options '  )%NWL%, Sender = require (  '  .  / Sender '  )%NWL%, Receiver = require (  '  .  / Receiver '  )%NWL%, SenderHixie = require (  '  .  / Sender . hixie '  )%NWL%, ReceiverHixie = require (  '  .  / Receiver . hixie '  )%NWL%, Extensions = require (  '  .  / Extensions '  )%NWL%, PerMessageDeflate = require (  '  .  / PerMessageDeflate '  )%NWL%5
, util = require (  ' util '  )%NWL%, protocol = require (  '  .  / protocol '  )%NWL%, createPacketBuffer = protocol . createPacketBuffer%NWL%, compressPacketBuffer = protocol . compressPacketBuffer%NWL%, oldStylePacket = protocol . oldStylePacket%NWL%, newStylePacket = protocol . newStylePacket%NWL%, parsePacket = protocol . parsePacket%NWL%, parsePacketData = protocol . parsePacketData%NWL%, parseNewStylePacket = protocol . parseNewStylePacket%NWL%, packetIds = protocol . packetIds%NWL%, packetNames = protocol . packetNames%NWL%2
function pow ( x , y )  { return Math . pow ( x , y )  ;  }%NWL%raptorjs . perlin . prototype . _calculeNoise = function ( deltaTime )%NWL%{%NWL%var scale_magnitude = this . scale_magnitude ; %NWL%var noise_frames_m1 = this . noise_frames_m1 ; %NWL%var n_size_sq = this . n_size_sq ; %NWL%var scale_decimalbits = this . scale_decimalbits ; %NWL%var _def_PackedNoise = true ; %NWL%var n_packsize = this . n_packsize ; %NWL%var np_size = this . np_size ; %NWL%var np_size_sq = this . np_size_sq ; %NWL%3
case ' n '  : %NWL%pref =  ' nearest '  ; %NWL%break ;%NWL%}%NWL%return pref ;%NWL%}%NWL%var _toString = Object . prototype . toString ; %NWL%var toString = exports . toString = function ( arg )  {%NWL%return _toString . call ( arg )  ;%NWL%}%NWL%var isObject = exports . isObject = function ( arg )  {%NWL%7
else {%NWL%value = parseFloat ( value )  ;%NWL%}%NWL%return value ;%NWL%}%NWL%function setNumberFieldValue ( field , value )  {%NWL%if ( !isNaN ( value )  )  {%NWL%value = parseFloat ( value )  ; %NWL%var min  = field . getAttribute (  " data - min "  )  ; %NWL%var max  = field . getAttribute (  " data - max "  )  ; %NWL%var decimals = field . getAttribute (  " data - decimals "  )  ; %NWL%8
applyBlendingColor ( gl , blending . color )  ; %NWL%gl . blendEquationSeparate ( blending . equationRgb , blending . equationAlpha )  ; %NWL%gl . blendFuncSeparate ( blending . functionSourceRgb , blending . functionDestinationRgb , blending . functionSourceAlpha , blending . functionDestinationAlpha )  ;%NWL%}%NWL%}%NWL%function applyStencilTest ( gl , renderState )  {%NWL%var stencilTest = renderState . stencilTest ; %NWL%var enabled = stencilTest . enabled ; %NWL%enableOrDisable ( gl , gl . STENCIL_TEST , enabled )  ; %NWL%if ( enabled )  {%NWL%var frontFunction = stencilTest . frontFunction ; %NWL%7
element . style . opacity = 0 ;%NWL%}  ; %NWL%function _xyNotEquals ( a , b )  {%NWL%return ( a && b ) ? ( a [ 0 ] ! =  = b [ 0 ] || a [ 1 ] ! =  = b [ 1 ]  )  : a ! =  = b ;%NWL%}%NWL%ElementOutput . prototype . commit = function commit ( context )  {%NWL%var target = this . _element ; %NWL%if ( !target ) return ; %NWL%var matrix = context . transform ; %NWL%var opacity = context . opacity ; %NWL%var origin = context . origin ; %NWL%9
name :  " TEXT "%NWL%}  )  ; %NWL%var Task = persistence . define (  ' Task '  ,  {%NWL%name :  " TEXT "  ,%NWL%done :  " BOOL "  ,%NWL%counter :  " INT "  ,%NWL%dateAdded :  " DATE "  ,%NWL%dateAddedInMillis :  " BIGINT "  ,%NWL%metaData :  " JSON "%NWL%}  )  ; %NWL%var Tag = persistence . define (  ' Tag '  ,  {%NWL%2
var tabsCtrl = ctrls [ 1 ]  ; %NWL%if ( nobar ) return ; %NWL%scope . $watch ( tabsCtrl . selected , updateBar )  ; %NWL%scope . $on (  ' $mdTabsChanged '  , updateBar )  ; %NWL%function updateBar (  )  {%NWL%var selected = tabsCtrl . selected (  )  ; %NWL%var hideInkBar = !selected || tabsCtrl . count (  )  < 2 ||%NWL%( scope . pagination && scope . pagination . itemsPerPage =  =  = 1 )  ; %NWL%element . css (  ' display '  , hideInkBar ? ' none '  :  ' block '  )  ; %NWL%if ( !hideInkBar )  {%NWL%var count = tabsCtrl . count (  )  ; %NWL%5
}%NWL%}  ; %NWL%goog . graphics . SvgGraphics . prototype . enterDocument = function (  )  {%NWL%var oldPixelSize = this . getPixelSize (  )  ; %NWL%goog . graphics . SvgGraphics . superClass_ . enterDocument . call ( this )  ; %NWL%if ( !oldPixelSize )  {%NWL%this . dispatchEvent ( goog . events . EventType . RESIZE )  ;%NWL%}%NWL%if ( this . useManualViewbox_ )  {%NWL%var width = this . width ; %NWL%var height = this . height ; %NWL%9
favs = favs . map ( function ( fav )  { fav . itemId = fav . itemId . toString (  )  ; return fav ;  }  )  ; %NWL%docs . forEach ( function ( doc )  {%NWL%var entry = _ . findWhere ( favs ,  { itemId : doc . _id . toString (  )  }  )  ; %NWL%doc . favorite = entry ? entry . favorite : false ;%NWL%}  )  ; %NWL%return cb ( null , single ? docs [ 0 ]  : docs )  ;%NWL%}  )  ;%NWL%}%NWL%app . get (  '  / achievement '  , function getAchievements ( req , res , next )  {%NWL%var type = req . query . type ; %NWL%var tag = req . query . tag ; %NWL%9
function InitAdapter ( config )  {%NWL%}%NWL%function getPersistentCache (  )%NWL%{%NWL%var persistentCache = Alloy . createCollection (  ' persistentCache '  )  ; %NWL%persistentCache . fetch (  )  ; %NWL%return persistentCache ;%NWL%}%NWL%function getSessionCache (  )%NWL%{%NWL%var sessionCache = Alloy . createCollection (  ' sessionCache '  )  ; %NWL%4
var termops = require (  '  .  / util / termops '  )  ; %NWL%var feature = require (  '  .  / util / feature '  )  ; %NWL%var Relev = require (  '  .  / util / relev '  )  ; %NWL%var mp2_14 = Math . pow ( 2 , 14 )  ; %NWL%var mp2_28 = Math . pow ( 2 , 28 )  ; %NWL%module . exports = verifymatch ; %NWL%module . exports . sortFeature = sortFeature ; %NWL%module . exports . sortContext = sortContext ; %NWL%function verifymatch ( query , stats , geocoder , matched , options , callback )  {%NWL%var sets = matched . sets ; %NWL%var results = matched . results ; %NWL%9
}  )  . then ( function ( orders2 )  {%NWL%var x = orders2 ; %NWL%ok ( arrayChangeCount =  =  = koChangeCount )  ;%NWL%}  )  . fail ( testFns . handleFail )  . fin ( start )  ;%NWL%}  )  ; %NWL%test (  " disallow setting collection navigation properties "  , function (  )  {%NWL%var em = newEm (  )  ; %NWL%var customerType = em . metadataStore . getEntityType (  " Customer "  )  ; %NWL%var customer = customerType . createEntity (  )  ; %NWL%var orderType = em . metadataStore . getEntityType (  " Order "  )  ; %NWL%var order = orderType . createEntity (  )  ; %NWL%8
menu : formatMenu%NWL%}  )  ; %NWL%editor . addButton (  ' formatselect '  , function (  )  {%NWL%var items =  [  ]  , blocks = createFormats ( editor . settings . block_formats ||%NWL%' Paragraph = p ;  '  +%NWL%' Address = address ;  '  +%NWL%' Pre = pre ;  '  +%NWL%' Header 1 = h1 ;  '  +%NWL%' Header 2 = h2 ;  '  +%NWL%' Header 3 = h3 ;  '  +%NWL%' Header 4 = h4 ;  '  +%NWL%7
var expected = text1 + text2 ; %NWL%this . session . selection . set (  [ 1 , text1 . length ]  )  ; %NWL%this . editor . delete (  ' right '  )  ; %NWL%assert . isEqual ( expected , t1 . content )  ; %NWL%assert . isUndefined ( doc . get (  " t2 "  )  )  ;%NWL%}  ,%NWL%" Join Heading and Text ( append to heading )  "  , function (  )  {%NWL%this . setup (  )  ; %NWL%var doc = this . session . document ; %NWL%var h1 = doc . get (  " h1 "  )  ; %NWL%var t1 = doc . get (  " t1 "  )  ; %NWL%9
if ( selectedColor )  {%NWL%library . selectColor ( selectedColor )  ;%NWL%}%NWL%}  ,%NWL%onContextShowing : function (  )  {%NWL%var copy = document . getElementById (  " context - copy "  )  ; %NWL%var edit = document . getElementById (  " context - edit "  )  ; %NWL%var open = document . getElementById (  " context - open "  )  ; %NWL%var urlopen = document . getElementById (  " context - url "  )  ; %NWL%var tags = document . getElementById (  " context - tags "  )  ; %NWL%var merge = document . getElementById (  " context - merge "  )  ; %NWL%5
' use strict '  ; %NWL%var events = require (  ' events '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var net = require (  ' net '  )  ; %NWL%var tls = require (  ' tls '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var debug = require (  '  .  / debug '  )  ; %NWL%var jspack = require (  '  .  .  / jspack '  )  . jspack ; %NWL%var AMQPTypes = require (  '  .  / constants '  )  . AMQPTypes ; %NWL%var Indicators = require (  '  .  / constants '  )  . Indicators ; %NWL%var FrameType = require (  '  .  / constants '  )  . FrameType ; %NWL%8
if ( match )  {%NWL%locale = match [ 1 ]  ;%NWL%}%NWL%var bundle =  ' i18n!nls / colors '  ; %NWL%match = query && query . match (  / bundle =  (  [ ^\& ]  +  )  /  )  ; %NWL%if ( match )  {%NWL%bundle = match [ 1 ]  ;%NWL%}%NWL%var red =  ' red '  ; %NWL%var blue =  ' blue '  ; %NWL%var green =  ' green '  ; %NWL%8
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . doubleClick ( function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / doubleclick '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testScreenshot : function ( test )  {%NWL%var client = this . client ; %NWL%0
var model = require (  '  .  .  / models / userModel '  )  ; %NWL%var oneHour = 1000 * 60 * 60 ; %NWL%var oneMonth = oneHour * 24 * 30 ; %NWL%exports . changePassword = function ( req , res )  {%NWL%if ( !req . isAuth )  {%NWL%logger . warn (  ' user . changePassword - user not authenticated '  )  ; %NWL%return res . status ( 401 )  . send (  ' Cannot change password '  )  ;%NWL%}%NWL%var user = req . body . user ; %NWL%var oldPassword = req . body . oldPassword ; %NWL%var newPassword = req . body . newPassword ; %NWL%8
exports . formatTime = function ( timestamp , timezone )  {%NWL%return tz ( timestamp , timezone )  . format (  ' HH : mm '  )%NWL%}%NWL%exports . parseDatetime = function ( value , format , timezone )  {%NWL%return tz ( value , formats [ format ]  +  ' HH : mm '  , timezone )  . valueOf (  )%NWL%}%NWL%exports . parseDatetimeForm = function ( body , fieldid )  {%NWL%var date = body [  ' _date -  '  + fieldid ]%NWL%var time = body [  ' _time -  '  + fieldid ]%NWL%var format = body [  ' _format -  '  + fieldid ]%NWL%var timezone = body [  ' _timezone -  '  + fieldid ]%NWL%7
var cookie = require (  ' cookie '  )  ; %NWL%var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var expressSession = require (  ' express - session '  )  ; %NWL%var fs = require (  ' fs - extra '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var logger = require (  '  .  / logger . js '  )  ; %NWL%var socketio = require (  ' socket . io '  )  ; %NWL%var async = require (  '  .  / async . js '  )%NWL%var irc = require (  '  .  / irc . js '  )  ; %NWL%7
libraries . file (  { file : __dirname +  '  /  .  .  / libraries . json '  }  )  ; %NWL%module . exports = exports = function ( libraryName , env , omitSave ,%NWL%shouldPromise )  {%NWL%if ( env . interactive )  {%NWL%runInteractiveSession ( libraryName , env )  ; %NWL%return ;%NWL%}%NWL%var url = env . url ; %NWL%var path = env . path ; %NWL%var version = env . version ; %NWL%var latest = env . latest ; %NWL%7
if ( this . status ! =  =  ' done '  )  {%NWL%this . redoPlacementAfterDone = true ; %NWL%this . angle = angle ; %NWL%return {  }  ;%NWL%}%NWL%var buffers = new BufferSet (  )  ; %NWL%var transferables =  [  ]  ; %NWL%var elementGroups =  {  }  ; %NWL%var collision = this . collision ; %NWL%collision . reset ( angle , pitch )  ; %NWL%var bucketsInOrder = this . bucketsInOrder ; %NWL%8
function onResize (  )  {%NWL%clearTimeout ( resizeTimer )  ; %NWL%resizeTimer = setTimeout ( function (  )  {%NWL%var screen , mqinfo , min , max , current ; %NWL%screen = document . getElementById (  ' td_plugin_sud_screen '  )  ; %NWL%screen . innerHTML = TD . mq . screen ; %NWL%min = TD . mq . currentMQ . min ; %NWL%max = TD . mq . currentMQ . max ; %NWL%current = TD . mq . windowWidth ; %NWL%if ( typeof min ! =  " string "  )  { min +  =  " px "  ;  }%NWL%if ( typeof max ! =  " string "  )  { max +  =  " px "  ;  }%NWL%9
}%NWL%}  , xml2jsSettings )  ;%NWL%}%NWL%APIServer . prototype . makeCall = function ( restApi , params , callback , isRetry )%NWL%{%NWL%var self = this ; %NWL%var reqUrl = null ; %NWL%var options =  {  }  ; %NWL%var data = commonUtils . getApiPostData ( params [  ' path '  ]  , params [  ' data '  ]  )  ; %NWL%var method = params [  ' method '  ]  ; %NWL%var xml2jsSettings = params [  ' xml2jsSettings '  ]  ; %NWL%9
q . subtract ( BigInteger . ONE )  )  ; %NWL%var s1 =  ( g . modPow ( k , p )  )  . mod ( q )  ; %NWL%var s2 =  ( k . modInverse ( q )  . multiply ( hash . add ( x . multiply ( s1 )  )  )  )  . mod ( q )  ; %NWL%var result = KJUR . asn1 . ASN1Util . jsonToASN1HEX (  {%NWL%' seq '  :  [  {  ' int '  :  {  ' bigint '  : s1 }  }  ,  {  ' int '  :  {  ' bigint '  : s2 }  }  ]%NWL%}  )  ; %NWL%return result ;%NWL%}  ; %NWL%this . verifyWithMessageHash = function ( sHashHex , hSigVal )  {%NWL%var p = this . p ; %NWL%var q = this . q ; %NWL%9
listItem . innerHTML =  '  < input type =  " checkbox " name =  " ch '  + i +  '  " id =  " ch '  + i +  '  "  >  < label for =  " ch '  + i +  '  " class =  " ch "  >  <  / label >  '%NWL%listElement . appendChild ( listItem )  ;%NWL%}%NWL%var elem = document . getElementById (  ' initials '  )  ; %NWL%elem . className +  =  "  "  +  " close "  ;%NWL%}  /  / createList%NWL%function createResult (  )  {%NWL%var result = document . getElementById (  ' result '  )  ; %NWL%result . style . width = pixel +  " px "  ; %NWL%result . style . height = pixel +  " px "  ; %NWL%var preview = document . getElementById (  ' preview '  )  ; %NWL%7
var test = module . exports . test = function ( ctx , contentObj , callback )  {%NWL%if ( contentObj . resourceSubType ! =  =  ' link '  )  {%NWL%return callback ( null ,  - 1 )  ;%NWL%}%NWL%if ( YOUTUBE_FULL_REGEX . test ( contentObj . link ) || YOUTUBE_SHORT_REGEX . test ( contentObj . link )  )  {%NWL%return callback ( null , 10 )  ;%NWL%} else {%NWL%return callback ( null ,  - 1 )  ;%NWL%}%NWL%}  ; %NWL%var generatePreviews = module . exports . generatePreviews = function ( ctx , contentObj , callback )  {%NWL%0
this . labelrun . setString ( statistics . meter +  " m "  )  ; %NWL%for ( var i = 0 ; i < indicators . length ; i +  +  )  {%NWL%if ( ind . update )  {%NWL%ind . update ( dt , hero )  ;%NWL%}%NWL%}%NWL%}  ,%NWL%addIndicator : function ( ind )  {%NWL%this . addChild ( ind . sprite )  ; %NWL%var indicators = this . indicators ; %NWL%var statistics = this . statistics ; %NWL%9
var codeEls = document . getElementsByTagName (  ' code '  )  ; %NWL%for ( var i = 0 , ii = codeEls . length ; i < ii ; i +  +  )  {%NWL%var codeEl = codeEls [ i ]  ; %NWL%var lang = codeEl . className ; %NWL%codeEl . className =  ' prettyprint lang -  '  + lang ;%NWL%}%NWL%prettyPrint (  )  ;%NWL%}%NWL%var tableEls = document . getElementsByTagName (  ' table '  )  ; %NWL%for ( var i = 0 , ii = tableEls . length ; i < ii ; i +  +  )  {%NWL%var tableEl = tableEls [ i ]  ; %NWL%2
}  ; %NWL%var Blockquote = function ( forger )  {%NWL%this . enabled = true ; %NWL%this . forger = forger ; %NWL%this . name =  ' Blockquote '  ; %NWL%this . className = forger . options . painters [ this . name ]  . className ;%NWL%}  ; %NWL%Blockquote . prototype =  {%NWL%getDOMButton : function (  )  {%NWL%var li = document . createElement (  ' li '  )  ; %NWL%var i = document . createElement (  ' i '  )  ; %NWL%9
var executionId = nextId ; %NWL%var args = arguments ; %NWL%var before = dispatcher . before ; %NWL%while ( before )  {%NWL%args = before . advice . apply ( this , args ) || args ; %NWL%before = before . next ;%NWL%}%NWL%if ( dispatcher . around )  {%NWL%var results = dispatcher . around . advice ( this , args )  ;%NWL%}%NWL%var after = dispatcher . after ; %NWL%2
path :  '  { last_nav_url }  '  ,%NWL%event :  ' PopupFocused '%NWL%}%NWL%}  ; %NWL%var uid   = new LocalStorage (  ' ga_pokki_uid '  )  ; %NWL%var uid_rand  = new LocalStorage (  ' ga_pokki_uid_rand '  )  ; %NWL%var session_cnt = new LocalStorage (  ' ga_pokki_session_cnt '  )  ; %NWL%var f_session  = new LocalStorage (  ' ga_pokki_f_session '  )  ; %NWL%var l_session  = new LocalStorage (  ' ga_pokki_l_session '  )  ; %NWL%var first_run  = new LocalStorage (  ' ga_pokki_first_run '  )  ; %NWL%var visitor_custom_vars = new LocalStorage (  ' ga_pokki_visitor_custom_vars '  )  ; %NWL%4
this . getComponent (  ' definition '  )  . setValue ( jsonString ! = null ? jsonString :  '  '  )  ;%NWL%}%NWL%}  ,%NWL%onApply : function (  )  {%NWL%this . validateFields (  )  ; %NWL%if ( !this . getForm (  )  . hasInvalidField (  )  )  {%NWL%var panel = this ; %NWL%var widget = panel . ownerCt ; %NWL%var formValues = this . getValues (  )  ; %NWL%var name = formValues . name ; %NWL%var description = formValues . description ; %NWL%9
database : body . database ,%NWL%username : body . username ,%NWL%password : body . password ,%NWL%sqlserverEncrypt :  ( body . sqlserverEncrypt ? true : false )  ,%NWL%postgresSsl :  ( body . postgresSsl ? true : false )%NWL%}  ;%NWL%}%NWL%module . exports = function ( app )  {%NWL%var db = app . get (  ' db '  )  ; %NWL%var decipher = app . get (  ' decipher '  )  ; %NWL%var cipher = app . get (  ' cipher '  )  ; %NWL%8
$ (  ' #loading - text '  )  . html (  ' planets '  )  ; %NWL%var mercury = new Orbit3D ( Ephemeris . mercury ,%NWL%{%NWL%color : 0x913CEE , width : 1 , jed : jed , object_size : 1 . 7 ,%NWL%texture_path : opts . static_prefix +  '  / img / texture - mercury . jpg '  ,%NWL%display_color : new THREE . Color ( 0x913CEE )  ,%NWL%particle_geometry : particle_system_geometry ,%NWL%name :  ' Mercury '%NWL%}  )  ; %NWL%scene . add ( mercury . getEllipse (  )  )  ; %NWL%var venus = new Orbit3D ( Ephemeris . venus ,%NWL%1
var size = new OpenLayers . Size (%NWL%this . backBufferTile . size . w * ratio ,%NWL%this . backBufferTile . size . h * ratio%NWL%)  ; %NWL%var px = this . layer . map . getLayerPxFromLonLat ( upperLeft )  ; %NWL%OpenLayers . Util . modifyDOMElement ( this . backBufferTile . frame ,%NWL%null , px , size )  ; %NWL%var imageSize = this . backBufferTile . imageSize ; %NWL%imageSize = new OpenLayers . Size ( imageSize . w * ratio ,%NWL%imageSize . h * ratio )  ; %NWL%var imageOffset = this . backBufferTile . imageOffset ; %NWL%7
var morgan = require (  ' morgan '  )  ; %NWL%var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var cookieSession = require (  ' cookie - session '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var methodOverride = require (  ' method - override '  )  ; %NWL%var swig = require (  ' swig '  )  ; %NWL%var winston = require (  ' winston '  )  ; %NWL%var helpers = require (  ' view - helpers '  )  ; %NWL%var config = require (  '  .  / config '  )  ; %NWL%var pkg = require (  '  .  .  / package . json '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%0
statics :%NWL%{%NWL%compile : function ( map )%NWL%{%NWL%if ( !map )  {%NWL%return " clip : auto ;  "  ;%NWL%}%NWL%var left = map . left ; %NWL%var top = map . top ; %NWL%var width = map . width ; %NWL%var height = map . height ; %NWL%7
render (  )  . then ( function (  )  {%NWL%var spec = view . render (  )  ; %NWL%expect ( spec . target [ 0 ]  . target . target )  . toBe ( subview1 . getFamousId (  )  )  ; %NWL%expect ( spec . target [ 1 ]  . target . target )  . toBe ( subview2 . getFamousId (  )  )  ; %NWL%context . done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' builds correct spec after invalidate based on view with child '  , function ( done )  {%NWL%var context = new Setup ( done )  ; %NWL%var region = context . region ; %NWL%var root = context . root ; %NWL%9
this . messageType = options . messageType ; %NWL%this . limit = options . limit ; %NWL%this . autoDelete = !!options . autoDelete ; %NWL%this . noBatch = !!options . noBatch ; %NWL%var key = options . routingKey || this . messageType ; %NWL%this . routingKey =  [  ]  . concat ( key )  ;%NWL%}%NWL%util . inherits ( Responder , Events . EventEmitter )  ; %NWL%Responder . prototype . _start = function (  )  {%NWL%var rabbit = this . rabbit ; %NWL%var exchange = this . exchange ; %NWL%9
return definition . ctor ;%NWL%}%NWL%function overrideAttributeApi ( prototype )  {%NWL%if ( prototype . setAttribute . _polyfilled )  {%NWL%return ;%NWL%}%NWL%var setAttribute = prototype . setAttribute ; %NWL%prototype . setAttribute = function ( name , value )  {%NWL%changeAttribute . call ( this , name , value , setAttribute )  ;%NWL%}  ; %NWL%var removeAttribute = prototype . removeAttribute ; %NWL%6
}  ; %NWL%Group . prototype . deploy = function deploy ( target )  {%NWL%this . context . migrate ( target )  ;%NWL%}  ; %NWL%Group . prototype . recall = function recall ( target )  {%NWL%this . _container = document . createDocumentFragment (  )  ; %NWL%this . context . migrate ( this . _container )  ;%NWL%}  ; %NWL%Group . prototype . commit = function commit ( context )  {%NWL%var transform = context . transform ; %NWL%var origin = context . origin ; %NWL%9
return advised ?%NWL%advised . apply ( target , args )  :  /  / called the advised function%NWL%previous . advice ( target , args )  ;  /  / cancelled , skip to next one%NWL%}%NWL%}  ;%NWL%} else {%NWL%signal =  {%NWL%remove : function (  )  {%NWL%if ( signal . advice )  {%NWL%var previous = signal . previous ; %NWL%var next = signal . next ; %NWL%9
}  ; %NWL%DrawInfo . prototype . inspectDrawCall = function ( frame , drawCall )  {%NWL%var doc = this . browserWindow . document ; %NWL%doc . title =  " Draw Info : # "  + drawCall . ordinal +  "  "  + drawCall . name ; %NWL%var innerDiv = this . elements . innerDiv ; %NWL%while ( innerDiv . hasChildNodes (  )  )  {%NWL%innerDiv . removeChild ( innerDiv . firstChild )  ;%NWL%}%NWL%this . demandSetup (  )  ; %NWL%var width = frame . canvasInfo . width ; %NWL%var height = frame . canvasInfo . height ; %NWL%9
$this . append ( $bar )  ; %NWL%$this . append ( $text )  ; %NWL%bar . alt				 = this . tpercentage ; %NWL%bar . title			 = this . tpercentage ;%NWL%}%NWL%var t = setInterval ( function (  )  {%NWL%var config		 = pb . config ; %NWL%var cpercentage = parseInt ( config . cpercentage )  ; %NWL%var tpercentage = parseInt ( config . tpercentage )  ; %NWL%var increment	 = parseInt ( config . increment )  ; %NWL%var bar			 = pb . bar ; %NWL%6
var gulp = require (  ' gulp - help '  )  ( require (  ' gulp '  )  ,  { description :  ' Display this '  , aliases :  [  ' h '  ,  ' ? '  ]  }  )  ; %NWL%var uglify = require (  ' gulp - uglifyjs '  )  ; %NWL%var sass = require (  ' gulp - sass - binaries '  )  ; %NWL%var inlinesource = require (  ' gulp - inline - source '  )  ; %NWL%var htmlreplace = require (  ' gulp - html - replace '  )  ; %NWL%var debug = require (  ' gulp - debug '  )  ; %NWL%var merge = require (  ' merge - stream '  )  ; %NWL%var del = require (  ' del '  )  ; %NWL%var vinylPaths = require (  ' vinyl - paths '  )  ; %NWL%var rename = require (  " gulp - rename "  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%7
}  )%NWL%db = low ( syncFile ,  { async : false }  )%NWL%}  )%NWL%it (  ' adds functions '  , function (  )  {%NWL%db (  ' foo '  )  . hello (  ' world '  )%NWL%assert . deepEqual ( JSON . parse ( fs . readFileSync ( syncFile )  )  ,  { foo :  [  ' hello world '  ]  }  )%NWL%}  )%NWL%}  )%NWL%describe (  ' stringify and parse '  , function (  )  {%NWL%var stringify = low . stringify%NWL%var parse = low . parse%NWL%9
assert . domEqual ( update [ 1 ]  [ 0 ]  , span [ 1 ]  [ 1 ]  )  ; %NWL%assert . domNull ( update [ 1 ]  [ 1 ]  )  ; %NWL%var enter = update . enter (  )  ; %NWL%assert . equal ( enter . length , 2 )  ; %NWL%assert . equal ( enter [ 0 ]  . length , 2 )  ; %NWL%assert . equal ( enter [ 1 ]  . length , 2 )  ; %NWL%assert . domNull ( enter [ 0 ]  [ 0 ]  )  ; %NWL%assert . deepEqual ( enter [ 0 ]  [ 1 ]  ,  { __data__ : 2 }  )  ; %NWL%assert . domNull ( enter [ 1 ]  [ 0 ]  )  ; %NWL%assert . deepEqual ( enter [ 1 ]  [ 1 ]  ,  { __data__ : 2 }  )  ; %NWL%var exit = update . exit (  )  ; %NWL%2
' use strict '  ; %NWL%var config = intern . config ; %NWL%var PAGE_URL = config . fxaContentRoot +  ' signin?context = fx_desktop_v1&service = sync '  ; %NWL%var AUTH_SERVER_ROOT = config . fxaAuthRoot ; %NWL%var client ; %NWL%var email ; %NWL%var user ; %NWL%var PASSWORD =  ' 12345678 '  ; %NWL%var accountData ; %NWL%var listenForFxaCommands = FxDesktopHelpers . listenForFxaCommands ; %NWL%var testIsBrowserNotifiedOfLogin = FxDesktopHelpers . testIsBrowserNotifiedOfLogin ; %NWL%9
}%NWL%var indices = self . getPixelIndices ( inputPixels , brewtool . getGreyscalePalette (  )  )  ; %NWL%var spriteRows = spriteTable . querySelectorAll (  ' tr '  )  ; %NWL%for ( var i = 0 ; i < spriteRows . length ; i +  +  )  {%NWL%var row = spriteRows [ i ]  ; %NWL%var dx = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . x '  )  . value ) || 0 , 0 )  , 255 )  - 8 ; %NWL%var dy = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . y '  )  . value ) || 0 , 0 )  , 255 )  - 16 ; %NWL%var tile = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . tile '  )  . value ) || 0 , 0 )  , Math . min ( Math . floor ( inputCanvas . width / 8 )  * Math . floor ( inputCanvas . height / 8 )  - 1 ,  255 )  )  ; %NWL%var pal = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . pal '  )  . value ) || 0 , 0 )  , Math . min ( palettes . length , 7 )  )  ; %NWL%var hflip = row . querySelector (  '  . hflip '  )  . checked ; %NWL%var vflip = row . querySelector (  '  . vflip '  )  . checked ; %NWL%9
return "  "  ;%NWL%} else {%NWL%return this . $getIndent ( line )  ;  /  / Keep whatever indent the previous line has%NWL%}%NWL%}%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / pgsql_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ,  ' ace / mode / perl_highlight_rules '  ,  ' ace / mode / python_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
this . promo_section . set (  ' slide '  ,  { duration : 250 , mode :  ' horizontal '  }  )  ; %NWL%this . promo_section . get (  ' slide '  )  . hide (  )  ;%NWL%}%NWL%}  ,%NWL%do_join : function ( e )%NWL%{%NWL%if ( e ) e . stop (  )  ; %NWL%var username = this . inp_username . get (  ' value '  )  ; %NWL%var password = this . inp_password . get (  ' value '  )  ; %NWL%var pconfirm = this . inp_confirm . get (  ' value '  )  ; %NWL%var promo = this . inp_promo . get (  ' value '  )  ; %NWL%7
. attr (  ' title '  ,  ' Free / Cache / Buffer / Used '  )%NWL%. tooltip (  )  . gat (  )  . gat (  )%NWL%. tag (  ' th '  )%NWL%. tag (  ' span '  )  . text (  ' Network '  )%NWL%. attr (  ' title '  ,  ' Receive / Send / Active / TimeWait '  )%NWL%. tooltip (  )  . gat (  )  . gat (  )%NWL%. tag (  ' th '  )  . text (  '  '  )  . gat (  )%NWL%. gat (  )%NWL% ; %NWL%var tbody = this . tbody = $ . tag (  ' tbody '  )  ; %NWL%var tfoot = this . tfoot = $ . tag (  ' tfoot '  )  ; %NWL%9
{%NWL%' use strict '  ; %NWL%var DB     = require (  ' DB / DBManager '  )  ; %NWL%var ItemType    = require (  ' DB / Items / ItemType '  )  ; %NWL%var jQuery    = require (  ' Utils / jquery '  )  ; %NWL%var Client    = require (  ' Core / Client '  )  ; %NWL%var Preferences   = require (  ' Core / Preferences '  )  ; %NWL%var Renderer    = require (  ' Renderer / Renderer '  )  ; %NWL%var Mouse     = require (  ' Controls / MouseEventHandler '  )  ; %NWL%var UIManager    = require (  ' UI / UIManager '  )  ; %NWL%var UIComponent   = require (  ' UI / UIComponent '  )  ; %NWL%9
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
debug (  " Editing resource %s of type %s "  , resourceId , resourceType . name )  ; %NWL%return ;%NWL%}%NWL%}%NWL%fn (  )  ;  /  / blank page%NWL%}  ; %NWL%Dashboard . prototype . loadAdvancedDashboard = function ( data , fn )  {%NWL%var pagePath = data . pagePath%NWL%, dashboardPath = data . dashboardPath%NWL%, page = data . page%NWL%, resourceType = data . resourceType%NWL%8
_this . emit (  ' message '  , ws , JSON . parse ( data )  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onClose = function ( ws )  {%NWL%if ( this . _wss . clients . length =  =  = 0 )  {%NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%9
. attr (  ' width '  , width )%NWL%. attr (  ' height '  , height + clipPathBuffer )  ;%NWL%}  ; %NWL%LineChart . prototype . draw = function (  )  {%NWL%var self = this ; %NWL%var $elem = $ ( this . chartEl )  ; %NWL%var margin = this . _attr . margin ; %NWL%var elWidth = this . _attr . width = $elem . width (  )  ; %NWL%var elHeight = this . _attr . height = $elem . height (  )  ; %NWL%var yMin = this . handler . yAxis . yMin ; %NWL%var yScale = this . handler . yAxis . yScale ; %NWL%9
var clientY = typeof options . pageY ! =  ' undefined ' ? options . pageY : 0 ; %NWL%var ctrlKey = typeof options . ctrlKey ! =  ' undefined ' ? options . ctrlKey : false ; %NWL%var altKey = typeof options . altKey ! =  ' undefined ' ? options . altKey : false ; %NWL%var shiftKey = typeof options . shiftKey ! =  ' undefined ' ? options . shiftKey : false ; %NWL%var metaKey = typeof options . metaKey ! =  ' undefined ' ? options . metaKey : false ; %NWL%var scale = typeof options . scale ! =  ' undefined ' ? options . scale : 1 . 0 ; %NWL%var rotation = typeof options . rotation ! =  ' undefined ' ? options . rotation : 0 . 0 ; %NWL%var relatedTarget = typeof options . relatedTarget ! =  ' undefined ' ? options . relatedTarget : null ; %NWL%var touches = this . createTouchList ( options . touches , target )  ; %NWL%var targetTouches = this . createTouchList ( options . targetTouches , target )  ; %NWL%var changedTouches = this . createTouchList ( options . changedTouches , target )  ; %NWL%8
var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%9
res . json ( 200 ,  {  ' message '  :  ' success '  }  )  ;%NWL%}  )  . exec (  )  ;%NWL%} else {%NWL%res . json ( 401 ,  {  ' error '  :  ' UNAUTHORIZED '  }  )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%app . post (  '  / search / delete / type /  '  , function ( req , res )  {%NWL%var site = req . body . site ; %NWL%var token = req . body . token ; %NWL%9
}  ,%NWL%one : function rqlOne (  )  {%NWL%if ( this . length > 1 )%NWL%throw new errors . RQL (  " More than one object found "  )  ; %NWL%return this [ 0 ]  ;%NWL%}%NWL%}  ; %NWL%function rqlNodeToFunc ( node )  {%NWL%if ( typeof node =  =  =  ' object '  )  {%NWL%var name = node . name ; %NWL%var args = node . args ; %NWL%9
n1 . receive (  { payload : data , topic :  " bar "  }  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should retrieve list contents as an array of text '  , function ( done )  {%NWL%fs . readFile ( file ,  ' utf8 '  , function ( err , data )  {%NWL%var flow =  [  { id :  " n1 "  , type :  " html "  , wires :  [  [  " n2 "  ]  ]  , tag :  " ol "  , ret :  " text "  }  ,%NWL%{ id :  " n2 "  , type :  " helper "  }  ]  ; %NWL%helper . load ( htmlNode , flow , function (  )  {%NWL%var n1 = helper . getNode (  " n1 "  )  ; %NWL%var n2 = helper . getNode (  " n2 "  )  ; %NWL%9
var texture = this . texture ; %NWL%var data = this . texture . data ; %NWL%var type = texture . dataType ; %NWL%this . type = type ; %NWL%if ( type  =  =  " framebuffer "  )  {%NWL%this . texture . glTexture =  this . texture . data ; %NWL%type = texture . type ;%NWL%} else {%NWL%var mips =  [  ]  ; %NWL%var width = texture . width ; %NWL%var height = texture . height ; %NWL%9
help :   ' Watch for changes .  '  ,%NWL%action :  ' storeTrue '%NWL%}%NWL%)  ; %NWL%cli . addArgument (  [  ' input '  ]  ,  {%NWL%help :   ' JSON file or directory containing JSON files or - to read JSON from stdin .  '%NWL%}  )  ; %NWL%try {%NWL%var options = cli . parseArgs (  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var fs  = require (  ' fs '  )  ; %NWL%9
var minify = require (  '  .  .  '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var langs =  [%NWL%' css '  ,%NWL%' js '  ,%NWL%' html '%NWL%]  ; %NWL%describe (  ' minify '  , function (  )  {%NWL%langs . forEach ( function ( lang )  {%NWL%var min = fixture (  ' min .  '  + lang )  ; %NWL%var max = fixture (  ' max .  '  + lang )  ; %NWL%9
var st = dom . parseStyle ( dom . getAttrib ( trElm ,  " style "  )  )  ; %NWL%var rowtype = trElm . parentNode . nodeName . toLowerCase (  )  ; %NWL%var align = dom . getAttrib ( trElm ,  ' align '  )  ; %NWL%var valign = dom . getAttrib ( trElm ,  ' valign '  )  ; %NWL%var height = trimSize ( getStyle ( trElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var className = dom . getAttrib ( trElm ,  ' class '  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( trElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var backgroundimage = getStyle ( trElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  [  ' \ "  ] ? (  [ ^ ' \ "  ]  *  )  [  ' \ "  ] ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ; %NWL%var id = dom . getAttrib ( trElm ,  ' id '  )  ; %NWL%var lang = dom . getAttrib ( trElm ,  ' lang '  )  ; %NWL%var dir = dom . getAttrib ( trElm ,  ' dir '  )  ; %NWL%2
MUST_USE_ATTRIBUTE : 0x1 ,%NWL%MUST_USE_PROPERTY : 0x2 ,%NWL%HAS_SIDE_EFFECTS : 0x4 ,%NWL%HAS_BOOLEAN_VALUE : 0x8 ,%NWL%HAS_NUMERIC_VALUE : 0x10 ,%NWL%HAS_POSITIVE_NUMERIC_VALUE : 0x20 | 0x10 ,%NWL%HAS_OVERLOADED_BOOLEAN_VALUE : 0x40 ,%NWL%injectDOMPropertyConfig : function ( domPropertyConfig )  {%NWL%var Properties = domPropertyConfig . Properties || {  }  ; %NWL%var DOMAttributeNames = domPropertyConfig . DOMAttributeNames || {  }  ; %NWL%var DOMPropertyNames = domPropertyConfig . DOMPropertyNames || {  }  ; %NWL%8
var NodeList = require (  '  .  / NodeList '  )  ; %NWL%var Element = require (  '  .  / Element '  )  ; %NWL%var Text = require (  '  .  / Text '  )  ; %NWL%var Comment = require (  '  .  / Comment '  )  ; %NWL%var Event = require (  '  .  / Event '  )  ; %NWL%var DocumentFragment = require (  '  .  / DocumentFragment '  )  ; %NWL%var ProcessingInstruction = require (  '  .  / ProcessingInstruction '  )  ; %NWL%var DOMImplementation = require (  '  .  / DOMImplementation '  )  ; %NWL%var FilteredElementList = require (  '  .  / FilteredElementList '  )  ; %NWL%var TreeWalker = require (  '  .  / TreeWalker '  )  ; %NWL%var NodeFilter = require (  '  .  / NodeFilter '  )  ; %NWL%0
months :  " %d months "  ,%NWL%year :  " about a year "  ,%NWL%years :  " %d years "  ,%NWL%numbers :  [  ]%NWL%}%NWL%}  ; %NWL%var $l = settings . strings ; %NWL%module . exports . settings = settings ; %NWL%$l . inWords = function ( distanceMillis )  {%NWL%var prefix = $l . prefixAgo ; %NWL%var suffix = $l . suffixAgo ; %NWL%9
var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%0
this . element . find (  ' #open_notebook '  )  . click ( function (  )  {%NWL%var parent = utils . url_path_split ( that . notebook . notebook_path )  [ 0 ]  ; %NWL%window . open ( utils . url_join_encode ( that . base_url ,  ' tree '  , parent )  )  ;%NWL%}  )  ; %NWL%this . element . find (  ' #copy_notebook '  )  . click ( function (  )  {%NWL%that . notebook . copy_notebook (  )  ; %NWL%return false ;%NWL%}  )  ; %NWL%this . element . find (  ' #download_snb '  )  . click ( function (  )  {%NWL%var base_url = that . notebook . base_url ; %NWL%var notebook_path = that . notebook . notebook_path ; %NWL%9
{%NWL%var a = this . a ; %NWL%var b = this . b ; %NWL%var j = this . jAcc * dt_coef ; %NWL%a . w -  = j * a . i_inv ; %NWL%b . w +  = j * b . i_inv ;%NWL%}  ; %NWL%SimpleMotor . prototype . applyImpulse = function (  )%NWL%{%NWL%var a = this . a ; %NWL%var b = this . b ; %NWL%1
if ( pwstrength > 100 )  {%NWL%pwstrength = 100 ;%NWL%}%NWL%var mymeter = document . getElementById (  ' pwmeter '  )  ; %NWL%mymeter . setAttribute (  " value "  , pwstrength )  ; %NWL%return ;%NWL%}%NWL%function checkPasswords (  )%NWL%{%NWL%var pw1 = document . getElementById (  ' pw1 '  )  . value ; %NWL%var pw2 = document . getElementById (  ' pw2 '  )  . value ; %NWL%9
if ( typeof require ! =  " function "  ) require (  " fail "  )  ; %NWL%if ( typeof require ! =  =  " function "  ) require (  " fail "  )  ; %NWL%if ( ! ( typeof require =  =  " function "  )  ) require (  " fail "  )  ; %NWL%if ( ! ( typeof require =  =  =  " function "  )  ) require (  " fail "  )  ; %NWL%if ( typeof require =  =  " undefined "  ) require = require (  " fail "  )  ; %NWL%if ( typeof require =  =  =  " undefined "  ) require = require (  " fail "  )  ; %NWL%if ( typeof module =  =  " undefined "  ) module = require (  " fail "  )  ; %NWL%if ( typeof module =  =  =  " undefined "  ) module = require (  " fail "  )  ; %NWL%if ( typeof module ! =  " object "  ) module = require (  " fail "  )  ; %NWL%if ( typeof exports =  =  " undefined "  ) exports = require (  " fail "  )  ; %NWL%if ( typeof require . include ! =  =  " function "  ) require . include (  " fail "  )  ; %NWL%1
Spice . add (  {%NWL%id :  ' book '  ,%NWL%name :  ' Books '  ,%NWL%data : api_result . books ,%NWL%meta :  {%NWL%sourceName :  " iDreamBooks "  ,  /  / More at .  .  .%NWL%sourceUrl : api_result . books [ 0 ]  . detail_link%NWL%}  ,%NWL%normalize : function ( item )  {%NWL%var title = item . title || "  "  ; %NWL%var sub_title = item . sub_title || "  "  ; %NWL%9
' use strict '  ; %NWL%var should = require (  ' chai '  )  . should (  )  ; %NWL%var expect = require (  ' chai '  )  . expect ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var bitcore = require (  '  .  .  /  .  .  '  )  ; %NWL%var BN = bitcore . crypto . BN ; %NWL%var BufferWriter = bitcore . encoding . BufferWriter ; %NWL%var BufferReader = bitcore . encoding . BufferReader ; %NWL%var Output = bitcore . Transaction . Output ; %NWL%var Script = bitcore . Script ; %NWL%var errors = bitcore . errors ; %NWL%9
scale_x *  = scale ; %NWL%scale_y *  = scale ;%NWL%}%NWL%return seq ;%NWL%}  ; %NWL%function post ( seq )  {%NWL%var min_neighbors = params . min_neighbors ; %NWL%var cascade = params . cascade ; %NWL%var interval = params . interval ; %NWL%var scale = params . scale ; %NWL%var next = params . next ; %NWL%6
STATE . sync_interval = setInterval ( _sync , 100 )  ; %NWL%STATE . started = true ; %NWL%_ . each ( STATE . players , function ( player )  {%NWL%player . selected_tile = null ; %NWL%player . num_pairs = 0 ;%NWL%}  )  ;%NWL%}%NWL%socket . on (  ' tile . matched '  , function ( data )  {%NWL%var tiles = data . tiles%NWL%, uuid = data . uuid%NWL%, player_id = data . player_id%NWL%9
jQuery (  ' #wpsc_akst_form '  )  . css (  " left "  , offset [  ' left '  ]  +  ' px '  )  ; %NWL%jQuery (  ' #wpsc_akst_form '  )  . css (  " top "  ,  ( offset [  ' top '  ]  + 14 + 3 )  +  ' px '  )  ; %NWL%jQuery (  ' #wpsc_akst_form '  )  . css (  " display "  ,  ' block '  )  ;%NWL%}%NWL%function wpsc_akst_share_url ( base , url , title )  {%NWL%base = base . replace (  '  { url }  '  , url )  ; %NWL%return base . replace (  '  { title }  '  , title )  ;%NWL%}%NWL%function wpsc_akst_share_tab ( tab )  {%NWL%var tab1 = document . getElementById (  ' wpsc_akst_tab1 '  )  ; %NWL%var tab2 = document . getElementById (  ' wpsc_akst_tab2 '  )  ; %NWL%9
var define = window . define ? window . define : function ( cb )  { cb . call ( this )  ;  }  ; %NWL%define ( function ( require )  {%NWL%require = require || function (  )  { return false ;  }  ; %NWL%var keys ; %NWL%var Backbone = require (  " backbone "  ) || window . Backbone ; %NWL%var _ = require (  " underscore "  ) || window . _ ; %NWL%var $ = require (  " jquery "  ) || Backbone . $ ; %NWL%var warn = window . console && window . console . warn ; %NWL%var trace = window . console && window . console . trace ; %NWL%var _configure = Backbone . View . prototype . _configure ; %NWL%var render = Backbone . View . prototype . render ; %NWL%9
Reduction . prototype . fulfill = function Reduction$fulfill ( value , index )  {%NWL%this . accum = value ; %NWL%this . index = index + 1 ; %NWL%this . iterate (  )  ;%NWL%}  ; %NWL%Reduction . prototype . iterate = function Reduction$iterate (  )  {%NWL%var i = this . index ; %NWL%var len = this . length ; %NWL%var items = this . items ; %NWL%var result = this . accum ; %NWL%var receiver = this . receiver ; %NWL%8
state :  ' Charging '%NWL%}  ,  {%NWL%value : 3 ,%NWL%state :  ' 40% '%NWL%}  ]%NWL%}  ]%NWL%}  ; %NWL%var analogs = config . analogSticks ; %NWL%var buttons = config . buttons ; %NWL%var motions = config . motionInputs ; %NWL%var status = config . status ; %NWL%8
optionsDiv . appendChild ( attributeSelect )  ; %NWL%innerDiv . appendChild ( optionsDiv )  ; %NWL%gli . ui . appendClear ( innerDiv )  ; %NWL%gli . ui . appendbr ( innerDiv )  ;%NWL%}  ; %NWL%DrawInfo . prototype . appendTable = function ( el , drawInfo , name , tableData , valueCallback )  {%NWL%var doc = this . browserWindow . document ; %NWL%var gl = this . gl ; %NWL%var table = doc . createElement (  " table "  )  ; %NWL%table . className =  " program - attribs "  ; %NWL%var tr = doc . createElement (  " tr "  )  ; %NWL%8
: n . response || "  "%NWL%, headers  = n . headers || {  }%NWL%, reqheaders = n . reqheaders || {  }%NWL%, body   = n . base64%NWL%? new Buffer ( n . base64 ,  ' base64 '  )  . toString (  )%NWL% : n . body  || "  "%NWL% ; %NWL%if ( typeof response =  =  =  " string " && endsWith ( response ,  '  . json '  )  )  {%NWL%response = helpers . loadFixture ( path . join ( fixture , response )  )  ;%NWL%}%NWL%if ( typeof headers =  =  =  " string " && endsWith ( headers ,  '  . json '  )  )  {%NWL%7
if ( data . description ) ret . description = strip ( data . description )  ; %NWL%ret . url = data . url ; %NWL%ret . provider_name =  ' tumblr '  ; %NWL%if ( data . post_url ) ret . provider_url = data . post_url ; %NWL%if ( data . blog_name ) ret . author_name = data . blog_name ; %NWL%return ret ;%NWL%}%NWL%if ( data . type =  =  =  ' video '  )  {%NWL%ret =  { type :  ' video '  }  ; %NWL%if ( data . title ) ret . title = data . title ; %NWL%if ( data . caption ) ret . description = strip ( data . caption )  ; %NWL%0
var extend = _dereq_ (  '  .  / util '  )  . extend ; %NWL%var api =  {  }  ,%NWL%apiNodeList =  {  }  ,%NWL%$ =  {  }  ; %NWL%var array = _dereq_ (  '  .  / array '  )  ; %NWL%var attr = _dereq_ (  '  .  / attr '  )  ; %NWL%var className = _dereq_ (  '  .  / class '  )  ; %NWL%var data = _dereq_ (  '  .  / data '  )  ; %NWL%var dom = _dereq_ (  '  .  / dom '  )  ; %NWL%var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%var event = _dereq_ (  '  .  / event '  )  ; %NWL%4
if ( this . options . ajax )  {%NWL%this . asyncRequest (  )  ;  /  / send ajax request%NWL%return ;%NWL%}%NWL%this . form . submit (  )  ;%NWL%}  ,%NWL%asyncRequest : function (  )  {%NWL%if ( this . options . ajax . showMask )  { this . showMask (  )  ;  }%NWL%var formValue = this . getValue (  )  ; %NWL%var uri = lang . isFunction ( this . options . ajax . uri ) ? this . options . ajax . uri ( formValue )  : this . options . ajax . uri ; %NWL%var method = lang . isFunction ( this . options . ajax . method ) ? this . options . ajax . method ( formValue )  : this . options . ajax . method ; %NWL%9
var callback = cStore [ evtName ]  [ i ]  ; %NWL%callback ( data )  ;%NWL%}%NWL%}%NWL%}%NWL%}  ; %NWL%return Coordinator ;%NWL%}  )  (  )  ; %NWL%var _connect = function ( scope )  {%NWL%var renderer = scope . _renderer ; %NWL%var coordinator = scope . _coordinator ; %NWL%9
}  ; %NWL%removeClass_ = function removeClassPoly_ ( elem , className )  {%NWL%if ( !hasClass ( elem )  )  { return ;  }%NWL%var currentClasses = getClasses ( elem )  ; %NWL%var idx = Util . indexOf ( currentClasses , className )  ; %NWL%currentClasses . splice ( idx , 1 )  ; %NWL%elem . className = currentClasses . join (  '  '  )  ;%NWL%}  ;%NWL%}%NWL%var hasClass = Util . autoCurry ( hasClass_ )  ; %NWL%var addClass = Util . autoCurry ( addClass_ )  ; %NWL%9
token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%define (  " ace / mode / scad_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / doc_comment_highlight_rules "  ,  " ace / mode / text_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var argsClass =  '  [ object Arguments ]  '  ,%NWL%arrayClass =  '  [ object Array ]  '  ,%NWL%boolClass =  '  [ object Boolean ]  '  ,%NWL%dateClass =  '  [ object Date ]  '  ,%NWL%numberClass =  '  [ object Number ]  '  ,%NWL%objectClass =  '  [ object Object ]  '  ,%NWL%regexpClass =  '  [ object RegExp ]  '  ,%NWL%stringClass =  '  [ object String ]  '  ; %NWL%var objectProto = Object . prototype ; %NWL%var toString = objectProto . toString ; %NWL%var hasOwnProperty = objectProto . hasOwnProperty ; %NWL%9
}%NWL%if ( this . assetsFile =  = assetsFile && this . assetID =  = assetID ) return ; %NWL%this . assetsFile = assetsFile ; %NWL%this . assetID = assetID ; %NWL%this . define = flax . assetsManager . getDisplayDefine ( this . assetsFile , this . assetID )  ; %NWL%var dir = this . assetsFile . slice ( 0 , this . assetsFile . lastIndexOf (  "  /  "  )  )  ; %NWL%this . _imgFile = dir +  "  /  "  + this . define [  ' url '  ]  ; %NWL%if ( this instanceof flax . Scale9Image ) this . initWithFile ( this . _imgFile , cc . rect (  )  , this . define [  ' scale9 '  ]  )  ; %NWL%else this . initWithFile ( this . _imgFile )  ; %NWL%var anchorX = this . define [  ' anchorX '  ]  ; %NWL%var anchorY = this . define [  ' anchorY '  ]  ; %NWL%9
sinon . spy ( faker . address ,  ' county '  )  ; %NWL%var county = faker . address . county (  )  ; %NWL%assert . ok ( county )  ; %NWL%assert . ok ( faker . address . county . called )  ; %NWL%faker . address . county . restore (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  " country (  )  "  , function (  )  {%NWL%it (  " returns random country "  , function (  )  {%NWL%sinon . spy ( faker . address ,  ' country '  )  ; %NWL%var country = faker . address . country (  )  ; %NWL%1
}%NWL%settings . disableTimeRanges = settings . disableTimeRanges . sort ( function ( a , b )  {%NWL%return a [ 0 ]  - b [ 0 ]  ;%NWL%}  )  ;%NWL%}%NWL%return settings ;%NWL%}%NWL%function _render ( self )%NWL%{%NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
Queue . prototype . push = function ( value )  {%NWL%var length = this . length ; %NWL%if ( this . capacity <  = length )  {%NWL%this . grow ( this . snap ( this . capacity * this . growFactor )  )  ;%NWL%}%NWL%var index =  ( this . front + length ) & ( this . capacity - 1 )  ; %NWL%this [ index ]  = value ; %NWL%this . length = length + 1 ;%NWL%}  ; %NWL%Queue . prototype . shift = function (  )  {%NWL%var front = this . front ; %NWL%1
if ( threshold =  = 0 )%NWL%return ; %NWL%$ (  " #mod - matrix td . action - percentage . action - number "  )  . each ( function (  )  {%NWL%if ( parseInt ( $ ( this )  . text (  )  )  < threshold )%NWL%$ ( this )  . parents (  " tr : first "  )  . addClass (  " highlight "  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%self . submitForm = function ( form )  {%NWL%self . resetData (  )  ; %NWL%var from = $ ( form )  . find (  " input [ name = from ]  "  )  . val (  )  ; %NWL%var to = $ ( form )  . find (  " input [ name = to ]  "  )  . val (  )  ; %NWL%9
}%NWL%HighTables . renderCharts = renderChartsFromConfigs ; %NWL%HighTables . renderChart = function ( chart )  {%NWL%var chartType = getChartType ( chart )  ; %NWL%var engine  = chartConfigs [ chartType ]  . engine ; %NWL%var options  = chartConfigs [ chartType ]  . options ; %NWL%engine . renderTo ( chart , options )  ;%NWL%}  ; %NWL%HighTables . renderChartFromTable = function ( table )  {%NWL%var chartType = getChartTypeFromTable ( table )  ; %NWL%var engine  = chartConfigs [ chartType ]  . engine ; %NWL%5
if ( goog . isString ( this . urlBase_ )  )  {%NWL%this . load_ ( module )  ;%NWL%} else {%NWL%this . pendingBeforeInit_ . push ( module )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%goog . module . Loader . prototype . provide = function (%NWL%module , opt_symbol , opt_object )  {%NWL%var modules = this . modules_ ; %NWL%var pending = this . pending_ ; %NWL%9
var imageIndex = pageNum * this . numThumbs ; %NWL%pager . append (  '  < a rel =  " history " href =  " # '  + this . data [ imageIndex ]  . hash +  '  " title =  "  '  + pageLabel +  '  "  >  '  + pageLabel +  '  <  / a >  '  )  ;%NWL%}%NWL%return this ;%NWL%}%NWL%}  )  ; %NWL%$ . extend ( this , defaults , settings )  ; %NWL%if ( this . enableHistory && !$ . historyInit )%NWL%this . enableHistory = false ; %NWL%if ( this . imageContainerSel ) this . $imageContainer = $ ( this . imageContainerSel )  ; %NWL%if ( this . captionContainerSel ) this . $captionContainer = $ ( this . captionContainerSel )  ; %NWL%9
var x = this . markerCenterx ; %NWL%var y = this . markerCentery ; %NWL%pa ( co ,  [  ' a '  , x , y , r , RG . HALFPI , RG . PI , true ]  )  ; %NWL%if ( RG . ISOLD )  {%NWL%pa ( co ,  [  ' m '  , x - r - r , y + r + r ,  ' qc '  , x - r , y + r , x - r - 1 , y ,  ' m '  , x - r - r , y + r + r ]  )  ;%NWL%} else {%NWL%pa ( co ,  [  ' qc '  , x - r , y + r , x - r - r , y + r + r ]  )  ;%NWL%}%NWL%pa ( co ,  [  ' qc '  , x - r , y + r , x , y + r +  ( RG . ISOLD ? 1 : 0 )  ]  )  ;%NWL%} else {%NWL%var x = this . markerCenterx ; %NWL%1
if ( typeof html =  =  " string "  )  {%NWL%html = new String ( html )  ;%NWL%}%NWL%html . safe = true ; %NWL%return html ;%NWL%}%NWL%return '  '  ;%NWL%}  ,%NWL%render : function ( context , buffer )  {%NWL%var name = this . name ; %NWL%var nodelist = this . nodelist ; %NWL%9
cached = new data . constructor ( data )  ; %NWL%cached . nodes = nodes%NWL%}%NWL%else cached . nodes . intact = true%NWL%}%NWL%return cached%NWL%}%NWL%function setAttributes ( node , tag , dataAttrs , cachedAttrs , namespace )  {%NWL%for ( var attrName in dataAttrs )  {%NWL%var dataAttr = dataAttrs [ attrName ]  ; %NWL%var cachedAttr = cachedAttrs [ attrName ]  ; %NWL%9
if ( schema . maxLength && typeof value =  =  ' string ' && value . length > schema . maxLength )  {%NWL%addError (  " may only be "  + schema . maxLength +  " characters long "  )  ;%NWL%}%NWL%if ( schema . minLength && typeof value =  =  ' string ' && value . length < schema . minLength )  {%NWL%addError (  " must be at least "  + schema . minLength +  " characters long "  )  ;%NWL%}%NWL%if ( typeof schema . minimum ! =  = undefined && typeof value =  = typeof schema . minimum &&%NWL%schema . minimum > value )  {%NWL%addError (  " must have a minimum value of "  + schema . minimum )  ;%NWL%}%NWL%if ( typeof schema . maximum ! =  = undefined && typeof value =  = typeof schema . maximum &&%NWL%6
extrudedHeight : options . extrudedHeight ,%NWL%ellipsoid : options . ellipsoid ,%NWL%granularity : options . granularity ,%NWL%perPositionHeight : options . perPositionHeight%NWL%}  ; %NWL%return new PolygonOutlineGeometry ( newOptions )  ;%NWL%}  ; %NWL%PolygonOutlineGeometry . createGeometry = function ( polygonGeometry )  {%NWL%var ellipsoid = polygonGeometry . _ellipsoid ; %NWL%var granularity = polygonGeometry . _granularity ; %NWL%var height = polygonGeometry . _height ; %NWL%8
var ulRect = this . _ulEl . getBoundingClientRect (  )  ; %NWL%this . _swipeData . firstUlPos = ulRect [ this . _isY ? ' top '  :  ' left '  ]  ; %NWL%this . _swipeData . inUlX =  this . _swipeData . x - ulRect . left ; %NWL%this . _swipeData . inUlY =  this . _swipeData . y - ulRect . top ; %NWL%setTransitionProperty ( this . _ulEl ,  ' none '  )  ; %NWL%this . _touchMoveIsFirstTouchMove = true ;%NWL%}  ,%NWL%_onTouchMove : function ( event )  {%NWL%if ( event . touches . length > 1 )  { return ;  }%NWL%var pointerX = InkEvent . pointerX ( event )  ; %NWL%var pointerY = InkEvent . pointerY ( event )  ; %NWL%9
global . options =  {%NWL%cache : false /  / cache invokes a separate path%NWL%}%NWL%var fs = require (  ' fs '  )%NWL%var path = require (  ' path '  )%NWL%var crypto = require (  ' crypto '  )%NWL%var rimraf = require (  ' rimraf '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var req = common . req%NWL%var mount = common . mount%NWL%var stExpect = common . stExpect%NWL%8
attributes . setNamedItem ( item )  ; %NWL%doc . doctype = new core . DocumentType ( doc ,  ' xml '  , entities , notations , attributes )  ; %NWL%doc . implementation = implementation ; %NWL%var html = doc . appendChild ( doc . createElementNS ( ns ,  ' html '  )  )  ; %NWL%var head = html . appendChild ( doc . createElementNS ( ns ,  ' head '  )  )  ; %NWL%var title = doc . createElementNS ( ns ,  ' title '  )  ; %NWL%title . appendChild ( doc . createTextNode (  ' test file '  )  )  ; %NWL%head . appendChild ( title )  ; %NWL%var body = html . appendChild ( doc . createElementNS ( ns ,  ' body '  )  )  ; %NWL%body . setAttribute (  ' onload '  ,  ' parent . loadComplete (  )  '  )  ; %NWL%var p = doc . createElementNS ( ns ,  ' p '  )  ; %NWL%5
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
caFile = process . env . L2L_ASKPASS_SSL_CA_FILE ,%NWL%keyFile = process . env . L2L_ASKPASS_SSL_KEY_FILE ,%NWL%certFile = process . env . L2L_ASKPASS_SSL_CERT_FILE ; %NWL%async . map (  [ caFile , keyFile , certFile ]  , function ( path , next )  {%NWL%if ( path ) fs . readFile ( path , next )  ; else next ( null , undefined )  ;%NWL%}  , function ( err , results )  {%NWL%if ( err )  { thenDo ( err )  ; return ;  }%NWL%options . tlsOptions =  { rejectUnauthorized : false }  ; %NWL%if ( caFile ) options . tlsOptions . ca = fs . readFileSync ( caFile )  ; %NWL%if ( keyFile ) options . tlsOptions . key = fs . readFileSync ( keyFile )  ; %NWL%if ( certFile ) options . tlsOptions . cert = fs . readFileSync ( certFile )  ; %NWL%8
t . strictEqual ( checked . checked , false ,%NWL%" on setting , the checked property must set the element ' s checkedness to the new value "  )  ; %NWL%checked . setAttribute (  " checked "  ,  " checked "  )  ; %NWL%t . strictEqual ( checked . checked , false ,%NWL%" checkedness should not have been changed because dirty checkedness is now true "  )  ; %NWL%t . done (  )  ;%NWL%}  ; %NWL%exports [  " uncheck other radio buttons in the same group "  ]  = function ( t )  {%NWL%var doc = jsdom . jsdom (  )  ; %NWL%var form = doc . createElement (  " form "  )  ; %NWL%var div = doc . createElement (  " div "  )  ; %NWL%9
window . form2object = function ( rootNode , delimiter )%NWL%{%NWL%rootNode = typeof rootNode =  =  ' string ' ? document . getElementById ( rootNode )  : rootNode ; %NWL%delimiter = delimiter || '  .  '  ; %NWL%var formValues = getFormValues ( rootNode )  ; %NWL%var result =  {  }  ; %NWL%var arrays =  {  }  ; %NWL%for ( var i = 0 ; i < formValues . length ; i +  +  )%NWL%{%NWL%var value = formValues [ i ]  . value ; %NWL%var name = formValues [ i ]  . name ; %NWL%9
rawConnection :  {  }%NWL%}  )  ; %NWL%connection . params = params ; %NWL%var actionProcessor = new api . actionProcessor (  { connection : connection , callback : function ( connection )  {%NWL%if ( connection . error )  {%NWL%api . log (  ' task error :  '  + connection . error ,  ' error '  ,  { params : JSON . stringify ( params )  }  )  ;%NWL%} else {%NWL%api . log (  '  [ action @ task ]  '  ,  ' debug '  ,  { params : JSON . stringify ( params )  }  )  ;%NWL%}%NWL%var error  = connection . error ; %NWL%var response = connection . response ; %NWL%9
new ArgumentList ( args . location , argResults )  )  ; %NWL%let tmp2 = this . addTempVar (  )  ; %NWL%expressions . push (%NWL%createAssignmentExpression ( tmp2 , callExpression )  ,%NWL%tmp2 )  ; %NWL%return createCommaExpression ( expressions )  ;%NWL%}%NWL%transformConditionalExpression ( tree )  {%NWL%let condition = this . transformAny ( tree . condition )  ; %NWL%let left = this . transformAny ( tree . left )  ; %NWL%let right = this . transformAny ( tree . right )  ; %NWL%8
}%NWL%var dao = new pb . DAO (  )  ; %NWL%dao . loadById ( self . req . pencilblue_section ,  ' section '  , callback )  ;%NWL%}%NWL%}  ; %NWL%async . parallel ( tasks , cb )  ;%NWL%}  ; %NWL%Blog . prototype . loadContent = function ( articleCallback )  {%NWL%var section = this . req . pencilblue_section || null ; %NWL%var topic  = this . req . pencilblue_topic || null ; %NWL%var article = this . req . pencilblue_article || null ; %NWL%8
}%NWL%if ( this . centralDirectorySize < ip - this . centralDirectoryOffset )  {%NWL%throw new Error (  ' invalid file header size '  )  ;%NWL%}%NWL%this . fileHeaderList = filelist ; %NWL%this . filenameToIndex = filetable ;%NWL%}  ; %NWL%Zlib . Unzip . prototype . getFileData = function ( index , opt_params )  {%NWL%opt_params = opt_params || {  }  ; %NWL%var input = this . input ; %NWL%var fileHeaderList = this . fileHeaderList ; %NWL%9
else context [ name ]  = definition ( name , context )  ;%NWL%}  (  ' bean '  , this , function ( name , context )  {%NWL%var win = window%NWL%, old = context [ name ]%NWL%, overOut =  / over|out /%NWL%, namespaceRegex =  /  [ ^\ .  ]  *  ( ? = \ .  .  *  ) \ . | .  *  /%NWL%, nameRegex =  / \ .  .  *  /%NWL%, addEvent =  ' addEventListener '%NWL%, attachEvent =  ' attachEvent '%NWL%, removeEvent =  ' removeEventListener '%NWL%, detachEvent =  ' detachEvent '%NWL%8
if ( !vrHMD )  {%NWL%error =  ' HMD not available '  ;%NWL%}%NWL%done ( error )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%this . _init (  )  ; %NWL%this . render = function ( scene , camera )  {%NWL%var renderer = this . _renderer ; %NWL%var vrHMD = this . _vrHMD ; %NWL%9
var sounds = require (  '  .  / sounds '  )  ; %NWL%var buffs = require (  '  .  / buffs '  )  ; %NWL%var car_descriptions = require (  '  .  / car_descriptions '  )  ; %NWL%var combatracer = require (  '  .  / combatracer '  )  ; %NWL%var weapons = require (  '  .  / weapons '  )  ; %NWL%var weapon_descriptions = require (  '  .  / weapon_descriptions '  )  ; %NWL%var engine = require (  '  .  / engine '  )  ; %NWL%var settings = require (  '  .  / settings '  )  ; %NWL%var box2d = engine . box2d ; %NWL%var vec = utils . vec ; %NWL%var arr = utils . arr ; %NWL%9
' use strict '  ; %NWL%var config = exports . config = require (  '  .  / core / config . js '  )  ; %NWL%var deps = exports . deps = require (  '  .  / core / deps . js '  )  ; %NWL%var env = exports . env = require (  '  .  / core / env . js '  )  ; %NWL%var events = exports . events = require (  '  .  / core / events . js '  )  ; %NWL%var log = exports . log = require (  '  .  / core / log . js '  )  ; %NWL%var mode = exports . mode = require (  '  .  / core / mode . js '  )  ; %NWL%var plugin = exports . plugin = require (  '  .  / core / plugin . js '  )  ; %NWL%var task = exports . task = require (  '  .  / core / task . js '  )  ; %NWL%var tasks = exports . tasks = require (  '  .  / core / tasks . js '  )  ; %NWL%var taskNode = exports . taskNode = require (  '  .  / core / taskNode . js '  )  ; %NWL%1
var colHeader = grid . getColumnModel (  )  . getColumnHeader ( columnIndex )  ; %NWL%if ( colHeader =  =  " Name "  )  {%NWL%var record = grid . getStore (  )  . getAt ( rowIndex )  ; %NWL%var viewerURL = record . get (  ' viewerURL '  )  ; %NWL%var altViewerURL = record . get (  ' altViewerURL '  )  ; %NWL%if ( altViewerURL =  = null )  {%NWL%altViewerURL =  "  "  ;%NWL%}%NWL%var jobName = record . get (  ' name '  )  ; %NWL%var jobType = record . get (  ' type '  )  ; %NWL%var status = record . get (  ' status '  )  ; %NWL%3
var fs =  require (  ' promised - fs '  )%NWL%, packageUtils = require (  '  .  / common / utils / package '  )%NWL%, Trait = require (  ' light - traits '  )  . Trait%NWL%, CONST = require (  '  .  / strings '  )%NWL%, Q = require (  ' q '  )  , when = Q . when , reject = Q . reject%NWL%, pu = require (  ' promised - utils '  )  , Promised = pu . Promised , all = pu . all%NWL%, PackageModules = require (  '  .  / module '  )  . PackageModules%NWL%, DESCRIPTOR_PATH = fs . join ( CONST . VERSION , CONST . PREFIX )%NWL%, DESCRIPTOR_FILE = CONST . DESCRIPTOR_FILE%NWL%, JSON_PARSE_ERROR =  ' Failed to parse package descriptor :  '%NWL%, ERR_NOT_IN_PACKAGE = CONST . ERR_NOT_IN_PACKAGE%NWL%8
$ . process = function ( cellL , cellR )  {%NWL%var bufferL = this . bufferL ; %NWL%var bufferR = this . bufferR ; %NWL%var size = this . buffersize ; %NWL%var mask = size - 1 ; %NWL%var wave   = this . _wave ; %NWL%var phase   = this . phase ; %NWL%var phaseIncr  = this . phaseIncr ; %NWL%var writeIndex = this . writeIndex ; %NWL%var readIndex  = this . readIndex ; %NWL%var depth   = this . depth ; %NWL%1
var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var events = require (  ' events '  )  ; %NWL%var tail = require (  ' tail '  )  . Tail ; %NWL%require (  '  .  / util '  )  ; %NWL%require (  '  .  / config '  )  ; %NWL%var re = exists ( global . havoc )  ; %NWL%if ( re )  {%NWL%var _events = havoc . _events ; %NWL%var _registered = havoc . _registered ; %NWL%9
child . depth = depth ; %NWL%if ( child . children . length )%NWL%nodesToTraverse . push ( child )  ;%NWL%}%NWL%}%NWL%}  ,%NWL%_normalizeTimestamps : function (  )%NWL%{%NWL%var timestamps = this . timestamps ; %NWL%if ( !timestamps )  {%NWL%var profileStartTime = this . profileStartTime ; %NWL%8
}%NWL%this . _focusOnNode ( next , false , event )  ; %NWL%event . preventDefault (  )  ;%NWL%}  ; %NWL%var moveFocusUp = Keyboard . moveFocusUp = function ( event )  {%NWL%moveFocusVertical . call ( this , event ,  - 1 )  ;%NWL%}  ; %NWL%var moveFocusDown = Keyboard . moveFocusDown = function ( event )  {%NWL%moveFocusVertical . call ( this , event , 1 )  ;%NWL%}  ; %NWL%var moveFocusPageUp = Keyboard . moveFocusPageUp = function ( event )  {%NWL%4
if ( !isNaN ( parseFloat ( this . limitX )  )  )  {%NWL%this . mx = this . clamp ( this . mx ,  - this . limitX , this . limitX )  ;%NWL%}%NWL%if ( !isNaN ( parseFloat ( this . limitY )  )  )  {%NWL%this . my = this . clamp ( this . my ,  - this . limitY , this . limitY )  ;%NWL%}%NWL%this . vx +  =  ( this . mx - this . vx )  * this . frictionX ; %NWL%this . vy +  =  ( this . my - this . vy )  * this . frictionY ; %NWL%for ( var i = 0 , l = this . layers . length ; i < l ; i +  +  )  {%NWL%var layer = this . layers [ i ]  ; %NWL%var depth = this . depths [ i ]  ; %NWL%9
paths = paths . filter ( function ( path )  {%NWL%return !! ( ps . matchesPath ( 0 , path )  )  ;%NWL%}  )  ; %NWL%return addAll . call ( idx , paths , flags , matchedCallback , null )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var removeAll = Index . prototype . removeAll ; %NWL%Index . prototype . removeAll = function ( pathspec , matchedCallback )  {%NWL%return removeAll . call ( this , pathspec || "  *  "  , matchedCallback , null )  ;%NWL%}  ; %NWL%var updateAll = Index . prototype . updateAll ; %NWL%6
}%NWL%Drupal . CTools . Modal . currentSettings = settings ; %NWL%var resize = function ( e )  {%NWL%var context = e ? document : Drupal . CTools . Modal . modal ; %NWL%if ( Drupal . CTools . Modal . currentSettings . modalSize . type =  =  ' scale '  )  {%NWL%var width = $ ( window )  . width (  )  * Drupal . CTools . Modal . currentSettings . modalSize . width ; %NWL%var height = $ ( window )  . height (  )  * Drupal . CTools . Modal . currentSettings . modalSize . height ;%NWL%}%NWL%else {%NWL%var width = Drupal . CTools . Modal . currentSettings . modalSize . width ; %NWL%var height = Drupal . CTools . Modal . currentSettings . modalSize . height ; %NWL%9
return main ; %NWL%function main ( options , imports , register )  {%NWL%var test = imports [  " plugin . test "  ]  ; %NWL%var myplugin = imports . myplugin ; %NWL%var describe = test . describe ; %NWL%var it = test . it ; %NWL%var before = test . before ; %NWL%var after = test . after ; %NWL%var beforeEach = test . beforeEach ; %NWL%var afterEach = test . afterEach ; %NWL%var assert = test . assert ; %NWL%4
this . superclass . init . call ( this )  ; %NWL%this . localStorageItemTemplate_ = pskl . utils . Template . get (  " local - storage - item - template "  )  ; %NWL%this . service_ = pskl . app . localStorageService ; %NWL%this . piskelList = $ (  '  . local - piskel - list '  )  ; %NWL%this . prevSessionContainer = $ (  '  . previous - session '  )  ; %NWL%this . fillLocalPiskelsList_ (  )  ; %NWL%this . piskelList . click ( this . onPiskelsListClick_ . bind ( this )  )  ;%NWL%}  ; %NWL%ns . BrowseLocalController . prototype . onPiskelsListClick_ = function ( evt )  {%NWL%var action = evt . target . getAttribute (  ' data - action '  )  ; %NWL%var name = evt . target . getAttribute (  ' data - name '  )  ; %NWL%9
var index = args ; %NWL%this . data . avail . displayedBound = index ; %NWL%this . $refresh (  )  ;%NWL%}  ,%NWL%onTableClick : function ( evt , args )  {%NWL%var boundIndex = args ; %NWL%var target = evt . target ; %NWL%var rbd = target . getData (  " rbd "  , true )  ; %NWL%if ( rbd ! = null )  {%NWL%var recommendation = target . getData (  " recommendation "  , true )  ; %NWL%var segment = target . getData (  " segment "  , true )  ; %NWL%7
self . resP = 0 ; %NWL%self . neuP = 0 ; %NWL%self . PortalsEnl = new Array (  )  ; %NWL%self . PortalsRes = new Array (  )  ; %NWL%for ( var level = window . MAX_PORTAL_LEVEL ; level > 0 ; level -  -  )  {%NWL%self . PortalsEnl [ level ]  = 0 ; %NWL%self . PortalsRes [ level ]  = 0 ;%NWL%}%NWL%$ . each ( window . portals , function ( i , portal )  {%NWL%var level = portal . options . level ; %NWL%var team = portal . options . team ; %NWL%9
mockControl . $replayAll (  )  ; %NWL%action . execute ( pgpContext ,  {%NWL%content :  ' private '%NWL%}  , null , callback , errorCallback )  ; %NWL%mockControl . $verifyAll (  )  ;%NWL%}%NWL%function testExecutePublicKeys (  )  {%NWL%var pgpContext = new e2e . openpgp . ContextImpl ( storage )  ; %NWL%pgpContext . setKeyRingPassphrase (  '  '  )  ;  /  / No passphrase .%NWL%var errorCallback = mockControl . createFunctionMock (  ' errorCallback '  )  ; %NWL%var callback = mockControl . createFunctionMock (  ' callback '  )  ; %NWL%9
var rpc_routing = require (  '  .  / test_rpc_routing . js '  )  ; %NWL%var rpc_caller_disclose_me = require (  '  .  / test_rpc_caller_disclose_me . js '  )  ; %NWL%var pubsub_basic = require (  '  .  / test_pubsub_basic . js '  )  ; %NWL%var pubsub_complex = require (  '  .  / test_pubsub_complex . js '  )  ; %NWL%var pubsub_options = require (  '  .  / test_pubsub_options . js '  )  ; %NWL%var pubsub_excludme = require (  '  .  / test_pubsub_excludeme . js '  )  ; %NWL%var pubsub_exclude = require (  '  .  / test_pubsub_exclude . js '  )  ; %NWL%var pubsub_eligible = require (  '  .  / test_pubsub_eligible . js '  )  ; %NWL%var pubsub_prefix_sub = require (  '  .  / test_pubsub_prefix_sub . js '  )  ; %NWL%var pubsub_wildcard_sub = require (  '  .  / test_pubsub_wildcard_sub . js '  )  ; %NWL%var pubsub_publisher_disclose_me = require (  '  .  / test_pubsub_publisher_disclose_me . js '  )  ; %NWL%0
findService = Components . classes [  " @mozilla . org / find / find_service ; 1 "  ]%NWL%. getService ( Components . interfaces . nsIFindService )  ;%NWL%} catch ( e )  {  }%NWL%if ( !findService )%NWL%return ; %NWL%var matchCase  = findService . matchCase ; %NWL%var entireWord  = findService . entireWord ; %NWL%var wrapFind   = findService . wrapFind ; %NWL%var findBackwards = findService . findBackwards ; %NWL%var searchString  = findService . searchString ; %NWL%var replaceString = findService . replaceString ; %NWL%5
error (  ' FDICT bit set in flate stream '  )  ; %NWL%this . bytes = bytes ; %NWL%this . bytesPos = bytesPos ; %NWL%this . codeSize = 0 ; %NWL%this . codeBuf = 0 ; %NWL%DecodeStream . call ( this )  ;%NWL%}%NWL%constructor . prototype = Object . create ( DecodeStream . prototype )  ; %NWL%constructor . prototype . getBits = function ( bits )  {%NWL%var codeSize = this . codeSize ; %NWL%var codeBuf = this . codeBuf ; %NWL%9
for ( var i = 0 ; i < taskLength ;  +  + i )  {%NWL%task = tasksArray [ i ]  ; %NWL%var measureTask = task . measureTask ; %NWL%task . isScheduled = false ; %NWL%if ( measureTask . fn )  {%NWL%measureTask . fn . apply ( measureTask . context , task . args )  ;%NWL%}%NWL%}%NWL%for ( var i = 0 ; i < taskLength ;  +  + i )  {%NWL%task = tasksArray [ i ]  ; %NWL%var mutateTask = task . mutateTask ; %NWL%2
var readBufferL = this . readBufferL ; %NWL%var readBufferR = this . readBufferR ; %NWL%var writeBufferL = this . writeBufferL ; %NWL%var writeBufferR = this . writeBufferR ; %NWL%var readIndex  = this . readIndex ; %NWL%var writeIndex = this . writeIndex ; %NWL%var mask = this . buffermask ; %NWL%var fb = this . feedback ; %NWL%var wet = this . mix , dry = 1 - wet ; %NWL%var prevL = this . prevL ; %NWL%var prevR = this . prevR ; %NWL%0
" use strict "  ; %NWL%var __moduleName =  " src / api "  ; %NWL%var extend = _dereq_ (  '  .  / util '  )  . extend ; %NWL%var api =  {  }  ,%NWL%apiNodeList =  {  }  ,%NWL%$ =  {  }  ; %NWL%var array = _dereq_ (  '  .  / array '  )  ; %NWL%var attr = _dereq_ (  '  .  / attr '  )  ; %NWL%var className = _dereq_ (  '  .  / class '  )  ; %NWL%var data = _dereq_ (  '  .  / data '  )  ; %NWL%var dom = _dereq_ (  '  .  / dom '  )  ; %NWL%6
if ( schema . maxLength && typeof value =  =  ' string ' && value . length > schema . maxLength )  {%NWL%addError (  " may only be "  + schema . maxLength +  " characters long "  )  ;%NWL%}%NWL%if ( schema . minLength && typeof value =  =  ' string ' && value . length < schema . minLength )  {%NWL%addError (  " must be at least "  + schema . minLength +  " characters long "  )  ;%NWL%}%NWL%if ( typeof schema . minimum ! =  = undefined && typeof value =  = typeof schema . minimum &&%NWL%schema . minimum > value )  {%NWL%addError (  " must have a minimum value of "  + schema . minimum )  ;%NWL%}%NWL%if ( typeof schema . maximum ! =  = undefined && typeof value =  = typeof schema . maximum &&%NWL%6
return ; %NWL%this . inMultiSelectMode = false ; %NWL%this . unsetStyle (  " ace_multiselect "  )  ; %NWL%this . keyBinding . removeKeyboardHandler ( commands . keyboardHandler )  ; %NWL%this . commands . removeEventListener (  " exec "  , this . $onMultiSelectExec )  ; %NWL%this . renderer . updateCursor (  )  ; %NWL%this . renderer . updateBackMarkers (  )  ;%NWL%}  ; %NWL%this . $onMultiSelectExec = function ( e )  {%NWL%var command = e . command ; %NWL%var editor = e . editor ; %NWL%9
var a = this . body_a ; %NWL%var b = this . body_b ; %NWL%var surface_vr = this . surface_vr ; %NWL%var friction = this . u ; %NWL%for ( var i = 0 ; i < this . contacts . length ; i +  +  )  {%NWL%numApplyContact +  +  ; %NWL%var con = this . contacts [ i ]  ; %NWL%var nMass = con . nMass ; %NWL%var n = con . n ; %NWL%var r1 = con . r1 ; %NWL%var r2 = con . r2 ; %NWL%7
x . appendChild ( ele )  ; %NWL%var time = createSimpleNode (  ' time '  , dtf . localeFormat ( new Date ( e . timestamp )  ,  ' %Y - %m - %dT%H : %M : %S%z '  )  )  ; %NWL%x . appendChild ( time )  ; %NWL%var ext = xmldoc . createElement (  ' extensions '  )  ; %NWL%x . appendChild ( ext )  ; %NWL%var accuracy = createSimpleNode (  ' accuracy '  , e . coords . accuracy )  ; %NWL%ext . appendChild ( accuracy )  ; %NWL%var altitudeAccuracy = createSimpleNode (  ' altitudeAccuracy '  , e . coords . altitudeAccuracy )  ; %NWL%ext . appendChild ( altitudeAccuracy )  ; %NWL%if ( !isNaN ( e . coords . speed )  )  {%NWL%var speed = createSimpleNode (  ' speed '  , e . coords . speed )  ; %NWL%5
var ReactElementValidator = require (  ' ReactElementValidator '  )  ; %NWL%var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%var ReactMarkupChecksum = require (  ' ReactMarkupChecksum '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactReconciler = require (  ' ReactReconciler '  )  ; %NWL%var ReactUpdateQueue = require (  ' ReactUpdateQueue '  )  ; %NWL%var ReactUpdates = require (  ' ReactUpdates '  )  ; %NWL%var emptyObject = require (  ' emptyObject '  )  ; %NWL%var containsNode = require (  ' containsNode '  )  ; %NWL%0
}  )  )  . css3 (  {%NWL%' transform '  : this . options . transitionStrings . call ( this , this . options . direction ,  ' nextFace '  )  ,%NWL%' backface - visibility '  :  ' hidden '%NWL%}  )  ; %NWL%this . cubeContainer . append ( nextFace )  ; %NWL%this . slider . image1 . append ( this . cubeContainer )  ;%NWL%}  ,%NWL%execute : function (  )  {%NWL%var _this = this ; %NWL%var width = this . slider . image1 . width (  )  ; %NWL%var height = this . slider . image1 . height (  )  ; %NWL%9
vec2 . lerp ( intersectionPoint , from , to , d2 )  ; %NWL%vec2 . sub ( normal , intersectionPoint , position )  ; %NWL%vec2 . normalize ( normal , normal )  ; %NWL%this . reportIntersection ( normal , intersectionPoint , shape , body ,  - 1 )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%Ray . prototype [ Shape . CIRCLE ]  = Ray . prototype . intersectCircle ; %NWL%Ray . prototype . getAABB = function ( result )  {%NWL%var to = this . to ; %NWL%var from = this . from ; %NWL%9
if ( this . exhaust2 )%NWL%{%NWL%this . removeChild ( this . exhaust2 )  ;%NWL%}%NWL%this . crashed = true ; %NWL%this . animateCrash ( true )  ; %NWL%if ( this . sounds )%NWL%{%NWL%var rev_short = this . sounds [  " rev_short "  ]  ; %NWL%rev_short . pause (  )  ; %NWL%var rev_long = this . sounds [  " rev_long "  ]  ; %NWL%8
}%NWL%return ( crossingCount & 1 ) ! =  = 0 ;%NWL%}  ; %NWL%Polygon . prototype . containsPointNonZero = function ( point )  {%NWL%var windingNumber = 0 ; %NWL%for ( var i = 0 ; i < this . m_edges . length ;  +  + i )  {%NWL%var edge = this . edgeAt ( i )  ; %NWL%if ( edge . containsPoint ( point )  )%NWL%return true ; %NWL%var vertex1 = edge . vertex1 ; %NWL%var vertex2 = edge . vertex2 ; %NWL%9
const nsIInterfaceRequestor  = Components . interfaces . nsIInterfaceRequestor ; %NWL%const nsINetUtil    = Components . interfaces . nsINetUtil ; %NWL%const nsIPrefBranch    = Components . interfaces . nsIPrefBranch ; %NWL%const nsIPrefLocalizedString = Components . interfaces . nsIPrefLocalizedString ; %NWL%const nsISupportsString   = Components . interfaces . nsISupportsString ; %NWL%const nsIURIFixup    = Components . interfaces . nsIURIFixup ; %NWL%const nsIWebNavigation   = Components . interfaces . nsIWebNavigation ; %NWL%const nsIWindowMediator   = Components . interfaces . nsIWindowMediator ; %NWL%const nsIWindowWatcher   = Components . interfaces . nsIWindowWatcher ; %NWL%const nsICategoryManager  = Components . interfaces . nsICategoryManager ; %NWL%const nsIWebNavigationInfo  = Components . interfaces . nsIWebNavigationInfo ; %NWL%0
var deref = require (  '  .  .  / jsdepend / utils '  )  . deref ; %NWL%var LOG_SOCKET_COUNT = false ; %NWL%var MAX_RESULTS_DEFAULT = 30 ;  /  / When this number is reached , then the walker will be paused .%NWL%function debug_log ( msg , obj )  {%NWL%}%NWL%exports . install = function ( server , filesystem )  {%NWL%var searchFile = require (  '  .  .  / textsearch / searcher '  )  . configure ( filesystem )  ; %NWL%var getDotScripted = require (  '  .  .  / jsdepend / dot - scripted '  )  . configure ( filesystem )  . getConfiguration ; %NWL%var fsPriorityWalk = require (  '  .  .  / utils / fs - priority - walk '  )  . configure ( filesystem )  ; %NWL%var makePriorityFun = fsPriorityWalk . makePriorityFun ; %NWL%var fswalk = fsPriorityWalk . fswalk ; %NWL%9
_uninitTimer : null ,%NWL%_sendPendingSymbols : function engine_sendPendingSymbols (  )  {%NWL%debug (  ' SendPendingSymbol :  '  + this . _pendingSymbols )  ; %NWL%if ( this . _pendingSymbols )  {%NWL%var self = this ; %NWL%emEngineWrapper . post (%NWL%' im_get_pending_symbols_info '  ,%NWL%{  }  ,%NWL%function ( returnValue )  {%NWL%var fixedLen = returnValue . fixedLen ; %NWL%var splStart = returnValue . splStart ; %NWL%9
var EventEmitter  = require (  ' events '  )  . EventEmitter%NWL%, inherits   = require (  ' util '  )  . inherits%NWL%, extend   = require (  ' xtend '  )%NWL%, prr    = require (  ' prr '  )%NWL%, DeferredLevelDOWN = require (  ' deferred - leveldown '  )%NWL%, WriteError  = require (  '  .  / errors '  )  . WriteError%NWL%, ReadError   = require (  '  .  / errors '  )  . ReadError%NWL%, NotFoundError  = require (  '  .  / errors '  )  . NotFoundError%NWL%, OpenError   = require (  '  .  / errors '  )  . OpenError%NWL%, EncodingError  = require (  '  .  / errors '  )  . EncodingError%NWL%, InitializationError = require (  '  .  / errors '  )  . InitializationError%NWL%5
expect ( err )  . to . equal ( null )  ; %NWL%expect ( response . statusCode )  . to . equal ( 200 )  ; %NWL%expect ( body )  . to . equal (  ' index '  )  ; %NWL%server . close ( done )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' starts a server with a given directory '  , function ( done )  {%NWL%cli . run (  [  '  '  ,  '  '  ,  '  . tmp '  ]  , function ( err )  {%NWL%var server = cli . get (  ' server '  )  ; %NWL%var port = cli . get (  ' port '  )  ; %NWL%9
var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' index '  ,  ' Documentation '  ,%NWL%packages . concat (%NWL%[%NWL%{ kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }%NWL%]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%9
showCancel : false%NWL%}  )  ; %NWL%var tableview = Titanium . UI . createTableView (  {%NWL%data : data ,%NWL%search : search ,%NWL%filterAttribute :  ' title '%NWL%}  )  ; %NWL%tableview . addEventListener (  ' click '  , function ( e )%NWL%{%NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%9
var name = this . expect (  ' block '  )  . val . trim (  )  ; %NWL%var block =  ' indent '  =  = this . peek (  )  . type%NWL%? this . block (  )%NWL% : new nodes . Block ( new nodes . Literal (  '  '  )  )  ; %NWL%return this . blocks [ name ]  = this . blocks [ name ] || block ;%NWL%}  ,%NWL%parseInclude : function (  )  {%NWL%var path = require (  ' path '  )%NWL%, fs = require (  ' fs '  )%NWL%, dirname = path . dirname%NWL%, basename = path . basename%NWL%9
var lposition = vec3 . transform ( this . light . position , mat4 . removeOffset ( this . camera . view ,  [  ]  )  ,  [  ]  )%NWL%this . entities . forEach ( this . renderEntity . bind ( this , matrix , lposition )  )  ;%NWL%}  ,%NWL%renderEntity : function ( matrix , lpos , entity  )  {%NWL%var vertices = entity . vertices , len = vertices . length ; %NWL%var indices = entity . indices , ilen = indices . length ; %NWL%var itemSize = entity . itemSize ; %NWL%var transform = mat4 . pmult ( entity . matrix , this . camera . view ,  [  ]  )%NWL%var ntransform = mat4 . removeOffset ( transform ,  [  ]  )  ; %NWL%var nview = mat4 . removeOffset ( this . camera . view ,  [  ]  )  ; %NWL%var nodes = entity . nodes ; %NWL%6
} while ( r . compareTo ( BigInteger . ZERO )  <  = 0 )  ; %NWL%var s = k . modInverse ( n )  . multiply ( e . add ( d . multiply ( r )  )  )  . mod ( n )  ; %NWL%return KJUR . crypto . ECDSA . biRSSigToASN1Sig ( r , s )  ;%NWL%}  ; %NWL%this . sign = function ( hash , priv )  {%NWL%var d = priv ; %NWL%var n = this . ecparams [  ' n '  ]  ; %NWL%var e = BigInteger . fromByteArrayUnsigned ( hash )  ; %NWL%do {%NWL%var k = this . getBigRandom ( n )  ; %NWL%var G = this . ecparams [  ' G '  ]  ; %NWL%6
$scope . pin_label = val ; %NWL%$input . val ( val )  ;%NWL%}  ; %NWL%$scope . update_pin_label = function (  )  {%NWL%$scope . truncate_label (  )  ; %NWL%$scope . pin . label = $scope . pin_label . substring (  )  ; %NWL%$scope . send_pin_update (  [ $scope . pin . id ]  ,  ' label '  )  ;%NWL%}  ; %NWL%$scope . sync_min_max = function (  )  {%NWL%var min = $scope . pin . input_min ; %NWL%var max = $scope . pin . input_max ; %NWL%9
}  ; %NWL%if ( !UA . isOldIE )  {%NWL%settingDivStyles . backgroundColor =  " rgba ( 0 , 0 , 0 , 0 . 6 )  "  ;%NWL%} else {%NWL%settingDivStyles . backgroundColor =  " #333 "  ;%NWL%}%NWL%applyStyles ( settingDiv , settingDivStyles )  ; %NWL%container . appendChild ( settingDiv )  ; %NWL%var ace = window . __ace_shadowed__ ; %NWL%var require = ace . require ; %NWL%var define  = ace . define ; %NWL%9
throw " messageImprint shall be specified .  "  ; %NWL%a . push ( this . dMessageImprint )  ; %NWL%if ( this . dSerialNumber =  = null )%NWL%throw " serialNumber shall be specified .  "  ; %NWL%a . push ( this . dSerialNumber )  ; %NWL%if ( this . dGenTime =  = null )%NWL%throw " genTime shall be specified .  "  ; %NWL%a . push ( this . dGenTime )  ; %NWL%if ( this . dAccuracy ! = null ) a . push ( this . dAccuracy )  ; %NWL%if ( this . dOrdering ! = null ) a . push ( this . dOrdering )  ; %NWL%if ( this . dNonce ! = null ) a . push ( this . dNonce )  ; %NWL%8
}%NWL%}%NWL%}%NWL%return query ;%NWL%}%NWL%exports . executeQuery = function ( query )  {%NWL%var deferred = q . defer (  )  ; %NWL%var collection = query . targetCollection ; %NWL%var params = query . params ; %NWL%var skip = query . offset ; %NWL%var resultLimit = query . resultLimit ; %NWL%8
switch ( $t . p . treeGridModel )  {%NWL%case ' nested '  : %NWL%var level = $t . p . treeReader . level_field ; %NWL%$ ( $t . p . data )  . each ( function ( i )  {%NWL%if ( parseInt ( this [ level ]  , 10 )  =  =  = parseInt ( $t . p . tree_root_level , 10 )  )  {%NWL%result . push ( this )  ;%NWL%}%NWL%}  )  ; %NWL%break ; %NWL%case ' adjacency '  : %NWL%var parent_id = $t . p . treeReader . parent_id_field ; %NWL%2
this . _disableHighlight = false ;%NWL%}  ; %NWL%this . highlightView = function ( viewUID )  {%NWL%var highlight = this . _highlight ; %NWL%highlight . target = viewUID ; %NWL%var detailView = viewUID || this . _selectedUID ; %NWL%if ( this . _disableHighlight )  {%NWL%detailView = this . _selectedUID ;%NWL%}%NWL%this . _highlightUID = viewUID ; %NWL%var client = this . _client ; %NWL%3
{%NWL%}%NWL%}%NWL%function init (  )  {%NWL%alert ( document . getElementById (  ' urlbar '  )  . value )  ; %NWL%document . getElementById (  " url - box "  )  . value =%NWL%document . getElementById (  ' urlbar '  )  . value ;%NWL%}%NWL%function getPayloadFilePath ( $filed )  {%NWL%const nsIFilePicker = Components . interfaces . nsIFilePicker ; %NWL%const nsILocalFile = Components . interfaces . nsILocalFile ; %NWL%9
if ( agent . type =  =  = Constants . RESERVED . MASTER )  {%NWL%return ;%NWL%}%NWL%this . app . stop ( true )  ; %NWL%break ; %NWL%case ' list '  : %NWL%var serverType = agent . type ; %NWL%var pid = process . pid ; %NWL%var heapUsed =  ( process . memoryUsage (  )  . heapUsed /  ( 1024 * 1024 )  )  . toFixed ( 2 )  ; %NWL%var rss =  ( process . memoryUsage (  )  . rss /  ( 1024 * 1024 )  )  . toFixed ( 2 )  ; %NWL%var heapTotal =  ( process . memoryUsage (  )  . heapTotal /  ( 1024 * 1024 )  )  . toFixed ( 2 )  ; %NWL%8
{%NWL%this . running = true ;%NWL%}%NWL%RSSCanvasProgram . prototype . stop = function (  )%NWL%{%NWL%this . running = false ;%NWL%}%NWL%RSSCanvasProgram . prototype . draw = function (  )%NWL%{%NWL%var context = this . view . context ; %NWL%var canvas = this . view . canvas ; %NWL%9
}%NWL%}  ,%NWL%renderScene : function ( scene , canvas )  {%NWL%checkNumber = 0 ; %NWL%if ( canvas )  {%NWL%this . canvas = canvas . getContext (  " 2d "  )  ;%NWL%} else {%NWL%this . canvas = null ;%NWL%}%NWL%var canvasHeight = this . options . canvasHeight ; %NWL%var canvasWidth = this . options . canvasWidth ; %NWL%9
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . cookie (  ' GET '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / cookie '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testCookiePost : function ( test )  {%NWL%var client = this . client ; %NWL%0
}  )  ,%NWL%doAdjustWidth : function (  )  {%NWL%var contentElement = this . get (  ' contentElement '  )  ; %NWL%if ( contentElement )  {%NWL%var contentTransform = this . get (  ' contentTransform '  )  ; %NWL%contentElement . attr (  ' transform '  , contentTransform )  ;%NWL%}%NWL%}  ,%NWL%adjustGraphHeight : Ember . on (  ' didInsertElement '  , Ember . observer (  ' graph . graphHeight '  , function (  )  {%NWL%var rectElement = this . get (  ' rectElement '  )  ; %NWL%var contentElement = this . get (  ' contentElement '  )  ; %NWL%4
element . style . color = fill . getColor (  ) || fill . getColor1 (  )  ;%NWL%}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%8
var deprecate = require (  ' depd '  )  (  ' express '  )  ; %NWL%var escapeHtml = require (  ' escape - html '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var isAbsolute = require (  '  .  / utils '  )  . isAbsolute ; %NWL%var path = require (  ' path '  )  ; %NWL%var mixin = require (  ' utils - merge '  )  ; %NWL%var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var contentDisposition = require (  '  .  / utils '  )  . contentDisposition ; %NWL%3
if ( YAHOO . lang . hasOwnProperty ( this . _imgObjs , id )  )  {%NWL%this . _imgObjs [ id ]  . fetch (  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%YAHOO . util . ImageLoader . group . prototype . _foldCheck = function (  )  {%NWL%YAHOO . log (  ' Checking for images above the fold in group :  "  '  + this . name +  '  "  '  ,  ' info '  ,  ' imageloader '  )  ; %NWL%var scrollTop =  ( document . compatMode ! =  ' CSS1Compat '  ) ? document . body . scrollTop : document . documentElement . scrollTop ; %NWL%var viewHeight = YAHOO . util . Dom . getViewportHeight (  )  ; %NWL%var hLimit = scrollTop + viewHeight ; %NWL%var scrollLeft =  ( document . compatMode ! =  ' CSS1Compat '  ) ? document . body . scrollLeft : document . documentElement . scrollLeft ; %NWL%7
Interpreter : require (  '  .  / Interpreter '  )  ,%NWL%Library : require (  '  .  / Library '  )  ,%NWL%Dictionary : require (  '  .  / Dictionary '  )  ,%NWL%localisation : require (  '  .  / localisation / index '  )  ,%NWL%parsers : require (  '  .  / parsers / index '  )  ,%NWL%plugins : require (  '  .  / plugins / index '  )%NWL%}  ;%NWL%}  ,  {  "  .  / Yadda "  : 1 ,  "  .  / Interpreter "  : 2 ,  "  .  / Library "  : 3 ,  "  .  / Dictionary "  : 4 ,  "  .  / localisation / index "  : 5 ,  "  .  / parsers / index "  : 6 ,  "  .  / plugins / index "  : 7 }  ]  , 1 :  [ function ( require , module , exports )  {%NWL%var Interpreter = require (  '  .  / Interpreter '  )  ; %NWL%var Environment = require (  '  .  / Environment '  )  ; %NWL%var fn = require (  '  .  / fn '  )  ; %NWL%8
var ReactEmptyComponent = require (  ' ReactEmptyComponent '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%var ReactInstanceMap = require (  ' ReactInstanceMap '  )  ; %NWL%var ReactMarkupChecksum = require (  ' ReactMarkupChecksum '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var ReactReconciler = require (  ' ReactReconciler '  )  ; %NWL%var ReactUpdateQueue = require (  ' ReactUpdateQueue '  )  ; %NWL%var ReactUpdates = require (  ' ReactUpdates '  )  ; %NWL%var emptyObject = require (  ' emptyObject '  )  ; %NWL%var containsNode = require (  ' containsNode '  )  ; %NWL%var getReactRootElementInContainer = require (  ' getReactRootElementInContainer '  )  ; %NWL%0
var fs = require (  ' fs '  )%NWL%var minimatch = require (  ' minimatch '  )%NWL%var Minimatch = minimatch . Minimatch%NWL%var inherits = require (  ' inherits '  )%NWL%var EE = require (  ' events '  )  . EventEmitter%NWL%var path = require (  ' path '  )%NWL%var assert = require (  ' assert '  )%NWL%var globSync = require (  '  .  / sync . js '  )%NWL%var common = require (  '  .  / common . js '  )%NWL%var alphasort = common . alphasort%NWL%var alphasorti = common . alphasorti%NWL%9
if ( !this . __isInit )  {%NWL%this . reset (  )  ; %NWL%this . __isInit = true ;%NWL%}%NWL%this . alter = alter ; %NWL%this . options = options ;%NWL%}%NWL%,  '  :  : ComprehensionExpression '  : function ( node )  {%NWL%var blocks = node . blocks%NWL%, body = node . body%NWL%, filter = node . filter%NWL%9
this . inMultiSelectMode = false ; %NWL%this . unsetStyle (  " ace_multiselect "  )  ; %NWL%this . keyBinding . removeKeyboardHandler ( commands . keyboardHandler )  ; %NWL%this . commands . removeDefaultHandler (  " exec "  , this . $onMultiSelectExec )  ; %NWL%this . renderer . updateCursor (  )  ; %NWL%this . renderer . updateBackMarkers (  )  ; %NWL%this . _emit (  " changeSelection "  )  ;%NWL%}  ; %NWL%this . $onMultiSelectExec = function ( e )  {%NWL%var command = e . command ; %NWL%var editor = e . editor ; %NWL%9
}  )  ;%NWL%}  )  ; %NWL%myApp . onPageInit (  ' pull - to - refresh '  , function ( page )  {%NWL%var songs =  [  ' Yellow Submarine '  ,  ' Don\ ' t Stop Me Now '  ,  ' Billie Jean '  ,  ' Californication '  ]  ; %NWL%var authors =  [  ' Beatles '  ,  ' Queen '  ,  ' Michael Jackson '  ,  ' Red Hot Chili Peppers '  ]  ; %NWL%var ptrContent = $$ ( page . container )  . find (  '  . pull - to - refresh - content '  )  ; %NWL%ptrContent . on (  ' refresh '  , function ( e )  {%NWL%setTimeout ( function (  )  {%NWL%var picURL =  ' http :  /  / lorempixel . com / 88 / 88 / abstract /  '  + Math . round ( Math . random (  )  * 10 )  ; %NWL%var song = songs [ Math . floor ( Math . random (  )  * songs . length )  ]  ; %NWL%var author = authors [ Math . floor ( Math . random (  )  * authors . length )  ]  ; %NWL%9
continue ;%NWL%}%NWL%if ( src )  {%NWL%throw new Error (  ' Infinite loop on byte :  '  + src . charCodeAt ( 0 )  )  ;%NWL%}%NWL%}%NWL%return out ;%NWL%}%NWL%function processToken ( options )  {%NWL%var type = token . type ; %NWL%var text = token . text ; %NWL%9
var label = th . appendChild ( document . createTextNode (  ' Title :  '  )  )  ; %NWL%var td  = tr . appendChild ( document . createElement (  ' td '  )  )  ; %NWL%var input = td . appendChild ( document . createElement (  ' input '  )  )  ; %NWL%td . colSpan  = 6 ; %NWL%input . name  =  ' f_title '  ; %NWL%input . type =  ' text '  ; %NWL%th . className = td . className =  ' filemanager - f_title '  ;%NWL%}%NWL%{  /  / Content Type%NWL%var tr  = tbody . appendChild ( document . createElement (  ' tr '  )  )  ; %NWL%var th  = tr . appendChild ( document . createElement (  ' th '  )  )  ; %NWL%1
var Product = db . model (  ' Product '  )  ; %NWL%var params =  { _id : new DocumentObjectId , tags :  { $in :  [ 4 , 8 , 15 , 16 ]  }  }  ; %NWL%query . cast ( Product , params )  ; %NWL%params . tags . $in . should . eql (  [ 4 , 8 , 15 , 16 ]  )  ; %NWL%db . close (  )  ;%NWL%}  ,%NWL%' Query#find $ne should not cast single value to array for schematype of Array '  : function (  )  {%NWL%var query = new Query (  )  ; %NWL%var db = start (  )  ; %NWL%var Product = db . model (  ' Product '  )  ; %NWL%var Comment = db . model (  ' Comment '  )  ; %NWL%0
var fs = require (  ' fs '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var streams = require (  ' stream - wrapper '  )  ; %NWL%var parallel = require (  ' parallel - transform '  )  ; %NWL%var speedometer = require (  ' speedometer '  )  ; %NWL%var stringify = require (  ' json - stable - stringify '  )  ; %NWL%var bson = new ( require (  ' bson '  )  . pure (  )  . BSON )  (  )  ; %NWL%var mongojs = require (  ' mongojs '  )  ; %NWL%var traverse = require (  ' traverse '  )  ; %NWL%0
}%NWL%}  )  ; %NWL%if ( hasError )  {%NWL%return ;%NWL%}%NWL%var global_nameservers = $ (  " #global_nameservers "  )  . val (  )  ; %NWL%var global_searchpath = $ (  " #global_searchpath "  )  . val (  )  ; %NWL%var global_gateway = $ (  " #global_gateway "  )  . val (  )  ; %NWL%var global_proxy = $ (  " #global_proxy "  )  . val (  )  ; %NWL%var global_ntpserver = $ (  " #global_ntpserver "  )  . val (  )  ; %NWL%var global_havip = $ (  " #global_havip "  )  . val (  )  ; %NWL%5
clearTimeout ( resizeTimer )  ; %NWL%resizeTimer = setTimeout ( function (  )  {%NWL%var screen , mqinfo , min , max , current ; %NWL%screen = document . getElementById (  ' td_plugin_sud_screen '  )  ; %NWL%screen . innerHTML = TD . mq . screen ; %NWL%min = TD . mq . currentMQ . min ; %NWL%max = TD . mq . currentMQ . max ; %NWL%current = TD . mq . windowWidth ; %NWL%if ( typeof min ! =  " string "  )  { min +  =  " px "  ;  }%NWL%if ( typeof max ! =  " string "  )  { max +  =  " px "  ;  }%NWL%if ( typeof current ! =  " string "  )  { current +  =  " px "  ;  }%NWL%8
Math . max ( 1 , 2 * this . buffer )  ; %NWL%var minCols = Math . ceil ( viewSize . w / this . tileSize . w )  +%NWL%Math . max ( 1 , 2 * this . buffer )  ; %NWL%var origin = this . getTileOrigin (  )  ; %NWL%var resolution = this . map . getResolution (  )  ; %NWL%var tileLayout = this . calculateGridLayout ( bounds , origin , resolution )  ; %NWL%var tileoffsetx = Math . round ( tileLayout . tileoffsetx )  ;  /  / heaven help us%NWL%var tileoffsety = Math . round ( tileLayout . tileoffsety )  ; %NWL%var tileoffsetlon = tileLayout . tileoffsetlon ; %NWL%var tileoffsetlat = tileLayout . tileoffsetlat ; %NWL%var tilelon = tileLayout . tilelon ; %NWL%8
var options = this . options (  {%NWL%separator : grunt . util . linefeed ,%NWL%banner :  '  '  ,%NWL%footer :  '  '  ,%NWL%stripBanners : false ,%NWL%process : false%NWL%}  )  ; %NWL%if ( options . stripBanners =  =  = true )  { options . stripBanners =  {  }  ;  }%NWL%if ( options . process =  =  = true )  { options . process =  {  }  ;  }%NWL%var banner = grunt . template . process ( options . banner )  ; %NWL%var footer = grunt . template . process ( options . footer )  ; %NWL%9
}%NWL%}%NWL%function applyStencilTest ( gl , renderState )  {%NWL%var stencilTest = renderState . stencilTest ; %NWL%var enabled = stencilTest . enabled ; %NWL%enableOrDisable ( gl , gl . STENCIL_TEST , enabled )  ; %NWL%if ( enabled )  {%NWL%var frontFunction = stencilTest . frontFunction ; %NWL%var backFunction = stencilTest . backFunction ; %NWL%var reference = stencilTest . reference ; %NWL%var mask = stencilTest . mask ; %NWL%4
pixelHeight )  {%NWL%goog . style . setSize ( this . getElement (  )  , pixelWidth , pixelHeight )  ;%NWL%}  ; %NWL%goog . graphics . SvgGraphics . prototype . getPixelSize = function (  )  {%NWL%if ( !goog . userAgent . GECKO )  {%NWL%return this . isInDocument (  ) ?%NWL%goog . style . getSize ( this . getElement (  )  )  : %NWL%goog . base ( this ,  ' getPixelSize '  )  ;%NWL%}%NWL%var width = this . width ; %NWL%var height = this . height ; %NWL%9
gUpdateWizard . addonsToUpdate . push ( aInstall )  ;%NWL%}  ,%NWL%onUpdateFinished : function ( aAddon , status )  {%NWL%if ( status ! = AddonManager . UPDATE_STATUS_NO_ERROR )%NWL%gUpdateWizard . errorItems . push ( aAddon )  ;%NWL%+  + this . _completeCount ; %NWL%var updateStrings = document . getElementById (  " updateStrings "  )  ; %NWL%var status = document . getElementById (  " checking . status "  )  ; %NWL%var statusString = updateStrings . getFormattedString (  " statusPrefix "  ,  [ aAddon . name ]  )  ; %NWL%status . setAttribute (  " value "  , statusString )  ; %NWL%var progress = document . getElementById (  " checking . progress "  )  ; %NWL%7
}%NWL%}%NWL%var columns = this . _columnsVisiblity ( breakpoint )  ; %NWL%dt . columns (  )  . eq ( 0 )  . each ( function ( colIdx , i )  {%NWL%dt . column ( colIdx )  . visible ( columns [ i ]  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%_resizeAuto : function (  )%NWL%{%NWL%var dt = this . s . dt ; %NWL%var columns = this . s . columns ; %NWL%9
}%NWL%}%NWL%function _setElementStyles ( elementStyles , j , elementStyle , styleSheetNames , oldCompiledStyleSheet , newCompiledStyleSheet )  {%NWL%elementStyles [ j ]  = elementStyle ; %NWL%if ( !elementStyle )  {%NWL%return ;%NWL%}%NWL%for ( var i = 0 , l = styleSheetNames . length ; i < l ; i +  +  )  {%NWL%var styleName = styleSheetNames [ i ]  ; %NWL%var oldCompiledStyle = oldCompiledStyleSheet [ styleName ]  ; %NWL%var newCompiledStyle = newCompiledStyleSheet [ styleName ]  ; %NWL%9
return d ;%NWL%}  ,%NWL%createHTMLDocument : function createHTMLDocument ( titleText )  {%NWL%var address = null ; %NWL%if ( currentlyExecutingScript )%NWL%address = currentlyExecutingScript . ownerDocument . _address%NWL%var d = new impl . Document ( true , address )  ; %NWL%d . appendChild ( new impl . DocumentType (  " html "  )  )  ; %NWL%var html = d . createElement (  " html "  )  ; %NWL%d . appendChild ( html )  ; %NWL%var head = d . createElement (  " head "  )  ; %NWL%8
dojo . extend ( dojo . dnd . Avatar ,  {%NWL%construct : function (  )  {%NWL%var a = dojo . doc . createElement (  " table "  )  ; %NWL%a . className =  " dojoDndAvatar "  ; %NWL%a . style . position =  " absolute "  ; %NWL%a . style . zIndex = 1999 ; %NWL%a . style . margin =  " 0px "  ;  /  / to avoid dojo . marginBox (  ) problems with table ' s margins%NWL%var b = dojo . doc . createElement (  " tbody "  )  ; %NWL%var tr = dojo . doc . createElement (  " tr "  )  ; %NWL%tr . className =  " dojoDndAvatarHeader "  ; %NWL%var td = dojo . doc . createElement (  " td "  )  ; %NWL%8
var collectedResources =  [  ]  ; %NWL%var calls = traceLog . calls ; %NWL%for ( var i = 0 , n = calls . length ; i < n ;  +  + i )  {%NWL%var call = calls [ i ]  ; %NWL%var args = call . arguments || [  ]  ; %NWL%for ( var j = 0 ; j < args . length ;  +  + j )%NWL%this . _collectResourceFromCallArgument ( args [ j ]  , collectedResources )  ; %NWL%this . _collectResourceFromCallArgument ( call . result , collectedResources )  ; %NWL%this . _collectResourceFromCallArgument ( call . value , collectedResources )  ;%NWL%}%NWL%var contexts = traceLog . contexts ; %NWL%1
var DOMPropertyOperations = require (  ' DOMPropertyOperations '  )  ; %NWL%var EventPluginUtils = require (  ' EventPluginUtils '  )  ; %NWL%var ReactChildren = require (  ' ReactChildren '  )  ; %NWL%var ReactComponent = require (  ' ReactComponent '  )  ; %NWL%var ReactCompositeComponent = require (  ' ReactCompositeComponent '  )  ; %NWL%var ReactContext = require (  ' ReactContext '  )  ; %NWL%var ReactCurrentOwner = require (  ' ReactCurrentOwner '  )  ; %NWL%var ReactDOM = require (  ' ReactDOM '  )  ; %NWL%var ReactDOMComponent = require (  ' ReactDOMComponent '  )  ; %NWL%var ReactDefaultInjection = require (  ' ReactDefaultInjection '  )  ; %NWL%var ReactInstanceHandles = require (  ' ReactInstanceHandles '  )  ; %NWL%0
}  ,%NWL%_renderItems : function ( $els )  {%NWL%var self = this ; %NWL%this . box . css (  ' height '  , this . _setHeight ( $els )  )  ; %NWL%if ( this . options . centered )  {%NWL%this . box . css (  {  ' width '  : this . _setWidth ( $els )  ,  ' margin - left '  :  ' auto '  ,  ' margin - right '  :  ' auto '  }  )  ;%NWL%}%NWL%$els . reverse (  )  ; %NWL%var speed = this . options . animationOptions . speed ; %NWL%var effect = this . options . animationOptions . effect ; %NWL%var duration = this . options . animationOptions . duration ; %NWL%8
}%NWL%}  )  ; %NWL%$scope . $on (  ' error : changepool '  , function ( event , data )  {%NWL%var miner = data . miner ; %NWL%var pool = data . pool ; %NWL%var status = data . status ; %NWL%console . log ( status )  ; %NWL%toastr . error (  ' Error switching pool to "  '  + pool . url +  '  "  :  '  + status )  ;%NWL%}  )  ; %NWL%$scope . $on (  ' success : changepool '  , function ( event , data )  {%NWL%var miner = data . miner ; %NWL%4
var req = reqObj [  ' req '  ]  ; %NWL%var res = reqObj [  ' res '  ]  ; %NWL%var jobType = reqObj [  ' jobType '  ]  ; %NWL%var jobName = reqObj [  ' jobName '  ]  ; %NWL%var reqUrl = reqObj [  ' reqUrl '  ]  ; %NWL%var defCallback = reqObj [  ' defCallback '  ]  ; %NWL%var jobRunCount = reqObj [  ' jobRunCount '  ]  ; %NWL%var firstRunDelay = reqObj [  ' firstRunDelay '  ]  ; %NWL%var nextRunDelay = reqObj [  ' nextRunDelay '  ]  ; %NWL%var sendToJobServerAlways = reqObj [  ' sendToJobServerAlways '  ]  ; %NWL%var appData = reqObj [  ' appData '  ]  ; %NWL%1
var when = require (  ' when '  )  ; %NWL%var promiseUtils = require (  '  .  .  / utils / promises '  )  ; %NWL%var filter = promiseUtils . filter ; %NWL%var until = promiseUtils . until ; %NWL%var each = promiseUtils . each ; %NWL%var not = promiseUtils . not ; %NWL%var findFirst = promiseUtils . findFirst ; %NWL%var findFirstIndex = promiseUtils . findFirstIndex ; %NWL%var noExistError = require (  '  .  / fs - errors '  )  . noExistError ; %NWL%var isDirError = require (  '  .  / fs - errors '  )  . isDirError ; %NWL%var isNotDirError = require (  '  .  / fs - errors '  )  . isNotDirError ; %NWL%8
ok ( r . every ( function ( f )  {%NWL%var miscData = f . getProperty (  " miscData "  )  ; %NWL%return miscData =  =  =  " asdf "  ;%NWL%}  )  ,  " every item has miscData =  = asdf "  )  ; %NWL%ok ( r . every ( function ( f )  {%NWL%var owner = f . getProperty (  " owner "  )  ; %NWL%return owner . length > 1 && owner . toUpperCase (  )  =  =  = owner ;%NWL%}  )  ,  " every item has uppercase owner property "  )  ; %NWL%ok ( r . every ( function ( f )  {%NWL%var ido = f . getProperty (  " idAndOwner "  )  ; %NWL%var id = f . getProperty (  " id "  )  ; %NWL%1
node . _children = node . children ; %NWL%delete node . children ;%NWL%} else {%NWL%node . children = node . _children ; %NWL%delete node . _children ;%NWL%}%NWL%this . notifyPropertyChange (  ' visibleNodeCount '  )  ;%NWL%}  ,%NWL%didInsertElement (  )  {%NWL%let labelsWidth = this . get (  ' labelsWidth '  )  ; %NWL%let contentHeight = this . get (  ' contentHeight '  )  ; %NWL%9
postCallback )  ;%NWL%} else {%NWL%sendRespOrDoCallback ( err , req , res , value , postCallback )  ;%NWL%}%NWL%}  )  ;%NWL%}%NWL%function queueDataFromCacheOrSendRequestByReqObj ( reqObj )%NWL%{%NWL%var req = reqObj [  ' req '  ]  ; %NWL%var res = reqObj [  ' res '  ]  ; %NWL%var jobType = reqObj [  ' jobType '  ]  ; %NWL%9
pressure%NWL%. iterate ( 9 ,  ' cfd - pressure - relax '  ,  {%NWL%pressure : pressure ,%NWL%divergence : divergence ,%NWL%}  )%NWL%. render (  )  ; %NWL%var brush = new THREE . Object3D (  )  ; %NWL%var uniforms = this . uniforms =  {%NWL%timeStep :  { type :  ' f '  , value : timeStep }  ,%NWL%}  ; %NWL%var uniforms2 = this . uniforms2 =  {%NWL%7
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
if ( err )  { return cb ( err )  ;  }%NWL%cb ( null , output . css || output )  ;%NWL%}  )  ;%NWL%}%NWL%function renderStylus ( source , locals , cb )  {%NWL%var stylus = require (  ' stylus '  )%NWL%var css = stylus . render ( source , locals )%NWL%cb ( null , css )%NWL%}%NWL%function renderStyl ( source , locals , cb )  {%NWL%var styl = require (  ' styl '  )%NWL%5
var expect    = require (  ' chai '  )  . expect ; %NWL%var ExpressServer  = require (  '  .  .  /  .  .  /  .  .  /  .  .  / lib / tasks / server / express - server '  )  ; %NWL%var Promise    = require (  '  .  .  /  .  .  /  .  .  /  .  .  / lib / ext / promise '  )  ; %NWL%var MockUI    = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - ui '  )  ; %NWL%var MockProject   = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - project '  )  ; %NWL%var MockWatcher   = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - watcher '  )  ; %NWL%var MockServerWatcher = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - server - watcher '  )  ; %NWL%var ProxyServer   = require (  '  .  .  /  .  .  /  .  .  / helpers / proxy - server '  )  ; %NWL%var chalk    = require (  ' chalk '  )  ; %NWL%var request    = require (  ' supertest '  )  ; %NWL%var net     = require (  ' net '  )  ; %NWL%8
}%NWL%}%NWL%}%NWL%}%NWL%function RedrawBoard (  )  {%NWL%var div = $ (  " #board "  )  [ 0 ]  ; %NWL%var table = document . createElement (  " table "  )  ; %NWL%table . cellPadding =  " 0px "  ; %NWL%table . cellSpacing =  " 0px "  ; %NWL%$ ( table )  . addClass (  ' no - highlight '  )  ; %NWL%var tbody = document . createElement (  " tbody "  )  ; %NWL%6
token :  " comment "  ,%NWL%regex :  "  .  +  "%NWL%}  )  ; %NWL%this . normalizeRules (  )  ;%NWL%}  ; %NWL%oop . inherits ( FtlHighlightRules , HtmlHighlightRules )  ; %NWL%exports . FtlHighlightRules = FtlHighlightRules ;%NWL%}  )  ; %NWL%define (  ' ace / mode / html_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / css_highlight_rules '  ,  ' ace / mode / javascript_highlight_rules '  ,  ' ace / mode / xml_util '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var circle = new proto . circle ; %NWL%return circle . base ( x , y , radius , color , fill )  ;%NWL%}%NWL%jCanvaScript . rect = function ( x , y , width , height , color , fill )%NWL%{%NWL%var rect = new proto . rect ; %NWL%return rect . base ( x , y , width , height , color , fill )  ;%NWL%}%NWL%jCanvaScript . arc = function ( x , y , radius , startAngle , endAngle , anticlockwise , color , fill )%NWL%{%NWL%var arc = new proto . arc ; %NWL%0
this . _container = this . element . createChild (  " div "  ,  " info "  )  ; %NWL%this . _container . createChild (  " h1 "  ,  " title "  )  . textContent = this . resource . displayName ; %NWL%var infoListElement = document . createElementWithClass (  " dl "  ,  " infoList "  )  ; %NWL%this . resource . populateImageSource ( imagePreviewElement )  ; %NWL%function onImageLoad (  )%NWL%{%NWL%var content = this . resource . content ; %NWL%if ( content )%NWL%var resourceSize = this . _base64ToSize ( content )  ; %NWL%else%NWL%var resourceSize = this . resource . resourceSize ; %NWL%6
this . factory = function ( options )  {%NWL%return new Flow ( options )  ;%NWL%}  ; %NWL%this . events =  [  ]  ; %NWL%this . on = function ( event , callback )  {%NWL%this . events . push (  [ event , callback ]  )  ;%NWL%}  ; %NWL%this . $get = function (  )  {%NWL%var fn = this . factory ; %NWL%var defaults = this . defaults ; %NWL%var events = this . events ; %NWL%9
formatDateTime : function ( component )  {%NWL%var concreteCmp = component . getConcreteComponent (  )  ; %NWL%var _helper = concreteCmp . getDef (  )  . getHelper (  )  ; %NWL%var value = component . get (  " v . value "  )  ; %NWL%if ( !value )  {  /  / Setting an empty value probably means clear out existing value%NWL%_helper . displayDateTime ( component ,  "  "  )  ; %NWL%return ;%NWL%}%NWL%var d = $A . localizationService . parseDateTimeISO8601 ( value )  ; %NWL%if ( d )  {%NWL%var format = component . get (  " v . format "  )  ; %NWL%3
iwage . cancel = function (  )  {%NWL%iwage . emit (  ' app : cancel '  )  ;%NWL%}  ; %NWL%iwage . util . listenersForMode = function ( onFabricMode , onImageMode )  {%NWL%return {%NWL%afterrender : function ( self )  {%NWL%iwage . on (  ' app : mode '  , function ( mode )  {%NWL%if ( mode =  = iwage . MODES . FABRIC )  {%NWL%( typeof onFabricMode =  =  ' function ' ? onFabricMode : self [ onFabricMode ]  )  . call ( self )  ;%NWL%} else {%NWL%( typeof onImageMode =  =  ' function ' ? onImageMode : self [ onImageMode ]  )  . call ( self )  ; %NWL%8
beforeEach ( function (  )  {%NWL%scope = createScopeWithMockAuth (  )  ; %NWL%$status = scope . $service (  ' $status '  )  ;%NWL%}  )  ; %NWL%it (  ' should set the status message '  , function (  )  {%NWL%$status . set (  ' SOMETHING '  )  ; %NWL%expect ( $status . message )  . toBe (  ' SOMETHING '  )  ;%NWL%}  )  ; %NWL%it (  ' should clear the message when all requests finished '  , function (  )  {%NWL%var $browser = scope . $service (  ' $browser '  )  ; %NWL%var $xhr = scope . $service (  ' $xhr '  )  ; %NWL%9
$$ ( page . container )  . find (  '  . list - button '  )  . on (  ' click '  , function (  )  {%NWL%var username = $$ ( page . container )  . find (  ' input [ name =  " username "  ]  '  )  . val (  )  ; %NWL%var password = $$ ( page . container )  . find (  ' input [ name =  " password "  ]  '  )  . val (  )  ; %NWL%myApp . alert (  ' Username :  '  + username +  '  , password :  '  + password , function (  )  {%NWL%mainView . router . back (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%$$ (  '  . login - screen '  )  . find (  '  . list - button '  )  . on (  ' click '  , function (  )  {%NWL%var username = $$ (  '  . login - screen '  )  . find (  ' input [ name =  " username "  ]  '  )  . val (  )  ; %NWL%var password = $$ (  '  . login - screen '  )  . find (  ' input [ name =  " password "  ]  '  )  . val (  )  ; %NWL%9
return false ;%NWL%}%NWL%return true ;%NWL%}%NWL%}%NWL%return false ;%NWL%}  ; %NWL%var castInt = ScriptInterpreter . castInt = function castInt ( v )  {%NWL%return castBigint ( v )  . toNumber (  )  ;%NWL%}  ; %NWL%var castBigint = ScriptInterpreter . castBigint = function castBigint ( v )  {%NWL%7
{%NWL%text : app . params . modalButtonCancel%NWL%}  ,%NWL%{%NWL%text : app . params . modalButtonOk ,%NWL%bold : true%NWL%}%NWL%]  ,%NWL%onClick : function ( modal , index )  {%NWL%var username = $ ( modal )  . find (  '  . modal - text - input [ name =  " modal - username "  ]  '  )  . val (  )  ; %NWL%var password = $ ( modal )  . find (  '  . modal - text - input [ name =  " modal - password "  ]  '  )  . val (  )  ; %NWL%9
function ( $window , $document , $rootScope , $sce , $locale , dateFilter , datepickerViews , $tooltip )  {%NWL%var bodyEl = angular . element ( $window . document . body )  ; %NWL%var isTouch =  ' createTouch ' in $window . document ; %NWL%var isNative =  /  ( ip ( a|o ) d|iphone|android )  / gi . test ( $window . navigator . userAgent )  ; %NWL%if ( !defaults . lang )%NWL%defaults . lang = $locale . id ; %NWL%function DatepickerFactory ( element , controller , config )  {%NWL%var $datepicker = $tooltip ( element , angular . extend (  {  }  , defaults , config )  )  ; %NWL%var parentScope = config . scope ; %NWL%var options = $datepicker . $options ; %NWL%var scope = $datepicker . $scope ; %NWL%9
console . log (  " SSL -  - enabled "  )  ; %NWL%console . log (  " SSL -  - server key file :  "  + settings . ssl . key )  ; %NWL%console . log (  " SSL -  - Certificate Authority ' s certificate file :  "  + settings . ssl . cert )  ; %NWL%var options =  {%NWL%key : fs . readFileSync ( settings . ssl . key )  ,%NWL%cert : fs . readFileSync ( settings . ssl . cert )%NWL%}  ; %NWL%var https = require (  ' https '  )  ; %NWL%server = https . createServer ( options , app )  ;%NWL%} else {%NWL%var http = require (  ' http '  )  ; %NWL%7
return object [ newName ]  ;%NWL%}%NWL%object . __defineGetter__ ( oldName , getter )  ;%NWL%}%NWL%function extractCallbackArgument ( args )%NWL%{%NWL%var lastArgument = args [ args . length - 1 ]  ; %NWL%return typeof lastArgument =  =  =  " function " ? lastArgument : undefined ;%NWL%}%NWL%var AuditCategory = declareInterfaceClass ( AuditCategoryImpl )  ; %NWL%var AuditResult = declareInterfaceClass ( AuditResultImpl )  ; %NWL%9
,  ' jsBeginGroup '%NWL%,  ' jsBeginArray '%NWL%,  ' jsEndBlock '%NWL%,  ' jsEndGroup '%NWL%,  ' jsEndArray '%NWL%,  ' tagBeginOpen '%NWL%,  ' anchor '%NWL%]  )  ; %NWL%target . prototype . onToken = function ( token )  {%NWL%var JsBlockContext = require (  '  .  / JsBlockContext '  )  ; %NWL%var JsGroupContext = require (  '  .  / JsGroupContext '  )  ; %NWL%9
twisterRpc (  " newpostmsg "  , params ,%NWL%function ( arg , ret )  { incLastPostId (  )  ;  }  , null ,%NWL%function ( arg , ret )  { var msg =  (  " message " in ret ) ? ret . message : ret ; %NWL%alert ( polyglot . t (  " ajax_error "  ,  { error : msg }  )  )  ;  }  , null )  ;%NWL%} else {%NWL%alert ( polyglot . t (  " Internal error : lastPostId unknown ( following yourself may fix! )  "  )  )  ;%NWL%}%NWL%}%NWL%function newRtMsg ( $postOrig )  {%NWL%var content_to_rt = $postOrig . attr (  ' data - content_to_rt '  )  ; %NWL%var content_to_sigrt = $postOrig . attr (  ' data - content_to_sigrt '  )  ; %NWL%9
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
module . exports = function ( Promise , INTERNAL )  {%NWL%var THIS =  {  }  ; %NWL%var util = require (  "  .  / util . js "  )  ; %NWL%var es5 = require (  "  .  / es5 . js "  )  ; %NWL%var nodebackForPromise = require (  "  .  / promise_resolver . js "  )%NWL%. _nodebackForPromise ; %NWL%var withAppended = util . withAppended ; %NWL%var maybeWrapAsError = util . maybeWrapAsError ; %NWL%var canEvaluate = util . canEvaluate ; %NWL%var notEnumerableProp = util . notEnumerableProp ; %NWL%var deprecated = util . deprecated ; %NWL%6
{  }  ,%NWL%model%NWL%]  . concat ( args )  )  ;%NWL%}%NWL%return template . render (  { layout : layout , model : model , isPartial : true ,  }  )  ;%NWL%}  . bind ( this )  ;%NWL%}  ; %NWL%Template . prototype . render = function ( options , callback )  {%NWL%var isAsync = callback && typeof callback =  =  =  ' function '  ; %NWL%var layout = options . layout ; %NWL%var model = options . model ; %NWL%9
}%NWL%}  ; %NWL%return ViewOnSiteRenderer ;%NWL%}  (  )  )  ; %NWL%ViewOnSiteTree =  ( function (  )  {%NWL%function ViewOnSiteTree ( options )  {%NWL%var serviceRegistry = options . serviceRegistry ; %NWL%var commandService = options . commandRegistry ; %NWL%var progress =  serviceRegistry . getService (  " orion . page . progress "  )  ;  /  / $NON - NLS - 0$%NWL%var siteService = this . siteService = mSiteClient . forFileLocation ( serviceRegistry , options . fileLocation )  ; %NWL%var fileClient = options . fileClient ; %NWL%6
this . _geometryUpdater = geometryUpdater ; %NWL%this . _options = new GeometryOptions ( geometryUpdater . _entity )  ;%NWL%}  ; %NWL%DynamicGeometryUpdater . prototype . update = function ( time )  {%NWL%if ( !defined ( time )  )  {%NWL%throw new DeveloperError (  ' time is required .  '  )  ;%NWL%}%NWL%var primitives = this . _primitives ; %NWL%primitives . remove ( this . _primitive )  ; %NWL%primitives . remove ( this . _outlinePrimitive )  ; %NWL%var geometryUpdater = this . _geometryUpdater ; %NWL%7
module . exports = factory ( require (  " cldrjs "  )  )  ;%NWL%} else {%NWL%factory ( Cldr )  ;%NWL%}%NWL%}  ( function ( Cldr )  {%NWL%var alwaysArray = Cldr . _alwaysArray ; %NWL%var jsonMerge = Cldr . _jsonMerge ; %NWL%var pathNormalize = Cldr . _pathNormalize ; %NWL%var resourceGet = Cldr . _resourceGet ; %NWL%var validatePresence = Cldr . _validatePresence ; %NWL%var validateTypePath = Cldr . _validateTypePath ; %NWL%5
this . textures_ =  [  ]  ; %NWL%this . vertices_ =  [  ]  ; %NWL%this . verticesBuffer_ = null ; %NWL%this . width_ = undefined ;%NWL%}  ; %NWL%ol . render . webgl . ImageReplay . prototype . getDeleteResourcesFunction =%NWL%function ( context )  {%NWL%goog . asserts . assert ( !goog . isNull ( this . verticesBuffer_ )  )  ; %NWL%goog . asserts . assert ( !goog . isNull ( this . indicesBuffer_ )  )  ; %NWL%var verticesBuffer = this . verticesBuffer_ ; %NWL%var indicesBuffer = this . indicesBuffer_ ; %NWL%9
var element = this . getDomHelper (  )  . createElement ( goog . dom . TagName . DIV )  ; %NWL%element . className = goog . ui . media . FlashObject . CSS_CLASS ; %NWL%this . setElementInternal ( element )  ;%NWL%}  ; %NWL%goog . ui . media . FlashObject . prototype . createSwfTag_ = function (  )  {%NWL%var keys = this . flashVars_ . getKeys (  )  ; %NWL%var values = this . flashVars_ . getValues (  )  ; %NWL%var flashVars =  [  ]  ; %NWL%for ( var i = 0 ; i < keys . length ; i +  +  )  {%NWL%var key = goog . string . urlEncode ( keys [ i ]  )  ; %NWL%var value = goog . string . urlEncode ( values [ i ]  )  ; %NWL%9
var nativeToExactInteger  = plugins . get (  " nativeToExactInteger "  )  ; %NWL%var debug      = plugins . get (  " debug "  )  ; %NWL%var exp10      = plugins . get (  " exp10 "  )  ; %NWL%var divAndMod     = plugins . get (  " divAndMod "  )  ; %NWL%var sign      = plugins . get (  " sign "  )  ; %NWL%var isZero      = plugins . get (  " isZero "  )  ; %NWL%var isPositive     = plugins . get (  " isPositive "  )  ; %NWL%var isNegative     = plugins . get (  " isNegative "  )  ; %NWL%var eq       = plugins . get (  " eq "  )  ; %NWL%var compare      = plugins . get (  " compare "  )  ; %NWL%var abs       = plugins . get (  " abs "  )  ; %NWL%0
var minimist = require (  ' minimist '  )  ; %NWL%var es5build = require (  '  .  / tools / build / es5build '  )  ; %NWL%var runServerDartTests = require (  '  .  / tools / build / run_server_dart_tests '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var transformCJSTests = require (  '  .  / tools / build / transformCJSTests '  )  ; %NWL%var tsc = require (  ' gulp - typescript '  )  ; %NWL%var ts2dart = require (  ' gulp - ts2dart '  )  ; %NWL%var util = require (  '  .  / tools / build / util '  )  ; %NWL%var bundler = require (  '  .  / tools / build / bundle '  )  ; %NWL%var replace = require (  ' gulp - replace '  )  ; %NWL%var insert = require (  ' gulp - insert '  )  ; %NWL%3
assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%4
if ( text )  {%NWL%node . textContent = text ;%NWL%} else {%NWL%node . textContent =  '  '  ;%NWL%}%NWL%}%NWL%}%NWL%LockScreenConnInfoManagerPrototype . updateConnState =%NWL%function lscs_updateConnState ( simslot )  {%NWL%var conn = simslot . conn ; %NWL%var index = simslot . index ; %NWL%9
var cssCalcRegexStr =  '  ( \\ - moz\\ - |\\ - webkit\\ -  ) ?calc\\ (  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionAnyRegex = new RegExp (  ' ^ '  + cssFunctionAnyRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%7
var indexOf = ArrayProto . indexOf ; %NWL%var map = ArrayProto . map ; %NWL%var pop = ArrayProto . pop ; %NWL%var push = ArrayProto . push ; %NWL%function reverse (  )  {%NWL%var elements = ArrayProto . slice . call ( this )  ; %NWL%return $ ( ArrayProto . reverse . call ( elements )  )  ;%NWL%}%NWL%var shift = ArrayProto . shift ; %NWL%var some = ArrayProto . some ; %NWL%var unshift = ArrayProto . unshift ; %NWL%0
}  ; %NWL%var getTransactionByHash = this . getTransactionByHash =%NWL%function getTransactionByHash ( hash , callback )  {%NWL%if ( Buffer . isBuffer ( hash )  )  {%NWL%hash = hash . toString (  ' binary '  )  ;%NWL%}%NWL%hTransaction . get ( hash , function ( err , data )  {%NWL%callback ( null , deserializeTransaction ( data )  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var getTransactionsByHashes = this . getTransactionsByHashes =%NWL%1
function listArchivesHelper ( options )  {%NWL%options = options || {  }  ; %NWL%var config = this . config ; %NWL%var archiveDir = config . archive_dir ; %NWL%var timezone = config . timezone ; %NWL%var lang = this . page . lang || this . page . language || config . language ; %NWL%var format = options . format ; %NWL%var type = options . type || ' monthly '  ; %NWL%var style = options . hasOwnProperty (  ' style '  ) ? options . style :  ' list '  ; %NWL%var showCount = options . hasOwnProperty (  ' show_count '  ) ? options . show_count : true ; %NWL%var transform = options . transform ; %NWL%6
resize : function ( file , input , area )  {%NWL%var name = file . name ; %NWL%var canvas = document . createElement (  " canvas "  )  ; %NWL%var img = document . createElement (  " img "  )  ; %NWL%var WIDTH  = 0 | input . data (  ' width '  )  ; %NWL%var HEIGHT = 0 | input . data (  ' height '  )  ; %NWL%var reader = new FileReader (  )  ; %NWL%reader . onloadend = function ( e )  {%NWL%img . src = e . target . result ; %NWL%var width = img . width ; %NWL%var height = img . height ; %NWL%9
self . emit (  ' file '  , p , stat )  ; %NWL%self . send ( p , stat )  ;%NWL%}  )  ;%NWL%}%NWL%if ( !this . hasTrailingSlash (  )  ) path +  =  '  /  '  ; %NWL%next (  )  ;%NWL%}  ; %NWL%SendStream . prototype . stream = function ( path , options )  {%NWL%var self = this ; %NWL%var res = this . res ; %NWL%var req = this . req ; %NWL%9
var playerControls = function (  )  {  }  ; %NWL%playerControls . isLive_ ; %NWL%playerControls . video_ ; %NWL%playerControls . init = function ( video )  {%NWL%var videoContainer = document . getElementById (  ' videoContainer '  )  ; %NWL%var playButton = document . getElementById (  ' playButton '  )  ; %NWL%var pauseButton = document . getElementById (  ' pauseButton '  )  ; %NWL%var seekBar = document . getElementById (  ' seekBar '  )  ; %NWL%var muteButton = document . getElementById (  ' muteButton '  )  ; %NWL%var unmuteButton = document . getElementById (  ' unmuteButton '  )  ; %NWL%var volumeBar = document . getElementById (  ' volumeBar '  )  ; %NWL%4
colors = rainbowc . storage . colorsMatchingTag ( filterString )  ; %NWL%else%NWL%colors = rainbowc . storage . colorsMatching ( filterString )  ; %NWL%library . sortAndSet ( colors )  ; %NWL%if ( selectedColor )  {%NWL%library . selectColor ( selectedColor )  ;%NWL%}%NWL%}  ,%NWL%onContextShowing : function (  )  {%NWL%var copy = document . getElementById (  " context - copy "  )  ; %NWL%var edit = document . getElementById (  " context - edit "  )  ; %NWL%9
this . enableTransLate_ = setting ;%NWL%}  ; %NWL%thin . core . SvgDragger . prototype . getStartTransLatePosition = function (  )  {%NWL%return new goog . math . Coordinate ( this . startTransLateX_ , this . startTransLateY_ )  ;%NWL%}  ; %NWL%thin . core . SvgDragger . prototype . onShiftKeyPress_ = function ( e , x , y )  {%NWL%return new goog . math . Coordinate ( x , y )  ;%NWL%}  ; %NWL%thin . core . SvgDragger . prototype . onScroll_ = function ( e )  {%NWL%var clientX = e . clientX = this . clientX_ ; %NWL%var clientY = e . clientY = this . clientY_ ; %NWL%9
it (  ' if a document '  , function ( done )  {%NWL%B . findById ( b1 )%NWL%. populate (  ' fans _creator embed . other embed . array '  )%NWL%. populate (  { path :  ' adhoc . subdoc '  , model : refuser }  )%NWL%. populate (  { path :  ' adhoc . subarray . things '  , model : refuser }  )%NWL%. exec ( function ( err , doc )  {%NWL%assert . ifError ( err )  ; %NWL%var user3 = user (  ' user3 '  )  ; %NWL%doc . fans . push ( user3 )  ; %NWL%assert . deepEqual ( doc . fans [ 2 ]  . toObject (  )  , user3 . toObject (  )  )  ; %NWL%var user4 = user (  ' user4 '  )  ; %NWL%7
}%NWL%}%NWL%}  ; %NWL%Long . prototype . shiftRight = function ( numBits )  {%NWL%numBits & = 63 ; %NWL%if ( numBits =  = 0 )  {%NWL%return this ;%NWL%} else {%NWL%var high = this . high_ ; %NWL%if ( numBits < 32 )  {%NWL%var low = this . low_ ; %NWL%8
function compte (  )  {%NWL%var mois = getValueFromOption ( document . formtest . mois )  ; %NWL%var region = document . formtest . region . options . selectedIndex ; %NWL%var confort = document . formtest . confort . options . selectedIndex ; %NWL%var encadrement = document . formtest . encadrement . options . selectedIndex ; %NWL%var typeVillage = document . formtest . type_village . options . selectedIndex ; %NWL%var budget = document . formtest . budget . value ; %NWL%var sport1 = document . formtest . sport1 . options . selectedIndex ; %NWL%var sport2 = document . formtest . sport2 . options . selectedIndex ; %NWL%var sport3 = document . formtest . sport3 . options . selectedIndex ; %NWL%var activite1 = document . formtest . activite1 . options . selectedIndex ; %NWL%2
var path = require (  ' path '  )  ; %NWL%var l10nContext = require (  '  .  .  / l10n / context . js '  )  ; %NWL%function reldir ( flow , dir )  {%NWL%return path . relative ( flow . options . base , dir )  . replace (  / \\ / g ,  '  /  '  )  +  '  /  '  ;  /  /  [ base ]%NWL%}%NWL%module . exports = function ( file , flow , defineHandler , globalScope )  {%NWL%var fconsole = flow . console ; %NWL%var defList = flow . l10n . defList ; %NWL%var getTokenList = flow . l10n . getTokenList ; %NWL%var paths = flow . l10n . paths ; %NWL%var cultureList = flow . l10n . cultureList ; %NWL%7
var curID  = preID +  ' __ '  + key ; %NWL%var canEdit = parentEdit && canEditValue ( curValue )  ; %NWL%if ( typeOf ( curValue )  =  =  ' array '  )  {%NWL%key +  =  '  [  '  +  curValue . length +  '  ]  '  ;  }%NWL%return '  < tr >  < td class =  " desc key "  >  '  + key +  '  <  / td >  < td class =  " content value propValue '  +  ( canEdit ? ' canEdit '  :  '  '  )  +  '  " id =  "  '  + curID +  '  "  >  '  + displayValue ( curValue , path + key +  '  /  '  , curID , 0 , params , canEdit )  +  '  <  / td >  <  / tr >  '  ;%NWL%}%NWL%var funcStartMongoclikker = function (  )  {%NWL%var app = require (  ' express '  )  . createServer (  )%NWL%, express = require (  ' express '  )%NWL%, Db = require (  ' mongodb '  )  . Db%NWL%, Connection = require (  ' mongodb '  )  . Connection%NWL%9
this . visit ( node . block )  ; %NWL%this . buf . push (  '  break ;  '  )  ;%NWL%}  ,%NWL%visitLiteral : function ( node )  {%NWL%var str = node . str . replace (  / \n / g ,  ' \\\\n '  )  ; %NWL%this . buffer ( str )  ;%NWL%}  ,%NWL%visitBlock : function ( block )  {%NWL%var len = block . nodes . length%NWL%, escape = this . escape%NWL%, pp = this . pp%NWL%9
if ( child =  =  = right )  {%NWL%return node ;%NWL%} else {%NWL%return node . copy ( left , child )  ;  /  / TODO test this%NWL%}%NWL%}%NWL%}%NWL%}%NWL%function nth_remove ( node , index )  {%NWL%var left  = node . left ; %NWL%var right  = node . right ; %NWL%9
var cursor = document . createElement (  " span "  )  ; %NWL%this . m_cursor = cursor ; %NWL%cursor . className =  " cursor "  ; %NWL%if ( !Richie . isMobile )  {%NWL%cursor . innerHTML =  " | "  ;%NWL%}%NWL%this . m_content . firstChild . insertBefore ( cursor , this . m_content . firstChild . firstChild )  ;%NWL%}%NWL%Richie . prototype . scrollToCursor = function (  )  {%NWL%var cursor = this . m_cursor ; %NWL%var editor = this . m_editor ; %NWL%9
var ACTOR_PADDING  = 10 ;  /  / Padding inside a actor%NWL%var SIGNAL_MARGIN  = 5 ;  /  / Margin around a signal%NWL%var SIGNAL_PADDING = 5 ;  /  / Padding inside a signal%NWL%var NOTE_MARGIN  = 10 ;  /  / Margin around a note%NWL%var NOTE_PADDING  = 5 ;  /  / Padding inside a note%NWL%var NOTE_OVERLAP  = 15 ;  /  / Overlap when using a " note over A , B "%NWL%var TITLE_MARGIN  = 0 ; %NWL%var TITLE_PADDING  = 5 ; %NWL%var SELF_SIGNAL_WIDTH = 20 ;  /  / How far out a self signal goes%NWL%var PLACEMENT = Diagram . PLACEMENT ; %NWL%var LINETYPE  = Diagram . LINETYPE ; %NWL%9
return run ( location ,  {%NWL%name :  " event - queue - query "  ,%NWL%build : Math . random (  )  . toString ( 36 )  . slice ( 2 )%NWL%}  ,  " scripts / saucelabs - fast - configurations . json "  )  ;%NWL%}  )%NWL%. then ( function ( results )  {%NWL%console . log (  )  ; %NWL%console . log (  " os , browser , version , settimeout , setimmediate , messagechannel , mutationobserver , webkitmutationobserver "  )  ; %NWL%results . forEach ( function ( result )  {%NWL%var configuration = result . configuration ; %NWL%var results = result . results ; %NWL%9
}%NWL%if ( opts . width )  {%NWL%$ (  "  > div "  , selector )  . css (  {  " width "  : opts . width ,  " margin "  :  " 0 auto "  }  )  ; %NWL%select . css (  " width "  , opts . width )  ;%NWL%}%NWL%if ( opts . height )  {%NWL%$ (  "  > div "  , selector )  . css (  " height "  , opts . height )  ; %NWL%select . css (  " height "  , opts . height - 10 )  ;%NWL%}%NWL%var colModel = self . jqGrid (  " getGridParam "  ,  " colModel "  )  ; %NWL%var colNames = self . jqGrid (  " getGridParam "  ,  " colNames "  )  ; %NWL%9
goog . require (  ' goog . testing . storage . FakeMechanism '  )  ; %NWL%goog . setTestOnly (  )  ; %NWL%var asyncTestCase = goog . testing . AsyncTestCase . createAndInstall ( document . title )  ; %NWL%asyncTestCase . stepTimeout = 2000 ; %NWL%var constants = e2e . ext . constants ; %NWL%var launcher = null ; %NWL%var mockControl = null ; %NWL%var fakeStorage = null ; %NWL%var panel = null ; %NWL%var stubs = new goog . testing . PropertyReplacer (  )  ; %NWL%var utils = e2e . ext . utils ; %NWL%4
_colorize : function (  )  {%NWL%var x = this . _renderBoundaries [ 0 ]  ; %NWL%var y = this . _renderBoundaries [ 1 ]  ; %NWL%var width = this . _renderBoundaries [ 2 ]  - x ; %NWL%var height = this . _renderBoundaries [ 3 ]  - y ; %NWL%var maxWidth = this . _width ; %NWL%var maxHeight = this . _height ; %NWL%var opacity = this . _opacity ; %NWL%var maxOpacity = this . _maxOpacity ; %NWL%var minOpacity = this . _minOpacity ; %NWL%var useGradientOpacity = this . _useGradientOpacity ; %NWL%7
var MockUI    = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - ui '  )  ; %NWL%var MockProject   = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - project '  )  ; %NWL%var MockWatcher   = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - watcher '  )  ; %NWL%var MockServerWatcher = require (  '  .  .  /  .  .  /  .  .  / helpers / mock - server - watcher '  )  ; %NWL%var ProxyServer   = require (  '  .  .  /  .  .  /  .  .  / helpers / proxy - server '  )  ; %NWL%var chalk    = require (  ' chalk '  )  ; %NWL%var request    = require (  ' supertest '  )  ; %NWL%var net     = require (  ' net '  )  ; %NWL%var EOL     = require (  ' os '  )  . EOL ; %NWL%var nock     = require (  ' nock '  )  ; %NWL%var express    = require (  ' express '  )  ; %NWL%5
bar . css (  ' left '  , win . width (  )  / 2 - bar . width (  )  / 2 )%NWL%return resize ;%NWL%}%NWL%win . on (  ' resize '  , resize ( true )  )  ; %NWL%var editor = CodeMirror . fromTextArea ( $ (  ' #editor '  )  . get ( 0 )  ,  {%NWL%lineNumbers : true ,%NWL%autofocus : true ,%NWL%mode : mode || ' javascript '  ,%NWL%theme :  ' neat '%NWL%}  )  ; %NWL%var result = CodeMirror . fromTextArea ( $ (  ' #result '  )  . get ( 0 )  ,  {%NWL%4
attributeBindings :  [  ' transform '  ]  ,%NWL%classNames :  [  ' nf - plot '  ]  ,%NWL%x : null ,%NWL%y : null ,%NWL%hasX : Ember . computed . notEmpty (  ' x '  )  ,%NWL%hasY : Ember . computed . notEmpty (  ' y '  )  ,%NWL%isVisible : Ember . computed . and (  ' hasX '  ,  ' hasY '  )  ,%NWL%rangeX : Ember . computed (  ' x '  ,  ' xScale '  , function (  )  {%NWL%var xScale = this . get (  ' xScale '  )  ; %NWL%var x = this . get (  ' x '  )  ; %NWL%var hasX = this . get (  ' hasX '  )  ; %NWL%8
parent_li . data (  " currentaggregate "  , nextaggregate )  ;%NWL%}  )  ; %NWL%$ ( document )  . on (  " click "  ,  "  . dq - modal - done - btn "  , function (  )  {%NWL%var columns =  [  ]  ; %NWL%var is_op_col_checked = false ; %NWL%$ (  '  . dq - modal - column '  )  . each ( function (  )  {%NWL%var li = $ ( this )  ; %NWL%if ( li . find (  " input "  )  . is (  "  : checked "  )  )  {%NWL%var agg = li . data (  " currentaggregate "  )  ; %NWL%var type = li . data (  " columntype "  )  ; %NWL%var name = li . data (  " columnname "  )  ; %NWL%9
score +  = Scorer . objPrioDefault ;%NWL%}%NWL%results . push (  [ filenames [ match [ 0 ]  ]  , fullname ,  ' # '  + anchor , descr , score ]  )  ;%NWL%}%NWL%}%NWL%}%NWL%return results ;%NWL%}  ,%NWL%performTermsSearch : function ( searchterms , excluded , terms , score )  {%NWL%var filenames = this . _index . filenames ; %NWL%var titles = this . _index . titles ; %NWL%9
, hotplate = require (  ' hotplate '  )%NWL%, declare = require (  ' simpledeclare '  )%NWL%, hotCoreJsonRestStores = hotplate . require (  ' hotCoreJsonRestStores '  )%NWL%, debug = require (  ' debug '  )  (  ' hotplate : hotCoreStoreLogger '  )%NWL% ; %NWL%var stores =  {  }  ; %NWL%hotplate . hotEvents . onCollect (  ' stores '  ,  ' hotCoreStoreLogger '  , hotplate . cachable ( function ( done )  {%NWL%hotCoreJsonRestStores . get ( function ( err , s )  {%NWL%if ( err ) return done ( err )  ; %NWL%var BasicDbStore = s . BasicDbStore ; %NWL%var BasicSchema = s . BasicSchema ; %NWL%9
var size = new OpenLayers . Size (%NWL%this . backBufferTile . size . w * ratio ,%NWL%this . backBufferTile . size . h * ratio%NWL%)  ; %NWL%var px = this . layer . map . getLayerPxFromLonLat ( upperLeft )  ; %NWL%OpenLayers . Util . modifyDOMElement ( this . backBufferTile . frame ,%NWL%null , px , size )  ; %NWL%var imageSize = this . backBufferTile . imageSize ; %NWL%imageSize = new OpenLayers . Size ( imageSize . w * ratio ,%NWL%imageSize . h * ratio )  ; %NWL%var imageOffset = this . backBufferTile . imageOffset ; %NWL%7
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
if ( i =  = exceptColIndex ) continue ; %NWL%var popUpFltElm = this . popUpFltElms [ i ]  ; %NWL%if ( popUpFltElm ) popUpFltElm . style . display =  ' none '  ;%NWL%}%NWL%}%NWL%TF . prototype . RemovePopupFilters = function (  )%NWL%{%NWL%this . popUpFltElmCache =  [  ]  ; %NWL%for ( var i = 0 ; i < this . popUpFltElms . length ; i +  +  )  {%NWL%var popUpFltElm = this . popUpFltElms [ i ]  ; %NWL%var popUpFltSpan = this . popUpFltSpans [ i ]  ; %NWL%1
context . lineTo ( x2 , y2 )  ;%NWL%}%NWL%context . fillStyle =  " #FF0000 "  ; %NWL%context . fill (  )  ; %NWL%context . closePath (  )  ;%NWL%}  ; %NWL%PIXI . CanvasRenderer . prototype . renderStrip = function ( strip )%NWL%{%NWL%var context = this . context ; %NWL%var verticies = strip . verticies ; %NWL%var uvs = strip . uvs ; %NWL%9
}  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%exports . shouldCorrectlyConnectToMongoSShardedSetupAndKillTheMongoSProxy =  {%NWL%metadata :  { requires :  { topology :  ' sharded '  }  }  ,%NWL%test : function ( configuration , test )  {%NWL%var Mongos = configuration . require . Mongos%NWL%, MongoClient = configuration . require . MongoClient%NWL%, Server = configuration . require . Server%NWL%, Db = configuration . require . Db%NWL%8
var handlers =  {  }  ; %NWL%deployTargets . forEach ( function ( target )  {%NWL%handlers [ target ]  = modules [ target ]  ( target , configs [ target ]  )  ;%NWL%}  )  ; %NWL%var count = deployTargets . length ; %NWL%var successful =  [  ]  ; %NWL%var failed =  [  ]  ; %NWL%deployTargets . forEach ( function ( target )  {%NWL%var config = configs [ target ]  ; %NWL%config . LOGNAME = process . env . LOGNAME ; %NWL%var handler = handlers [ target ]  ; %NWL%8
}  ;%NWL%}%NWL%function computePositionsExtruded ( params )  {%NWL%var ellipsoid = params . ellipsoid ; %NWL%var computedPositions = CorridorGeometryLibrary . computePositions ( params )  ; %NWL%var attr = combine ( computedPositions , params . cornerType )  ; %NWL%var wallIndices = attr . wallIndices ; %NWL%var height = params . height ; %NWL%var extrudedHeight = params . extrudedHeight ; %NWL%var attributes = attr . attributes ; %NWL%var indices = attr . indices ; %NWL%6
started : true%NWL%}  ;%NWL%}%NWL%}  ,%NWL%mouseMove : function ( opts )  {%NWL%if ( !started )  {%NWL%return ;%NWL%}%NWL%if ( svgCanvas . getMode (  )  =  =  ' star '  )  {%NWL%var x = opts . mouse_x ; %NWL%var y = opts . mouse_y ; %NWL%9
var domain = require (  " domain "  )  ; %NWL%var url = require (  " url "  )  ; %NWL%var _ = require (  " lodash "  )  ; %NWL%plugin . consumes =  [  " raygun "  ,  " connect "  ,  " http "  ,  " connect . remote - address "  ]  ; %NWL%plugin . provides =  [  " raygun . connect "  ]  ; %NWL%module . exports = plugin ; %NWL%function plugin ( options , imports , register )  {%NWL%var raygun = imports . raygun ; %NWL%var errorClient = raygun . errorClient ; %NWL%var warningClient = raygun . warningClient ; %NWL%var connect = imports . connect ; %NWL%7
readIndex +  = this . buffersize ;%NWL%}%NWL%this . readIndex = readIndex ;%NWL%}  ; %NWL%$ . setRate = function ( rate )  {%NWL%this . rate   = rate ; %NWL%this . phaseIncr =  ( 512 * this . rate / this . samplerate )  * this . phaseStep ;%NWL%}  ; %NWL%$ . process = function ( cellL , cellR )  {%NWL%var bufferL = this . bufferL ; %NWL%var bufferR = this . bufferR ; %NWL%9
}  ,%NWL%' click . port - status '  : function (  )  {%NWL%var status = STATUS_MAP [ STATUS_MAP . indexOf ( this . status )  + 1 ]  ; %NWL%if ( STATUS_MAP . indexOf ( this . status )  + 1 > 4 )  {%NWL%status = STATUS_MAP [ 0 ]  ;%NWL%}%NWL%return Meteor . call (  ' setPortStatus '  , Session . get (  ' projectId '  )  , Session . get (  ' portId '  )  , status )  ;%NWL%}  ,%NWL%' click #previous - port '  : function (  )  {%NWL%var projectId = Session . get (  ' projectId '  )  ; %NWL%var portId = Session . get (  ' portId '  )  ; %NWL%9
controllerRef . on (  ' value '  , function ( snapshot )  {%NWL%var changedPost = snapshot . val (  )  ; %NWL%state = changedPost ; %NWL%update (  )  ;%NWL%}  , function ( err )  {%NWL%console . log (  ' The read failed :  '  + err . code )  ;%NWL%}  )  ; %NWL%var accelerate = document . getElementById (  ' accelerate '  )  ; %NWL%var alpha = document . getElementById (  ' alpha '  )  ; %NWL%var beta = document . getElementById (  ' beta '  )  ; %NWL%var gamma = document . getElementById (  ' gamma '  )  ; %NWL%7
return JSON . parse ( CouchDB . last_req . responseText )  . version ;%NWL%}  ; %NWL%CouchDB . reloadConfig = function (  )  {%NWL%CouchDB . last_req = CouchDB . request (  " POST "  ,  "  / _config / _reload "  )  ; %NWL%CouchDB . maybeThrowError ( CouchDB . last_req )  ; %NWL%return JSON . parse ( CouchDB . last_req . responseText )  ;%NWL%}  ; %NWL%CouchDB . replicate = function ( source , target , rep_options )  {%NWL%rep_options = rep_options || {  }  ; %NWL%var headers = rep_options . headers || {  }  ; %NWL%var body = rep_options . body || {  }  ; %NWL%9
return a . pipe ( b )%NWL%}%NWL%var create = function ( db , opts )  {%NWL%if ( !opts ) opts =  {  }%NWL%var subs = sublevel ( db )%NWL%var latest = subs . sublevel (  ' latest '  )%NWL%var seqs = subs . sublevel (  ' seqs '  )%NWL%var log = scuttleup ( subs . sublevel (  ' log '  )  , opts )%NWL%var fdb = fwdb ( db )  /  / sublevel blows up if we pass in a sublevel :  (%NWL%var preupdate = opts . preupdate || next%NWL%var postupdate = opts . postupdate || next%NWL%9
{ title :  ' Row 4 '  , foo :  ' row4 '  }%NWL%]  ; %NWL%var tableview = Titanium . UI . createTableView (  {%NWL%data : data ,%NWL%editable : true ,%NWL%allowsSelectionDuringEditing : true%NWL%}  )  ; %NWL%tableview . addEventListener (  ' click '  , function ( e )%NWL%{%NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%9
return Session . get (  ' projectId '  )  ;%NWL%}  ; %NWL%Template . serviceVulnerabilityList . portId = function (  )  {%NWL%return Session . get (  ' portId '  )  ;%NWL%}  ; %NWL%Template . serviceVulnerabilityList . flagFilter = function (  )  {%NWL%return Session . get (  ' vulnerabilityListFlagFilter '  )  ;%NWL%}  ; %NWL%Template . serviceVulnerabilityList . vulnerabilities = function (  )  {%NWL%var projectId = Session . get (  ' projectId '  )  ; %NWL%var portId = Session . get (  ' portId '  )  ; %NWL%9
commandRegistry . addCommandGroup ( viewActionsScope ,  " orion . menuBarViewGroup "  , 100 , messages [  " View "  ]  , null , messages [  " noActions "  ]  , null , null ,  " dropdownSelection "  )  ;  /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%commandRegistry . addCommandGroup ( toolsActionsScope ,  " orion . menuBarToolsGroup "  , 100 , messages [  " Tools "  ]  , null , null , null , null ,  " dropdownSelection "  )  ;  /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%commandRegistry . addCommandGroup ( fileActionsScope ,  " orion . newContentGroup "  , 0 , messages [  " New "  ]  ,  " orion . menuBarFileGroup "  , null , null , null ,  " dropdownSelection "  )  ;  /  / $NON - NLS - 3$ /  / $NON - NLS - 2$ /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%commandRegistry . addCommandGroup ( fileActionsScope ,  " orion . importGroup "  , 100 , messages [  " Import "  ]  ,  " orion . menuBarFileGroup "  , null , null , null ,  " dropdownSelection "  )  ;  /  / $NON - NLS - 3$ /  / $NON - NLS - 2$ /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%commandRegistry . addCommandGroup ( fileActionsScope ,  " orion . exportGroup "  , 1001 , messages [  " Export "  ]  ,  " orion . menuBarFileGroup "  , null , null , null ,  " dropdownSelection "  )  ;  /  / $NON - NLS - 3$ /  / $NON - NLS - 2$ /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%}  ,%NWL%createCommands : function (  )  {%NWL%var serviceRegistry = this . serviceRegistry ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorCommands = this . editorCommands ; %NWL%7
isInitialized : false ,%NWL%layoutMargin : 5 ,%NWL%loadCategories : function (  )  {%NWL%var windowId = this . getForm (  )  . view . standardWindow . windowId ; %NWL%var entityName = this . getForm (  )  . view . entity ; %NWL%var actionURL = OB . Application . contextUrl +  ' utility / UsedByLink . html '  ; %NWL%var that = this ; %NWL%var callback ; %NWL%callback = function ( response , data , request )  {%NWL%var msg = data . msg ; %NWL%var usedByLinkData = data . usedByLinkData ; %NWL%9
this . _history . save ( this . _previouslyViewedFilesSetting )  ;%NWL%}  ,%NWL%_tooltipForFile : function ( uiSourceCode )%NWL%{%NWL%return uiSourceCode . originURL (  )  ;%NWL%}  ,%NWL%_appendFileTab : function ( uiSourceCode , userGesture )%NWL%{%NWL%var view = this . _delegate . viewForFile ( uiSourceCode )  ; %NWL%var title = this . _titleForFile ( uiSourceCode )  ; %NWL%var tooltip = this . _tooltipForFile ( uiSourceCode )  ; %NWL%9
}  ,%NWL%onResized : function (  )  {%NWL%this . _calcHitGrid (  )  ;%NWL%}  ,%NWL%_onGridMouseMove : function ( x , y )  {%NWL%this . pos =  { x : x , y : y }  ; %NWL%this . _paint (  )  ;%NWL%}  ,%NWL%_paint : function (  )  {%NWL%var x = this . pos . x ; %NWL%var y = this . pos . y ; %NWL%9
var breakpointActiveTitle = breakpointActive ?%NWL%WebInspector . UIString ( WebInspector . useLowerCaseMenuTitles (  ) ? " Deactivate breakpoints "  :  " Deactivate Breakpoints "  )  : %NWL%WebInspector . UIString ( WebInspector . useLowerCaseMenuTitles (  ) ? " Activate breakpoints "  :  " Activate Breakpoints "  )  ; %NWL%contextMenu . appendItem ( breakpointActiveTitle , WebInspector . debuggerModel . setBreakpointsActive . bind ( WebInspector . debuggerModel , !breakpointActive )  )  ; %NWL%contextMenu . show (  )  ;%NWL%}  ,%NWL%_breakpointAdded : function ( event )%NWL%{%NWL%this . _breakpointRemoved ( event )  ; %NWL%var breakpoint =  ( event . data . breakpoint )  ; %NWL%var uiLocation =  ( event . data . uiLocation )  ; %NWL%9
goog . graphics . AffineTransform . prototype . shear = function ( shx , shy )  {%NWL%var m00 = this . m00_ ; %NWL%var m10 = this . m10_ ; %NWL%this . m00_ +  = shy * this . m01_ ; %NWL%this . m10_ +  = shy * this . m11_ ; %NWL%this . m01_ +  = shx * m00 ; %NWL%this . m11_ +  = shx * m10 ; %NWL%return this ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . preShear = function ( shx , shy )  {%NWL%var m00 = this . m00_ ; %NWL%2
var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var path = require (  ' path '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var os = require (  ' os '  )  ; %NWL%var spawn = require (  ' win - spawn '  )  ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var opn = require (  ' opn '  )  ; %NWL%var Gaze = require (  ' gaze '  )  . Gaze ; %NWL%var request = require (  ' request '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%1
Asana . prototype . getTaskSubTasks = tasks . getTaskSubTasks ; %NWL%Asana . prototype . addSubTask = tasks . addSubTask ; %NWL%var projects = require (  '  .  / modules / projects '  )  ; %NWL%Asana . prototype . createProject = projects . createProject ; %NWL%Asana . prototype . createWorkspaceProject = projects . createWorkspaceProject ; %NWL%Asana . prototype . getProject = projects . getProject ; %NWL%Asana . prototype . updateProject = projects . updateProject ; %NWL%Asana . prototype . getProjectTasks = projects . getProjectTasks ; %NWL%Asana . prototype . getProjects = projects . getProjects ; %NWL%Asana . prototype . getProjectsWorkspace = projects . getProjectsWorkspace%NWL%var tags = require (  '  .  / modules / tags '  )  ; %NWL%2
if ( this . _showing < 0 ) return ; %NWL%var index = this . _showing ; %NWL%this . _showing =  - 1 ; %NWL%if ( transition instanceof Function )  {%NWL%callback = transition ; %NWL%transition = undefined ;%NWL%}%NWL%var node = this . _nodes [ index ]  ; %NWL%var modifier = this . _modifiers [ index ]  ; %NWL%var state = this . _states [ index ]  ; %NWL%var renderable = this . _renderables [ index ]  ; %NWL%7
var linkIdle = link . get (  ' html '  )  ; %NWL%function linkUpdate (  )  {%NWL%var l = swf . fileList . length ; %NWL%if ( !l )  {%NWL%link . title = null ; %NWL%link . set (  ' html '  , linkIdle )  ; %NWL%return ;%NWL%}%NWL%var rate = Swiff . Uploader . formatUnit ( swf . rate ,  ' bps '  )  ; %NWL%var size = Swiff . Uploader . formatUnit ( swf . size ,  ' b '  )  ; %NWL%var bytesLoaded = Swiff . Uploader . formatUnit ( swf . bytesLoaded ,  ' b '  )  ; %NWL%9
var receiver = ast . receiver . visit ( this )  ; %NWL%var args = this . _visitAll ( ast . args )  ; %NWL%if ( isPresent ( this . variableBindings ) && ListWrapper . contains ( this . variableBindings , ast . name )  )  {%NWL%var target = this . _addRecord ( RECORD_TYPE_LOCAL , ast . name , ast . name ,  [  ]  , null , receiver )  ; %NWL%return this . _addRecord ( RECORD_TYPE_INVOKE_CLOSURE ,  " closure "  , null , args , null , target )  ;%NWL%} else {%NWL%return this . _addRecord ( RECORD_TYPE_INVOKE_METHOD , ast . name , ast . fn , args , null , receiver )  ;%NWL%}%NWL%}  ,%NWL%visitFunctionCall : function ( ast )  {%NWL%var target = ast . target . visit ( this )  ; %NWL%0
this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . window (  ' DELETE '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' DELETE '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / window '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testSwitchWindow : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var bg = g . select (  '  . nf - brush - selection - right - text - bg '  )  ; %NWL%var display = this . get (  ' rightDisplay '  )  ; %NWL%if ( !display )  {%NWL%g . attr (  ' hidden '  , true )  ;%NWL%} else {%NWL%g . attr (  ' hidden '  , null )  ;%NWL%}%NWL%text . text ( display )  ; %NWL%var textPadding = this . get (  ' textPadding '  )  ; %NWL%var rightX = this . get (  ' rightX '  )  ; %NWL%var graphHeight = this . get (  ' graphHeight '  )  ; %NWL%8
filetype_detail . append (  "  < div style =  ' width : 100% ;  '  >  < input class =  ' editor ' style =  ' width : 200px ;  ' value =  '  "  + self . get_filetype_info ( $ ( this )  . attr (  " id "  )  ,  " editor "  )  +  "  '  >  <  / input >  <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  > Type <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  >  < input class =  ' type ' style =  ' width : 200px ;  ' value =  '  "  + self . get_filetype_info ( $ ( this )  . attr (  " id "  )  ,  " type "  )  +  "  '  >  <  / input >  <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  > Description <  / div >  "  )  ; %NWL%filetype_detail . append (  "  < div style =  ' width : 100% ;  '  >  < textarea class =  ' description ' style =  ' resize : none ; width : 200px ; height : 100px ; overflow : hidden ;  '  >  "  + self . get_filetype_info ( $ ( this )  . attr (  " id "  )  ,  " description "  )  +  "  <  / textarea >  <  / div >  "  )  ;%NWL%}%NWL%}  )  ;%NWL%}  )%NWL%$ (  " #del "  )  . click ( function (  )  {%NWL%var filetype_list = $ (  " div . filetype_contents "  )  . find (  " div . filetype_list "  )%NWL%var filetype_detail = $ (  " div . filetype_contents "  )  . find (  " div . filetype_detail "  )%NWL%9
$ (  ' #accordion '  )  . find (  '  . non - empty - value '  )  . each ( function ( index , value )  {%NWL%if ( !self . checkNonEmpty ( $ ( value )  )  )  {%NWL%hasError = true ;%NWL%}%NWL%}  )  ; %NWL%if ( hasError )  {%NWL%return ;%NWL%}%NWL%var global_nameservers = $ (  " #global_nameservers "  )  . val (  )  ; %NWL%var global_searchpath = $ (  " #global_searchpath "  )  . val (  )  ; %NWL%var global_gateway = $ (  " #global_gateway "  )  . val (  )  ; %NWL%8
subscription . unsubscribe = function (  )  {%NWL%unregister (  )  ;  /  / Remove the event listener , so this object can get cleaned up by gc%NWL%return connection . session . unsubscribe ( subscription )  ;%NWL%}  ; %NWL%return subscription . promise ;%NWL%}  ; %NWL%var interceptorWrapper = function ( type , args , callback )  {%NWL%var result = function ( result )  {%NWL%return { result : result , type : type , args : args }  ;%NWL%}  ; %NWL%var error = function ( error )  {%NWL%7
var net = require (  ' net '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var EventEmitter = require (  ' events '  )  . EventEmitter ; %NWL%var HTTPParser = process . binding (  ' http_parser '  )  . HTTPParser ; %NWL%var assert = require (  ' assert '  )  . ok ; %NWL%var Buffer = require (  ' buffer '  )  . Buffer ; %NWL%var common = require (  ' _http_common '  )  ; %NWL%var httpSocketSetup = common . httpSocketSetup ; %NWL%var parsers = common . parsers ; %NWL%var freeParser = common . freeParser ; %NWL%var debug = common . debug ; %NWL%7
var EventConstants = require (  ' EventConstants '  )  ; %NWL%var EventPluginUtils = require (  ' EventPluginUtils '  )  ; %NWL%var EventPropagators = require (  ' EventPropagators '  )  ; %NWL%var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%var accumulateInto = require (  ' accumulateInto '  )  ; %NWL%var keyOf = require (  ' keyOf '  )  ; %NWL%var isStartish = EventPluginUtils . isStartish ; %NWL%var isMoveish = EventPluginUtils . isMoveish ; %NWL%var isEndish = EventPluginUtils . isEndish ; %NWL%var executeDirectDispatch = EventPluginUtils . executeDirectDispatch ; %NWL%var hasDispatches = EventPluginUtils . hasDispatches ; %NWL%6
var limit = stats [ limit_key ]  ; %NWL%if ( typeof used =  =  ' number '  )  {%NWL%return node_stat ( used_key ,  ' Used '  , limit_key ,  ' available '  , stats ,%NWL%fmt_plain , fmt_plain_axis ,%NWL%fmt_color ( used / limit , thresholds )  )  ;%NWL%} else {%NWL%return used ;%NWL%}%NWL%}%NWL%function node_stat_count_bar ( used_key , limit_key , stats , thresholds )  {%NWL%var used = stats [ used_key ]  ; %NWL%0
{  ' x '  : this . right ,  ' y '  : this . top }  , source , dest )  ; %NWL%this . left  = Math . min ( ll . x , ul . x )  ; %NWL%this . bottom = Math . min ( ll . y , lr . y )  ; %NWL%this . right  = Math . max ( lr . x , ur . x )  ; %NWL%this . top  = Math . max ( ul . y , ur . y )  ; %NWL%return this ;%NWL%}  ,%NWL%wrapDateLine : function ( maxExtent , options )  {%NWL%options = options || {  }  ; %NWL%var leftTolerance = options . leftTolerance || 0 ; %NWL%var rightTolerance = options . rightTolerance || 0 ; %NWL%9
var backgroundPage = window . opener ; %NWL%var link = document . createElement (  ' link '  )  ; %NWL%link . type =  ' text / css '  ; %NWL%link . rel =  ' stylesheet '  ; %NWL%link . href =  ' platform -  '  + backgroundPage . platformInfo . os +  '  . css '  ; %NWL%document . head . appendChild ( link )  ; %NWL%console . info (  ' inserting platform css '  , link . href )  ;%NWL%}  )  (  )  ; %NWL%window . addEventListener (  ' load '  , function (  )  {%NWL%var scroll = document . querySelector (  '  . scroll '  )  ; %NWL%var titlebar = document . querySelector (  '  . titlebar '  )  ; %NWL%9
var ast = parse ( src , opts , fileName )  ; %NWL%return convertSrc ( src , results )  ;%NWL%}  ,%NWL%expandAsserts : function ( src , fileName )  {%NWL%var ast = parse ( src , fileName )  ; %NWL%var results =  [  ]  ; %NWL%walk . simple ( ast ,  {%NWL%CallExpression : function ( node )  {%NWL%var start = node . start ; %NWL%var end = node . end ; %NWL%var callee = node . callee ; %NWL%8
return this . set (  ' Link '  , link + Object . keys ( links )  . map ( function ( rel )  {%NWL%return '  <  '  + links [ rel ]  +  '  >  ; rel =  "  '  + rel +  '  "  '  ;%NWL%}  )  . join (  '  ,  '  )  )  ;%NWL%}  ; %NWL%res . send = function send ( body )  {%NWL%var chunk = body ; %NWL%var encoding ; %NWL%var len ; %NWL%var req = this . req ; %NWL%var type ; %NWL%var app = this . app ; %NWL%8
}  )  ; %NWL%grunt . file . expand (  {%NWL%filter :  ' isDirectory '  , cwd :  '  .  '%NWL%}  ,  ' directives / demo /  *  '  )  . forEach ( function ( dir )  {%NWL%findModule (  ' demo /  '  + dir . split (  '  /  '  )  [ 2 ]  )  ;%NWL%}  )  ; %NWL%var modules = grunt . config (  ' modules '  )  ; %NWL%grunt . config (  ' srcModules '  , _ . pluck ( modules ,  ' moduleName '  )  )  ; %NWL%grunt . config (  ' tplModules '  , _ . pluck ( modules ,  ' tplModules '  )  . filter ( function ( tpls )  { return tpls . length > 0 ;  }  )  )  ; %NWL%var srcFiles = _ . pluck ( modules ,  ' srcFiles '  )  ; %NWL%var tpljsFiles = _ . pluck ( modules ,  ' tpljsFiles '  )  ; %NWL%9
var minimatch = require (  ' minimatch '  )  ; %NWL%var is = require (  ' annois '  )  ; %NWL%var fp = require (  ' annofp '  )  ; %NWL%var zip = require (  ' annozip '  )  ; %NWL%var levenshtein = require (  ' fast - levenshtein '  )  ; %NWL%module . exports = function ( model , query , cb )  {%NWL%if ( !is . object ( query ) || fp . count ( query )  =  =  = 0 )  {%NWL%return is . fn ( cb ) ? cb ( null , filterDeleted ( model . _data )  )  : query ( null , filterDeleted ( model . _data )  )  ;%NWL%}%NWL%var fields = query . fields ; %NWL%var limit = query . limit ; %NWL%9
emitError (  ' at least '  , atLeast )  ;%NWL%} else if ( atMost ! =  = undefined && linesBetween > atMost )  {%NWL%emitError (  ' at most '  , atMost )  ;%NWL%} else if ( exactly ! =  = undefined && linesBetween ! =  = exactly )  {%NWL%emitError (  ' exactly '  , exactly )  ;%NWL%}%NWL%}  ; %NWL%TokenAssert . prototype . _validateOptions = function ( options )  {%NWL%var token = options . token ; %NWL%var nextToken = options . nextToken ; %NWL%var atLeast = options . atLeast ; %NWL%8
_loadComponents : function (  )  {%NWL%var value , minValue , maxValue ; %NWL%var bar ; %NWL%var options = this . options ; %NWL%var x ; %NWL%var y ; %NWL%var keys = Object . keys ( this . options . data )  ; %NWL%var count = keys . length ; %NWL%var width = this . options . width ; %NWL%var offset = this . options . offset || 0 ; %NWL%var data = this . options . data ; %NWL%8
}  ; %NWL%Model . prototype [  ' destroy '  ]  = function (  )  {%NWL%log_ . model_ ( this ,  ' Destroying '  )  ; %NWL%var vars = this [  ' privateModelProperties '  ]  ; %NWL%var voodoo = window [  ' voodoo '  ]  ; %NWL%var evt = new voodoo [  ' Event '  ]  (  ' destroy '  , this )  ; %NWL%vars . dispatcher_ . dispatchEvent_ ( this , evt )  ; %NWL%this [  ' tearDownViews '  ]  (  )  ; %NWL%voodoo [  ' engine '  ]  . removeModel_ ( this )  ; %NWL%var view = vars . view_ ; %NWL%var stencilView = vars . stencilView_ ; %NWL%9
intersectingHighlights . push ( highlight )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ; %NWL%return intersectingHighlights ;%NWL%}  ,%NWL%highlightCharacterRanges : function ( className , charRanges , options )  {%NWL%var i , len , j ; %NWL%var highlights = this . highlights ; %NWL%var converter = this . converter ; %NWL%var doc = this . doc ; %NWL%8
}%NWL%onItemChange ( itemIndex , itemValue , path )  {%NWL%const value = this . state . value . slice (  )  ; %NWL%value [ itemIndex ]  = itemValue ; %NWL%this . onChange ( value , this . state . keys , path )  ;%NWL%}%NWL%removeItem ( i , evt )  {%NWL%evt . preventDefault (  )  ; %NWL%const value = this . state . value . slice (  )  ; %NWL%value . splice ( i , 1 )  ; %NWL%const keys = this . state . keys . slice (  )  ; %NWL%2
}%NWL%}  ,%NWL%getComplianceStatus : function ( ctx )  {%NWL%var zeros =  ' 00 : 00 : 00 '  ; %NWL%var ends =  ' 23 : 59 : 59 '  ; %NWL%if ( typeof ctx . startDate =  =  ' undefined ' || ctx . startDate =  = null || ctx . startDate =  =  "  "  )  {%NWL%ctx . startDate =  " 2013 - 01 - 01 "  ;%NWL%}%NWL%var startDate = ctx . startDate + zeros ; %NWL%var endDate =  '  '  ; %NWL%if ( typeof ctx . endDate =  =  ' undefined ' || ctx . endDate =  = null || ctx . endDate =  =  "  "  )  {%NWL%5
}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%7
}%NWL%}  ; %NWL%Promise . prototype . _progressUnchecked =%NWL%function Promise$_progressUnchecked ( progressValue )  {%NWL%if ( !this . isPending (  )  ) return ; %NWL%var len = this . _length (  )  ; %NWL%for ( var i = 0 ; i < len ; i +  = 5 )  {%NWL%var handler = this . _progressHandlerAt ( i )  ; %NWL%var promise = this . _promiseAt ( i )  ; %NWL%if ( !Promise . is ( promise )  )  {%NWL%var receiver = this . _receiverAt ( i )  ; %NWL%8
var RequireContextPlugin = require (  "  .  / dependencies / RequireContextPlugin "  )  ; %NWL%var RequireEnsurePlugin = require (  "  .  / dependencies / RequireEnsurePlugin "  )  ; %NWL%var RequireIncludePlugin = require (  "  .  / dependencies / RequireIncludePlugin "  )  ; %NWL%var RemoveParentModulesPlugin = require (  "  .  / optimize / RemoveParentModulesPlugin "  )  ; %NWL%var RemoveEmptyChunksPlugin = require (  "  .  / optimize / RemoveEmptyChunksPlugin "  )  ; %NWL%var MergeDuplicateChunksPlugin = require (  "  .  / optimize / MergeDuplicateChunksPlugin "  )  ; %NWL%var FlagIncludedChunksPlugin = require (  "  .  / optimize / FlagIncludedChunksPlugin "  )  ; %NWL%var UnsafeCachePlugin = require (  " enhanced - resolve / lib / UnsafeCachePlugin "  )  ; %NWL%var ModulesInDirectoriesPlugin = require (  " enhanced - resolve / lib / ModulesInDirectoriesPlugin "  )  ; %NWL%var ModulesInRootPlugin = require (  " enhanced - resolve / lib / ModulesInRootPlugin "  )  ; %NWL%var ModuleTemplatesPlugin = require (  " enhanced - resolve / lib / ModuleTemplatesPlugin "  )  ; %NWL%7
}%NWL%self . prototype . subdivide = function (  )  {%NWL%var tmp =  [  ]  ; %NWL%this . edges . forEach ( function ( e )  { tmp . push ( e )  }  )  ; %NWL%tmp . forEach ( function ( e )  { e . subdivide (  )  ;  }  )  ;%NWL%}%NWL%self . prototype . append = function ( p )  {%NWL%var ep = this . getEndPoint (  )  ; %NWL%var bp = p . getBeginPoint (  )  ; %NWL%var x = ep . x - bp . x ; %NWL%var y = ep . y - bp . y ; %NWL%9
util . each ( this . subs , function ( fn )  { fn (  )  ;  }  )  ; %NWL%this . subs =  [  ]  ; %NWL%this . pageCountListeners . length = 0 ; %NWL%this . pageChangeListeners . length = 0 ;%NWL%}  ; %NWL%Paginate . prototype . _countPages = function (  )  {%NWL%var self = this ; %NWL%var currPage = self . currPage ; %NWL%if ( !this . downloadingEverything )  {%NWL%if ( self . pageCount =  =  =  - 1 )  {%NWL%var max = self . max ; %NWL%7
password +  = alphaCharacters . charAt ( Math . floor ( Math . random (  )  * alphaCharacters . length )  )  ;%NWL%}%NWL%for ( var i = 0 ; i < minLength ; i +  +  )  {%NWL%password +  = nonAlphaCharacters . charAt ( Math . floor ( Math . random (  )  * nonAlphaCharacters . length )  )  ;%NWL%}%NWL%return password ;%NWL%}%NWL%function setUpRegisterPage (  )  {%NWL%var oauth = common . getParam (  " oauth "  )  ; %NWL%if ( oauth )  {%NWL%var email = common . getParam (  " email "  )  ; %NWL%8
attributes . setNamedItem ( item )  ; %NWL%doc . doctype = new core . DocumentType ( doc ,  ' xml '  , entities , notations , attributes )  ; %NWL%doc . implementation = implementation ; %NWL%var html = doc . appendChild ( doc . createElementNS ( ns ,  ' html '  )  )  ; %NWL%var head = html . appendChild ( doc . createElementNS ( ns ,  ' head '  )  )  ; %NWL%var title = doc . createElementNS ( ns ,  ' title '  )  ; %NWL%title . appendChild ( doc . createTextNode (  ' test file '  )  )  ; %NWL%head . appendChild ( title )  ; %NWL%var body = html . appendChild ( doc . createElementNS ( ns ,  ' body '  )  )  ; %NWL%body . setAttribute (  ' onload '  ,  ' parent . loadComplete (  )  '  )  ; %NWL%var p = doc . createElementNS ( ns ,  ' p '  )  ; %NWL%5
const nsIBrowserHistory   = Components . interfaces . nsIBrowserHistory ; %NWL%const nsIChannel    = Components . interfaces . nsIChannel ; %NWL%const nsICommandLine   = Components . interfaces . nsICommandLine ; %NWL%const nsICommandLineHandler  = Components . interfaces . nsICommandLineHandler ; %NWL%const nsIContentHandler   = Components . interfaces . nsIContentHandler ; %NWL%const nsIDocShellTreeItem  = Components . interfaces . nsIDocShellTreeItem ; %NWL%const nsIDOMChromeWindow  = Components . interfaces . nsIDOMChromeWindow ; %NWL%const nsIDOMWindow    = Components . interfaces . nsIDOMWindow ; %NWL%const nsIFileURL    = Components . interfaces . nsIFileURL ; %NWL%const nsIHttpProtocolHandler = Components . interfaces . nsIHttpProtocolHandler ; %NWL%const nsIInterfaceRequestor  = Components . interfaces . nsIInterfaceRequestor ; %NWL%0
this . cancelEdit ( inRowIndex )  ; %NWL%this . _finish ( inRowIndex )  ;%NWL%}%NWL%}  )  ; %NWL%dgc . _Base . markupFactory = function ( node , cellDef )  {%NWL%var d = dojo ; %NWL%var formatter = d . trim ( d . attr ( node ,  " formatter "  ) || "  "  )  ; %NWL%if ( formatter )  {%NWL%cellDef . formatter = dojo . getObject ( formatter )  ;%NWL%}%NWL%var get = d . trim ( d . attr ( node ,  " get "  ) || "  "  )  ; %NWL%6
currantPage = pageNum ; %NWL%nums . eq ( pageNum )  . addClass (  ' current - page '  )  ; %NWL%newPage . show (  )  ; %NWL%var divs = newPage . find (  '  . asset - box '  )  ; %NWL%for ( var i = 0 ; i < divs . length ; i +  +  )  {%NWL%var div = divs [ i ]  ; %NWL%loadDiv ( pageNum * PAGE_SIZE + i , div )  ;%NWL%}%NWL%}  ; %NWL%var loadDiv = function ( i , div )  {%NWL%var asset = assets [ i ]  ; %NWL%5
return new Range ( startRow , startColumn , endRow , line . length )  ;%NWL%}%NWL%}  ;%NWL%}  )  . call ( FoldMode . prototype )  ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( acequire , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = acequire (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = acequire (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = acequire (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = acequire (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
}  ; %NWL%var ast = parse ( src , opts , fileName )  ; %NWL%return convertSrc ( src , results )  ;%NWL%}  ,%NWL%expandAsserts : function ( src , fileName )  {%NWL%var ast = parse ( src , fileName )  ; %NWL%var results =  [  ]  ; %NWL%walk . simple ( ast ,  {%NWL%CallExpression : function ( node )  {%NWL%var start = node . start ; %NWL%var end = node . end ; %NWL%9
var dependencies = this . getAttribute (  ' data - dependencies '  )%NWL%if ( !dependencies ) return%NWL%dependencies = dependencies . split (  '  ,  '  )%NWL%for ( var i = 0 ; i < dependencies . length ; i +  +  )  {%NWL%var dependency = $ (  '  [ value =  "  '  + dependencies [ i ]  +  '  "  ]  '  )%NWL%dependency && dependency . prop (  ' checked '  , true )%NWL%}%NWL%}  )%NWL%$ (  '  [ data - dependents ]  '  )  . on (  ' click '  , function (  )  {%NWL%if ( $ ( this )  . is (  '  : checked '  )  ) return%NWL%var dependents = this . getAttribute (  ' data - dependents '  )%NWL%0
BrainBrowser . events . triggerEvent (  " error "  ,  { message : error_message }  )  ; %NWL%throw new Error ( error_message )  ;%NWL%}%NWL%var workers =  {%NWL%deindex :  " deindex . worker . js "  ,%NWL%wireframe :  " wireframe . worker . js "%NWL%}  ; %NWL%var workers_loaded = 0 ; %NWL%var worker_names ; %NWL%var model_types = BrainBrowser . config . get (  " model_types "  )  ; %NWL%var intensity_data_types = BrainBrowser . config . get (  " intensity_data_types "  )  ; %NWL%9
function onAccept (  )%NWL%{%NWL%var isStyleElt =  ( gDialog . typeRadiogroup . value =  =  " embedded "  )  ; %NWL%var doc = EditorUtils . getCurrentDocument (  )  ; %NWL%var editor = EditorUtils . getCurrentEditor (  )  ; %NWL%var mediaString =  "  "  ; %NWL%var mediumElts = gDialog . mediaGroupbox . querySelectorAll (  " medium "  )  ; %NWL%for ( var i = 0 ; i < mediumElts . length ; i +  +  )  {%NWL%var m = mediumElts [ i ]  ; %NWL%var amplifier = m . amplifier ; %NWL%var media = m . media ; %NWL%9
{%NWL%var profiles = document . getElementById (  " profiles "  )  ; %NWL%this . _selectedProfile = profiles . selectedItem . id ; %NWL%if ( this . _autoMigrate )%NWL%this . _wiz . currentPage . next =  " homePageImport "  ; %NWL%else if ( this . _bookmarks )%NWL%this . _wiz . currentPage . next =  " migrating "%NWL%}  ,%NWL%onImportItemsPageShow : function (  )%NWL%{%NWL%var dataSources = document . getElementById (  " dataSources "  )  ; %NWL%1
form . find (  ' textarea [ name =  " question "  ]  '  )  . val ( question . question )  ; %NWL%form . find (  ' textarea [ name =  " answer "  ]  '  )  . val ( question . answer )  ; %NWL%form . find (  ' input [ name =  " is_public "  ]  '  )  . val (  [ question . is_public ]  )  ; %NWL%app . dom . show ( form )  ;%NWL%}  )  ;%NWL%}%NWL%app . setup . statistics = function ( ele )  {%NWL%var daily_active_accounts = ele . find (  '  . daily_active_accounts '  )  ; %NWL%var weekly_active_accounts = ele . find (  '  . weekly_active_accounts '  )  ; %NWL%var monthly_active_accounts = ele . find (  '  . monthly_active_accounts '  )  ; %NWL%var total_accounts = ele . find (  '  . total_accounts '  )  ; %NWL%7
}  ,%NWL%_configureGroupItem : function ( data , group )%NWL%{%NWL%var configureGroupItem = qx . util . Delegate . getMethod ( this . getDelegate (  )  ,  " configureGroupItem "  )  ; %NWL%if ( configureGroupItem )  {%NWL%configureGroupItem ( this . __groupRenderer , data , group )  ;%NWL%}%NWL%}  ,%NWL%_createGroupRenderer : function (  )%NWL%{%NWL%var createGroupRenderer = qx . util . Delegate . getMethod ( this . getDelegate (  )  ,  " createGroupRenderer "  )  ; %NWL%3
}  ,  {%NWL%type :  ' keyword . operator '  ,%NWL%value :  ' && '  ,%NWL%append : true ,%NWL%prepend : true%NWL%}  ]  ; %NWL%exports . singleTags =  [  ' !doctype '  ,  ' area '  ,  ' base '  ,  ' br '  ,  ' hr '  ,  ' input '  ,  ' img '  ,  ' link '  ,  ' meta '  ]  ; %NWL%exports . transform = function ( iterator , maxPos , context )  {%NWL%var token = iterator . getCurrentToken (  )  ; %NWL%var newLines = exports . newLines ; %NWL%var spaces = exports . spaces ; %NWL%9
while ( node )  {%NWL%if ( node . nodeName =  =  =  " LI "  )  {%NWL%items . push ( node )  ;%NWL%}%NWL%node = node . nextSibling ;%NWL%}%NWL%return items ;%NWL%}%NWL%function showCategorySelect (  )  {%NWL%var addcat = $ (  ' addcat '  )  ; %NWL%var catselect = $ (  ' catselect '  )  ; %NWL%9
}  )  ; %NWL%app . get (  '  / connect /  : serverid (  *  )  '  , function ( req , res )  {%NWL%var serverid = req . params . serverid ; %NWL%res . sendfile ( __dirname +  '  / client / index . html '  )  ;%NWL%}  )  ; %NWL%app . get (  '  / client /  : filename (  *  )  '  , function ( req , res )  {%NWL%var filename = req . params . filename ; %NWL%res . sendfile ( __dirname +  '  / client /  '  + filename )  ;%NWL%}  )  ; %NWL%app . get (  '  / shared /  : filename (  *  )  '  , function ( req , res )  {%NWL%var filename = req . params . filename ; %NWL%2
return _query . apply ( this , arguments )  ;%NWL%}%NWL%query . toString = function (  )  {%NWL%return query . toString (  )  ;%NWL%}  ; %NWL%return query ;%NWL%}  )  ( function ( request )  {%NWL%var config = _ . cloneDeep ( this . config )  ; %NWL%var query = request . query ; %NWL%var include = query . include ; %NWL%var filter = query . filter ; %NWL%9
return matches ( element , selector )  ;%NWL%}  ; %NWL%return $ ( ArrayProto . filter . call ( this , callback , thisArg )  )  ;%NWL%}%NWL%function forEach ( callback , thisArg )  {%NWL%return _each ( this , callback , thisArg )  ;%NWL%}%NWL%var each = forEach ; %NWL%var indexOf = ArrayProto . indexOf ; %NWL%var map = ArrayProto . map ; %NWL%var pop = ArrayProto . pop ; %NWL%8
var hasMany = require (  '  .  / table / hasMany '  )  ; %NWL%var hasOne = require (  '  .  / table / hasOne '  )  ; %NWL%var getMany = require (  '  .  / table / getMany '  )  ; %NWL%var getById = require (  '  .  / table / getById '  )  ; %NWL%var tryGetById = require (  '  .  / table / tryGetById '  )  ; %NWL%var tryGetFirst = require (  '  .  / table / tryGetFirstFromDb '  )  ; %NWL%var newCache = require (  '  .  / table / newRowCache '  )  ; %NWL%var newContext = require (  '  .  / newObject '  )  ; %NWL%var insert = require (  '  .  / table / insert '  )  ; %NWL%var _delete = require (  '  .  / table / delete '  )  ; %NWL%var cascadeDelete = require (  '  .  / table / cascadeDelete '  )  ; %NWL%0
var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%0
componentDidMount : function (  )  {%NWL%this . getDOMNode (  )  . addEventListener (  " contextmenu "  , function ( event )  {%NWL%event . stopPropagation (  )  ; %NWL%event . preventDefault (  )  ;%NWL%}  , false )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var scale = this . props . node . props . app . state . scale ; %NWL%var ports = this . props . ports ; %NWL%var deltaX = this . props . deltaX ; %NWL%var deltaY = this . props . deltaY ; %NWL%8
var SyntheticEvent = require (  ' SyntheticEvent '  )  ; %NWL%var SyntheticFocusEvent = require (  ' SyntheticFocusEvent '  )  ; %NWL%var SyntheticKeyboardEvent = require (  ' SyntheticKeyboardEvent '  )  ; %NWL%var SyntheticMouseEvent = require (  ' SyntheticMouseEvent '  )  ; %NWL%var SyntheticDragEvent = require (  ' SyntheticDragEvent '  )  ; %NWL%var SyntheticTouchEvent = require (  ' SyntheticTouchEvent '  )  ; %NWL%var SyntheticUIEvent = require (  ' SyntheticUIEvent '  )  ; %NWL%var SyntheticWheelEvent = require (  ' SyntheticWheelEvent '  )  ; %NWL%var getEventCharCode = require (  ' getEventCharCode '  )  ; %NWL%var invariant = require (  ' invariant '  )  ; %NWL%var keyOf = require (  ' keyOf '  )  ; %NWL%0
" if present , access level must be either ' public ' or ' restricted '  "%NWL%)%NWL%var auth = params . auth%NWL%assert ( auth && typeof auth =  =  =  " object "  ,  " must pass auth to publish "  )%NWL%if ( ! ( auth . token ||%NWL%( auth . password && auth . username && auth . email )  )  )  {%NWL%var er = new Error (  " auth required for publishing "  )%NWL%er . code =  " ENEEDAUTH "%NWL%return cb ( er )%NWL%}%NWL%var metadata = params . metadata%NWL%2
}  ,  {  }  )  )  ;%NWL%}%NWL%var express = require (  ' express '  )%NWL%, http = require (  ' http '  )%NWL%, blogRoutes = require (  '  .  / routes / blog '  )%NWL%, authRoutes = require (  '  .  / routes / auth '  )%NWL%, commentRoutes = require (  '  .  / routes / comments '  )%NWL%, fileHandlerRoutes = require (  '  .  / routes / fileHandler '  )%NWL%, path = require (  ' path '  )%NWL%, fs = require (  ' fs '  )%NWL%, cookie = require (  ' cookie '  )%NWL%3
" use strict "  ; %NWL%const Channel   = require (  "  .  / channel "  )  . Channel ; %NWL%const Message   = require (  "  .  / message "  )  . Message ; %NWL%const Person   = require (  "  .  / person "  )  . Person ; %NWL%const Server   = require (  "  .  / server "  )  . Server ; %NWL%const channel   = require (  "  .  / channel "  )  . channel ; %NWL%const constants  = require (  "  .  / constants "  )  ; %NWL%const fs    = require (  " fs "  )  ; %NWL%const handlers   = require (  "  .  / handlers "  )  ; %NWL%const id    = require (  "  .  / util "  )  . id ; %NWL%const logger   = require (  "  .  / logger "  )  ; %NWL%6
} else if ( position > tmppos )  {%NWL%underline +  = input [ tmppos ]  =  =  =  ' \t ' ? ' \t '  :  '  '%NWL%}%NWL%if ( srcline . length > 78 ) break%NWL%}%NWL%return result +  ' \n '  + srcline +  ' \n '  + underline%NWL%}%NWL%function parse ( input , options )  {%NWL%var json5 = ! ( options . mode =  =  =  ' json ' || options . legacy )%NWL%var isLineTerminator = json5 ? Uni . isLineTerminator : Uni . isLineTerminatorJSON%NWL%var isWhiteSpace = json5 ? Uni . isWhiteSpace : Uni . isWhiteSpaceJSON%NWL%9
this . _rootPath = strPath ;%NWL%}  ,%NWL%mainWindow : function (  )  {%NWL%return top ;%NWL%}  ,%NWL%mainTree : function (  )  {%NWL%var injector = getRootInjector (  )  ; %NWL%var navService = injector . get (  " navigationService "  )  ; %NWL%var appState = injector . get (  " appState "  )  ; %NWL%var angularHelper = injector . get (  " angularHelper "  )  ; %NWL%var $rootScope = injector . get (  " $rootScope "  )  ; %NWL%8
assertNull (  ' next node for node3 inside the tree '  , node3 . getNextShownNode (  )  )  ; %NWL%var component = new goog . ui . Component (  )  ; %NWL%component . addChild ( tree )  ; %NWL%assertNull (  ' next node for node3 inside the tree if the tree has parent '  ,%NWL%node3 . getNextShownNode (  )  )  ;%NWL%}%NWL%function testGetPreviousShownNode (  )  {%NWL%var tree = new goog . ui . tree . TreeControl (  ' tree '  )  ; %NWL%assertNull (  ' next node for unpopulated tree '  , tree . getPreviousShownNode (  )  )  ; %NWL%var node1 = new goog . ui . tree . TreeNode (  ' node1 '  )  ; %NWL%var node2 = new goog . ui . tree . TreeNode (  ' node2 '  )  ; %NWL%9
return this . __iterator__ ( true )  ;%NWL%}  ; %NWL%goog . structs . Map . prototype . getValueIterator = function (  )  {%NWL%return this . __iterator__ ( false )  ;%NWL%}  ; %NWL%goog . structs . Map . prototype . __iterator__ = function ( opt_keys )  {%NWL%this . cleanupKeysArray_ (  )  ; %NWL%var i = 0 ; %NWL%var keys = this . keys_ ; %NWL%var map = this . map_ ; %NWL%var version = this . version_ ; %NWL%8
d = splited [ 3 ]  . trim (  )%NWL%}%NWL%var name = self . name%NWL%self . collector [  ' border - top - left - radius '  ]  = a%NWL%self . collector [  ' border - top - right - radius '  ]  = b%NWL%self . collector [  ' border - bottom - right - radius '  ]  = c%NWL%self . collector [  ' border - bottom - left - radius '  ]  = d%NWL%}%NWL%this . collect = function ( self )  {%NWL%var name = self . name%NWL%var attrs = self . attrs%NWL%2
Actor . boost ( player ,  [%NWL%Boost . create (  ' useAbility '  ,  ' acc '  , 1 / 5 , 6 ,  '  *  '  )  ,%NWL%Boost . create (  ' useAbility '  ,  ' maxSpd '  , 1 / 2 , 10 ,  '  *  '  )  ,%NWL%]  )  ;%NWL%}%NWL%}%NWL%Combat . summon = function ( master , param )  {%NWL%var name = param . model ; %NWL%if ( !master . summon [ name ]  ) master . summon [ name ]  = Actor . Summon (  )  ; %NWL%var maxChild = param . maxChild ; %NWL%var time = param . time ; %NWL%9
console . log ( value )  ;%NWL%}%NWL%return value ;%NWL%}%NWL%var linker = function ( scope , element , attrs , ngModelCtrl )  {%NWL%var configFieldsetModel = getFieldsetByAlias ( scope . archetypeConfig . fieldsets , scope . fieldset . alias )  ; %NWL%var view =  "  "  ; %NWL%var label = configFieldsetModel . properties [ scope . propertyConfigIndex ]  . label ; %NWL%var dataTypeGuid = configFieldsetModel . properties [ scope . propertyConfigIndex ]  . dataTypeGuid ; %NWL%var config = null ; %NWL%var alias = configFieldsetModel . properties [ scope . propertyConfigIndex ]  . alias ; %NWL%7
}  }  )  ; %NWL%KeyedAccess = $__export (  " KeyedAccess "  ,  ( function ( $__super )  {%NWL%var KeyedAccess = function KeyedAccess ( obj , key )  {%NWL%$traceurRuntime . superConstructor ( KeyedAccess )  . call ( this )  ; %NWL%this . obj = obj ; %NWL%this . key = key ;%NWL%}  ; %NWL%return ( $traceurRuntime . createClass )  ( KeyedAccess ,  {%NWL%eval : function ( context , locals )  {%NWL%var obj = this . obj . eval ( context , locals )  ; %NWL%var key = this . key . eval ( context , locals )  ; %NWL%9
var command = protocol . execute (  '  < script > test (  )  ;  <  / script >  '  ,  [  ' arg1 '  ]  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' POST '  )  ; %NWL%test . equal ( command . data ,  '  {  " script "  :  "  < script > test (  )  ;  <  / script >  "  ,  " args "  :  [  " arg1 "  ]  }  '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / execute '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testExecuteFunction : function ( test )  {%NWL%var client = this . client ; %NWL%var protocol = this . protocol ; %NWL%9
var iota9 = this . _iota9 ; %NWL%var iota10 = this . _iota10 ; %NWL%var iota11 = this . _iota11 ; %NWL%var R0_1 = this . _R0_1 ; %NWL%var R1_1 = this . _R1_1 ; %NWL%var R2_1 = this . _R2_1 ; %NWL%var R3_1 = this . _R3_1 ; %NWL%var R0_0 = this . _R0_0 ; %NWL%var R1_0 = this . _R1_0 ; %NWL%var R2_0 = this . _R2_0 ; %NWL%var R3_0 = this . _R3_0 ; %NWL%0
for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var low = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%var color = indices [  ( y + j )  * canvas . width + x + i ]  ; %NWL%low =  ( low <  < 1 ) | ( color & 0x1 )  ;%NWL%}%NWL%bytes . push ( low )  ;%NWL%}%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var high = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%0
var ViewSequence   = require (  ' famous / core / ViewSequence '  )  ; %NWL%var ScrollView   = require (  ' famous / views / Scrollview '  )  ; %NWL%var RenderNode   = require (  ' famous / core / RenderNode '  )  ; %NWL%var Modifier    = require (  ' famous / core / Modifier '  )  ; %NWL%var Easing    = require (  ' famous / transitions / Easing '  )  ; %NWL%var Transform    = require (  ' famous / core / Transform '  )  ; %NWL%var Surface    = require (  ' famous / core / Surface '  )  ; %NWL%var MonthView    = require (  ' views / MonthView '  )  ; %NWL%var DateConstants   = require (  ' config / DateConstants '  )  ; %NWL%var InfiniteScrollView = require (  ' views / InfiniteScrollView '  )  ; %NWL%var Transitionable  = require (  ' famous / transitions / Transitionable '  )  ; %NWL%4
. ready ( function ( errors , window )  {%NWL%if ( errors ! =  = null ) console . log ( errors )  ; %NWL%var Controller = function ( $scope )  {%NWL%setTimeout ( function (  )  {%NWL%runTests (  )  ;%NWL%}  , 300 )  ;%NWL%}  ; %NWL%var runTests = function (  )  {%NWL%var register = b . $ (  ' #register - button '  )  ; %NWL%var message = b . $ (  ' #message '  )  ; %NWL%var username = b . $ (  ' #username '  )  ; %NWL%9
var protocol = this . protocol ; %NWL%this . client . on (  ' selenium : session_create '  , function ( sessionId )  {%NWL%var command = protocol . elementIdCssProperty (  ' TEST_ELEMENT '  ,  ' test_property '  , function callback (  )  {%NWL%test . done (  )  ;%NWL%}  )  ; %NWL%test . equal ( command . request . method ,  ' GET '  )  ; %NWL%test . equal ( command . request . path ,  '  / wd / hub / session / 1352110219202 / element / TEST_ELEMENT / css / test_property '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%testElementIdDisplayed : function ( test )  {%NWL%var client = this . client ; %NWL%0
if ( !Matrix3 . equals ( v , _value [ i ]  )  )  {%NWL%_value [ i ]  = Matrix3 . clone ( v , _value [ i ]  )  ; %NWL%gl . uniformMatrix3fv ( locations [ i ]  , false , Matrix3 . toArray ( value [ i ]  , scratchUniformMatrix3 )  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%UniformArray . prototype . setMat4 = function (  )  {%NWL%var gl = this . _gl ; %NWL%var locations = this . _locations ; %NWL%var value = this . value ; %NWL%var _value = this . _value ; %NWL%9
null ,%NWL%true )  ; %NWL%this . context . fill (  )  ;%NWL%}%NWL%RGraph . Thermometer . prototype . DrawScale = function (  )%NWL%{%NWL%var numLabels = this . Get (  ' chart . ylabels . count '  )  ;  /  / The - 1 is so that the number of labels tallies with what is displayed%NWL%var step   =  ( this . max - this . min )  / numLabels ; %NWL%this . context . fillStyle = this . Get (  ' chart . text . color '  )  ; %NWL%var font   = this . Get (  ' chart . text . font '  )  ; %NWL%var size   = this . Get (  ' chart . text . size '  )  ; %NWL%9
}  ;%NWL%}%NWL%options . input_index = typeof options . input_index =  =  =  ' number ' ? options . input_index : null ; %NWL%options . output_index = typeof options . output_index =  =  =  ' number ' ? options . output_index : null ; %NWL%options . scale = typeof options . scale =  =  =  ' number ' ? options . scale : null ; %NWL%options . width = typeof options . width =  =  =  ' number ' ? options . width : null ; %NWL%var is_partial_resampling = Boolean ( options . input_index ) || Boolean ( options . output_index )  ; %NWL%if ( options . input_index ! =  = null && ( options . input_index >  = 0 )  =  =  = false )  {%NWL%throw new RangeError (  ' options . input_index should be a positive integer value .  [  '  + options . input_index +  '  ]  '  )  ;%NWL%}%NWL%if ( options . output_index ! =  = null && ( options . output_index >  = 0 )  =  =  = false )  {%NWL%7
SignupPanel . prototype . submit = function (  )  {%NWL%var panel = this ; %NWL%var widget = this . widget ; %NWL%var options = this . options ; %NWL%var connection  = options . _getAuth0Connection (  )  ; %NWL%var email_input = this . query (  ' input [ name = email ]  '  )  ; %NWL%var email = email_input . val (  )  ; %NWL%var username_input = this . query (  '  . a0 - username input '  )  ; %NWL%var username = username_input . val (  )  ; %NWL%var password_input = this . query (  ' input [ name = password ]  '  )  ; %NWL%var password = password_input . val (  )  ; %NWL%6
this . equations . push ( x , y , z )  ; %NWL%x . minForce = y . minForce = z . minForce =  - maxForce ; %NWL%x . maxForce = y . maxForce = z . maxForce =  maxForce ; %NWL%x . ni . set ( 1 , 0 , 0 )  ; %NWL%y . ni . set ( 0 , 1 , 0 )  ; %NWL%z . ni . set ( 0 , 0 , 1 )  ;%NWL%}%NWL%PointToPointConstraint . prototype = new Constraint (  )  ; %NWL%PointToPointConstraint . prototype . update = function (  )  {%NWL%var bodyA = this . bodyA ; %NWL%var bodyB = this . bodyB ; %NWL%9
var Escape    = require (  ' UI / Components / Escape / Escape '  )  ; %NWL%var ChatBox    = require (  ' UI / Components / ChatBox / ChatBox '  )  ; %NWL%var MiniMap    = require (  ' UI / Components / MiniMap / MiniMap '  )  ; %NWL%var BasicInfo   = require (  ' UI / Components / BasicInfo / BasicInfo '  )  ; %NWL%var WinStats   = require (  ' UI / Components / WinStats / WinStats '  )  ; %NWL%var Inventory   = require (  ' UI / Components / Inventory / Inventory '  )  ; %NWL%var ShortCut   = require (  ' UI / Components / ShortCut / ShortCut '  )  ; %NWL%var Equipment   = require (  ' UI / Components / Equipment / Equipment '  )  ; %NWL%var StatusIcons   = require (  ' UI / Components / StatusIcons / StatusIcons '  )  ; %NWL%var ChatRoomCreate  = require (  ' UI / Components / ChatRoomCreate / ChatRoomCreate '  )  ; %NWL%var Emoticons   = require (  ' UI / Components / Emoticons / Emoticons '  )  ; %NWL%0
f . shader = shader ; %NWL%f . useDepth = options . useDepth ; %NWL%f . buffer = SQR . Primitives . createPlane ( s , s , 1 , 1 , 0 , 0 , o )  ; %NWL%return f ;%NWL%}%NWL%var front = side (  ' front '  , planeOptions )  ; %NWL%front . position . z = s *  - 0 . 5 ; %NWL%var back = side (  ' back '  , planeOptions )  ; %NWL%back . position . z = s * 0 . 5 ; %NWL%back . rotation . y = Math . PI ; %NWL%var left = side (  ' left '  , planeOptions )  ; %NWL%5
this . c = c ; %NWL%this . idx = i ;%NWL%}%NWL%function mt_translate ( mt_lib )  {%NWL%Array . prototype . forEach . call ( document . querySelectorAll (  "  . mt - translate "  )  , function ( el , i )  {%NWL%mt ( mt_lib , el )  ;%NWL%}  )  ;%NWL%}%NWL%function mt_watch ( mt_lib )  {%NWL%var inp = document . getElementById (  " mt - input "  )  ; %NWL%var outp = document . getElementById (  " mt - output "  )  ; %NWL%9
if ( e . cancelable )  {%NWL%e . preventDefault (  )  ;%NWL%}%NWL%}  . bind ( this )  )  ;%NWL%}  ; %NWL%app . Mouse . prototype . calculateScale_ = function (  )  {%NWL%var originalWidth = 1920 ; %NWL%var originalHeight = 985 ; %NWL%var widthReductionFactor = 1420 ; %NWL%var width = $ ( window )  . width (  )  ; %NWL%var height = $ ( window )  . height (  )  ; %NWL%9
try {%NWL%findService = Components . classes [  " @mozilla . org / find / find_service ; 1 "  ]%NWL%. getService ( Components . interfaces . nsIFindService )  ;%NWL%} catch ( e )  {  }%NWL%if ( !findService )%NWL%return ; %NWL%var matchCase  = findService . matchCase ; %NWL%var entireWord  = findService . entireWord ; %NWL%var wrapFind   = findService . wrapFind ; %NWL%var findBackwards = findService . findBackwards ; %NWL%var searchString  = findService . searchString ; %NWL%6
var sign = require (  ' cookie - signature '  )  . sign ; %NWL%var normalizeType = require (  '  .  / utils '  )  . normalizeType ; %NWL%var normalizeTypes = require (  '  .  / utils '  )  . normalizeTypes ; %NWL%var setCharset = require (  '  .  / utils '  )  . setCharset ; %NWL%var statusCodes = http . STATUS_CODES ; %NWL%var cookie = require (  ' cookie '  )  ; %NWL%var send = require (  ' send '  )  ; %NWL%var extname = path . extname ; %NWL%var mime = send . mime ; %NWL%var resolve = path . resolve ; %NWL%var vary = require (  ' vary '  )  ; %NWL%5
return [ new CONST (  )  ]  ;%NWL%}  }  )  ; %NWL%Optional = $__export (  " Optional "  ,  ( function (  )  {%NWL%var Optional = function Optional (  )  {  }  ; %NWL%return ( $traceurRuntime . createClass )  ( Optional ,  {  }  ,  {  }  )  ;%NWL%}  (  )  )  )  ; %NWL%Object . defineProperty ( Optional ,  " annotations "  ,  { get : function (  )  {%NWL%return [ new CONST (  )  ]  ;%NWL%}  }  )  ; %NWL%DependencyAnnotation = $__export (  " DependencyAnnotation "  ,  ( function (  )  {%NWL%var DependencyAnnotation = function DependencyAnnotation (  )  {  }  ; %NWL%3
}  )  ;%NWL%}  ; %NWL%var success = hash . success ; %NWL%hash . success = function ( payload )  {%NWL%Em . run ( function (  )  {%NWL%if ( success )  {%NWL%success . call ( hash . context , payload )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%var error = hash . error ; %NWL%2
if ( this . _wss . clients . length =  =  = 0 )  {%NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%5
'  - webkit - animation '  :  ' webkitAnimationEnd '%NWL%}  )  ;%NWL%}  ,%NWL%onTransitionEnd : function ( el , callback )  {%NWL%var transitionEnd = this . transitionEndEventName (  )  ; %NWL%Events . once ( el , transitionEnd , function (  )  {%NWL%return callback (  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%onAnimationEnd : function ( el , callback )  {%NWL%var animationEnd = this . animationEndEventName (  )  ; %NWL%4
}  )  ; %NWL%it (  ' has the right resource name '  , function ( next )  {%NWL%store . ready ( function (  )  {%NWL%var User = store . Model (  ' User '  )  ; %NWL%User . definition . resource . should . be . equal (  ' users '  )  ; %NWL%next (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' has the right resource name on camelcased models '  , function ( next )  {%NWL%store . ready ( function (  )  {%NWL%var CamelCasedResourceName = store . Model (  ' CamelCasedResourceName '  )  ; %NWL%3
return ;%NWL%}%NWL%if (  (  / image / i )  . test ( file . type ) && input . data (  ' canvas '  )  )%NWL%m . resize ( file , input , area )  ; %NWL%else%NWL%m . upload ( file , input , area )  ;%NWL%}  ,%NWL%resize : function ( file , input , area )  {%NWL%var name = file . name ; %NWL%var canvas = document . createElement (  " canvas "  )  ; %NWL%var img = document . createElement (  " img "  )  ; %NWL%9
accessRequest . xhrEffect = access . xhrEffect ; %NWL%accessRequest . domEffect = access . domEffect ;%NWL%}%NWL%filteredRequests . push ( accessRequest )  ;%NWL%}%NWL%return filteredRequests ;%NWL%}  ; %NWL%WidgetManager . prototype . postAsync = function ( pendingInstall )  {%NWL%var widgetConfig = pendingInstall . widgetConfig ; %NWL%var installId = widgetConfig . installId ; %NWL%var processingResult = pendingInstall . processingResult ; %NWL%8
}  ,%NWL%pretreatment : function ( json , resourcePath , file )  {%NWL%this . addSpriteFrame ( json [  " textures "  ]  , json [  " texturesPng "  ]  , resourcePath )  ;%NWL%}%NWL%}  )  ; %NWL%var parser = new Parser (  )  ; %NWL%parser . generalAttributes = function ( node , options )  {%NWL%var width   = options [  " width "  ]   ! = null ? options [  " width "  ]  : 0 ; %NWL%var height   = options [  " height "  ]   ! = null ? options [  " height "  ]  : 0 ; %NWL%var x    = options [  " x "  ]    ! = null ? options [  " x "  ]  : 0 ; %NWL%var y    = options [  " y "  ]    ! = null ? options [  " y "  ]  : 0 ; %NWL%9
, NotFoundError  = require (  '  .  / errors '  )  . NotFoundError%NWL%, OpenError   = require (  '  .  / errors '  )  . OpenError%NWL%, EncodingError  = require (  '  .  / errors '  )  . EncodingError%NWL%, InitializationError = require (  '  .  / errors '  )  . InitializationError%NWL%, ReadStream  = require (  '  .  / read - stream '  )%NWL%, WriteStream  = require (  '  .  / write - stream '  )%NWL%, util    = require (  '  .  / util '  )%NWL%, Batch    = require (  '  .  / batch '  )%NWL%, codec    = require (  '  .  / codec '  )%NWL%, getOptions  = util . getOptions%NWL%, defaultOptions = util . defaultOptions%NWL%9
, config = require (  "  .  / config . js "  )%NWL%, npmconf = require (  " npmconf "  )%NWL%, log = require (  " npmlog "  )%NWL%, fs = require (  " graceful - fs "  )%NWL%, path = require (  " path "  )%NWL%, abbrev = require (  " abbrev "  )%NWL%, which = require (  " which "  )%NWL%, semver = require (  " semver "  )%NWL%, findPrefix = require (  "  .  / utils / find - prefix . js "  )%NWL%, getUid = require (  " uid - number "  )%NWL%, mkdirp = require (  " mkdirp "  )%NWL%1
}  )  ; %NWL%this . on (  ' request term previous '  , function ( key )  {%NWL%this . window . previousTab (  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%Tab . prototype . _ignoreNext = function (  )  {%NWL%var handler = this . handler ; %NWL%this . handler = function (  )  {%NWL%this . handler = handler ;%NWL%}  ; %NWL%var showCursor = this . showCursor ; %NWL%6
}%NWL%}%NWL%this . postRender (  )  ;%NWL%}  ,%NWL%}  )  ; %NWL%SS . ConeDimensionArrows = SS . DimensionArrowsView . extend (  {%NWL%render : function (  )  {%NWL%this . clear (  )  ; %NWL%var origin = this . model . node . origin ; %NWL%var r1 = this . model . node . parameters . r1 ; %NWL%var r2 = this . model . node . parameters . r2 ; %NWL%9
var ctrBlk = new Array ( bs )  ; %NWL%var nonce =  ( new Date (  )  )  . getTime (  )  ;  /  / timestamp : milliseconds since 1 - Jan - 1970%NWL%var nonceSec = Math . floor ( nonce / 1000 )  ; %NWL%var nonceMs = nonce%1000 ; %NWL%for ( var i = 0 ; i < 4 ; i +  +  ) ctrBlk [ i ]  =  ( nonceSec >  >  > i * 8 ) & 0xff ; %NWL%for ( i = 0 ; i < 4 ; i +  +  ) ctrBlk [ i + 4 ]  = nonceMs & 0xff ; %NWL%return ctrBlk . slice (  )  ;%NWL%}%NWL%pidCrypt . AES . CTR . prototype . encryptRaw = function ( byteArray )  {%NWL%var aes = this . aes ; %NWL%var pidcrypt = this . pidcrypt ; %NWL%9
}  ; %NWL%Promise . prototype . _progressHandlerAt =%NWL%function Promise$_progressHandlerAt ( index )  {%NWL%if ( index =  =  = 0 ) return this . _progressHandler0 ; %NWL%return this [ index + 2 - 5 ]  ;%NWL%}  ; %NWL%Promise . prototype . _doProgressWith =%NWL%function Promise$_doProgressWith ( progression )  {%NWL%var progressValue = progression . value ; %NWL%var handler = progression . handler ; %NWL%var promise = progression . promise ; %NWL%9
var gulp = require (  ' gulp '  )  ; %NWL%var concat = require (  ' gulp - concat '  )  ; %NWL%var vsource = require (  ' vinyl - source - stream '  )  ; %NWL%var streamify = require (  ' gulp - streamify '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var livereload = require (  ' gulp - livereload '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var header = require (  ' gulp - header '  )  ; %NWL%var uglify = require (  ' gulp - uglify '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var karma = require (  ' karma '  )  ; %NWL%0
}%NWL%var len = this . size (  )  ; %NWL%var index2 =  ( index1 < 0%NWL%? index1 +  ( len + 1 )%NWL% : index1 )  ; %NWL%if ( index2 =  =  = len )  {%NWL%return this . push ( value )  ;%NWL%} else {%NWL%var root   = this . root ; %NWL%var tail   = this . tail ; %NWL%var tail_size = this . tail_size ; %NWL%8
}%NWL%}  )%NWL%}%NWL%Jerk = new ( function Jerk (  )  {%NWL%var bot%NWL%, watchers =  [  ]%NWL%, join_watchers =  [  ]%NWL%, leave_watchers =  [  ]%NWL%, clients =  {  }%NWL%, connect = _connect . bind ( this )%NWL%, watch_for = _watch_for . bind ( this )%NWL%9
this . fire = function ( oEvtArgs )  {%NWL%var args =  [ sEvtName , oEvtSource , oEvtArgs ]  ; %NWL%for ( var i = 0 ; i < handlers . length ; i +  +  )  {%NWL%handlers [ i ]  . handler . apply ( handlers [ i ]  . context , args )  ;%NWL%}%NWL%}  ;%NWL%}  ; %NWL%mxn . Invoker = function ( aobj , asClassName , afnApiIdGetter )  {%NWL%var obj = aobj ; %NWL%var sClassName = asClassName ; %NWL%var fnApiIdGetter = afnApiIdGetter ; %NWL%8
error . Message = i18Util . formatMessage ( messages [  " setUpYourCloud . Go "  ]  , cloudSettingsPageUrl )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}  ,%NWL%buildDefaultErrorHandler : function ( options )  {%NWL%var cFService = options . cFService ; %NWL%var showMessage = options . showMessage ; %NWL%var hideMessage = options . hideMessage ; %NWL%var showError = options . showError ; %NWL%var render = options . render ; %NWL%6
}  ; %NWL%gf . sim . Variable . Color . prototype . getWriteSource = function ( obj )  {%NWL%var getter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . getter_ )  ; %NWL%var writer = gf . net . PacketWriter . getSharedWriter (  )  ; %NWL%var writeFn = gf . sim . Variable . getCompiledFunctionName_ (%NWL%writer , writer . writeUint32 )  ; %NWL%return ' writer .  '  + writeFn +  '  ( target .  '  + getter +  '  (  )  )  ;  '  ;%NWL%}  ; %NWL%gf . sim . Variable . Color . prototype . getInterpolateSource = function ( obj )  {%NWL%var getter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . getter_ )  ; %NWL%var setter = gf . sim . Variable . getCompiledFunctionName_ ( obj , this . setter_ )  ; %NWL%2
{%NWL%var lastArgument = args [ args . length - 1 ]  ; %NWL%return typeof lastArgument =  =  =  " function " ? lastArgument : undefined ;%NWL%}%NWL%var AuditCategory = declareInterfaceClass ( AuditCategoryImpl )  ; %NWL%var AuditResult = declareInterfaceClass ( AuditResultImpl )  ; %NWL%var Button = declareInterfaceClass ( ButtonImpl )  ; %NWL%var EventSink = declareInterfaceClass ( EventSinkImpl )  ; %NWL%var ExtensionPanel = declareInterfaceClass ( ExtensionPanelImpl )  ; %NWL%var ExtensionSidebarPane = declareInterfaceClass ( ExtensionSidebarPaneImpl )  ; %NWL%var PanelWithSidebar = declareInterfaceClass ( PanelWithSidebarImpl )  ; %NWL%4
}  ,%NWL%unsetGroup : function (  )  {%NWL%var security_management_rolespanel = this ; %NWL%var southPanel = Ext . ComponentQuery . query (  ' security_management_southpanel '  )  . first (  )  ; %NWL%var security_management_userswidget = southPanel . down (  ' security_management_userswidget '  )  ; %NWL%delete security_management_userswidget . assign_to_id ; %NWL%delete security_management_userswidget . assign_to_description ; %NWL%var security_management_roleswidget = southPanel . down (  ' security_management_roleswidget '  )  ; %NWL%delete security_management_roleswidget . assign_to_id ; %NWL%delete security_management_roleswidget . assign_to_description ; %NWL%var security_management_capabilitieswidget = southPanel . down (  ' security_management_capabilitieswidget '  )  ; %NWL%4
_selectValue ( self )  ;%NWL%}%NWL%list . hide (  )  ; %NWL%self . trigger (  ' hideTimepicker '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%option : function ( key , value )%NWL%{%NWL%var self = this ; %NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
assertDeepEq ( result . value , value )  ; %NWL%assertDeepEq ( result . done , done )  ;%NWL%}%NWL%}%NWL%if ( typeof assertIteratorNext =  =  =  ' undefined '  )  {%NWL%var assertIteratorNext = function assertIteratorNext ( iter , value )  {%NWL%assertIteratorResult ( iter . next (  )  , value , false )  ;%NWL%}%NWL%}%NWL%if ( typeof assertIteratorDone =  =  =  ' undefined '  )  {%NWL%var assertIteratorDone = function assertIteratorDone ( iter , value )  {%NWL%5
}%NWL%function bindRouteSync ( url , setupCallbacks , tearDownCallbacks )  {%NWL%return bindRoute ( url , false , setupCallbacks , tearDownCallbacks )  ;%NWL%}%NWL%function bindRouteAsync ( url , setupCallbacks , tearDownCallbacks )  {%NWL%return bindRoute ( url , true , setupCallbacks , tearDownCallbacks )  ;%NWL%}%NWL%function bindRoute ( url , async , setupCallbacks , tearDownCallbacks )  {%NWL%var matchedRoute , bindings , rGK , rI , uris , route , uI , api ; %NWL%if ( typeof setupCallbacks =  =  =  ' function '  )  { setupCallbacks =  [ setupCallbacks ]  ;  }%NWL%if ( typeof tearDownCallbacks =  =  =  ' function '  )  { tearDownCallbacks =  [ tearDownCallbacks ]  ;  }%NWL%9
}  ; %NWL%var checkSource = function ( source , config )  {%NWL%var options = this . options . jscs ; %NWL%extend ( config , options )  ; %NWL%var query = utils . parseQuery ( this . query )  ; %NWL%extend ( config , query )  ; %NWL%var emitErrors = config . emitErrors ; %NWL%delete config . emitErrors ; %NWL%var failOnHint = config . failOnHint ; %NWL%delete config . failOnHint ; %NWL%var reporter = config . reporter ; %NWL%6
var next = function ( inNumSamples )  {%NWL%var out  = this . outputs [ 0 ]  ; %NWL%var inIn  = this . inputs [ 0 ]  ; %NWL%var next_srclo = this . inputs [ 1 ]  [ 0 ]  ; %NWL%var next_srchi = this . inputs [ 2 ]  [ 0 ]  ; %NWL%var next_dstlo = this . inputs [ 3 ]  [ 0 ]  ; %NWL%var next_dsthi = this . inputs [ 4 ]  [ 0 ]  ; %NWL%var srclo = this . _srclo ; %NWL%var srchi = this . _srchi ; %NWL%var dstlo = this . _dstlo ; %NWL%var dsthi = this . _dsthi ; %NWL%7
var TYPE_ATTRIBUTE_CLASS = consts . TYPE_ATTRIBUTE_CLASS ; %NWL%var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%0
document . getElementById (  ' password '  )  . value = data . password ; %NWL%document . getElementById (  ' service '  )  . value = data . service ;%NWL%}  ,%NWL%authenticate : function (  )  {%NWL%var current = this ; %NWL%var service = document . getElementById (  ' service '  )  . value ; %NWL%if ( !service || service . length =  = 0 )  {%NWL%this . showError (  " The service is missing ( e . g . blogger )  .  "  )  ; %NWL%return ;%NWL%}%NWL%var username = document . getElementById (  ' username '  )  . value ; %NWL%5
var data =  [  ]  ; %NWL%data [ 0 ]  = Ti . UI . createTableViewRow (  { hasChild : true , title :  ' Row 1 '  }  )  ; %NWL%data [ 1 ]  = Ti . UI . createTableViewRow (  { hasDetail : true , title :  ' Row 2 '  }  )  ; %NWL%data [ 2 ]  = Ti . UI . createTableViewRow (  { hasCheck : true , title :  ' Row 3 '  }  )  ; %NWL%data [ 3 ]  = Ti . UI . createTableViewRow (  { title :  ' Row 4 '  }  )  ; %NWL%var tableview = Titanium . UI . createTableView (  {%NWL%data : data%NWL%}  )  ; %NWL%function showClickEventInfo ( e , islongclick )  {%NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%9
}  )  ; %NWL%it (  ' returns false if the header does not exist '  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%expect ( URI . hasHeader (  ' anything '  )  )  . toBe ( false )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  "  . deleteHeader "  , function (  )  {%NWL%it (  " deletes the given header from the headers list "  , function (  )  {%NWL%expect ( URI . headers )  . toEqual (  {  }  )  ; %NWL%var name1 =  ' name1 '  ; %NWL%var value1 =  ' value1 '  ; %NWL%9
var scripts = this . scripts [ type ]  [ folder ]  ; %NWL%for ( var i = 0 , l = scripts . length ; i < l ; i +  +  ) this . includeFile ( type , folder , scripts [ i ]  )  ;%NWL%}  ,%NWL%includeType : function ( type )  {%NWL%for ( var folder in this . scripts [ type ]  ) this . includeFolder ( type , folder )  ;%NWL%}  ,%NWL%includeRequest : function ( type )  {%NWL%var req = this . getRequest (  )  ; %NWL%if ( !req . files && !req . folders ) return false ; %NWL%var files =  ( req . files ) ? req . files . split (  '  +  '  )  :  [  ]  ; %NWL%var folders =  ( req . folders ) ? req . folders . split (  '  +  '  )  :  [  ]  ; %NWL%9
var x = source . width , y = source . height ; %NWL%return x > 0 && y > 0 && ( x & ( x - 1 )  )  =  = 0 && ( y & ( y - 1 )  )  =  = 0 ;%NWL%}%NWL%t . update = function (  )  {%NWL%var gl = SQR . gl ; %NWL%gl . bindTexture ( gl . TEXTURE_2D , texture )  ; %NWL%gl . texImage2D ( gl . TEXTURE_2D , 0 , gl . RGBA , gl . RGBA , gl . UNSIGNED_BYTE , source )  ; %NWL%return t ;%NWL%}%NWL%var wrapS = options . wrapS || options . wrap || gl . CLAMP_TO_EDGE ; %NWL%var wrapT = options . wrapT || options . wrap || gl . CLAMP_TO_EDGE ; %NWL%9
var isSpecial = function ( selector )  {%NWL%return specialSelectors [ options . selectorsMergeMode || '  *  '  ]  . test ( selector )  ;%NWL%}  ; %NWL%var removeDuplicates = function ( tokens )  {%NWL%var matched =  {  }  ; %NWL%var forRemoval =  [  ]  ; %NWL%for ( var i = 0 , l = tokens . length ; i < l ; i +  +  )  {%NWL%if ( typeof ( tokens [ i ]  )  =  =  ' string ' || tokens [ i ]  . block )%NWL%continue ; %NWL%var selector = tokens [ i ]  . selector ; %NWL%var body = tokens [ i ]  . body ; %NWL%9
var async   = require (  ' async '  )  ; %NWL%var https   = require (  ' https '  )  ; %NWL%var http   = require (  ' http '  )  ; %NWL%var path   = require (  ' path '  )  ; %NWL%var glob   = require (  ' glob '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var tmp   = require (  ' tmp '  )  ; %NWL%var fs   = require (  ' fs '  )  ; %NWL%var crypto  = require (  ' crypto '  )  ; %NWL%var unzip   = require (  ' unzip '  )  ; %NWL%var tar   = require (  ' tar '  )  ; %NWL%0
var fs = require (  ' fs '  )  ; %NWL%var AWS = require (  ' mock - aws - s3 '  )  ;  /  / to get the walk method%NWL%describe (  ' S3 '  , function (  )  {%NWL%it (  ' should do what it is supposed to do '  , function ( done )  {%NWL%var first = AWS . walk ( __dirname +  '  / local / bucket / first '  )  ; %NWL%var second = AWS . walk ( __dirname +  '  / local / bucket / second '  )  ; %NWL%var updated = AWS . walk ( __dirname +  '  / local / bucket / first / otters / updated '  )  ; %NWL%var backup = AWS . walk ( __dirname +  '  / local / download / backup '  )  ; %NWL%var third = AWS . walk ( __dirname +  '  / local / bucket / third '  )  ; %NWL%var fourth_bucket = AWS . walk ( __dirname +  '  / local / bucket / fourth '  )  ; %NWL%var fourth = AWS . walk ( __dirname +  '  / local / download / fourth '  )  ; %NWL%7
'  .  '  + COMMON . MUTE_CLASS ,%NWL%controller . toggleMute )  ; %NWL%sinon . assert . calledWith ( testWebrtc . _binder . on ,%NWL%view . list ,%NWL%' click '  ,%NWL%'  .  '  + COMMON . PAUSE_CLASS ,%NWL%controller . togglePause )  ;%NWL%}  )  ; %NWL%it (  ' Registers listeners to expanded container DOM events '  , function (  )  {%NWL%var view = testWebrtc . _view ; %NWL%var controller = testWebrtc . _controller ; %NWL%9
eval (  ' function e (  )  { check (  " edcba "  ,  extract ( saveStack (  )  )  )  ; f (  )  ;  }  '  )  ;  /  / no principal , so checks skipped%NWL%low . eval (  ' function f (  )  { check (  " fb "  ,   extract ( saveStack (  )  )  )  ; g (  )  ;  }  '  )  ; %NWL%mid . eval (  ' function g (  )  { check (  " gfecba "  ,  extract ( saveStack (  )  )  )  ; h (  )  ;  }  '  )  ; %NWL%high . eval (  ' function h (  )  { check (  " hgfedcba "  , extract ( saveStack (  )  )  )  ;   }  '  )  ; %NWL%b = low . b ; %NWL%low . c = mid . c ; %NWL%mid . d = high . d ; %NWL%high . e =   e ; %NWL%f = low . f ; %NWL%low . g = mid . g ; %NWL%mid . h = high . h ; %NWL%6
var rimraf  = require (  ' rimraf '  )  ; %NWL%var semver  = require (  ' semver '  )  ; %NWL%var async   = require (  ' async '  )  ; %NWL%var https   = require (  ' https '  )  ; %NWL%var http   = require (  ' http '  )  ; %NWL%var path   = require (  ' path '  )  ; %NWL%var glob   = require (  ' glob '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var tmp   = require (  ' tmp '  )  ; %NWL%var fs   = require (  ' fs '  )  ; %NWL%var crypto  = require (  ' crypto '  )  ; %NWL%0
main . provides =  [  " auth "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Plugin = imports . Plugin ; %NWL%var http = imports . http ; %NWL%var _login = imports [  " auth . bootstrap "  ]  . login ; %NWL%var ANONYMOUS =  - 1 ; %NWL%var plugin = new Plugin (  " Ajax . org "  , main . consumes )  ; %NWL%var emit = plugin . getEmitter (  )  ; %NWL%var accessToken = options . accessToken || "  "  ; %NWL%var apiUrl = options . apiUrl || "  "  ; %NWL%9
var io = require (  ' socket . io '  )%NWL%, everypaas = require (  ' everypaas '  )%NWL%, gravatar = require (  ' gravatar '  )%NWL%, config = require (  '  .  / config '  )%NWL%, express = require (  ' express '  )%NWL%, cookieParser = require (  ' cookie - parser '  )%NWL%, models = require (  '  .  / models '  )%NWL%, expressParser = cookieParser ( config . session_secret )%NWL%, Project = models . Project%NWL%, User = models . User%NWL%, Job = models . Job%NWL%8
this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ; %NWL%this . createWorker = function ( session )  {%NWL%return null ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%require . memoize ( bravojs . realpath ( bravojs . mainModuleDir +  '  / 87749d9714f1925e26afa48a0d592eaa39403858@ / lib / ace / mode / csharp_highlight_rules '  )  ,  [  ' pilot / oop '  ,  ' pilot / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  " pilot / oop "  )  ; %NWL%var lang = require (  " pilot / lang "  )  ; %NWL%9
}%NWL%return vertex2Index ;%NWL%}  ; %NWL%Polygon . prototype . containsPointEvenOdd = function ( point )  {%NWL%var crossingCount = 0 ; %NWL%for ( var i = 0 ; i < this . m_edges . length ;  +  + i )  {%NWL%var edge = this . edgeAt ( i )  ; %NWL%if ( edge . containsPoint ( point )  )%NWL%return true ; %NWL%var vertex1 = edge . vertex1 ; %NWL%var vertex2 = edge . vertex2 ; %NWL%9
var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%var descriptors = event . descriptors ; %NWL%var descriptorUuid = event . descriptorUuid ; %NWL%0
this . hasMany (  ' posts '  )  ; %NWL%setTimeout ( next , 10 )  ;%NWL%}  )  ; %NWL%store . Model (  ' Post '  , function ( next )  {%NWL%this . belongsTo (  ' user '  )  ; %NWL%setTimeout ( next , 20 )  ;%NWL%}  )  ; %NWL%it (  ' all relations are loaded '  , function ( next )  {%NWL%store . ready ( function (  )  {%NWL%var User = store . Model (  ' User '  )  ; %NWL%var Post = store . Model (  ' Post '  )  ; %NWL%9
slideView . src = slideSrc ;%NWL%}%NWL%var preView = consoleWindow . document . getElementById (  ' preView '  )  ; %NWL%if ( preView . src ! =  = preSrc )  {%NWL%preView . src = preSrc ;%NWL%}%NWL%consoleWindow . document . getElementById (  ' status '  )  . innerHTML =  '  < span style =  " color : green "  > Ready <  / span >  '  ;%NWL%}%NWL%}  ; %NWL%var spaceHandler = function (  )  {%NWL%var notes = consoleWindow . document . getElementById (  ' notes '  )  ; %NWL%2
}%NWL%var config =  {%NWL%watchEvents :  defaultWatchEvents ,%NWL%confirmResponse : defaultConfirmResponse ,%NWL%promptResponse :  defaultPromptResponse ,%NWL%logger :    null ,%NWL%randomizer :   null%NWL%}  ; %NWL%var alert  = window . alert ; %NWL%var confirm = window . confirm ; %NWL%var prompt  = window . prompt ; %NWL%8
}  ,%NWL%destroy : function (  )  {%NWL%var instance = this ;%NWL%( new A . EventHandle ( instance . _eventHandles )  )  . detach (  )  ;%NWL%}  ,%NWL%checkLength : function (  )  {%NWL%var instance = this ; %NWL%var input = instance . get (  ' input '  )  ; %NWL%var returnValue = false ; %NWL%if ( input )  {%NWL%var maxLength = instance . get (  ' maxLength '  )  ; %NWL%7
}  ,%NWL%click : function ( evt )  {%NWL%var content = this . get (  ' content '  )  ; %NWL%WReader . selectedItemController . select ( content )  ;%NWL%}  ,%NWL%read : function (  )  {%NWL%var read = this . get (  ' content '  )  . get (  ' read '  )  ; %NWL%return read ;%NWL%}  . property (  ' WReader . itemsController . @each . read '  )  ,%NWL%starred : function (  )  {%NWL%var starred = this . get (  ' content '  )  . get (  ' starred '  )  ; %NWL%6
Math . max ( Math . min ( parseInt (  ( colorPercent *  ( colorEnd [ 0 ]  - colorStart [ 0 ]  )  )  + colorStart [ 0 ]  )  , 255 )  , 0 )  ,%NWL%Math . max ( Math . min ( parseInt (  ( colorPercent *  ( colorEnd [ 1 ]  - colorStart [ 1 ]  )  )  + colorStart [ 1 ]  )  , 255 )  , 0 )  ,%NWL%Math . max ( Math . min ( parseInt (  ( colorPercent *  ( colorEnd [ 2 ]  - colorStart [ 2 ]  )  )  + colorStart [ 2 ]  )  , 255 )  , 0 )%NWL%]  ;%NWL%}%NWL%return color ;%NWL%}  ; %NWL%$ . fn . graphup = function ( options )  {%NWL%var o = $ . extend (  {  }  , $ . fn . graphup . defaults , options )  ; %NWL%var cleaner = $ . fn . graphup . cleaners [ o . cleaner ]  ; %NWL%var painter = $ . fn . graphup . painters [ o . painter ]  ; %NWL%9
Blockly . getRelativeXY_ = function ( element )  {%NWL%var xy =  { x : 0 , y : 0 }  ; %NWL%var x = element . getAttribute (  ' x '  )  ; %NWL%if ( x )  {%NWL%xy . x = parseInt ( x , 10 )  ;%NWL%}%NWL%var y = element . getAttribute (  ' y '  )  ; %NWL%if ( y )  {%NWL%xy . y = parseInt ( y , 10 )  ;%NWL%}%NWL%var transform = element . getAttribute (  ' transform '  )  ; %NWL%2
var engine_ver = get_menu_value (  ' fe_sb_engine '  )  ; %NWL%xml . engine = engine_ver ; %NWL%stags . push (  ' engine_ '  + get_url_friendly_title ( engine_ver )  )  ; %NWL%var os = get_menu_value (  ' fe_sb_os '  )  ; %NWL%var browser = get_menu_value (  ' fe_sb_browser '  )  ; %NWL%xml . software = os +  '  ,  '  + browser ; %NWL%stags . push (  ' software_ '  + get_url_friendly_title ( os +  '  ,  '  + browser )  )  ; %NWL%var subject = $ (  ' fe_sb_subject '  )  . value ; %NWL%if ( !subject ) return bad_field (  ' fe_sb_subject '  ,  " Please enter a subject for your message .  "  )  ; %NWL%xml . summary = subject ; %NWL%var body = $ (  ' fe_sb_body '  )  . value ; %NWL%7
}%NWL%else%NWL%{%NWL%this . hideFan (  )  ;%NWL%}%NWL%}  ,%NWL%_getSVGParams : function ( evt )%NWL%{%NWL%var target = evt . target ; %NWL%var index = target . getAttribute (  ' index '  )  ; %NWL%var name = target . getAttribute (  ' name '  )  ; %NWL%9
var min = options . min =  =  = undefined ? 0 : options . min ; %NWL%var max = options . max =  =  = undefined ? 255 : options . max ; %NWL%var default_colors = options . default_colors || [ 0 , 0 , 0 , 1 ]  ; %NWL%var destination = options . destination || new Float32Array ( intensity_values . length * 4 )  ; %NWL%var color_map_colors = color_map . colors ; %NWL%var color_map_length = color_map . colors . length / 4 ; %NWL%var scale = options . scale =  =  = undefined ? color_map . scale : options . scale ; %NWL%var clamp = options . clamp =  =  = undefined ? color_map . clamp : options . clamp ; %NWL%var flip = options . flip =  =  = undefined ? color_map . flip : options . flip ; %NWL%var brightness = options . brightness =  =  = undefined ? color_map . brightness : options . brightness ; %NWL%var contrast = options . contrast =  =  = undefined ? color_map . contrast : options . contrast ; %NWL%6
self . render (  )%NWL%}  )%NWL%this . render (  )%NWL%}  ,%NWL%updateTextLines : function (  )  {%NWL%var text = this . get (  ' text '  )%NWL%var lines = splitLines ( text , this . get (  ' width '  )  )%NWL%this . set (  ' textLines '  , lines )%NWL%}  ,%NWL%scrollUp : function (  )  {%NWL%var line = this . get (  ' line '  )%NWL%5
}  ; %NWL%oop . inherits ( Mode , TextMode )  ;%NWL%( function (  )  {%NWL%this . lineCommentStart =  "  /  /  "  ; %NWL%this . $id =  " ace / mode / sass "  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / sass_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / scss_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
this . restLength_ = dist ; %NWL%this . satisfy = this . satisfySpring_ ;%NWL%} else {%NWL%this . max_ = options . max ; %NWL%this . satisfy = this . satisfyFixed_ ;%NWL%}%NWL%}  ; %NWL%Constraint . prototype =  {%NWL%draw : function ( context )  {%NWL%var width = context . canvas . width ; %NWL%var height = context . canvas . height ; %NWL%9
var m10 = this . m10_ ; %NWL%this . m00_ +  = shy * this . m01_ ; %NWL%this . m10_ +  = shy * this . m11_ ; %NWL%this . m01_ +  = shx * m00 ; %NWL%this . m11_ +  = shx * m10 ; %NWL%return this ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . preShear = function ( shx , shy )  {%NWL%var m00 = this . m00_ ; %NWL%var m01 = this . m01_ ; %NWL%var m02 = this . m02_ ; %NWL%0
if ( event . target . hasAttribute (  ' data - navbar - tray '  )  )  {%NWL%var activeTab = this . model . get (  ' activeTab '  )  ; %NWL%var id = event . target . id ; %NWL%this . model . set (  ' activeTab '  ,  ( !activeTab || id ! =  = activeTab ) ? id : null )  ; %NWL%event . preventDefault (  )  ; %NWL%event . stopPropagation (  )  ;%NWL%}%NWL%}  ,%NWL%onOrientationToggleClick : function ( event )  {%NWL%if ( $ ( event . target )  . hasClass (  ' navbar - toggle '  )  )  {%NWL%var orientation = this . model . get (  ' orientation '  )  ; %NWL%1
data = goog . json . parse ( data )  ;%NWL%} catch ( error )  {%NWL%return ;%NWL%}%NWL%}%NWL%if ( !goog . isObject ( data ) || !data [ goog . messaging . PortChannel . FLAG ]  )  {%NWL%return ;%NWL%}%NWL%if ( this . validateMessage_ ( data )  )  {%NWL%var serviceName = data [  ' serviceName '  ]  ; %NWL%var payload = data [  ' payload '  ]  ; %NWL%9
}%NWL%}%NWL%var tableview = Titanium . UI . createTableView (  {%NWL%data : data ,%NWL%style : Titanium . UI . iPhone . TableViewStyle . GROUPED%NWL%}  )  ; %NWL%tableview . addEventListener (  ' click '  , function ( e )%NWL%{%NWL%var index = e . index ; %NWL%var section = e . section ; %NWL%var row = e . row ; %NWL%8
var gamejs = require (  ' gamejs '  )  ; %NWL%var GUI = require (  '  .  / gamejs - gui '  )  ; %NWL%var skin = require (  '  .  / skin '  )  ; %NWL%var renderer = require (  '  .  / renderer '  )  ; %NWL%var settings = require (  '  .  / settings '  )  ; %NWL%var combatracer = require (  '  .  / combatracer '  )  ; %NWL%var car_descriptions = require (  '  .  / car_descriptions '  )  ; %NWL%var weapon_descriptions = require (  '  .  / weapon_descriptions '  )  ; %NWL%var levels = require (  '  .  / levels '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var sounds = require (  '  .  / sounds '  )  ; %NWL%2
' if '  : function ( scope , option , buffer )  {%NWL%var params = option . params ; %NWL%var param0 = params [ 0 ]  ; %NWL%if ( param0 )  {%NWL%var fn = option . fn ; %NWL%if ( fn )  {%NWL%buffer = fn ( scope , buffer )  ;%NWL%}%NWL%} else {%NWL%var matchElseIf = false ; %NWL%var elseIfs = option . elseIfs ; %NWL%1
var div = win . doc . createElement (  " div "  )  ; %NWL%domClass . add ( icon ,  " dojoxLegendIcon "  )  ; %NWL%domClass . add ( text ,  " dojoxLegendText "  )  ; %NWL%div . style . width  = this . swatchSize +  " px "  ; %NWL%div . style . height = this . swatchSize +  " px "  ; %NWL%icon . appendChild ( div )  ; %NWL%if ( this . horizontal )  {%NWL%this . _tr . appendChild ( icon )  ; %NWL%this . _tr . appendChild ( text )  ;%NWL%} else {%NWL%var tr = win . doc . createElement (  " tr "  )  ; %NWL%0
return m . _loggingPane ;%NWL%}  ; %NWL%MochiKit . LoggingPane . LoggingPane = function ( inline , logger )  {%NWL%if ( typeof ( logger )  =  =  " undefined " || logger =  =  = null )  {%NWL%logger = MochiKit . Logging . logger ;%NWL%}%NWL%this . logger = logger ; %NWL%var update = MochiKit . Base . update ; %NWL%var updatetree = MochiKit . Base . updatetree ; %NWL%var bind = MochiKit . Base . bind ; %NWL%var clone = MochiKit . Base . clone ; %NWL%7
_selectValue ( self )  ;%NWL%}%NWL%list . hide (  )  ; %NWL%self . trigger (  ' hideTimepicker '  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%option : function ( key , value )%NWL%{%NWL%var self = this ; %NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
} else {%NWL%x = fn [  "  *  "  ]  ( x . value , this . unitsToBase ( v , x . units , v instanceof Flow )  )  ;%NWL%}%NWL%return x + 0 ;%NWL%}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%7
var ReactBrowserEventEmitter = require (  ' ReactBrowserEventEmitter '  )  ; %NWL%var ReactComponentBrowserEnvironment =%NWL%require (  ' ReactComponentBrowserEnvironment '  )  ; %NWL%var ReactMount = require (  ' ReactMount '  )  ; %NWL%var ReactMultiChild = require (  ' ReactMultiChild '  )  ; %NWL%var ReactPerf = require (  ' ReactPerf '  )  ; %NWL%var assign = require (  ' Object . assign '  )  ; %NWL%var escapeTextContentForBrowser = require (  ' escapeTextContentForBrowser '  )  ; %NWL%var invariant = require (  ' invariant '  )  ; %NWL%var isEventSupported = require (  ' isEventSupported '  )  ; %NWL%var keyOf = require (  ' keyOf '  )  ; %NWL%0
this . context . stroke (  )  ;%NWL%}%NWL%RGraph . Drawing . Image . prototype . parseColors = function (  )%NWL%{%NWL%this . properties [  ' chart . highlight . stroke '  ]  = this . parseSingleColorForGradient ( this . properties [  ' chart . highlight . stroke '  ]  )  ; %NWL%this . properties [  ' chart . highlight . fill '  ]   = this . parseSingleColorForGradient ( this . properties [  ' chart . highlight . fill '  ]  )  ;%NWL%}%NWL%RGraph . Drawing . Image . prototype . parseSingleColorForGradient = function ( color )%NWL%{%NWL%var canvas  = this . canvas ; %NWL%var context = this . context ; %NWL%9
return this . _private . selectionType ;%NWL%}  ,%NWL%hasCompoundNodes : function (  )  {%NWL%return this . _private . hasCompoundNodes ;%NWL%}  ,%NWL%styleEnabled : function (  )  {%NWL%return this . _private . styleEnabled ;%NWL%}  ,%NWL%addToPool : function ( eles )  {%NWL%var elements = this . _private . elements ; %NWL%var id2index = this . _private . id2index ; %NWL%9
renderTab : function (  )  {%NWL%if ( this . isPopupVisible (  )  ) return%NWL%if ( this . get (  ' selected '  )  )%NWL%this . renderSelected (  )%NWL%else%NWL%this . renderUnselected (  )%NWL%}  ,%NWL%renderUnselected : function (  )  {%NWL%if ( this . isPopupVisible (  )  ) return%NWL%var screen = this . get (  ' screen '  )%NWL%var index = this . get (  ' index '  )%NWL%9
this . _finalizeSizes (  )  ; %NWL%var slider = this . getChildControl (  " slider "  )  ; %NWL%slider . exclude (  )  ; %NWL%this . __activeDragSession = false ; %NWL%this . releaseCapture (  )  ; %NWL%e . stop (  )  ;%NWL%}  ,%NWL%_finalizeSizes : function (  )%NWL%{%NWL%var beginSize = this . __beginSize ; %NWL%var endSize = this . __endSize ; %NWL%9
track . lastPlayedBy	 = username . val (  )  ; %NWL%callback ( track )  ;%NWL%}  )  ;%NWL%}  ; %NWL%self . syncGroup	 = function ( groupid , shouldStopSync )  {%NWL%datastore . eventHandlers . syncGroup			 = datastore . eventHandlers . syncGroup || {  }  ; %NWL%datastore . eventHandlers . syncGroup [ groupid ] 	 = datastore . eventHandlers . syncGroup [ groupid ] || {  }  ; %NWL%var eventHandlers	 = datastore . eventHandlers . syncGroup [ groupid ]  ; %NWL%datastore . data . group [ groupid ] 	 = datastore . data . group [ groupid ] || { id : groupid , members :  {  }  , messages :  {  }  , name :  '  '  }  ; %NWL%var members		 = datastore . group ( groupid )  . members . limit ( 100 )  ; %NWL%var messages	 = datastore . group ( groupid )  . messages . limit ( 100 )  ; %NWL%9
var newOrder = orderType . createEntity (  )  ; %NWL%emp . orders . push ( newOrder )  ; %NWL%equal ( emp . orderCount (  )  , 1 ,%NWL%" orderCount should be 1 after pushing newOrder "  )  ;%NWL%}  )  ; %NWL%test (  " disallow setting collection navigation properties "  , function (  )  {%NWL%var em = newEm (  )  ; %NWL%var customerType = em . metadataStore . getEntityType (  " Customer "  )  ; %NWL%var customer = customerType . createEntity (  )  ; %NWL%var orderType = em . metadataStore . getEntityType (  " Order "  )  ; %NWL%var order = orderType . createEntity (  )  ; %NWL%8
var desiredGain = this . detectorAverage ; %NWL%var compressorGain = this . compressorGain ; %NWL%var maxAttackCompressionDiffDb = this . maxAttackCompressionDiffDb ; %NWL%var i_attackFrames = 1 / this . _attackFrames ; %NWL%var preDelayReadIndex = this . preDelayReadIndex ; %NWL%var preDelayWriteIndex = this . preDelayWriteIndex ; %NWL%var detectorAverage = this . detectorAverage ; %NWL%var delayBufferL = this . delayBufferL ; %NWL%var delayBufferR = this . delayBufferR ; %NWL%var meteringGain = this . meteringGain ; %NWL%var meteringReleaseK = this . meteringReleaseK ; %NWL%1
extend :  " Ext . panel . Panel "  ,%NWL%alias :  ' widget . security_management_capabilitiespanel '  ,%NWL%setCapability : function ( record )  {%NWL%var assign_to_id = record . get (  ' id '  )  ; %NWL%var assign_to_description = record . get (  ' description '  )  ; %NWL%var security_management_capabilitiespanel = this ; %NWL%var southPanel = Ext . ComponentQuery . query (  ' security_management_southpanel '  )  . first (  )  ; %NWL%var security_management_userswidget = southPanel . down (  ' security_management_userswidget '  )  ; %NWL%security_management_userswidget . assign_to_id = assign_to_id ; %NWL%security_management_userswidget . assign_to_description = assign_to_description ; %NWL%var security_management_groupswidget = southPanel . down (  ' security_management_groupswidget '  )  ; %NWL%7
client . executeCommand ( req . body . command , req . body , function ( err , response )  {%NWL%if ( err )  {%NWL%return res . send ( err )  ;%NWL%} else {%NWL%return res . send ( response )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%UIServer . prototype . executeSyncGetHandler = function ( req , res )  {%NWL%var jobQueue = req . app . get (  ' jobQueue '  )  ; %NWL%var client = req . app . get (  ' client '  )  ; %NWL%9
. then ( function ( masterCommit )  {%NWL%test . masterCommit = masterCommit ; %NWL%return test . repository . createBranch ( branchName , masterCommit , true )  ;%NWL%}  )%NWL%. then ( function ( branch )  {%NWL%test . branch = branch ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  " can create a branch "  , function (  )  {%NWL%var branch = this . branch ; %NWL%var masterCommit = this . masterCommit ; %NWL%9
}  ; %NWL%Form . prototype . _write = function ( buffer , encoding , cb )  {%NWL%if ( this . error ) return ; %NWL%var self = this%NWL%, i = 0%NWL%, len = buffer . length%NWL%, prevIndex = self . index%NWL%, index = self . index%NWL%, state = self . state%NWL%, lookbehind = self . lookbehind%NWL%, boundary = self . boundary%NWL%7
var __NODE__ = !__BROWSER__ ; %NWL%if ( __DEV__ )  {%NWL%Promise . longStackTraces (  )  ;%NWL%}%NWL%var del = require (  ' del '  )  ; %NWL%var babel = require (  ' gulp - babel '  )  ; %NWL%var fs = Promise . promisifyAll ( require (  ' fs '  )  )  ; %NWL%var gulp = require (  ' gulp '  )  ; %NWL%var gutil = require (  ' gulp - util '  )  ; %NWL%var jshint = require (  ' gulp - jshint '  )  ; %NWL%var plumber = require (  ' gulp - plumber '  )  ; %NWL%5
var rename = require (  ' gulp - rename '  )  ; %NWL%var webserver = require (  ' gulp - webserver '  )  ; %NWL%var autoprefixer = require (  ' gulp - autoprefixer '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var browserify = require (  ' browserify '  )  ; %NWL%var extend = require (  ' node . extend '  )  ; %NWL%var log = require (  '  .  .  / helpers / log . js '  )  ; %NWL%var files = require (  '  .  .  / helpers / files . js '  )  ; %NWL%var textrequireify = require (  ' textrequireify '  )  ; %NWL%var debowerify = require (  ' debowerify '  )  ; %NWL%var babelify = require (  ' babelify '  )  ; %NWL%4
setupClipboard ( this , opts )  ;%NWL%}  )  ;%NWL%}  ;%NWL%}%NWL%if ( !FileReader )  {%NWL%return ;%NWL%}%NWL%function makeWorker ( script )  {%NWL%var URL = window . URL || window . webkitURL ; %NWL%var Blob = window . Blob ; %NWL%var Worker = window . Worker ; %NWL%9
}  ,%NWL%{%NWL%consumes :  [  " c9 "  ,  " watcher "  ,  " fs "  ]  ,%NWL%provides :  [  ]  ,%NWL%setup : main%NWL%}%NWL%]  , architect )  ; %NWL%function main ( options , imports , register )  {%NWL%var watcher = imports . watcher ; %NWL%var fs = imports . fs ; %NWL%var c9 = imports . c9 ; %NWL%8
buf . push ( word . slice ( 0 , 1 )  . toUpperCase (  )  )  ; %NWL%buf . push ( word . slice ( 1 )  . toLowerCase (  )  )  ; %NWL%buf . push ( s . slice ( i , i + 1 )  )  ; %NWL%s = s . slice ( i + 1 )  ;%NWL%}%NWL%return buf . join (  '  '  )  ;%NWL%}%NWL%function getNumberFieldValue ( field )  {%NWL%var value = field . getAttribute (  " data - value "  )  ; %NWL%if ( value =  =  = null )  {%NWL%var decimals = field . getAttribute (  " data - decimals "  )  ; %NWL%8
}%NWL%return {%NWL%' constructor '  :  ' lychee . game . Layer '  ,%NWL%' arguments '  :   [ settings ]  ,%NWL%' blob '  :   Object . keys ( blob )  . length > 0 ? blob : null%NWL%}  ;%NWL%}  ,%NWL%render : function ( renderer , offsetX , offsetY )  {%NWL%if ( this . visible =  =  = false ) return ; %NWL%var position = this . position ; %NWL%var offset  = this . offset ; %NWL%9
do_new : function ( req , res )  {%NWL%var evt = new EventEmitter (  )  ; %NWL%var new_project = require ( common . path +  " modules / project / new_project . js "  )  ; %NWL%evt . on (  " do_new_complete "  , function ( data )  {%NWL%res . json ( data )  ;%NWL%}  )  ; %NWL%new_project . do_new ( req , evt )  ;%NWL%}  ,%NWL%do_delete : function ( req )  {%NWL%var evt = new EventEmitter (  )  ; %NWL%var del_project = require ( common . path +  " modules / project / del_project . js "  )  ; %NWL%2
docDiv . appendChild ( brief )  ; %NWL%if ( tool . getHelp (  )  [ actionType ]  )  {%NWL%var keys = Object . keys ( tool . getHelp (  )  [ actionType ]  )  ; %NWL%for ( var i = 0 ; i < keys . length ;  +  + i )%NWL%{%NWL%var action = tool . getHelp (  )  [ actionType ]  [ keys [ i ]  ]  ; %NWL%var img = document . createElement (  " img "  )  ; %NWL%img . src = dir +  "  /  .  .  /  .  .  / resources /  "  + keys [ i ]  +  "  . png "  ; %NWL%img . style . float =  " left "  ; %NWL%img . style . margin =  " 0px 15px 15px 0px "  ; %NWL%var br = document . createElement (  " br "  )  ; %NWL%6
var formidable = require (  ' formidable '  )  ; %NWL%var Response = require (  '  .  / response '  )  ; %NWL%var parse = require (  ' url '  )  . parse ; %NWL%var format = require (  ' url '  )  . format ; %NWL%var methods = require (  ' methods '  )  ; %NWL%var Stream = require (  ' stream '  )  ; %NWL%var utils = require (  '  .  / utils '  )  ; %NWL%var extend = require (  ' extend '  )  ; %NWL%var Part = require (  '  .  / part '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%0
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / ocaml_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
, specialTags =  / select|fieldset|table|tbody|tfoot|td|tr|colgroup / i%NWL%, table =  ' table '%NWL%, tagMap =  { thead : table , tbody : table , tfoot : table , tr :  ' tbody '  , th :  ' tr '  , td :  ' tr '  , fieldset :  ' form '  , option :  ' select '  }%NWL%, stateAttributes =  / ^checked|selected$ /%NWL%, ie =  / msie / i . test ( navigator . userAgent )%NWL%, uidList =  [  ]%NWL%, uuids = 0%NWL%, digit =  / ^ - ? [ \d\ .  ]  + $ /%NWL%, px =  ' px '%NWL%, setAttribute =  ' setAttribute '%NWL%, getAttribute =  ' getAttribute '%NWL%1
it (  ' should set the message returned by the requestFilter '  , function (  )  {%NWL%var message =  " Saving .  .  .  "  ; %NWL%config . requestFilter = function ( config )  {%NWL%return message ;%NWL%}  ; %NWL%interceptor . request (  { url :  '  / api / quote / 1 '  }  )  ; %NWL%expect ( blockUI . state (  )  . message )  . toBe ( message )  ;%NWL%}  )  ; %NWL%it (  ' should block instances that match the pattern '  , function (  )  {%NWL%var myInstance1 = blockUI . instances . get (  ' myInstance1 '  )  ; %NWL%var myInstance2 = blockUI . instances . get (  ' myInstance2 '  )  ; %NWL%9
views2 [ destination2 ]  = testView2 ; %NWL%layoutView . addView ( destination1 , testView1 )  ; %NWL%layoutView . getView ( destination1 )  . should . not . be . empty ; %NWL%layoutView . resetViews ( views2 )  ; %NWL%should . equal ( layoutView . getView ( destination1 )  , undefined )  ;%NWL%}  )  ; %NWL%it (  ' should re - add the views supplied to the correct destination '  , function (  )  {%NWL%var testView1 = new Backbone . View (  )  ; %NWL%var testView2 = new Backbone . View (  )  ; %NWL%var destination1 =  ' append . destination1 '  ; %NWL%var destination2 =  ' append . destination2 '  ; %NWL%9
}%NWL%var canvasUtils =  {%NWL%appendImageToCanvas : function ( argObj )  {%NWL%var scale = argObj . scale || 1 . 0 ; %NWL%var zoom = argObj . zoom || 1 . 0 ; %NWL%var canvasData = argObj . canvasData ; %NWL%var imageSrc = argObj . imageSrc ; %NWL%var pageHeight = argObj . pageHeight * zoom ; %NWL%var imageHeight = argObj . imageHeight ; %NWL%var width = argObj . width ; %NWL%var top = argObj . top ; %NWL%5
this . assets . purge ( this . getCompiledFilterListPath ( path )  )  ;%NWL%}  ; %NWL%µBlock . purgeFilterList = function ( path )  {%NWL%this . purgeCompiledFilterList ( path )  ; %NWL%this . assets . purge ( path )  ;%NWL%}  ; %NWL%µBlock . compileFilters = function ( rawText )  {%NWL%var rawEnd = rawText . length ; %NWL%var compiledFilters =  [  ]  ; %NWL%var staticNetFilteringEngine = this . staticNetFilteringEngine ; %NWL%var cosmeticFilteringEngine = this . cosmeticFilteringEngine ; %NWL%9
function web2py_event_handlers (  )  {%NWL%var doc = jQuery ( document )%NWL%doc . on (  ' click '  ,  '  . flash '  , function ( e )  { var t = jQuery ( this )  ; if ( t . css (  ' top '  )  =  =  ' 0px '  ) t . slideUp (  ' slow '  )  ; else t . fadeOut (  )  ; e . preventDefault (  )  ;  }  )  ; %NWL%doc . on (  ' keyup '  ,  ' input . integer '  , function (  )  { this . value = this . value . reverse (  )  . replace (  /  [ ^0 - 9\ -  ] |\ -  ( ? =  .  )  / g ,  '  '  )  . reverse (  )  ;  }  )  ; %NWL%doc . on (  ' keyup '  ,  ' input . double , input . decimal '  , function (  )  { this . value = this . value . reverse (  )  . replace (  /  [ ^0 - 9\ - \ .  ,  ] | [ \ -  ]  ( ? =  .  ) | [ \ .  ,  ]  ( ? =  [ 0 - 9 ]  *  [ \ .  ,  ]  )  / g ,  '  '  )  . reverse (  )  ;  }  )  ; %NWL%var confirm_message =  ( typeof w2p_ajax_confirm_message ! =  ' undefined '  ) ? w2p_ajax_confirm_message :  " Are you sure you want to delete this object? "  ; %NWL%doc . on (  ' click '  ,  " input [ type =  ' checkbox '  ]  . delete "  , function (  )  { if ( this . checked ) if ( !confirm ( confirm_message )  ) this . checked = false ;  }  )  ; %NWL%doc . ajaxSuccess ( function ( e , xhr )  {%NWL%var redirect = xhr . getResponseHeader (  ' web2py - redirect - location '  )  ; %NWL%var command = xhr . getResponseHeader (  ' web2py - component - command '  )  ; %NWL%var flash = xhr . getResponseHeader (  ' web2py - component - flash '  )  ; %NWL%9
gradient . addColorStop ( 1 ,  ' rgba ( 0 , 0 , 0 , 0 )  '  )  ; %NWL%tplCtx . fillStyle = gradient ; %NWL%tplCtx . fillRect ( 0 , 0 , 2 * radius , 2 * radius )  ;%NWL%}%NWL%return tplCanvas ;%NWL%}  ; %NWL%var _prepareData = function ( data )  {%NWL%var renderData =  [  ]  ; %NWL%var min = data . min ; %NWL%var max = data . max ; %NWL%var radi = data . radi ; %NWL%8
hashKeyVal = hashKeyVal . eq ;%NWL%}%NWL%this . query . hashKey . name = hashKeyName ; %NWL%this . query . hashKey . value = hashKeyVal ;  }%NWL%}%NWL%Query . prototype . exec = function ( next )  {%NWL%debug (  ' exec query for '  , this . query )  ; %NWL%var Model = this . Model ; %NWL%var Model$ = Model . $__ ; %NWL%var schema = Model$ . schema ; %NWL%var options = this . options ; %NWL%7
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
blockMsgClass :  ' blockMsg '%NWL%}  ; %NWL%var pageBlock = null ; %NWL%var pageBlockEls =  [  ]  ; %NWL%function install ( el , opts )  {%NWL%var full =  ( el =  = window )  ; %NWL%var msg = opts && opts . message ! =  = undefined ? opts . message : undefined ; %NWL%opts = $ . extend (  {  }  , $ . blockUI . defaults , opts || {  }  )  ; %NWL%opts . overlayCSS = $ . extend (  {  }  , $ . blockUI . defaults . overlayCSS , opts . overlayCSS || {  }  )  ; %NWL%var css = $ . extend (  {  }  , $ . blockUI . defaults . css , opts . css || {  }  )  ; %NWL%var themedCSS = $ . extend (  {  }  , $ . blockUI . defaults . themedCSS , opts . themedCSS || {  }  )  ; %NWL%9
Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%for ( var i = 0 ; i < elements . length ; i +  +  )  {%NWL%var element = elements [ i ]  ; %NWL%Sys . UI . DomElement . removeCssClass ( element , Sys . Mvc . FieldContext . _inputElementValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( element , Sys . Mvc . FieldContext . _inputElementErrorCss )  ;%NWL%}%NWL%}  ,%NWL%_displaySuccess : function Sys_Mvc_FieldContext$_displaySuccess (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%2
if ( moduleKeywords . indexOf ( key )  =  =  - 1 )%NWL%this . fn [ key ]  = obj [ key ]  ; %NWL%var included = obj . included ; %NWL%if ( included ) included . apply ( this )  ; %NWL%return this ;%NWL%}  ,%NWL%extend : function ( obj )  {%NWL%for ( var key in obj )%NWL%if ( moduleKeywords . indexOf ( key )  =  =  - 1 )%NWL%this [ key ]  = obj [ key ]  ; %NWL%var extended = obj . extended ; %NWL%2
exports . ownProp = ownProp%NWL%exports . makeAbs = makeAbs%NWL%exports . finish = finish%NWL%exports . mark = mark%NWL%exports . isIgnored = isIgnored%NWL%exports . childrenIgnored = childrenIgnored%NWL%function ownProp ( obj , field )  {%NWL%return Object . prototype . hasOwnProperty . call ( obj , field )%NWL%}%NWL%var path = require (  " path "  )%NWL%var minimatch = require (  " minimatch "  )%NWL%9
this . prevPhase = phase ; %NWL%return this . interpolateNoise ?%NWL%jfxr . Math . lerp ( this . prevRandom , this . currRandom , phase )  : %NWL%this . currRandom ;%NWL%}  ; %NWL%jfxr . Synth . Tremolo = function ( sound , array )  {%NWL%}  ; %NWL%jfxr . Synth . Tremolo . prototype . run = function ( sound , array , startSample , endSample )  {%NWL%var sampleRate = sound . sampleRate . value ; %NWL%var tremoloDepth = sound . tremoloDepth . value ; %NWL%var tremoloFrequency = sound . tremoloFrequency . value ; %NWL%8
play : function ( track )  {%NWL%if ( track instanceof Music && this . music =  =  = true )  {%NWL%var music = this . __music ; %NWL%if ( music ! =  = null )  {%NWL%music . stop (  )  ;%NWL%}%NWL%this . __music = track ; %NWL%this . __music . play (  )  ; %NWL%return true ;%NWL%} else if ( track instanceof Sound && this . sound =  =  = true )  {%NWL%var sounds = this . __sounds ; %NWL%2
this . sort =  [  ]  ;%NWL%}  ; %NWL%var DataViewModel = explorer . models . DataViewModel ; %NWL%explorer . models . DatasourceModel = function (  )  {%NWL%this . config = new QueryConfigModel (  )  ; %NWL%this . custom_query = false ; %NWL%this . query = null ; %NWL%this . queryError = null ; %NWL%this . view = new DataViewModel (  )  ;%NWL%}  ; %NWL%var DatasourceModel = explorer . models . DatasourceModel ; %NWL%2
}  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%exports [  ' Should correctly connect and emit a reconnect event after mongos failover '  ]  =  {%NWL%metadata :  { requires :  { topology :  ' sharded '  }  }  ,%NWL%test : function ( configuration , test )  {%NWL%var Mongos = configuration . require . Mongos%NWL%, MongoClient = configuration . require . MongoClient%NWL%, Server = configuration . require . Server%NWL%, Db = configuration . require . Db%NWL%8
resetParameters (  )  ; %NWL%return false ;%NWL%}  )  ; %NWL%$ (  ' #action - randomize - values '  )  . click ( function ( e )  {%NWL%e . preventDefault (  )  ; %NWL%$ (  ' #parameter - panel input . param '  )  . each ( function (  )  {%NWL%var $this = $ ( this )  ; %NWL%var sliderInput = getTwinInput ( $this )  ; %NWL%$this . addClass (  ' init '  )  ; %NWL%var from = sliderInput . attr (  ' data - range - from '  )  ; %NWL%var to = sliderInput . attr (  ' data - range - to '  )  ; %NWL%9
}  )  ;%NWL%}  ,%NWL%componentDidUpdate : function ( pvProps , pvState )  {%NWL%var closing = pvProps . open && !this . props . open ,%NWL%opening = !pvProps . open && this . props . open ; %NWL%if ( opening ) this . open (  )  ; else if ( closing ) this . close (  )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var _props = this . props ; %NWL%var className = _props . className ; %NWL%var open = _props . open ; %NWL%9
self . routes . getAlbumList ( req , res , callback , subsonicjson . getAlbumList2 )  ;%NWL%}  ; %NWL%this . routes . getAlbumList = function ( req , res , callback , subsonicfct )  {%NWL%var error = null ; %NWL%var type = req . query . type || null ; %NWL%var size = Math . max ( Math . min ( req . query . size || 10 , 500 )  , 1 )  ; %NWL%var size2 = size ; %NWL%var offset = Math . max ( req . query . offset || 0 , 0 )  ; %NWL%var fromYear = req . query . fromYear || null ; %NWL%var toYear = req . query . toYear || null ; %NWL%var genre = req . query . genre || null ; %NWL%4
var url = googleStore . getValues ( items [ 0 ]  ,  " url "  )  ; %NWL%t . assertTrue ( dojo . isArray ( url )  )  ; %NWL%var published = googleStore . getValues ( items [ 0 ]  ,  " visibleUrl "  )  ; %NWL%t . assertTrue ( dojo . isArray ( published )  )  ; %NWL%var updated = googleStore . getValues ( items [ 0 ]  ,  " cacheUrl "  )  ; %NWL%t . assertTrue ( dojo . isArray ( updated )  )  ; %NWL%var title = googleStore . getValues ( items [ 0 ]  ,  " title "  )  ; %NWL%t . assertTrue ( dojo . isArray ( title )  )  ; %NWL%var titleNoFormatting = googleStore . getValues ( items [ 0 ]  ,  " titleNoFormatting "  )  ; %NWL%t . assertTrue ( dojo . isArray ( titleNoFormatting )  )  ; %NWL%var content = googleStore . getValues ( items [ 0 ]  ,  " content "  )  ; %NWL%0
}%NWL%function geo_modify_plat_pc_perms ( x1 , y1 , x2 , y2 , partials_only , use_inital_perm , perm )  {%NWL%var plats = this . geo_find_plats ( x1 , y1 , x2 , y2 , partials_only )  ; %NWL%for ( var i in plats )  {%NWL%if ( use_inital_perm )  {%NWL%plats [ i ]  . platform_pc_perm = plats [ i ]  . inital_perm ;%NWL%} else {%NWL%plats [ i ]  . platform_pc_perm = perm ;%NWL%}%NWL%}%NWL%var walls = this . geo_find_walls ( x1 , y1 , x2 , y2 , partials_only )  ; %NWL%2
}  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%spritesheetjs . prototype . push = function ( png , image , callback )  {%NWL%fs . createReadStream ( image . image )%NWL%. pipe ( new pngjs . PNG (  {%NWL%filterType : 4%NWL%}  )  )%NWL%. on (  ' parsed '  , function (  )  {%NWL%var x = image . x ; %NWL%var y = image . y ; %NWL%9
Queue . prototype . push = function ( value )  {%NWL%var length = this . length ; %NWL%if ( this . capacity <  = length )  {%NWL%this . grow ( this . snap ( this . capacity * this . growFactor )  )  ;%NWL%}%NWL%var index =  ( this . front + length ) & ( this . capacity - 1 )  ; %NWL%this [ index ]  = value ; %NWL%this . length = length + 1 ;%NWL%}  ; %NWL%Queue . prototype . shift = function (  )  {%NWL%var front = this . front ; %NWL%1
var binarySearch = require (  '  .  / binary - search '  )  ; %NWL%var ArraySet = require (  '  .  / array - set '  )  . ArraySet ; %NWL%var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%8
return vec3 . distance ( this . origin . _array , point )  ;%NWL%}%NWL%var c2 = vec3 . lenSquared ( v )  ; %NWL%return Math . sqrt ( c2 - b * b )  ;%NWL%}  ;%NWL%}  )  (  )  ,%NWL%intersectSphere :  ( function (  )  {%NWL%var v = vec3 . create (  )  ; %NWL%return function ( center , radius , out )  {%NWL%var origin = this . origin . _array ; %NWL%var direction = this . direction . _array ; %NWL%9
} else if ( err . error_code =  =  =  " CF - TargetNotSet "  )  {  /  / $NON - NLS - 0$%NWL%var cloudSettingsPageUrl = new URITemplate (  "  {  + OrionHome }  / settings / settings . html# , category = cloud "  )  . expand (  { OrionHome : PageLinks . getOrionHome (  )  }  )  ;  /  / $NON - NLS - 0$%NWL%error . Message = i18Util . formatMessage ( messages [  " setUpYourCloud . Go "  ]  , cloudSettingsPageUrl )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}  ,%NWL%buildDefaultErrorHandler : function ( options )  {%NWL%var cFService = options . cFService ; %NWL%var showMessage = options . showMessage ; %NWL%var hideMessage = options . hideMessage ; %NWL%8
options = options || {  }  ; %NWL%var getValue = argscheck . getValue ; %NWL%var quality = getValue ( options . quality , 50 )  ; %NWL%var destinationType = getValue ( options . destinationType , Camera . DestinationType . FILE_URI )  ; %NWL%var sourceType = getValue ( options . sourceType , Camera . PictureSourceType . CAMERA )  ; %NWL%var targetWidth = getValue ( options . targetWidth ,  - 1 )  ; %NWL%var targetHeight = getValue ( options . targetHeight ,  - 1 )  ; %NWL%var encodingType = getValue ( options . encodingType , Camera . EncodingType . JPEG )  ; %NWL%var mediaType = getValue ( options . mediaType , Camera . MediaType . PICTURE )  ; %NWL%var allowEdit = !!options . allowEdit ; %NWL%var correctOrientation = !!options . correctOrientation ; %NWL%9
}%NWL%}%NWL%else {%NWL%break ;%NWL%}%NWL%} while ( true )  ; %NWL%return this . _distanceSquaredFromLineSegment ( m , n , p )  ;%NWL%}  ,%NWL%_pointOnBezierCurve : function ( p0 , p1 , p2 , t )  {%NWL%var x =  (  ( 1 - t )  *  ( 1 - t )  * p0 . x )  +  ( 2 *  ( 1 - t )  * t * p1 . x )  +  ( t * t * p2 . x )  ; %NWL%var y =  (  ( 1 - t )  *  ( 1 - t )  * p0 . y )  +  ( 2 *  ( 1 - t )  * t * p1 . y )  +  ( t * t * p2 . y )  ; %NWL%9
if ( content )  {%NWL%generator . setSourceContent ( sourceFile , content )  ;%NWL%}%NWL%}  )  ; %NWL%return generator ;%NWL%}  ; %NWL%SourceMapGenerator . prototype . addMapping =%NWL%function SourceMapGenerator_addMapping ( aArgs )  {%NWL%var generated = util . getArg ( aArgs ,  ' generated '  )  ; %NWL%var original = util . getArg ( aArgs ,  ' original '  , null )  ; %NWL%var source = util . getArg ( aArgs ,  ' source '  , null )  ; %NWL%9
x . hash =  "  ( SortedSet "  + hash ( x . sort )  + join_lines ( a , spaces )  +  "  )  "  ;%NWL%}%NWL%}%NWL%return x . hash ;%NWL%}  ; %NWL%ImmutableSet . prototype . removeAll = function (  )  {%NWL%return new ImmutableSet ( nil , this . sort , this . hash_fn )  ;%NWL%}  ; %NWL%ImmutableSet . prototype . add = function ( key )  {%NWL%var root = this . root ; %NWL%var sort = this . sort ; %NWL%9
if ( typeof d [ k ]  =  =  =  " object "  ) getFields ( d [ k ]  , f ,  [ p ]  )%NWL%}  )%NWL%return f%NWL%}%NWL%}%NWL%var url = require (  " url "  )%NWL%, npm = require (  "  .  / npm . js "  )%NWL%, registry = npm . registry%NWL%, log = require (  " npmlog "  )%NWL%, util = require (  " util "  )%NWL%, semver = require (  " semver "  )%NWL%9
var http = require (  ' http '  )%NWL%var path = require (  ' path '  )%NWL%var CookieService = require (  '  .  / cookie '  )%NWL%var router = require (  '  .  / router '  )%NWL%var TemplateEngine = require (  '  .  / TemplateEngine '  )%NWL%var fsutils = require (  '  .  / fsutils '  )%NWL%var CacheHelper = require (  '  .  / helpers / CacheHelper '  )%NWL%var FileLoader = require (  '  .  / FileLoader '  )%NWL%var ClassLoader = require (  '  .  / ClassLoader '  )%NWL%var PathMatcher = require (  '  .  / pathMatcher '  )%NWL%var RequestMessage = require (  '  .  / RequestMessage '  )%NWL%3
" tabManager "  ,  " util "  ,  " settings "  ,  " api "  ,  " c9 "%NWL%]  ; %NWL%main . provides =  [  " plugin . market "  ]  ; %NWL%return main ; %NWL%function main ( options , imports , register )  {%NWL%var Editor = imports . Editor ; %NWL%var editors = imports . editors ; %NWL%var tabs = imports . tabManager ; %NWL%var commands = imports . commands ; %NWL%var settings = imports . settings ; %NWL%var api = imports . api ; %NWL%5
}  )  ; %NWL%it (  ' admin can delete user '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%admin . can (  ' delete '  ,  ' user '  , function ( err , can )  {%NWL%if ( err ) throw err ; %NWL%can . should . equal ( true )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' user can not delete user '  , function ( done )  {%NWL%var user = response . roles . user ; %NWL%2
var amf = new createjs . AlphaMaskFilter ( maskShape . cacheCanvas )  ; %NWL%bmp2 . filters =  [ amf ]  ; %NWL%bmp2 . cache ( 0 , 0 , width , height )  ; %NWL%this . stage . addChild ( bmp2 )  ; %NWL%this . stage . update (  )  ; %NWL%this . compareBaseLine (  " assets / AlphaMaskFilter . png "  , done , expect ,  . 01 )  ; %NWL%expect ( amf . clone (  )  . mask )  . toBe ( maskShape . cacheCanvas )  ;%NWL%}  )  ; %NWL%it (  " AlphaMapFilter "  , function ( done )  {%NWL%var width = this . img . width ; %NWL%var height = this . img . height ; %NWL%9
SS . RevolveAxisPreview = SS . PreviewWithOrigin . extend (  {%NWL%initialize : function (  )  {%NWL%SS . PreviewWithOrigin . prototype . initialize . call ( this )  ; %NWL%this . render (  )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%this . clear (  )  ; %NWL%SS . PreviewWithOrigin . prototype . render . call ( this )  ; %NWL%var origin = this . model . node . origin ; %NWL%var u = this . model . node . parameters . u ; %NWL%var v = this . model . node . parameters . v ; %NWL%9
isVisible : Ember . computed . and (  ' hasX '  ,  ' hasY '  )  ,%NWL%rangeX : Ember . computed (  ' x '  ,  ' xScale '  , function (  )  {%NWL%var xScale = this . get (  ' xScale '  )  ; %NWL%var x = this . get (  ' x '  )  ; %NWL%var hasX = this . get (  ' hasX '  )  ; %NWL%return ( hasX && xScale ? xScale ( x )  : 0 ) || 0 ;%NWL%}  )  ,%NWL%rangeY : Ember . computed (  ' y '  ,  ' yScale '  , function (  )  {%NWL%var yScale = this . get (  ' yScale '  )  ; %NWL%var y = this . get (  ' y '  )  ; %NWL%var hasY = this . get (  ' hasY '  )  ; %NWL%2
this . _init$ ( void 0 ,  - 2 )  ;%NWL%}%NWL%util . inherits ( MappingPromiseArray , PromiseArray )  ; %NWL%MappingPromiseArray . prototype . _init = function MappingPromiseArray$_init (  )  {  }  ; %NWL%MappingPromiseArray . prototype . _promiseFulfilled =%NWL%function MappingPromiseArray$_promiseFulfilled ( value , index )  {%NWL%var values = this . _values ; %NWL%if ( values =  =  = null ) return ; %NWL%var length = this . length (  )  ; %NWL%var preservedValues = this . _preservedValues ; %NWL%var limit = this . _limit ; %NWL%6
describe (  ' CheckboxWithLabel '  , function (  )  {%NWL%it (  ' changes the text after click '  , function (  )  {%NWL%var React = require (  ' react / addons '  )  ; %NWL%var CheckboxWithLabel = require (  '  .  .  / CheckboxWithLabel . js '  )  ; %NWL%var TestUtils = React . addons . TestUtils ; %NWL%var checkbox = TestUtils . renderIntoDocument (%NWL%< CheckboxWithLabel labelOn =  " On " labelOff =  " Off "  /  >%NWL%)  ; %NWL%var label = TestUtils . findRenderedDOMComponentWithTag ( checkbox ,  ' label '  )  ; %NWL%expect ( label . getDOMNode (  )  . textContent )  . toEqual (  ' Off '  )  ; %NWL%var input = TestUtils . findRenderedDOMComponentWithTag ( checkbox ,  ' input '  )  ; %NWL%8
var col = 0 ; %NWL%var row = 0 ; %NWL%var found_source = 0 ; %NWL%var slot_map =  {  }  ; %NWL%var tsids =  [  ]  ; %NWL%for ( var i in slots )  {%NWL%var s = slots [ i ]  ; %NWL%var data = s . data ; %NWL%if ( data . instance )  {%NWL%var x = s . x ; %NWL%var y = s . y ; %NWL%7
var show = $typeahead . show ; %NWL%$typeahead . show = function (  )  {%NWL%show (  )  ; %NWL%setTimeout ( function (  )  {%NWL%$typeahead . $element . on (  ' mousedown '  , $typeahead . $onMouseDown )  ; %NWL%if ( options . keyboard )  {%NWL%element . on (  ' keydown '  , $typeahead . $onKeyDown )  ;%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%var hide = $typeahead . hide ; %NWL%0
var value =  ' thevalue '  ; %NWL%var minutes = 1 ; %NWL%lscache . set ( key , value , minutes )  ; %NWL%setTimeout ( function (  )  {%NWL%equal ( lscache . get ( key )  , null ,  ' We expect value to be null '  )  ; %NWL%start (  )  ;%NWL%}  , 1000 * 60 * minutes )  ;%NWL%}  )  ; %NWL%asyncTest (  ' Testing set (  ) and get (  ) with string and expiration in a different bucket '  , 2 , function (  )  {%NWL%var key =  ' thekey '  ; %NWL%var value1 =  ' thevalue1 '  ; %NWL%0
var positions =  [  ]  ; %NWL%var genders  =  [  ]  ; %NWL%var ids   =  [  ]  ; %NWL%var salaries  =  [  ]  ; %NWL%for ( var i = 0 ; i < 5 ; i +  +  )%NWL%{%NWL%var employee = doc . createElement (  " employee "  )  ; %NWL%var address  = doc . createElement (  " address "  )  ; %NWL%var name  = doc . createElement (  " name "  )  ; %NWL%var position = doc . createElement (  " position "  )  ; %NWL%var gender  = doc . createElement (  " gender "  )  ; %NWL%6
el . setAttribute (  ' class '  , clss )  ; %NWL%values . forEach ( function ( item )  {%NWL%el . appendChild ( module . exports . createOption ( item )  )  ;%NWL%}  )  ; %NWL%return el ;%NWL%}  ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / ext / menu_tools / add_editor_menu_options '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / ext / modelist '  ,  ' ace / ext / themelist '  ]  , function ( require , exports , module )  {%NWL%module . exports . addEditorMenuOptions = function addEditorMenuOptions ( editor )  {%NWL%var modelist = require (  '  .  .  / modelist '  )  ; %NWL%var themelist = require (  '  .  .  / themelist '  )  ; %NWL%9
var line = this . get (  ' line '  )%NWL%var height = this . get (  ' height '  )%NWL%var scrollOffset = this . get (  ' scrollOffset '  )%NWL%if ( scrollOffset > 0 )  {%NWL%scrollOffset -  -%NWL%this . set (  ' scrollOffset '  , scrollOffset ,  { silent : true }  )%NWL%this . render (  )%NWL%}%NWL%}  ,%NWL%scrollDown : function (  )  {%NWL%var line = this . get (  ' line '  )%NWL%1
var count = 0 ; %NWL%for ( var bpName in _breakpoints )  {%NWL%count +  +  ;%NWL%}%NWL%return count ;%NWL%}  ; %NWL%var testBP = function ( name )  {%NWL%var bp = _breakpoints [ name ]  ; %NWL%if ( bp )  {%NWL%var min = getDOMHelperWidth ( bp . min )  ; %NWL%var max = getDOMHelperWidth ( bp . max )  ; %NWL%9
var path = require (  ' path '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var utils = require (  '  .  / schedule_utils . js '  )  ; %NWL%var planUtils = require (  '  .  / plan_modules / plan_utils . js '  )  ; %NWL%var config = fs . readFileSync (  ' config . json '  ,  ' utf8 '  )  ; %NWL%config = JSON . parse ( config )  ; %NWL%config . planFolder  = path . resolve ( config . planFolder )  ; %NWL%config . decodeFolder = path . resolve ( config . decodeFolder )  ; %NWL%var inputFolder = config . decodeFolder ; %NWL%var recursive = config . recursive ; %NWL%var folderFilter = config . folderFilter ; %NWL%9
ui . hide (  )  . after (%NWL%'  < span class =  "  '  + opts . classDatetime +  '  "  >  '  +%NWL%'  < input type =  " date " value =  "  '  + val [ 0 ]  +  '  "  '  +%NWL%' min =  "  '  + min [ 0 ]  +  '  " max =  "  '  + max [ 0 ]  +  '  "  '  +%NWL%' size =  "  '  + getAttr ( ui ,  ' size '  )  +  '  "  '  +%NWL%' class =  "  '  + getAttr ( ui ,  ' class '  )  +  '  "  '  +%NWL%' title =  "  '  + getAttr ( ui ,  ' title '  )  +  '  "  >  '  +%NWL%'  < input type =  " time " value =  "  '  + val [ 1 ]  +  '  "  '  +%NWL%' step =  "  '  + attr2num ( ui ,  ' step '  , 60 )  +  '  "  '  +%NWL%' size =  "  '  + getAttr ( ui ,  ' size '  )  +  '  "  '  +%NWL%' class =  "  '  + getAttr ( ui ,  ' class '  )  +  '  "  '  +%NWL%4
-  ( this . cssPosition =  =  ' fixed ' ? - this . scrollParent . scrollLeft (  )  : scrollIsRootNode ? 0 : scroll . scrollLeft (  )  )  * mod%NWL%)%NWL%}  ;%NWL%}  ,%NWL%_generatePosition : function ( event )  {%NWL%var o = this . options , scroll = this . cssPosition =  =  ' absolute ' && ! ( this . scrollParent [ 0 ] ! = document && $ . ui . contains ( this . scrollParent [ 0 ]  , this . offsetParent [ 0 ]  )  ) ? this . offsetParent : this . scrollParent , scrollIsRootNode =  (  /  ( html|body )  / i )  . test ( scroll [ 0 ]  . tagName )  ; %NWL%if ( this . cssPosition =  =  ' relative ' && ! ( this . scrollParent [ 0 ] ! = document && this . scrollParent [ 0 ] ! = this . offsetParent [ 0 ]  )  )  {%NWL%this . offset . relative = this . _getRelativeOffset (  )  ;%NWL%}%NWL%var pageX = event . pageX ; %NWL%var pageY = event . pageY ; %NWL%9
, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy   = actions . MoveBy%NWL%, EaseElasticIn  = actions . EaseElasticIn%NWL%, EaseElasticOut = actions . EaseElasticOut%NWL%, Sequence   = actions . Sequence%NWL%, DelayTime   = actions . DelayTime%NWL%, RepeatForever  = actions . RepeatForever%NWL%5
Body . prototype . applyImpulse = function ( impulse , worldPoint )  {%NWL%if ( this . type ! =  = Body . DYNAMIC )  {%NWL%return ;%NWL%}%NWL%var r = Body_applyImpulse_r ; %NWL%worldPoint . vsub ( this . position , r )  ; %NWL%var velo = Body_applyImpulse_velo ; %NWL%velo . copy ( impulse )  ; %NWL%velo . mult ( this . invMass , velo )  ; %NWL%this . velocity . vadd ( velo , this . velocity )  ; %NWL%var rotVelo = Body_applyImpulse_rotVelo ; %NWL%4
for ( var i = 0 , l = current . length ; i < l ; i +  = 1 )  {%NWL%if ( current [ i ] ! =  = sorted [ i ]  )  {%NWL%sorted . detach (  )  . sort ( fn )  . appendTo (  ' #items '  )  ; %NWL%break ;%NWL%}%NWL%}%NWL%}%NWL%function onContentChanged ( item )  {%NWL%var order = store . get ( storekey )  ; %NWL%var column = order && order . column || settings . column ; %NWL%var reverse = order && order . reverse || settings . reverse ; %NWL%9
var taskEffortSpecified = !SC . none ( task . get (  ' effort '  )  )  ; %NWL%if ( effortSpecified =  =  = Tasks . FILTER_YES && !taskEffortSpecified ) return ; %NWL%if ( effortSpecified =  =  = Tasks . FILTER_NO && taskEffortSpecified ) return ;%NWL%}%NWL%var recentlyUpdated = this . get (  ' _recentlyUpdated '  )  ; %NWL%if ( recentlyUpdated ! =  = Tasks . FILTER_DONT_CARE )  {%NWL%var taskRecentlyUpdated = task . get (  ' isRecentlyUpdated '  )  ; %NWL%if ( recentlyUpdated =  =  = Tasks . FILTER_YES && !taskRecentlyUpdated ) return ; %NWL%if ( recentlyUpdated =  =  = Tasks . FILTER_NO && taskRecentlyUpdated ) return ;%NWL%}%NWL%var watched = this . get (  ' _watched '  )  ; %NWL%4
this . zoomLevel = 1 . 0 ; %NWL%this . maxFitToScreenLevel = 1 . 5 ; %NWL%this . minZoomLevel = 0 . 1 ; %NWL%this . maxZoomLevel = 2 . 5 ; %NWL%this . diff = 5 ;  /  / difference between canvas and view port , s . th . like toolbar??%NWL%if ( ownPluginData . properties )  {%NWL%ownPluginData . properties . each ( function ( property )  {%NWL%if ( property . zoomLevel )  { this . zoomLevel = Number ( 1 . 0 )  ;  }%NWL%if ( property . maxFitToScreenLevel )  { this . maxFitToScreenLevel = Number ( property . maxFitToScreenLevel )  ;  }%NWL%if ( property . minZoomLevel )  { this . minZoomLevel = Number ( property . minZoomLevel )  ;  }%NWL%if ( property . maxZoomLevel )  { this . maxZoomLevel = Number ( property . maxZoomLevel )  ;  }%NWL%9
}%NWL%$ ( document )  . on (  ' click . bs . collapse . data - api '  ,  '  [ data - toggle =  " collapse "  ]  '  , function ( e )  {%NWL%var href%NWL%var $this  = $ ( this )%NWL%var target  = $this . attr (  ' data - target '  )%NWL%|| e . preventDefault (  )%NWL%|| ( href = $this . attr (  ' href '  )  ) && href . replace (  /  .  *  ( ? = # [ ^\s ]  + $ )  /  ,  '  '  )  /  / strip for ie7%NWL%var $target = $ ( target )%NWL%var data  = $target . data (  ' bs . collapse '  )%NWL%var option  = data ? ' toggle '  : $this . data (  )%NWL%var parent  = $this . attr (  ' data - parent '  )%NWL%4
, cookieParser = require (  ' cookie - parser '  )%NWL%, methodOverride = require (  ' method - override '  )%NWL%, errorHandler = require (  ' errorhandler '  )%NWL%, cons  = require (  ' consolidate '  )%NWL%, swig  = require (  ' swig '  )%NWL%, flash  = require (  ' connect - flash '  )%NWL%, http  = require (  ' http '  )%NWL%, facebook = require (  ' facebook - node - sdk '  )%NWL%, mongo  = require (  ' mongoose '  )%NWL%, middleware = require (  '  .  / lib / util / middlewares '  )%NWL%, time  = require (  ' time '  )%NWL%4
}  ,%NWL%" func "  :  {%NWL%" is typeOf function matcher "  : function (  )  {%NWL%var func = sinon . match . func ; %NWL%assert ( sinon . match . isMatcher ( func )  )  ; %NWL%assert . equals ( func . toString (  )  ,  " typeOf ( \ " function\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" array "  :  {%NWL%" is typeOf array matcher "  : function (  )  {%NWL%var array = sinon . match . array ; %NWL%3
value = obj . html (  )  ; %NWL%var prefix = options . prefix ; %NWL%var suffix = options . suffix ; %NWL%var centsSeparator = options . centsSeparator ; %NWL%var thousandsSeparator = options . thousandsSeparator ; %NWL%var limit = options . limit ; %NWL%var centsLimit = options . centsLimit ; %NWL%var clearPrefix = options . clearPrefix ; %NWL%var clearSuffix = options . clearSuffix ; %NWL%var allowNegative = options . allowNegative ; %NWL%var insertPlusSign = options . insertPlusSign ; %NWL%1
if ( guiders . _isIE && guiders . _ieVersion < 9 )  {%NWL%fixedOrAbsolute =  " absolute "  ;%NWL%}%NWL%myGuider . elem . css (  " position "  , fixedOrAbsolute )  ; %NWL%myGuider . elem . css (  " top "  ,  ( $ ( window )  . height (  )  - myHeight )  / 3 +  " px "  )  ; %NWL%myGuider . elem . css (  " left "  ,  ( $ ( window )  . width (  )  - myWidth )  / 2 +  " px "  )  ; %NWL%return ;%NWL%}%NWL%var base = attachTo . offset (  )  ; %NWL%var top = base . top ; %NWL%var left = base . left ; %NWL%9
sectionLabel . setTextAnchor ( thin . core . TextStyle . HorizonAlignType . MIDDLE )  ; %NWL%sectionLabel . setVerticalAlign ( thin . core . TextStyle . VerticalAlignType . CENTER )  ; %NWL%sectionLabel . setFill ( new goog . graphics . SolidFill (  ' #AAAAAA '  )  )  ; %NWL%sectionLabel . setVisibled ( false )  ; %NWL%return sectionLabel ;%NWL%}  ; %NWL%thin . core . ListSectionHelper . prototype . disposeInternal = function (  )  {%NWL%this . inactive (  )  ; %NWL%var layout = this . layout_ ; %NWL%var separator = this . separator_ ; %NWL%var drawLayer = this . drawLayer_ ; %NWL%8
if ( range . intersectsRange ( highlight . getRange (  )  ) && !contains ( intersectingHighlights , highlight )  )  {%NWL%intersectingHighlights . push ( highlight )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ; %NWL%return intersectingHighlights ;%NWL%}  ,%NWL%highlightCharacterRanges : function ( className , charRanges , containerElementId )  {%NWL%var i , len , j ; %NWL%var highlights = this . highlights ; %NWL%var converter = this . converter ; %NWL%9
var instance = runtime ( addon )  ; %NWL%instance . configure (  ' production '  )  . track (  {%NWL%insights :  { ALL_TRANSITIONS : true , ALL_ACTIONS : true }%NWL%}  )  ; %NWL%instance . configure (  ' development '  )  . track (  {%NWL%insights :  { ALL_TRANSITIONS : false , ALL_ACTIONS : false }%NWL%}  )  ; %NWL%var production = addon . configs [  ' production '  ]  ; %NWL%expect ( production . mappings [ 0 ]  . insights . get (  ' ALL_TRANSITIONS '  )  )  . to . be . ok (  )  ; %NWL%expect ( production . mappings [ 0 ]  . insights . get (  ' ALL_ACTIONS '  )  )  . to . be . ok (  )  ; %NWL%var development = addon . configs [  ' development '  ]  ; %NWL%7
event . currentTarget = null ; %NWL%return returnValue ;%NWL%}%NWL%function executeDispatchesInOrder ( event , executeDispatch )  {%NWL%forEachEventDispatch ( event , executeDispatch )  ; %NWL%event . _dispatchListeners = null ; %NWL%event . _dispatchIDs = null ;%NWL%}%NWL%function executeDispatchesInOrderStopAtTrue ( event )  {%NWL%var dispatchListeners = event . _dispatchListeners ; %NWL%var dispatchIDs = event . _dispatchIDs ; %NWL%9
return this . $getIndent ( line )  ;%NWL%}  ; %NWL%this . allowAutoInsert = function (  )  {%NWL%return false ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / tex_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var rng = range . create (  )  ; %NWL%return rng ? rng . isOnEditable (  ) && style . current ( rng , target )  : false ;%NWL%}  ; %NWL%var triggerOnBeforeChange = this . triggerOnBeforeChange = function ( $editable )  {%NWL%var onBeforeChange = $editable . data (  ' callbacks '  )  . onBeforeChange ; %NWL%if ( onBeforeChange )  {%NWL%onBeforeChange ( $editable . html (  )  , $editable )  ;%NWL%}%NWL%}  ; %NWL%var triggerOnChange = this . triggerOnChange = function ( $editable )  {%NWL%var onChange = $editable . data (  ' callbacks '  )  . onChange ; %NWL%4
compiler . apply ( new TemplatedPathPlugin (  )  )  ; %NWL%compiler . apply ( new RecordIdsPlugin (  )  )  ; %NWL%compiler . apply ( new WarnCaseSensitiveModulesPlugin (  )  )  ; %NWL%if ( options . optimize && options . optimize . occurenceOrder )  {%NWL%compiler . apply ( new MovedToPluginWarningPlugin (  " optimize . occurenceOrder "  ,  " optimize . OccurrenceOrderPlugin "  )  )  ; %NWL%var OccurrenceOrderPlugin = require (  "  .  / optimize / OccurrenceOrderPlugin "  )  ; %NWL%compiler . apply ( new OccurrenceOrderPlugin ( options . optimize . occurenceOrderPreferEntry )  )  ;%NWL%}%NWL%if ( options . optimize && options . optimize . minChunkSize )  {%NWL%compiler . apply ( new MovedToPluginWarningPlugin (  " optimize . minChunkSize "  ,  " optimize . MinChunkSizePlugin "  )  )  ; %NWL%var MinChunkSizePlugin = require (  "  .  / optimize / MinChunkSizePlugin "  )  ; %NWL%5
error . Message = this . getLoginMessage ( target . ManageUrl )  ;%NWL%} else if ( err . error_code =  =  =  " CF - TargetNotSet "  )  {  /  / $NON - NLS - 0$%NWL%var cloudSettingsPageUrl = new URITemplate (  "  {  + OrionHome }  / settings / settings . html# , category = cloud "  )  . expand (  { OrionHome : PageLinks . getOrionHome (  )  }  )  ;  /  / $NON - NLS - 0$%NWL%error . Message = i18Util . formatMessage ( messages [  " setUpYourCloud . Go "  ]  , cloudSettingsPageUrl )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}  ,%NWL%buildDefaultErrorHandler : function ( options )  {%NWL%var cFService = options . cFService ; %NWL%var showMessage = options . showMessage ; %NWL%9
return this . __iterator__ ( true )  ;%NWL%}  ; %NWL%goog . structs . Map . prototype . getValueIterator = function (  )  {%NWL%return this . __iterator__ ( false )  ;%NWL%}  ; %NWL%goog . structs . Map . prototype . __iterator__ = function ( opt_keys )  {%NWL%this . cleanupKeysArray_ (  )  ; %NWL%var i = 0 ; %NWL%var keys = this . keys_ ; %NWL%var map = this . map_ ; %NWL%var version = this . version_ ; %NWL%8
}  )  ;%NWL%}  ,%NWL%_setupUrl : function (  )  {%NWL%var url = this . get (  ' url '  )  ; %NWL%if ( SC . typeOf ( url )  =  =  ' string '  )%NWL%this . set (  ' url '  , FakeServer . StringUrl . create (  { url : url }  )  )  ; %NWL%else%NWL%this . set (  ' url '  , FakeServer . RegularExpressionUrl . create (  { url : url }  )  )  ;%NWL%}  ,%NWL%_setupResponse : function (  )  {%NWL%var response = this . get (  ' response '  )  ; %NWL%3
options . touches = options . touches || [  ]  ; %NWL%options . targetTouches = options . targetTouches || [  ]  ; %NWL%options . changedTouches = options . changedTouches || [  ]  ; %NWL%var bubbles = typeof options . bubbles ! =  ' undefined ' ? options . bubbles : true ; %NWL%var cancelable = typeof options . cancelable ! =  ' undefined ' ? options . cancelable :  ( type ! =  " touchcancel "  )  ; %NWL%var view = typeof options . view ! =  ' undefined ' ? options . view : window ; %NWL%var detail = typeof options . detail ! =  ' undefined ' ? options . detail : 0 ; %NWL%var clientX = typeof options . pageX ! =  ' undefined ' ? options . pageX : 0 ; %NWL%var clientY = typeof options . pageY ! =  ' undefined ' ? options . pageY : 0 ; %NWL%var ctrlKey = typeof options . ctrlKey ! =  ' undefined ' ? options . ctrlKey : false ; %NWL%var altKey = typeof options . altKey ! =  ' undefined ' ? options . altKey : false ; %NWL%9
this . noContent = 204 =  = status || 1223 =  = status ; %NWL%this . badRequest = 400 =  = status ; %NWL%this . unauthorized = 401 =  = status ; %NWL%this . notAcceptable = 406 =  = status ; %NWL%this . notFound = 404 =  = status ; %NWL%this . forbidden = 403 =  = status ;%NWL%}  ; %NWL%Response . prototype . toError = function (  )  {%NWL%var req = this . req ; %NWL%var method = req . method ; %NWL%var path = req . path ; %NWL%9
}%NWL%return [ nvals , nseries ]  ;%NWL%}  ; %NWL%$ . jqplot . BarRenderer . prototype . draw = function ( ctx , gridData , options )  {%NWL%var i ; %NWL%var opts =  ( options ! = undefined ) ? options :  {  }  ; %NWL%var shadow =  ( opts . shadow ! = undefined ) ? opts . shadow : this . shadow ; %NWL%var showLine =  ( opts . showLine ! = undefined ) ? opts . showLine : this . showLine ; %NWL%var fill =  ( opts . fill ! = undefined ) ? opts . fill : this . fill ; %NWL%var xaxis = this . xaxis ; %NWL%var yaxis = this . yaxis ; %NWL%9
var names  =  [  ]  ; %NWL%var positions =  [  ]  ; %NWL%var genders  =  [  ]  ; %NWL%var ids   =  [  ]  ; %NWL%var salaries  =  [  ]  ; %NWL%for ( var i = 0 ; i < 5 ; i +  +  )%NWL%{%NWL%var employee = doc . createElement (  " employee "  )  ; %NWL%var address  = doc . createElement (  " address "  )  ; %NWL%var name  = doc . createElement (  " name "  )  ; %NWL%var position = doc . createElement (  " position "  )  ; %NWL%7
}  ; %NWL%TokenAssert . prototype . differentLine = function ( options )  {%NWL%options . atLeast = 1 ; %NWL%this . linesBetween ( options )  ;%NWL%}  ; %NWL%TokenAssert . prototype . linesBetween = function ( options )  {%NWL%var token = options . token ; %NWL%var nextToken = options . nextToken ; %NWL%var atLeast = options . atLeast ; %NWL%var atMost = options . atMost ; %NWL%var exactly = options . exactly ; %NWL%6
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
this . licenseLabel =  "  "  ;%NWL%}%NWL%if ( this . copyrightLabel ! = null && lang . trim ( this . copyrightLabel ) ! =  "  "  )%NWL%{%NWL%this . copyrightLabel = this . message ( this . copyrightLabel )  ;%NWL%}%NWL%else%NWL%{%NWL%this . copyrightLabel = this . message (  " label . copyright "  )  ;%NWL%}%NWL%if ( this . altText ! = null && lang . trim ( this . altText ) ! =  "  "  )%NWL%2
}  ;%NWL%}%NWL%WeldJoint . prototype . setSpringFrequencyHz = function ( frequencyHz )  {%NWL%this . frequencyHz = frequencyHz ;%NWL%}%NWL%WeldJoint . prototype . setSpringDampingRatio = function ( dampingRatio )  {%NWL%this . dampingRatio = dampingRatio ;%NWL%}%NWL%WeldJoint . prototype . initSolver = function ( dt , warmStarting )  {%NWL%var body1 = this . body1 ; %NWL%var body2 = this . body2 ; %NWL%9
}  ; %NWL%Thrift . inherits ( EDAMUserException , Thrift . TException )  ; %NWL%EDAMUserException . prototype . name =  ' EDAMUserException '  ; %NWL%EDAMUserException . prototype . read = function ( input )  {%NWL%input . readStructBegin (  )  ; %NWL%while ( true )%NWL%{%NWL%var ret = input . readFieldBegin (  )  ; %NWL%var fname = ret . fname ; %NWL%var ftype = ret . ftype ; %NWL%var fid = ret . fid ; %NWL%8
" yb "  :  " fl - test "%NWL%}%NWL%}%NWL%}%NWL%}  ; %NWL%fluid . tests . prefs . testStrings =  [  " Test1 "  ,  " Test2 "  ,  " Test3 "  ,  " Test4 "  ,  " Test5 "  ]  ; %NWL%fluid . tests . prefs . testControlValues =  [  " a "  ,  " b "  ,  " c "  ,  " d "  ,  " e "  ]  ; %NWL%fluid . tests . prefs . testComponentIntegration = function ( prefsEditor )  {%NWL%var body = $ (  " body "  )  ; %NWL%var testStrings = fluid . tests . prefs . testStrings ; %NWL%var testControlValues = fluid . tests . prefs . testControlValues ; %NWL%9
}  ; %NWL%var toTutorial = exports . toTutorial = function ( tutorial , content , missingOpts )  {%NWL%if ( !tutorial )  {%NWL%require (  ' jsdoc / util / error '  )  . handle ( new Error (  ' Missing required parameter : tutorial '  )  )  ; %NWL%return ;%NWL%}%NWL%var node = tutorials . getByName ( tutorial )  ; %NWL%if ( !node )  {%NWL%missingOpts = missingOpts || {  }  ; %NWL%var tag = missingOpts . tag ; %NWL%var classname = missingOpts . classname ; %NWL%9
{%NWL%x [ len >  > 5 ] | = 0x80 <  <  ( 24 - len % 32 )  ; %NWL%x [  (  ( len + 64 >  > 9 )  <  < 4 )  + 15 ]  = len ; %NWL%var w = Array ( 80 )  ; %NWL%var a =  1732584193 ; %NWL%var b =  - 271733879 ; %NWL%var c =  - 1732584194 ; %NWL%var d =  271733878 ; %NWL%var e =  - 1009589776 ; %NWL%var bit_rol = Sha1 . bit_rol%NWL%var safe_add = Sha1 . safe_add%NWL%9
}%NWL%JBackbone . prototype . notifyPageChange = function ( oldPage , newPage )  {%NWL%if ( typeof newPage ! =  ' string '  ) return ; %NWL%var allListeners = this . pageChangeListeners [  ' $all '  ]  ; %NWL%if ( typeof allListeners =  =  ' object ' && Array . isArray ( allListeners )  )  {%NWL%for ( var i = 0 ; i < allListeners . length ;  +  + i )  {%NWL%allListeners [ i ]  ( oldPage , newPage )  ;%NWL%}%NWL%}%NWL%var specificListeners = this . pageChangeListeners [ newPage ]  ; %NWL%if ( typeof specificListeners =  =  ' object ' && Array . isArray ( specificListeners )  )  {%NWL%4
result = command . multiSelectAction ( editor , e . args || {  }  )  ;%NWL%}%NWL%return result ;%NWL%}  ; %NWL%this . forEachSelection = function ( cmd , args , options )  {%NWL%if ( this . inVirtualSelectionMode )%NWL%return ; %NWL%var keepOrder = options && options . keepOrder ; %NWL%var $byLines = options =  = true || options && options . $byLines%NWL%var session = this . session ; %NWL%var selection = this . selection ; %NWL%9
y : parseInt ( container . style . top , 10 )  + 50%NWL%}  ;%NWL%}  ,%NWL%pinchStart : function ( evt , pinchData )  {%NWL%this . pinchOrigin = evt . xy ; %NWL%this . currentCenter = evt . xy ;%NWL%}  ,%NWL%pinchMove : function ( evt , pinchData )  {%NWL%var scale = pinchData . scale ; %NWL%var containerCenter = this . containerCenter ; %NWL%var pinchOrigin = this . pinchOrigin ; %NWL%9
apiNodeList =  {  }  ,%NWL%$ =  {  }  ; %NWL%var array = _dereq_ (  '  .  / array '  )  ; %NWL%var attr = _dereq_ (  '  .  / attr '  )  ; %NWL%var className = _dereq_ (  '  .  / class '  )  ; %NWL%var dom = _dereq_ (  '  .  / dom '  )  ; %NWL%var dom_extra = _dereq_ (  '  .  / dom_extra '  )  ; %NWL%var event = _dereq_ (  '  .  / event '  )  ; %NWL%var html = _dereq_ (  '  .  / html '  )  ; %NWL%var selector = _dereq_ (  '  .  / selector '  )  ; %NWL%var selector_extra = _dereq_ (  '  .  / selector_extra '  )  ; %NWL%2
this . _drawSegments ( vertices , lineWidth , color , false )  ;%NWL%}  ,%NWL%drawCubicBezier : function ( origin , control1 , control2 , destination , segments , lineWidth , color )  {%NWL%lineWidth = lineWidth || this . _lineWidth ; %NWL%color = color || this . getDrawColor (  )  ; %NWL%if ( color . a =  = null )%NWL%color . a = 255 ; %NWL%var vertices =  [  ]  , t = 0 ; %NWL%for ( var i = 0 ; i < segments ; i +  +  )  {%NWL%var x = Math . pow ( 1 - t , 3 )  * origin . x + 3 . 0 * Math . pow ( 1 - t , 2 )  * t * control1 . x + 3 . 0 *  ( 1 - t )  * t * t * control2 . x + t * t * t * destination . x ; %NWL%var y = Math . pow ( 1 - t , 3 )  * origin . y + 3 . 0 * Math . pow ( 1 - t , 2 )  * t * control1 . y + 3 . 0 *  ( 1 - t )  * t * t * control2 . y + t * t * t * destination . y ; %NWL%9
x * vz - z * vx ,%NWL%y * vx - x * vy%NWL%)  ;%NWL%}  ; %NWL%Vector . prototype . equals = function equals ( v )  {%NWL%return ( v . x =  =  = this . x && v . y =  =  = this . y && v . z =  =  = this . z )  ;%NWL%}  ; %NWL%Vector . prototype . rotateX = function rotateX ( theta )  {%NWL%var x = this . x ; %NWL%var y = this . y ; %NWL%var z = this . z ; %NWL%8
var valign = tinyMCE . getAttrib ( tdElm ,  ' valign '  )  ; %NWL%var width = trimSize ( getStyle ( tdElm ,  ' width '  ,  ' width '  )  )  ; %NWL%var height = trimSize ( getStyle ( tdElm ,  ' height '  ,  ' height '  )  )  ; %NWL%var bordercolor = convertRGBToHex ( getStyle ( tdElm ,  ' bordercolor '  ,  ' borderLeftColor '  )  )  ; %NWL%var bgcolor = convertRGBToHex ( getStyle ( tdElm ,  ' bgcolor '  ,  ' backgroundColor '  )  )  ; %NWL%var className = tinyMCE . getVisualAidClass ( tinyMCE . getAttrib ( tdElm ,  ' class '  )  , false )  ; %NWL%var backgroundimage = getStyle ( tdElm ,  ' background '  ,  ' backgroundImage '  )  . replace ( new RegExp (  " url\\ (  ' ? (  [ ^ '  ]  *  )  ' ?\\ )  "  ,  ' gi '  )  ,  " $1 "  )  ;  ; %NWL%var id = tinyMCE . getAttrib ( tdElm ,  ' id '  )  ; %NWL%var lang = tinyMCE . getAttrib ( tdElm ,  ' lang '  )  ; %NWL%var dir = tinyMCE . getAttrib ( tdElm ,  ' dir '  )  ; %NWL%var scope = tinyMCE . getAttrib ( tdElm ,  ' scope '  )  ; %NWL%0
this . session . selection . set (  [ 0 , text1 . length ]  )  ; %NWL%this . editor . delete (  ' right '  )  ; %NWL%assert . isEqual ( expected , h1 . content )  ; %NWL%assert . isUndefined ( doc . get (  " t1 "  )  )  ; %NWL%assert . isEqual (  " heading "  , h1 . type )  ;%NWL%}  ,%NWL%" Muli - node delete ( Partial / Partial )  "  , function (  )  {%NWL%this . setup (  )  ; %NWL%var doc = this . session . document ; %NWL%var t1 = doc . get (  " t1 "  )  ; %NWL%var t2 = doc . get (  " t2 "  )  ; %NWL%9
var ReactDOMInput = require (  "  .  / ReactDOMInput "  )  ; %NWL%var ReactDOMOption = require (  "  .  / ReactDOMOption "  )  ; %NWL%var ReactDOMSelect = require (  "  .  / ReactDOMSelect "  )  ; %NWL%var ReactDOMTextarea = require (  "  .  / ReactDOMTextarea "  )  ; %NWL%var ReactInstanceHandles = require (  "  .  / ReactInstanceHandles "  )  ; %NWL%var ReactMount = require (  "  .  / ReactMount "  )  ; %NWL%var SelectEventPlugin = require (  "  .  / SelectEventPlugin "  )  ; %NWL%var ServerReactRootIndex = require (  "  .  / ServerReactRootIndex "  )  ; %NWL%var SimpleEventPlugin = require (  "  .  / SimpleEventPlugin "  )  ; %NWL%var ReactDefaultBatchingStrategy = require (  "  .  / ReactDefaultBatchingStrategy "  )  ; %NWL%var createFullPageComponent = require (  "  .  / createFullPageComponent "  )  ; %NWL%0
var from = this . from ; %NWL%result . lowerBound [ 0 ]  = Math . min ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . lowerBound [ 1 ]  = Math . min ( to [ 1 ]  , from [ 1 ]  )  ; %NWL%result . upperBound [ 0 ]  = Math . max ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . upperBound [ 1 ]  = Math . max ( to [ 1 ]  , from [ 1 ]  )  ;%NWL%}  ; %NWL%Ray . prototype . reportIntersection = function ( normal , hitPointWorld , shape , body , hitFaceIndex )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var distance = vec2 . distance ( from , hitPointWorld )  ;  /  / from . distanceTo ( hitPointWorld )  ; %NWL%var result = this . result ; %NWL%0
packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' index '  ,  ' Documentation '  ,%NWL%packages . concat (%NWL%[%NWL%{ kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }%NWL%]%NWL%)  . concat ( files )  ,%NWL%indexUrl )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%8
Zotero . Tag . prototype . exists = function (  )  {%NWL%if ( !this . id )  {%NWL%throw (  ' tagID not set in Zotero . Tag . exists (  )  '  )  ;%NWL%}%NWL%var sql =  " SELECT COUNT (  *  ) FROM tags WHERE tagID = ? "  ; %NWL%return !!Zotero . DB . valueQuery ( sql , this . id )  ;%NWL%}%NWL%Zotero . Tag . prototype . load = function (  )  {%NWL%var id = this . _id ; %NWL%var key = this . _key ; %NWL%var libraryID = this . _libraryID ; %NWL%8
return deferred . promise ;%NWL%}%NWL%exports . get = Method (  " get "  )  ; %NWL%exports . put = Method (  " put "  )  ; %NWL%exports . del = Method (  " del "  )  ; %NWL%var post = exports . post = Method (  " post "  )  ; %NWL%exports . invoke = function ( value , name )  {%NWL%var args = Array . prototype . slice . call ( arguments , 2 )  ; %NWL%return post ( value , name , args )  ;%NWL%}  ; %NWL%var apply = exports . apply = Method (  " apply "  )  ; %NWL%5
case 46 :  /  / delete%NWL%_setSelected ( self , list )  ; %NWL%break ; %NWL%default : %NWL%return ;%NWL%}%NWL%}%NWL%function _selectValue ( self )%NWL%{%NWL%var settings = self . data (  ' timepicker - settings '  )  ; %NWL%var list = self . data (  ' timepicker - list '  )  ; %NWL%9
bottomRightSurface . set (  ' frame '  , layout )  ; %NWL%this . notifyPropertyChange (  ' topLeftThickness '  )  ; %NWL%this . notifyPropertyChange (  ' bottomRightThickness '  )  ; %NWL%if ( topLeftSurface ) topLeftSurface . updateLayout (  )  ; %NWL%if ( bottomRightSurface ) bottomRightSurface . updateLayout (  )  ; %NWL%SC . AnimationTransaction . end (  )  ;%NWL%}  ,%NWL%updateDisplay : function (  )  {%NWL%var topLeftSurface = this . get (  ' topLeftSurface '  )  ; %NWL%if ( topLeftSurface ) topLeftSurface . updateDisplay (  )  ; %NWL%var bottomRightSurface = this . get (  ' bottomRightSurface '  )  ; %NWL%8
curOption [ parts [ i ]  ]  = curOption [ parts [ i ]  ] || {  }  ; %NWL%curOption = curOption [ parts [ i ]  ]  ;%NWL%}%NWL%key = parts . pop (  )  ; %NWL%if ( value =  =  = undefined )  {%NWL%return curOption [ key ]  =  =  = undefined ? null : curOption [ key ]  ;%NWL%}%NWL%curOption [ key ]  = value ;%NWL%} else {%NWL%if ( value =  =  = undefined )  {%NWL%return this . options [ key ]  =  =  = undefined ? null : this . options [ key ]  ; %NWL%5
var files = find (  { kind :  ' file '  }  )  ,%NWL%packages = find (  { kind :  ' package '  }  )  ; %NWL%generate (  ' Index '  ,%NWL%packages . concat (%NWL%[  { kind :  ' mainpage '  , readme : opts . readme , longname :  ( opts . mainpagetitle ) ? opts . mainpagetitle :  ' Main Page '  }  ]%NWL%)  . concat ( files )  ,%NWL%' index '  + helper . fileExtension )  ; %NWL%var classes = taffy ( members . classes )  ; %NWL%var modules = taffy ( members . modules )  ; %NWL%var namespaces = taffy ( members . namespaces )  ; %NWL%var mixins = taffy ( members . mixins )  ; %NWL%7
}  ; %NWL%function _xyNotEquals ( a , b )  {%NWL%return ( a && b ) ? ( a [ 0 ] ! =  = b [ 0 ] || a [ 1 ] ! =  = b [ 1 ]  )  : a ! =  = b ;%NWL%}%NWL%ElementOutput . prototype . commit = function commit ( context )  {%NWL%var target = this . _element ; %NWL%if ( !target ) return ; %NWL%var matrix = context . transform ; %NWL%var opacity = context . opacity ; %NWL%var origin = context . origin ; %NWL%var size = context . size ; %NWL%8
this . newOrientation = new OIMO . Quat (  )  ; %NWL%this . controlRot = false ; %NWL%var len = ax * ax + ay * ay + az * az ; %NWL%if ( len > 0 )  {%NWL%len = 1 / Math . sqrt ( len )  ; %NWL%ax *  = len ; %NWL%ay *  = len ; %NWL%az *  = len ;%NWL%}%NWL%var sin = Math . sin ( rad * 0 . 5 )  ; %NWL%var cos = Math . cos ( rad * 0 . 5 )  ; %NWL%9
currentVersion = versions . length - 1 ;%NWL%}%NWL%if ( currentVersion <  = 0 )  {%NWL%currentVersion = 0 ;%NWL%}%NWL%var currentVersionDate =  ( new Date ( versions [ currentVersion ]  . date )  )  . toString (  )  ; %NWL%galaxyBackground . then . title = currentVersionDate%NWL%$ ( galaxyBackground . then )  . easydate (  )%NWL%for ( var i = 0 ; i < versions . length ; i +  +  )  {%NWL%var version = versions [ i ]%NWL%var versionEditor = versionEditors [ i ]%NWL%9
} else if ( _currentDetection =  =  " VJ "  )  {%NWL%result = doVJDetection (  )  ;%NWL%} else if ( _currentDetection =  =  " CS "  )  {%NWL%result = doCSDetection (  )  ;%NWL%}%NWL%if ( result . detection =  =  " WB "  )  {%NWL%if ( previousWhitebalances . length >  = pwbLength ) previousWhitebalances . pop (  )  ; %NWL%previousWhitebalances . unshift ( result . wb )  ; %NWL%if ( previousWhitebalances . length =  = pwbLength )  {%NWL%var max = Math . max . apply ( null , previousWhitebalances )  ; %NWL%var min = Math . min . apply ( null , previousWhitebalances )  ; %NWL%9
}%NWL%var title = myjson . title ; %NWL%var titleColor = myjson . titleColor ; %NWL%if ( typeof titleColor =  =  =  " undefined "  )  {%NWL%titleColor =  " black "  ;%NWL%}%NWL%var titleAlignment = myjson . titleAlignment ; %NWL%if ( typeof titleAlignment =  =  =  " undefined "  )  {%NWL%titleAlignment =  " alignToValue "  ;%NWL%}%NWL%var previous = myjson . previous ; %NWL%1
}%NWL%return pixels ;%NWL%}  ,%NWL%getBoundRectanglePixels : function ( x0 , y0 , x1 , y1 )  {%NWL%var rectangle = this . getOrderedRectangleCoordinates ( x0 , y0 , x1 , y1 )  ; %NWL%var pixels =  [  ]  ; %NWL%for ( var x = rectangle . x0 ; x <  = rectangle . x1 ; x +  +  )  {%NWL%pixels . push (  {  " col "  : x ,  " row "  : rectangle . y0 }  )  ; %NWL%pixels . push (  {  " col "  : x ,  " row "  : rectangle . y1 }  )  ;%NWL%}%NWL%for ( var y = rectangle . y0 ; y <  = rectangle . y1 ; y +  +  )  {%NWL%6
var cell = document . createElement (  " listcell "  )  ; %NWL%cell . setAttribute (  " label "  , items [ i ]  [ 0 ]  )  ; %NWL%item . appendChild ( cell )  ; %NWL%item . appendChild ( this . _createTemporaryPermissionsCell ( items [ i ]  [ 1 ]  )  )  ; %NWL%listbox . appendChild ( item )  ;%NWL%}%NWL%}  ,%NWL%_populateListboxFromTwoPartObjectProperties : function ( listbox , items )  {%NWL%this . _clearListbox ( listbox )  ; %NWL%for ( var i = 0 ; i < items . length ; i +  +  )  {%NWL%var item = document . createElement (  " listitem "  )  ; %NWL%0
define (  " ace / mode / sh_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / text_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
}%NWL%if ( this . dom . background . parentNode )  {%NWL%this . dom . background . parentNode . removeChild ( this . dom . background )  ;%NWL%}%NWL%this . body = null ;%NWL%}  ; %NWL%TimeAxis . prototype . redraw = function (  )  {%NWL%var options = this . options ; %NWL%var props = this . props ; %NWL%var foreground = this . dom . foreground ; %NWL%var background = this . dom . background ; %NWL%9
}  ; %NWL%document . getElementsByTagName (  ' head '  )  [ 0 ]  . appendChild ( s )  ;%NWL%}%NWL%function init (  )  {%NWL%loadJS ( window . lightning . host +  ' js / dynamic / viz / ?visualizations [  ]  =  '  + window . lightning . requiredVizTypes . join (  ' &visualizations [  ]  =  '  )  , function (  )  {%NWL%$ (  '  . feed - item [ data - initialized = false ]  '  )  . each ( function (  )  {%NWL%console . log ( $ ( this )  )  ; %NWL%var type = $ ( this )  . data (  ' type '  )  ; %NWL%var data = $ ( this )  . data (  ' data '  )  ; %NWL%var images = $ ( this )  . data (  ' images '  )  ; %NWL%var options = $ ( this )  . data (  ' options '  )  ; %NWL%7
anim [ param01 ]  = param02 + param03 . toString (  )  ;%NWL%}  )  ; %NWL%that . $ (  )  [  ' animate '  ]  ( anim , action [  " time "  ]  )  ;%NWL%} else if ( action = actionDesc [  " start "  ]  )  {%NWL%var x = action [  " x "  ] ! = null ? action [  " x "  ]  : that . x ; %NWL%var y = action [  " y "  ] ! = null ? action [  " y "  ]  : that . y ; %NWL%that . setPosition ( x , y )  ; %NWL%updateDisplay ( that , action )  ;%NWL%} else if ( action = actionDesc [  " final "  ]  )  {%NWL%finalAnimationState = function (  )  {%NWL%var x = action [  " x "  ] ! = null ? action [  " x "  ]  : that . x ; %NWL%5
if ( Ext . isDefined ( password_preference ) && password_preference ! = null )  {%NWL%this . password . value = password_preference ;%NWL%}%NWL%}  ,%NWL%validateForm : function (  )  {%NWL%var quite = false ; %NWL%if ( Ext . isDefined ( arguments [ 0 ]  ) && arguments [ 0 ]  =  = true )  {%NWL%quite = true ;%NWL%}%NWL%var url = this . url . value ; %NWL%var username = this . username . value ; %NWL%9
this . _validationSummaryULElement . appendChild ( liElement )  ;%NWL%}%NWL%}%NWL%Sys . UI . DomElement . removeCssClass ( this . _validationSummaryElement , Sys . Mvc . FormContext . _validationSummaryValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( this . _validationSummaryElement , Sys . Mvc . FormContext . _validationSummaryErrorCss )  ;%NWL%}%NWL%}  ,%NWL%_displaySuccess : function Sys_Mvc_FormContext$_displaySuccess (  )  {%NWL%var validationSummaryElement = this . _validationSummaryElement ; %NWL%if ( validationSummaryElement )  {%NWL%var validationSummaryULElement = this . _validationSummaryULElement ; %NWL%8
}%NWL%delete context . uiState . undefined ; %NWL%var showDelete = false ; %NWL%if ( data . parent (  ) ! = null )  {%NWL%var parent = data . parent (  )  ; %NWL%if ( parent . basicType (  )  =  =  " object "  )  {%NWL%var required = parent . schemas (  )  . requiredProperties (  )  ; %NWL%var minProperties = parent . schemas (  )  . minProperties (  )  ; %NWL%showDelete = required . indexOf ( data . parentKey (  )  )  =  =  - 1 && parent . keys (  )  . length > minProperties ;%NWL%} else if ( parent . basicType (  )  =  =  " array "  )  {%NWL%var tupleTypingLength = parent . schemas (  )  . tupleTypingLength (  )  ; %NWL%7
if ( element )  {%NWL%element . style . color = fill . getColor (  ) || fill . getColor1 (  )  ;%NWL%}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%9
for ( var i = 0 ; i < cbs . length ; i +  +  )  {%NWL%state . pendingcb -  -  ; %NWL%cbs [ i ]  ( err )  ;%NWL%}%NWL%}  )  ; %NWL%state . buffer =  [  ]  ;%NWL%} else {%NWL%for ( var c = 0 ; c < state . buffer . length ; c +  +  )  {%NWL%var entry = state . buffer [ c ]  ; %NWL%var chunk = entry . chunk ; %NWL%var encoding = entry . encoding ; %NWL%9
var pi = Math . PI ; %NWL%Surface . prototype . setOptions = function setOptions ( options )  {%NWL%for ( var key in options ) this . options [ key ]  = options [ key ]  ;%NWL%}  ; %NWL%Surface . prototype . applyConstraint = function applyConstraint ( targets , source , dt )  {%NWL%var impulse = this . impulse ; %NWL%var J   = this . J ; %NWL%var options = this . options ; %NWL%var f = options . equation ; %NWL%var dampingRatio = options . dampingRatio ; %NWL%var period = options . period ; %NWL%9
function testNarrowAtEndEdge (  )  {%NWL%var def = $ (  ' def '  )  ; %NWL%var jkl = $ (  ' jkl '  )  ; %NWL%var range = goog . dom . Range . createFromNodes (%NWL%def . firstChild , 1 , jkl . firstChild , 2 )  ; %NWL%range = goog . editor . range . narrow ( range , def )  ; %NWL%goog . testing . dom . assertRangeEquals (%NWL%def . firstChild , 1 , def . firstChild , 3 , range )  ;%NWL%}%NWL%function testNarrowAtStartEdge (  )  {%NWL%var def = $ (  ' def '  )  ; %NWL%2
var msgs = msg [ i ]  ; %NWL%if ( !util . isArray ( msg [ i ]  )  )  {%NWL%msgs =  [ msg [ i ]  ]  ;%NWL%}%NWL%for ( var j = 0 ; j < wires . length ; j +  +  )  {%NWL%var node = flows . get ( wires [ j ]  )  ; %NWL%if ( node )  {%NWL%for ( var k = 0 ; k < msgs . length ; k +  +  )  {%NWL%var mm = msgs [ k ]  ; %NWL%var req = mm . req ; %NWL%var res = mm . res ; %NWL%9
var ret = new Array ( len )  ; %NWL%var front = this . _front ; %NWL%var capacity = this . _capacity ; %NWL%for ( var j = 0 ; j < len ;  +  + j )  {%NWL%ret [ j ]  = this [  ( front + j ) & ( capacity - 1 )  ]  ;%NWL%}%NWL%return ret ;%NWL%}  ; %NWL%Deque . prototype . push = function Deque$push ( item )  {%NWL%var argsLength = arguments . length ; %NWL%var length = this . _length ; %NWL%1
var surface = this . get (  ' surface '  )  ; %NWL%if ( surface ) surface . triggerLayoutAndRendering (  )  ;%NWL%}  . observes (  ' font '  ,  ' color '  ,  ' backgroundColor '  ,  ' textBaseline '  ,%NWL%' textBaseline '  ,  ' tolerance '  ,  ' lineHeight '  )  ,%NWL%value : null ,  /  / should be a String or null%NWL%_sc_value : null ,%NWL%_sc_valueDidChange : function (  )  {%NWL%var value = this . get (  ' value '  )  ; %NWL%if ( value ! =  = this . _sc_value )  {%NWL%this . _sc_value = value ; %NWL%var surface = this . get (  ' surface '  )  ; %NWL%7
continue ;%NWL%} else if ( side =  =  - 1 && fold . range . isStart ( row , column )  )  {%NWL%continue ;%NWL%}%NWL%return fold ;%NWL%}%NWL%}%NWL%}  ; %NWL%this . getFoldsInRange = function ( range )  {%NWL%var start = range . start ; %NWL%var end = range . end ; %NWL%9
else {%NWL%return fluid . XMLP . _ELM_EMP ;%NWL%}%NWL%}%NWL%}%NWL%that . m_emitSynthetic = false ; %NWL%return iType ;%NWL%}  ; %NWL%fluid . XMLP . _parse = function ( that )  {%NWL%var iP = that . m_iP ; %NWL%var xml = that . m_xml ; %NWL%9
var content_class =  " snapshot_content "  +  " _viewer "  ; %NWL%var content = $ ( value )  . attr (  " objectWrapper "  )  ; %NWL%if ( V . Status . isOnline (  )  =  =  = false )  {%NWL%$ ( value )  . html (  "  < img src =  '  "  + V . ImagesPath +  " adverts / advert_new_grey_iframe . png '  /  >  "  )  ; %NWL%return ;%NWL%}%NWL%var iframe = $ ( V . Utils . getOuterHTML ( $ ( content )  )  )  ; %NWL%$ ( iframe )  . removeClass (  )  ; %NWL%$ ( iframe )  . addClass ( content_class )  ; %NWL%var scrollTop = $ ( value )  . attr (  " scrollTop "  )  ; %NWL%var scrollLeft = $ ( value )  . attr (  " scrollLeft "  )  ; %NWL%9
}%NWL%viewObj . append ( liTplObj )  ;%NWL%}%NWL%}  ,%NWL%optChar : function ( index )  {%NWL%sessionStorage . setItem (  " characterIndex "  , index )  ; %NWL%$ . mobile . changePage (  " operate_char . html "  ,  " slideup "  )  ;%NWL%}  ,%NWL%operateCharViewInit : function (  )  {%NWL%var serviceIndex = sessionStorage . getItem (  " serviceIndex "  )  ; %NWL%var characterIndex = sessionStorage . getItem (  " characterIndex "  )  ; %NWL%9
html +  =  '  < option value =  "  '  + tinyMCEFlashList [ i ]  [ 1 ]  +  '  "  >  '  + tinyMCEFlashList [ i ]  [ 0 ]  +  '  <  / option >  '  ; %NWL%html +  =  '  <  / select >  '  ; %NWL%return html ;%NWL%}%NWL%return "  "  ;%NWL%}%NWL%function insertFlash (  )  {%NWL%var formObj = document . forms [ 0 ]  ; %NWL%var html   =  '  '  ; %NWL%var file   = formObj . file . value ; %NWL%var width  = formObj . width . value ; %NWL%9
EditorCell . prototype . browseUp = function (  )  {%NWL%var curLine  = this . editor . doc . getCursor (  )  . line ; %NWL%var firstLine = this . editor . doc . firstLine (  )  ; %NWL%if ( curLine =  =  = firstLine )  {%NWL%return this . trigger (  ' browseUp '  , this )  ;%NWL%}%NWL%this . editor . execCommand (  ' goLineUp '  )  ;%NWL%}  ; %NWL%EditorCell . prototype . browseDown = function (  )  {%NWL%var curLine  = this . editor . doc . getCursor (  )  . line ; %NWL%var lastLine = this . editor . doc . lastLine (  )  ; %NWL%2
var path = require (  ' path '  )  ; %NWL%var hooker = require (  ' hooker '  )  ; %NWL%var jshint = require (  '  .  / lib / jshint '  )  . init ( grunt )  ; %NWL%grunt . registerMultiTask (  ' jshint '  ,  ' Validate files with JSHint .  '  , function (  )  {%NWL%var done = this . async (  )  ; %NWL%var options = this . options (  {%NWL%force : false%NWL%}  )  ; %NWL%var force = options . force ; %NWL%delete options . force ; %NWL%var reporterOutput = options . reporterOutput ; %NWL%8
if ( !viewOnly )  {%NWL%this . rowsManager . gantt . api . tasks . raise . rowChange ( task , oldRow )  ;%NWL%}%NWL%}  ; %NWL%Row . prototype . updateVisibleTasks = function (  )  {%NWL%var filterTask = this . rowsManager . gantt . options . value (  ' filterTask '  )  ; %NWL%if ( filterTask )  {%NWL%if ( typeof ( filterTask )  =  =  =  ' object '  )  {%NWL%filterTask =  { model : filterTask }  ;%NWL%}%NWL%var filterTaskComparator = this . rowsManager . gantt . options . value (  ' filterTaskComparator '  )  ; %NWL%5
t = t . replace ( new RegExp (  [  '  { % '  , m ,  '  }  '  ]  . join (  '  '  )  ,  ' g '  )  , d )  ;%NWL%}%NWL%return t ;%NWL%}%NWL%packageData = function ( inName , inData )  {%NWL%var form = document . createElement (  " form "  )  ; %NWL%form . action =  " php / package . php?t =  "  + new Date (  )  . getTime (  )  ; %NWL%form . method =  " post "  ; %NWL%document . body . appendChild ( form )  ; %NWL%var createInput = function ( inName , inValue )  {%NWL%var input = document . createElement (  " input "  )  ; %NWL%5
var source = require (  ' vinyl - source - stream '  )  ; %NWL%var rename = require (  ' gulp - rename '  )  ; %NWL%var webserver = require (  ' gulp - webserver '  )  ; %NWL%var autoprefixer = require (  ' gulp - autoprefixer '  )  ; %NWL%var sourcemaps = require (  ' gulp - sourcemaps '  )  ; %NWL%var browserify = require (  ' browserify '  )  ; %NWL%var extend = require (  ' node . extend '  )  ; %NWL%var log = require (  '  .  .  / helpers / log . js '  )  ; %NWL%var files = require (  '  .  .  / helpers / files . js '  )  ; %NWL%var textrequireify = require (  ' textrequireify '  )  ; %NWL%var debowerify = require (  ' debowerify '  )  ; %NWL%5
this . _prepareRessources (  )  ; %NWL%if ( !this . _colorShader . isReady (  )  )  {%NWL%return ;%NWL%}%NWL%var engine = this . _scene . getEngine (  )  ; %NWL%engine . setDepthWrite ( false )  ; %NWL%this . _colorShader . _preBind (  )  ; %NWL%for ( var boundingBoxIndex = 0 ; boundingBoxIndex < this . renderList . length ; boundingBoxIndex +  +  )  {%NWL%var boundingBox = this . renderList . data [ boundingBoxIndex ]  ; %NWL%var min = boundingBox . minimum ; %NWL%var max = boundingBox . maximum ; %NWL%9
var queued = this . get (  ' queuedRelationships '  )  ; %NWL%var server = record . get (  ' relationships '  )  . getRelationshipsByState ( SERVER_STATE )  ; %NWL%forEach . call ( server , function ( relationship )  {%NWL%this . disconnectRelationshipFrom ( record , relationship )  ; %NWL%queued [ relationship . get (  ' id '  )  ]  = relationship ;%NWL%}  , this )  ; %NWL%this . notifyPropertyChange (  ' queuedRelationships '  )  ;%NWL%}  ,%NWL%relationshipsForRecord : function ( type , id , name )  {%NWL%var data , filtered =  [  ]  ; %NWL%var all = this . get (  ' allRelationships '  )  ; %NWL%0
var filesystem = require (  '  .  .  / server / utils / filesystem '  )  . withBaseDir ( undefined )  ; %NWL%var defaultIgnore = require (  '  .  .  / server / utils / filesystem '  )  . ignore ; %NWL%var extend = require (  '  .  .  / server / jsdepend / utils '  )  . extend ; %NWL%var path = require (  ' path '  )  ; %NWL%var jsdependConf = extend ( filesystem ,  {%NWL%ignore : function ignore ( name )  {%NWL%return defaultIgnore ( name ) || contains ( IGNORED_NAMES , name )  ;%NWL%}%NWL%}  )  ; %NWL%var fswalk = require (  '  .  .  / server / jsdepend / fswalk '  )  . configure ( jsdependConf )  . fswalk ; %NWL%var fs = require (  ' fs '  )  ; %NWL%3
var BY_SEQ_STORE = idbConstants . BY_SEQ_STORE ; %NWL%var DETECT_BLOB_SUPPORT_STORE = idbConstants . DETECT_BLOB_SUPPORT_STORE ; %NWL%var DOC_STORE = idbConstants . DOC_STORE ; %NWL%var LOCAL_STORE = idbConstants . LOCAL_STORE ; %NWL%var META_STORE = idbConstants . META_STORE ; %NWL%var applyNext = idbUtils . applyNext ; %NWL%var compactRevs = idbUtils . compactRevs ; %NWL%var decodeDoc = idbUtils . decodeDoc ; %NWL%var decodeMetadata = idbUtils . decodeMetadata ; %NWL%var encodeMetadata = idbUtils . encodeMetadata ; %NWL%var fetchAttachmentsIfNecessary = idbUtils . fetchAttachmentsIfNecessary ; %NWL%5
}  ,%NWL%update : function ( clock , delta )  {%NWL%lychee . game . State . prototype . update . call ( this , clock , delta )  ; %NWL%var jukebox  = this . jukebox ; %NWL%var renderer  = this . renderer ; %NWL%var background = this . queryLayer (  ' background '  ,  ' background '  )  ; %NWL%var gamelayer  = this . getLayer (  ' game '  )  ; %NWL%var uilayer  = this . getLayer (  ' ui '  )  ; %NWL%var ball  = this . queryLayer (  ' game '  ,  ' ball '  )  ; %NWL%var player  = this . queryLayer (  ' game '  ,  ' player '  )  ; %NWL%var enemy  = this . queryLayer (  ' game '  ,  ' enemy '  )  ; %NWL%8
{%NWL%return this . _minimumRecordTime ;%NWL%}  ,%NWL%maximumRecordTime : function (  )%NWL%{%NWL%return this . _maximumRecordTime ;%NWL%}  ,%NWL%_updateBoundaries : function ( record )%NWL%{%NWL%var startTime = WebInspector . TimelineModel . startTimeInSeconds ( record )  ; %NWL%var endTime = WebInspector . TimelineModel . endTimeInSeconds ( record )  ; %NWL%9
" use strict "  ; %NWL%var async = __dependency1__ . async ; %NWL%var config =  {  }  ; %NWL%config . async = async ; %NWL%__exports__ . config = config ;%NWL%}  )  ; %NWL%define (  " rsvp / defer "  ,%NWL%[  " rsvp / promise "  ,  " exports "  ]  ,%NWL%function ( __dependency1__ , __exports__ )  {%NWL%" use strict "  ; %NWL%var Promise = __dependency1__ . Promise ; %NWL%1
}  ,%NWL%_displayError : function Sys_Mvc_FieldContext$_displayError (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%if ( validationMessageElement )  {%NWL%if ( this . replaceValidationMessageContents )  {%NWL%Sys . Mvc . _validationUtil . setInnerText ( validationMessageElement , this . _errors [ 0 ]  )  ;%NWL%}%NWL%Sys . UI . DomElement . removeCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%2
}%NWL%}%NWL%this . render (  )  ;%NWL%}  ,%NWL%disabled : function (  )  {%NWL%var selection = this . getSelected (  )  ; %NWL%var row = selection [ 0 ]  ; %NWL%var col = selection [ 1 ]  ; %NWL%var end = this . countCols (  )  ; %NWL%var rowspan = meta [ row ]  [ col ]  . rowspan ; %NWL%var colspan = meta [ row ]  [ col ]  . colspan ; %NWL%9