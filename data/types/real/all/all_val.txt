, mkdirp = require (  ' mkdirp '  )%NWL%, join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var debug = options . debug ; %NWL%var src = options . src ; %NWL%8
if ( item . selected )  {%NWL%result . push ( item . value )  ;%NWL%}%NWL%}  )  ; %NWL%return result ;%NWL%}%NWL%}%NWL%formValues . forEach ( function ( item )  {%NWL%var value = item . value ; %NWL%if ( value ! =  =  '  '  )  {%NWL%var name = item . name ; %NWL%8
"  }  "  ,%NWL%" vec4 cbase = texture2D ( texture , oTC0 . xy )  ;  "  ,%NWL%" if ( aoframecount =  = 1 . 0 )  "  +%NWL%"  { gl_FragColor = vec4 ( 1 . 0 , 1 . 0 , 1 . 0 , 1 . 0 )  ; return ;  }  "  +%NWL%" float base =  ( cbase . r )  *  (  ( aoframecount - 1 . 0 )  / aoframecount )  ;  ;  "  ,%NWL%" float h = unpackFloatFromVec4i ( texture2D ( heightmap , oTC0 . xy )  )  * 1 . 0 ;  "  ,%NWL%" vec4 vert = vec4 ( oTC0 . x , h , oTC0 . y , 1 . 0 )  ;  "  ,%NWL%" vec3 leftvert = vec3 ( oTC0 . x +  ( 1 . 0 / 512 . 0 )  , unpackFloatFromVec4i ( texture2D ( heightmap , oTC0 + vec2 ( 1 . 0 / 512 . 0 , 0 )  )  )  * 1 . 0 , oTC0 . y )  ;  "  ,%NWL%" vec3 frontvert = vec3 ( oTC0 . x , unpackFloatFromVec4i ( texture2D ( heightmap , oTC0 + vec2 ( 0 , 1 . 0 / 512 . 0 )  )  )  * 1 . 0 , oTC0 . y +  ( 1 . 0 / 512 . 0 )  )  ;  "  ,%NWL%" vec3 left = normalize ( leftvert - vert . xyz )  ;  "  ,%NWL%" vec3 front = normalize ( frontvert - vert . xyz )  ;  "  ,%NWL%9
" float unpackFloatFromVec4i ( const vec4 value )  "  ,%NWL%"  {  "  ,%NWL%"  const vec4 bitSh = vec4 ( 1 . 0 /  ( 256 . 0 * 256 . 0 * 256 . 0 )  , 1 . 0 /  ( 256 . 0 * 256 . 0 )  , 1 . 0 / 256 . 0 , 1 . 0 )  ;  "  ,%NWL%"  return ( dot ( value , bitSh )  )  ;  "  ,  "  }  "  ,%NWL%" void main (  )  {  "  ,%NWL%" float z =  ( unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 )  )  )  * 100 . 0 ;  "  ,%NWL%" vec4 vert = vec4 ( Vertex . x , Vertex . y + z , Vertex . z , 1 . 0 )  ;  "  ,%NWL%" vec3 leftvert = vec3 ( Vertex . x + 1 . 0 *  ( 200 . 0 / 512 . 0 )  , unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 + vec2 ( 1 . 0 / 512 . 0 , 0 )  )  )  * 100 . 0 + Vertex . y , Vertex . z )  ;  "  ,%NWL%" vec3 frontvert = vec3 ( Vertex . x , unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 + vec2 ( 0 ,  - 1 . 0 / 512 . 0 )  )  )  * 100 . 0 + Vertex . y , Vertex . z + 1 . 0 *  ( 200 . 0 / 512 . 0 )  )  ;  "  ,%NWL%" vec3 left = normalize ( leftvert - vert . xyz )  ;  "  ,%NWL%" vec3 front = normalize ( frontvert - vert . xyz )  ;  "  ,%NWL%9
"  {  "  ,%NWL%"  const vec4 bitSh = vec4 ( 1 . 0 /  ( 256 . 0 * 256 . 0 * 256 . 0 )  , 1 . 0 /  ( 256 . 0 * 256 . 0 )  , 1 . 0 / 256 . 0 , 1 . 0 )  ;  "  ,%NWL%"  return ( dot ( value , bitSh )  )  ;  "  ,  "  }  "  ,%NWL%" void main (  )  {  "  ,%NWL%" float z =  ( unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 )  )  )  * 100 . 0 ;  "  ,%NWL%" vec4 vert = vec4 ( Vertex . x , Vertex . y + z , Vertex . z , 1 . 0 )  ;  "  ,%NWL%" oTC0 = TexCoord0 ;  "  ,%NWL%" vec3 leftvert = vec3 ( Vertex . x + 1 . 0 *  ( 200 . 0 / 512 . 0 )  , unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 + vec2 ( 1 . 0 / 512 . 0 , 0 )  )  )  * 100 . 0 + Vertex . y , Vertex . z )  ;  "  ,%NWL%" vec3 frontvert = vec3 ( Vertex . x , unpackFloatFromVec4i ( texture2D ( heightmap , TexCoord0 + vec2 ( 0 ,  - 1 . 0 / 512 . 0 )  )  )  * 100 . 0 + Vertex . y , Vertex . z + 1 . 0 *  ( 200 . 0 / 512 . 0 )  )  ;  "  ,%NWL%" vec3 left = normalize ( leftvert - vert . xyz )  ;  "  ,%NWL%" vec3 front = normalize ( frontvert - vert . xyz )  ;  "  ,%NWL%9
this . dy = dy ; %NWL%if ( Math . abs ( dx )  + Math . abs ( dy )  > 0 . 0 )  {%NWL%this . time =  ( new Date (  )  )  . getTime (  )  ;%NWL%}%NWL%}  ,%NWL%updateWithDelay : function (  )  {%NWL%var f = 1 . 0 ; %NWL%var dt ; %NWL%var max = 2 . 0 ; %NWL%var dx = this . dx ; %NWL%var dy = this . dy ; %NWL%9
this . targetDistance = newTarget ; %NWL%this . timeMotion =  ( new Date (  )  )  . getTime (  )  ;%NWL%}  ,%NWL%pushButton : function (  )  {%NWL%this . dx = this . dy = 0 ; %NWL%this . buttonup = false ;%NWL%}  ,%NWL%getInverseMatrix : function (  )  {%NWL%this . updateWithDelay (  )  ; %NWL%var target = this . target ; %NWL%var distance = this . distance ; %NWL%9
state :  ' Charging '%NWL%}  ,  {%NWL%value : 3 ,%NWL%state :  ' 40% '%NWL%}  ]%NWL%}  ]%NWL%}  ; %NWL%var analogs = config . analogSticks ; %NWL%var buttons = config . buttons ; %NWL%var motions = config . motionInputs ; %NWL%var status = config . status ; %NWL%8
}  ,%NWL%stop : function ( album )  {%NWL%var playingSource = R . player . playingSource (  )  ; %NWL%if ( playingSource && playingSource . get (  " key "  )  =  = album . key%NWL%&& R . player . playState (  )  =  = 1 )  {%NWL%this . gracePeriod = 0 ; %NWL%R . player . togglePause (  )  ;%NWL%}%NWL%}  ,%NWL%isPlaying : function (  )  {%NWL%var playState = R . player . playState (  )  ; %NWL%2
this . open (  )  ;%NWL%}%NWL%if ( this . element . is (  '  : disabled '  )  )  {%NWL%this . disable (  )  ;%NWL%}%NWL%}  ,%NWL%refresh : function ( init )  {%NWL%var el = this . element ; %NWL%var o = this . options ; %NWL%var menu = this . menu ; %NWL%var checkboxContainer = this . checkboxContainer ; %NWL%9
var o = this . options ; %NWL%var menu = this . menu ; %NWL%var checkboxContainer = this . checkboxContainer ; %NWL%var optgroups =  [  ]  ; %NWL%var html =  "  "  ; %NWL%var id = el . attr (  ' id '  ) || multiselectID +  +  ;  /  / unique ID for the label & option tags%NWL%el . find (  ' option '  )  . each ( function ( i )  {%NWL%var $this = $ ( this )  ; %NWL%var parent = this . parentNode ; %NWL%var description = this . innerHTML ; %NWL%var title = this . title ; %NWL%1
var menu = this . menu ; %NWL%var checkboxContainer = this . checkboxContainer ; %NWL%var optgroups =  [  ]  ; %NWL%var html =  "  "  ; %NWL%var id = el . attr (  ' id '  ) || multiselectID +  +  ;  /  / unique ID for the label & option tags%NWL%el . find (  ' option '  )  . each ( function ( i )  {%NWL%var $this = $ ( this )  ; %NWL%var parent = this . parentNode ; %NWL%var description = this . innerHTML ; %NWL%var title = this . title ; %NWL%var value = this . value ; %NWL%0
. attr (  {  ' disabled '  : flag ,  ' arial - disabled '  : flag }  )%NWL%. parent (  )  [ flag ? ' addClass '  :  ' removeClass '  ]  (  ' ui - state - disabled '  )  ; %NWL%this . element . attr (  {%NWL%' disabled '  : flag ,%NWL%' aria - disabled '  : flag%NWL%}  )  ;%NWL%}  ,%NWL%open : function ( e )  {%NWL%var self = this ; %NWL%var button = this . button ; %NWL%var menu = this . menu ; %NWL%9
. parent (  )  [ flag ? ' addClass '  :  ' removeClass '  ]  (  ' ui - state - disabled '  )  ; %NWL%this . element . attr (  {%NWL%' disabled '  : flag ,%NWL%' aria - disabled '  : flag%NWL%}  )  ;%NWL%}  ,%NWL%open : function ( e )  {%NWL%var self = this ; %NWL%var button = this . button ; %NWL%var menu = this . menu ; %NWL%var speed = this . speed ; %NWL%8
define (  [  " exports "  ,  " module "  ,  " react "  ,  " classnames "  ,  "  .  / BootstrapMixin "  ,  "  .  / DropdownStateMixin "  ,  "  .  / Button "  ,  "  .  / ButtonGroup "  ,  "  .  / DropdownMenu "  ]  , function ( exports , module , _react , _classnames , _BootstrapMixin , _DropdownStateMixin , _Button , _ButtonGroup , _DropdownMenu )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var _extends = Object . assign || function ( target )  { for ( var i = 1 ; i < arguments . length ; i +  +  )  { var source = arguments [ i ]  ; for ( var key in source )  { if ( Object . prototype . hasOwnProperty . call ( source , key )  )  { target [ key ]  = source [ key ]  ;  }  }  } return target ;  }  ; %NWL%var React = _interopRequire ( _react )  ; %NWL%var classSet = _interopRequire ( _classnames )  ; %NWL%var BootstrapMixin = _interopRequire ( _BootstrapMixin )  ; %NWL%var DropdownStateMixin = _interopRequire ( _DropdownStateMixin )  ; %NWL%var Button = _interopRequire ( _Button )  ; %NWL%var ButtonGroup = _interopRequire ( _ButtonGroup )  ; %NWL%var DropdownMenu = _interopRequire ( _DropdownMenu )  ; %NWL%6
path . move ( or + or * ss , or - or * sc )  /  / move to starting point%NWL%. arc ( or * ds , or *  - dc , or , or , large )  /  / outer arc%NWL%. line ( dr * es , dr *  - ec )  ;  /  / width of arc or wedge%NWL%if ( ir )  {%NWL%path . counterArc ( ir *  - ds , ir * dc , ir , ir , large )  ;  /  / inner arc%NWL%}%NWL%return path ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var startAngle = this . props . startAngle ; %NWL%var endAngle = this . props . endAngle ; %NWL%9
}%NWL%return path ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var startAngle = this . props . startAngle ; %NWL%var endAngle = this . props . endAngle ; %NWL%if ( startAngle - endAngle =  =  = 0 )  {%NWL%return ;%NWL%}%NWL%var innerRadius = this . props . innerRadius || 0 ; %NWL%var outerRadius = this . props . outerRadius ; %NWL%4
var util = require (  ' util '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var Prana = require (  ' prana '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var multer = require (  ' multer '  )  ; %NWL%var methodOverride = require (  ' method - override '  )  ; %NWL%var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var async = require (  ' async '  )  ; %NWL%var lodash = require (  ' lodash '  )  ; %NWL%0
this . timeLastSecond = this . time ; %NWL%this . frames = 0 ; %NWL%return this . fps +  "  ( min :  "  + this . fpsMin +  "  , max :  "  + this . fpsMax +  "  )  "  ;%NWL%}  ; %NWL%var that = this ; %NWL%setInterval ( function (  )  { that . update (  )  ;  }  , 1000 / options . fps )  ;%NWL%}  ,%NWL%timing : function ( opts )  {%NWL%window . performance = window . performance || window . mozPerformance || window . msPerformance || window . webkitPerformance || {  }  ; %NWL%var timing = performance . timing || {  }  ; %NWL%var navigation = performance . navigation || {  }  ; %NWL%9
onVisible : function (  )  {  }  ,%NWL%onHidden : function (  )  {  }%NWL%}%NWL%var options = nitch . util . apply ( defaults , opts )  ; %NWL%document . addEventListener ( visibilityChange , visibilityCallback , false )  ;%NWL%}%NWL%}  ; %NWL%nitch . util =  {%NWL%apply : function ( destination , source )  {%NWL%var destination = destination || {  }  ; %NWL%var source = source || {  }  ; %NWL%9
else {%NWL%this . HotkeyState . className =  ' state '  ; %NWL%this . HotkeyState . textContent =  ' Disable '  ; %NWL%this . setDisplay (  ' inline '  )  ;%NWL%}%NWL%}%NWL%}%NWL%function DropDown ( selectId , dropmenuId , options )  {%NWL%var visbility =  [  " hidden "  ,  " visible "  ]  ; %NWL%var dropmenu = document . getElementById ( dropmenuId )  ; %NWL%var select = document . getElementById ( selectId )  ; %NWL%9
var SyncPanel = require (  ' sync / sync - panel '  )  ; %NWL%var AppTemplate = require (  ' templates '  )  ; %NWL%var init = function init ( demo )  {%NWL%var reveal = document . querySelector (  ' #scene . reveal '  )  ; %NWL%reveal . innerHTML = AppTemplate [ demo ]  (  )  ; %NWL%var audio = document . querySelector (  ' #bc - audio code '  )  ; %NWL%audio . textContent = AppTemplate [ demo +  '  - audio '  ]  (  )  ; %NWL%SlideManager . initSlides (  )  ; %NWL%SyncPanel . setAudioSource (  ' demo / audio /  '  + demo . substr ( 5 )  +  '  . ogg '  )  ;%NWL%}  ; %NWL%var initDemo = function initDemo ( demo )  {%NWL%2
events . push ( audioFragmetn )  ;%NWL%}  ; %NWL%var clear = function clear (  )  {%NWL%events =  [  ]  ;%NWL%}  ; %NWL%var update = function update ( time )  {%NWL%events . forEach ( function ( event )  {%NWL%event . play ( time )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var stop = function stop (  )  {%NWL%2
var update = function update ( time )  {%NWL%events . forEach ( function ( event )  {%NWL%event . play ( time )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var stop = function stop (  )  {%NWL%events . forEach ( function ( event )  {%NWL%event . pause (  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%var init = function init (  )  {%NWL%5
function setState (  )  {%NWL%var indices = Reveal . getIndices (  )  ; %NWL%var slide = state_map [  [ indices . h , indices . v , indices . f ]  ]  ; %NWL%slide . activate (  )  ;%NWL%}%NWL%var init = function init (  )  {%NWL%Reveal . addEventListener (  " slidechanged "  , setState )  ; %NWL%Reveal . addEventListener (  " fragmentshown "  , setState )  ; %NWL%Reveal . addEventListener (  " fragmenthidden "  , setState )  ;%NWL%}  ; %NWL%var stop = function stop (  )  {%NWL%5
$scope . $parent . showSolutions = !$scope . $parent . showSolutions ;%NWL%}%NWL%if ( text ! =  =  '  '  )  {%NWL%$scope . checked = !$scope . checked ; %NWL%SearchResultsService . diagnose ( text , 5 )  ;%NWL%}%NWL%}  )  ;   /  / this . tt_isOpen = false ;%NWL%}  ; %NWL%$scope . refreshTab = function ( index )  {%NWL%var sessionId = $location . search (  )  . sessionId ; %NWL%var userId = $location . search (  )  . userId ; %NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
}  ;%NWL%}  )  . call ( TextHighlightRules . prototype )  ; %NWL%oop . inherits ( XmlHighlightRules , TextHighlightRules )  ; %NWL%exports . XmlHighlightRules = XmlHighlightRules ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / xml "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
}%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%oop . inherits ( XmlBehaviour , Behaviour )  ; %NWL%exports . XmlBehaviour = XmlBehaviour ;%NWL%}  )  ; %NWL%define (  " ace / mode / folding / xml "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / range "  ,  " ace / mode / folding / fold_mode "  ,  " ace / token_iterator "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%9
stack . push ( tag )  ;%NWL%}%NWL%}%NWL%}%NWL%}  ;%NWL%}  )  . call ( FoldMode . prototype )  ;%NWL%}  )  ; %NWL%define (  " ace / mode / xml "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / text "  ,  " ace / mode / xml_highlight_rules "  ,  " ace / mode / behaviour / xml "  ,  " ace / mode / folding / xml "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
name : name%NWL%}  ; %NWL%exports . themesByName [ name ]  = theme ; %NWL%return theme ;%NWL%}  )  ;%NWL%}  )  ; %NWL%ace . define (  " ace / ext / menu_tools / add_editor_menu_options "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / ext / modelist "  ,  " ace / ext / themelist "  ]  , function ( require , exports , module )  {%NWL%' use strict '  ; %NWL%module . exports . addEditorMenuOptions = function addEditorMenuOptions ( editor )  {%NWL%var modelist = require (  '  .  .  / modelist '  )  ; %NWL%var themelist = require (  '  .  .  / themelist '  )  ; %NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%2
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
else%NWL%return "  "  ;%NWL%}  ;%NWL%}  )  . call ( FoldMode . prototype )  ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / scad_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / doc_comment_highlight_rules "  ,  " ace / mode / text_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
var server = servers [ i ]  ; %NWL%var channels = new Array (  )  ; %NWL%var chanNames = Object . keys ( sessions [ data . key ]  [ server ]  . chans )  ; %NWL%for ( var j = 0 ; j < chanNames . length ; j +  +  )  {%NWL%var channel = sessions [ data . key ]  [ server ]  . chans [ chanNames [ j ]  ]  . serverName ; %NWL%channels . push ( channel )  ;%NWL%}%NWL%var nick = sessions [ data . key ]  [ server ]  . nick ; %NWL%var portNum = sessions [ data . key ]  [ server ]  . opt . port ; %NWL%var secure = sessions [ data . key ]  [ server ]  . opt . secure ; %NWL%var password = sessions [ data . key ]  [ server ]  . opt . password ; %NWL%9
month :  " about a month "  ,%NWL%months :  " %d months "  ,%NWL%year :  " about a year "  ,%NWL%years :  " %d years "  ,%NWL%numbers :  [  ]%NWL%}%NWL%}  ,%NWL%inWords : function ( distanceMillis )  {%NWL%var $l = this . settings . strings ; %NWL%var prefix = $l . prefixAgo ; %NWL%var suffix = $l . suffixAgo ; %NWL%9
newNotes =  ' No notes for this step '  ;%NWL%}%NWL%consoleWindow . document . getElementById (  ' notes '  )  . innerHTML = newNotes ; %NWL%var baseURL = document . URL . substring ( 0 , document . URL . search (  ' # /  '  )  )  ; %NWL%var slideSrc = baseURL +  ' # '  + document . querySelector (  '  . active '  )  . id ; %NWL%var preSrc = baseURL +  ' # '  + nextStep (  )  . id ; %NWL%var slideView = consoleWindow . document . getElementById (  ' slideView '  )  ; %NWL%if ( slideView . src ! =  = slideSrc )  {%NWL%slideView . src = slideSrc ;%NWL%}%NWL%var preView = consoleWindow . document . getElementById (  ' preView '  )  ; %NWL%6
newNotes = newNotes . innerHTML ;%NWL%} else {%NWL%newNotes =  ' No notes for this step '  ;%NWL%}%NWL%var notes = consoleWindow . document . getElementById (  ' notes '  )  ; %NWL%notes . innerHTML = newNotes ; %NWL%notes . scrollTop = 0 ; %NWL%var baseURL = document . URL . substring ( 0 , document . URL . search (  ' # /  '  )  )  ; %NWL%var slideSrc = baseURL +  ' # '  + document . querySelector (  '  . active '  )  . id ; %NWL%var preSrc = baseURL +  ' # '  + nextStep (  )  . id ; %NWL%var slideView = consoleWindow . document . getElementById (  ' slideView '  )  ; %NWL%4
var notes = consoleWindow . document . getElementById (  ' notes '  )  ; %NWL%notes . innerHTML = newNotes ; %NWL%notes . scrollTop = 0 ; %NWL%var baseURL = document . URL . substring ( 0 , document . URL . search (  ' # /  '  )  )  ; %NWL%var slideSrc = baseURL +  ' # '  + document . querySelector (  '  . active '  )  . id ; %NWL%var preSrc = baseURL +  ' # '  + nextStep (  )  . id ; %NWL%var slideView = consoleWindow . document . getElementById (  ' slideView '  )  ; %NWL%if ( slideView . src ! =  = slideSrc )  {%NWL%slideView . src = slideSrc ;%NWL%}%NWL%var preView = consoleWindow . document . getElementById (  ' preView '  )  ; %NWL%0
slideView . src = slideSrc ;%NWL%}%NWL%var preView = consoleWindow . document . getElementById (  ' preView '  )  ; %NWL%if ( preView . src ! =  = preSrc )  {%NWL%preView . src = preSrc ;%NWL%}%NWL%consoleWindow . document . getElementById (  ' status '  )  . innerHTML =  '  < span style =  " color : green "  > Ready <  / span >  '  ;%NWL%}%NWL%}  ; %NWL%var spaceHandler = function (  )  {%NWL%var notes = consoleWindow . document . getElementById (  ' notes '  )  ; %NWL%2
this . editingArea . style . height = areaHeight +  " px "  ; %NWL%if ( this . iframe )  {%NWL%this . iframe . style . height =  " 100% "  ;%NWL%}%NWL%this . _layoutMode = true ;%NWL%}  ,%NWL%_onIEMouseDown : function ( e )  {%NWL%var outsideClientArea ; %NWL%var b = this . document . body ; %NWL%var clientWidth = b . clientWidth ; %NWL%var clientHeight = b . clientHeight ; %NWL%9
if ( this . iframe )  {%NWL%this . iframe . style . height =  " 100% "  ;%NWL%}%NWL%this . _layoutMode = true ;%NWL%}  ,%NWL%_onIEMouseDown : function ( e )  {%NWL%var outsideClientArea ; %NWL%var b = this . document . body ; %NWL%var clientWidth = b . clientWidth ; %NWL%var clientHeight = b . clientHeight ; %NWL%var clientLeft = b . clientLeft ; %NWL%8
this . iframe . style . height =  " 100% "  ;%NWL%}%NWL%this . _layoutMode = true ;%NWL%}  ,%NWL%_onIEMouseDown : function ( e )  {%NWL%var outsideClientArea ; %NWL%var b = this . document . body ; %NWL%var clientWidth = b . clientWidth ; %NWL%var clientHeight = b . clientHeight ; %NWL%var clientLeft = b . clientLeft ; %NWL%var offsetWidth = b . offsetWidth ; %NWL%7
}%NWL%this . _layoutMode = true ;%NWL%}  ,%NWL%_onIEMouseDown : function ( e )  {%NWL%var outsideClientArea ; %NWL%var b = this . document . body ; %NWL%var clientWidth = b . clientWidth ; %NWL%var clientHeight = b . clientHeight ; %NWL%var clientLeft = b . clientLeft ; %NWL%var offsetWidth = b . offsetWidth ; %NWL%var offsetHeight = b . offsetHeight ; %NWL%6
this . _layoutMode = true ;%NWL%}  ,%NWL%_onIEMouseDown : function ( e )  {%NWL%var outsideClientArea ; %NWL%var b = this . document . body ; %NWL%var clientWidth = b . clientWidth ; %NWL%var clientHeight = b . clientHeight ; %NWL%var clientLeft = b . clientLeft ; %NWL%var offsetWidth = b . offsetWidth ; %NWL%var offsetHeight = b . offsetHeight ; %NWL%var offsetLeft = b . offsetLeft ; %NWL%5
' use strict '  ; %NWL%var url = require (  ' url '  )%NWL%, util = require (  ' util '  )%NWL%, http = require (  ' http '  )%NWL%, https = require (  ' https '  )%NWL%, crypto = require (  ' crypto '  )%NWL%, stream = require (  ' stream '  )%NWL%, Ultron = require (  ' ultron '  )%NWL%, Options = require (  ' options '  )%NWL%, Sender = require (  '  .  / Sender '  )%NWL%, Receiver = require (  '  .  / Receiver '  )%NWL%9
, http = require (  ' http '  )%NWL%, https = require (  ' https '  )%NWL%, crypto = require (  ' crypto '  )%NWL%, stream = require (  ' stream '  )%NWL%, Ultron = require (  ' ultron '  )%NWL%, Options = require (  ' options '  )%NWL%, Sender = require (  '  .  / Sender '  )%NWL%, Receiver = require (  '  .  / Receiver '  )%NWL%, SenderHixie = require (  '  .  / Sender . hixie '  )%NWL%, ReceiverHixie = require (  '  .  / Receiver . hixie '  )%NWL%, Extensions = require (  '  .  / Extensions '  )%NWL%6
, https = require (  ' https '  )%NWL%, crypto = require (  ' crypto '  )%NWL%, stream = require (  ' stream '  )%NWL%, Ultron = require (  ' ultron '  )%NWL%, Options = require (  ' options '  )%NWL%, Sender = require (  '  .  / Sender '  )%NWL%, Receiver = require (  '  .  / Receiver '  )%NWL%, SenderHixie = require (  '  .  / Sender . hixie '  )%NWL%, ReceiverHixie = require (  '  .  / Receiver . hixie '  )%NWL%, Extensions = require (  '  .  / Extensions '  )%NWL%, PerMessageDeflate = require (  '  .  / PerMessageDeflate '  )%NWL%5
return tgt ;%NWL%}  ,%NWL%selectFirstNode : function (  )  {%NWL%var first = this . containerNode . firstChild ; %NWL%while ( first && first . style . display =  =  " none "  )  {%NWL%first = first . nextSibling ;%NWL%}%NWL%this . _setSelectedAttr ( first )  ;%NWL%}  ,%NWL%selectLastNode : function (  )  {%NWL%var last = this . containerNode . lastChild ; %NWL%3
}%NWL%return sel ;  /  / Selection%NWL%} else {%NWL%sel = win . global . getSelection (  )  ; %NWL%sel . deleteFromDocument (  )  ; %NWL%return sel ;  /  / Selection%NWL%}%NWL%}  ,%NWL%selectElementChildren : function ( element , nochangefocus )  {%NWL%var global = win . global ; %NWL%var doc = win . doc ; %NWL%9
range . setEnd ( element ,  ( element . nodeType =  = 3 ) ?element . length : element . childNodes . length )  ; %NWL%selection . addRange ( range )  ;%NWL%} else {%NWL%selection . selectAllChildren ( element )  ;%NWL%}%NWL%}%NWL%}  ,%NWL%selectElement : function ( element , nochangefocus )  {%NWL%var range ; %NWL%var doc = win . doc ; %NWL%var global = win . global ; %NWL%9
advice : function ( target , args )  {%NWL%return signal . cancelled ?%NWL%previous . advice ( target , args )  :  /  / cancelled , skip to next one%NWL%advised . apply ( target , args )  ; 	 /  / called the advised function%NWL%}%NWL%}  ;%NWL%} else {%NWL%signal =  {%NWL%remove : function (  )  {%NWL%var previous = signal . previous ; %NWL%var next = signal . next ; %NWL%9
var executionId = nextId ; %NWL%var args = arguments ; %NWL%var before = dispatcher . before ; %NWL%while ( before )  {%NWL%args = before . advice . apply ( this , args ) || args ; %NWL%before = before . next ;%NWL%}%NWL%if ( dispatcher . around )  {%NWL%var results = dispatcher . around . advice ( this , args )  ;%NWL%}%NWL%var after = dispatcher . after ; %NWL%2
this . _publish ( tree . c [  "  *  "  ]  , path , index + 1 , name , msg )  ; %NWL%node = tree . c [  "  *  *  "  ]  ;%NWL%}%NWL%if ( typeof node ! =  " undefined "  )  {%NWL%var callbacks = node . s ; %NWL%var max = callbacks . length ; %NWL%for ( var i = 0 ; i < max ; i +  +  )  {%NWL%if ( callbacks [ i ]  . cb )  {%NWL%var sc = callbacks [ i ]  . scope ; %NWL%var cb = callbacks [ i ]  . cb ; %NWL%var fcb = callbacks [ i ]  . fcb ; %NWL%9
else {%NWL%self . _dirtyObjects = dirtyObjects . concat ( savingObjects )  ;%NWL%}%NWL%}  )  ; %NWL%if ( this . objectStore . transaction )  {%NWL%var transaction = this . objectStore . transaction (  )  ;%NWL%}%NWL%for ( var i = 0 ; i < dirtyObjects . length ; i +  +  )  {%NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
} catch ( e )  {%NWL%kwArgs . onError . call ( kwArgs . scope , value )  ;%NWL%}%NWL%}  ,%NWL%revert : function ( kwArgs )  {%NWL%var dirtyObjects = this . _dirtyObjects ; %NWL%for ( var i = dirtyObjects . length ; i > 0 ;  )  {%NWL%i -  -  ; %NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
this . getIdentity = null ;%NWL%}%NWL%if ( !features [  " dojo . data . api . Write "  ]  )  {%NWL%this . put = this . add = null ;%NWL%}%NWL%}  ,%NWL%idProperty :  " id "  ,%NWL%store : null ,%NWL%_objectConverter : function ( callback )  {%NWL%var store = this . store ; %NWL%var idProperty = this . idProperty ; %NWL%9
return returnedObject ;%NWL%}%NWL%if ( returnedError )  {%NWL%throw returnedError ;%NWL%}%NWL%return deferred . promise ;%NWL%}  ,%NWL%put : function ( object , options )  {%NWL%var id = options && typeof options . id ! =  " undefined " || this . getIdentity ( object )  ; %NWL%var store = this . store ; %NWL%var idProperty = this . idProperty ; %NWL%9
index [ id ]  = data . push ( object )  - 1 ;%NWL%}%NWL%return id ;%NWL%}  ,%NWL%add : function ( object , options )  {%NWL%( options = options || {  }  )  . overwrite = false ; %NWL%return this . put ( object , options )  ;%NWL%}  ,%NWL%remove : function ( id )  {%NWL%var index = this . index ; %NWL%var data = this . data ; %NWL%9
}  , kwArgs|| {  }  )  ; %NWL%var kappa = self . kappa ( kwArgs . useApproximation )  , epsilon = self . epsilon ( kwArgs . useApproximation )  ; %NWL%var wp = self . whitepoint ( kwArgs . whitepoint , kwArgs . observer )  ; %NWL%var ud =  ( 4 * xyz . X )  /  ( xyz . X + 15 * xyz . Y + 3 * xyz . Z )  ; %NWL%var vd =  ( 9 * xyz . Y )  /  ( xyz . X + 15 * xyz . Y + 3 * xyz . Z )  ; %NWL%var udr =  ( 4 * wp . x )  /  ( wp . x + 15 * wp . y + 3 * wp . z )  ; %NWL%var vdr =  ( 9 * wp . y )  /  ( wp . x + 15 * wp . y + 3 * wp . z )  ; %NWL%var yr = xyz . Y / wp . y ; %NWL%var L =  ( yr > epsilon ) ?116 * Math . pow ( yr , 1 / 3 )  - 16 : kappa * yr ; %NWL%var u = 13 * L *  ( ud - udr )  ; %NWL%var v = 13 * L *  ( vd - vdr )  ; %NWL%9
console . error (  " dojox . color . Colorspace :  : adapt : color and source arguments are required .  "  , kwArgs )  ;%NWL%}%NWL%kwArgs = dojo . mixin (  {%NWL%adaptor :  " Bradford "  ,%NWL%destination :  " D65 "%NWL%}  , kwArgs )  ; %NWL%var swp = this . whitepoint ( kwArgs . source )  ; %NWL%var dwp = this . whitepoint ( kwArgs . destination )  ; %NWL%if ( adaptors [ kwArgs . adaptor ]  )  {%NWL%var ma = adaptors [ kwArgs . adaptor ]  . ma ; %NWL%var mai = adaptors [ kwArgs . adaptor ]  . mai ; %NWL%9
}%NWL%}  )  ; %NWL%dojo . extend ( dojox . color . Color ,  {%NWL%toXYZ : function ( kwArgs )  {%NWL%kwArgs = kwArgs|| {  }  ; %NWL%var p = dojox . color . Colorspace . primaries ( kwArgs )  ; %NWL%var m = dojox . color . Colorspace . matrix (  " XYZ "  , p )  ; %NWL%var _r = this . r / 255 , _g = this . g / 255 , _b = this . b / 255 ; %NWL%if ( p . profile =  =  " sRGB "  )  {%NWL%var r =  ( _r > 0 . 04045 ) ? Math . pow (  (  ( _r + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _r / 12 . 92 ; %NWL%var g =  ( _g > 0 . 04045 ) ? Math . pow (  (  ( _g + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _g / 12 . 92 ; %NWL%9
}  )  ; %NWL%dojo . extend ( dojox . color . Color ,  {%NWL%toXYZ : function ( kwArgs )  {%NWL%kwArgs = kwArgs|| {  }  ; %NWL%var p = dojox . color . Colorspace . primaries ( kwArgs )  ; %NWL%var m = dojox . color . Colorspace . matrix (  " XYZ "  , p )  ; %NWL%var _r = this . r / 255 , _g = this . g / 255 , _b = this . b / 255 ; %NWL%if ( p . profile =  =  " sRGB "  )  {%NWL%var r =  ( _r > 0 . 04045 ) ? Math . pow (  (  ( _r + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _r / 12 . 92 ; %NWL%var g =  ( _g > 0 . 04045 ) ? Math . pow (  (  ( _g + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _g / 12 . 92 ; %NWL%var b =  ( _b > 0 . 04045 ) ? Math . pow (  (  ( _b + 0 . 055 )  / 1 . 055 )  , 2 . 4 )  : _b / 12 . 92 ; %NWL%8
hl : this . _lang%NWL%}  ; %NWL%for ( var attr in this . _queryAttrs )  {%NWL%content [ this . _queryAttrs [ attr ]  ]  = query [ attr ]  ;%NWL%}%NWL%return content ;%NWL%}%NWL%}  )  ; %NWL%var WebSearchStore = declare (  " dojox . data . GoogleWebSearchStore "  , SearchStore ,  {%NWL%}  )  ; %NWL%var BlogSearchStore = declare (  " dojox . data . GoogleBlogSearchStore "  , SearchStore ,  {%NWL%8
}%NWL%}  )  ; %NWL%var WebSearchStore = declare (  " dojox . data . GoogleWebSearchStore "  , SearchStore ,  {%NWL%}  )  ; %NWL%var BlogSearchStore = declare (  " dojox . data . GoogleBlogSearchStore "  , SearchStore ,  {%NWL%_type :  " blogs "  ,%NWL%_attributes :  [  " blogUrl "  ,  " postUrl "  ,  " title "  ,  " titleNoFormatting "  ,  " content "  ,%NWL%" author "  ,  " publishedDate "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var LocalSearchStore = declare (  " dojox . data . GoogleLocalSearchStore "  , SearchStore ,  {%NWL%2
centerLatLong :  ' sll '  ,%NWL%searchSpan :  ' sspn '%NWL%}%NWL%}  )  ; %NWL%var VideoSearchStore = declare (  " dojox . data . GoogleVideoSearchStore "  , SearchStore ,  {%NWL%_type :  " video "  ,%NWL%_attributes :  [  " title "  ,  " titleNoFormatting "  ,  " content "  ,  " url "  ,  " published "  ,  " publisher "  ,%NWL%" duration "  ,  " tbWidth "  ,  " tbHeight "  ,  " tbUrl "  ,  " playUrl "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var NewsSearchStore = declare (  " dojox . data . GoogleNewsSearchStore "  , SearchStore ,  {%NWL%4
_attributes :  [  " title "  ,  " titleNoFormatting "  ,  " content "  ,  " url "  ,  " published "  ,  " publisher "  ,%NWL%" duration "  ,  " tbWidth "  ,  " tbHeight "  ,  " tbUrl "  ,  " playUrl "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var NewsSearchStore = declare (  " dojox . data . GoogleNewsSearchStore "  , SearchStore ,  {%NWL%_type :  " news "  ,%NWL%_attributes :  [  " title "  ,  " titleNoFormatting "  ,  " content "  ,  " url "  ,  " unescapedUrl "  ,  " publisher "  ,%NWL%" clusterUrl "  ,  " location "  ,  " publishedDate "  ,  " relatedStories "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var BookSearchStore = declare (  " dojox . data . GoogleBookSearchStore "  , SearchStore ,  {%NWL%4
_attributes :  [  " title "  ,  " titleNoFormatting "  ,  " content "  ,  " url "  ,  " unescapedUrl "  ,  " publisher "  ,%NWL%" clusterUrl "  ,  " location "  ,  " publishedDate "  ,  " relatedStories "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var BookSearchStore = declare (  " dojox . data . GoogleBookSearchStore "  , SearchStore ,  {%NWL%_type :  " books "  ,%NWL%_attributes :  [  " title "  ,  " titleNoFormatting "  ,  " authors "  ,  " url "  ,  " unescapedUrl "  ,  " bookId "  ,%NWL%" pageCount "  ,  " publishedYear "  ]  ,%NWL%_aggregatedAttributes :  {  }%NWL%}  )  ; %NWL%var ImageSearchStore = declare (  " dojox . data . GoogleImageSearchStore "  , SearchStore ,  {%NWL%4
_processRawXmlTree : function ( rawXmlTree )  {%NWL%this . _loadFinished = true ; %NWL%this . _xmlData = rawXmlTree ; %NWL%var headNodes = rawXmlTree . getElementsByTagName (  ' head '  )  ; %NWL%var headNode = headNodes [ 0 ]  ; %NWL%if ( headNode )  {%NWL%this . _removeChildNodesThatAreNotElementNodes ( headNode )  ; %NWL%this . _metadataNodes = headNode . childNodes ;%NWL%}%NWL%var bodyNodes = rawXmlTree . getElementsByTagName (  ' body '  )  ; %NWL%var bodyNode = bodyNodes [ 0 ]  ; %NWL%4
return ( this . date . getHours (  )  > 12 ) ? this . date . getHours (  )  - 12 +  "  "  : this . date . getHours (  )  +  "  "  ;%NWL%}  ,%NWL%G : function (  )  {%NWL%return this . date . getHours (  )  +  "  "  ;%NWL%}  ,%NWL%h : function (  )  {%NWL%var g = this . g (  )  ; %NWL%return ( g . length =  = 1 ) ? " 0 "  + g : g ;%NWL%}  ,%NWL%H : function (  )  {%NWL%var G = this . G (  )  ; %NWL%6
if ( this . stencil . getRadius (  )  < this . stencil . minimumSize )  {%NWL%this . hideAngle (  )  ; %NWL%return ;%NWL%}%NWL%var node = this . getAngleNode (  )  ; %NWL%var d = this . stencil . pointsToData (  )  ; %NWL%var pt = dojox . drawing . util . positioning . angle (  { x : d . x1 , y : d . y1 }  ,  { x : d . x2 , y : d . y2 }  )  ; %NWL%var sc = this . mouse . scrollOffset (  )  ; %NWL%var mx = this . stencil . getTransform (  )  ; %NWL%var dx = mx . dx / this . mouse . zoom ; %NWL%var dy = mx . dy / this . mouse . zoom ; %NWL%9
this . selected = false ; %NWL%this . button . deselect (  )  ;%NWL%} else {%NWL%this . selected = true ; %NWL%this . button . select (  )  ;%NWL%}%NWL%this . mouse . setEventMode ( this . selected ? " pan "  :  "  "  )  ;%NWL%}  ,%NWL%onPanDrag : function ( obj )  {%NWL%var x = obj . x - obj . last . x ; %NWL%var y = obj . y - obj . last . y ; %NWL%9
this . selected = false ; %NWL%dojo . removeClass ( this . domNode ,  " selected "  )  ;%NWL%} else {%NWL%this . selected = true ; %NWL%dojo . addClass ( this . domNode ,  " selected "  )  ;%NWL%}%NWL%this . mouse . setEventMode ( this . selected ? " pan "  :  "  "  )  ;%NWL%}  ,%NWL%onPanDrag : function ( obj )  {%NWL%var x = obj . x - obj . last . x ; %NWL%var y = obj . y - obj . last . y ; %NWL%9
}  ,%NWL%parse : function (  )  {%NWL%var drawingId = dojo . attr ( this . domNode ,  " drawingId "  )  ; %NWL%this . drawing = dojox . drawing . util . common . byId ( drawingId )  ; %NWL%!this . drawing && console . error (  " Drawing not found based on ' drawingId ' in Toolbar .  "  )  ; %NWL%this . toolNodes =  {  }  ; %NWL%var _sel ; %NWL%dojo . query (  "  >  "  , this . domNode )  . forEach ( function ( node , i )  {%NWL%node . className = this . buttonClass ; %NWL%var tool = dojo . attr ( node ,  " tool "  )  ; %NWL%var action = dojo . attr ( node ,  " action "  )  ; %NWL%9
parse : function (  )  {%NWL%var drawingId = dojo . attr ( this . domNode ,  " drawingId "  )  ; %NWL%this . drawing = dojox . drawing . util . common . byId ( drawingId )  ; %NWL%!this . drawing && console . error (  " Drawing not found based on ' drawingId ' in Toolbar .  "  )  ; %NWL%this . toolNodes =  {  }  ; %NWL%var _sel ; %NWL%dojo . query (  "  >  "  , this . domNode )  . forEach ( function ( node , i )  {%NWL%node . className = this . buttonClass ; %NWL%var tool = dojo . attr ( node ,  " tool "  )  ; %NWL%var action = dojo . attr ( node ,  " action "  )  ; %NWL%var plugin = dojo . attr ( node ,  " plugin "  )  ; %NWL%8
if ( typeof html =  =  " string "  )  {%NWL%html = new String ( html )  ;%NWL%}%NWL%html . safe = true ; %NWL%return html ;%NWL%}%NWL%return '  '  ;%NWL%}  ,%NWL%render : function ( context , buffer )  {%NWL%var name = this . name ; %NWL%var nodelist = this . nodelist ; %NWL%9
}  )  ; %NWL%ddtm . WidthRatioNode = lang . extend ( function ( current , max , width , text )  {%NWL%this . current = new dd . _Filter ( current )  ; %NWL%this . max = new dd . _Filter ( max )  ; %NWL%this . width = width ; %NWL%this . contents = text ;%NWL%}  ,%NWL%{%NWL%render : function ( context , buffer )  {%NWL%var current =  + this . current . resolve ( context )  ; %NWL%var max =  + this . max . resolve ( context )  ; %NWL%9
_onReplaceKeyDown : function ( evt )  {%NWL%if ( evt . keyCode =  = dojo . keys . ENTER )  {%NWL%if ( !this . _replace (  )  ) this . _replace (  )  ; %NWL%dojo . stopEvent ( evt )  ;%NWL%}%NWL%}  ,%NWL%_find : function ( showMessage )  {%NWL%var txt = this . _findField . get (  " value "  ) || "  "  ; %NWL%if ( txt )  {%NWL%var caseSensitive = this . _caseSensitive . get (  " value "  )  ; %NWL%var backwards = this . _backwards . get (  " value "  )  ; %NWL%9
return false ;%NWL%}  ,%NWL%_replace : function ( showMessage )  {%NWL%var isReplaced = false ; %NWL%var ed = this . editor ; %NWL%ed . focus (  )  ; %NWL%var txt = this . _findField . get (  " value "  ) || "  "  ; %NWL%var repTxt = this . _replaceField . get (  " value "  ) || "  "  ; %NWL%if ( txt )  {%NWL%var caseSensitive = this . _caseSensitive . get (  " value "  )  ; %NWL%var backwards = this . _backwards . get (  " value "  )  ; %NWL%9
var fs = require (  " fs "  )  ; %NWL%var path = require (  " path "  )  ; %NWL%var resumer = require (  " resumer "  )  ; %NWL%var format = require (  " stream - format "  )  ; %NWL%var formatText = require (  " format - text "  )  ; %NWL%var concat = require (  " concat - stream "  )  ; %NWL%var glob = require (  " glob "  )  . sync ; %NWL%var parseUserAgent = require (  " user - agent - parser "  )  ; %NWL%var prettifyError = require (  " prettify - error "  )  ; %NWL%var WebSocket = require (  " faye - websocket "  )  ; %NWL%var mime = require (  " mime "  )  ; %NWL%0
var path = require (  " path "  )  ; %NWL%var resumer = require (  " resumer "  )  ; %NWL%var format = require (  " stream - format "  )  ; %NWL%var formatText = require (  " format - text "  )  ; %NWL%var concat = require (  " concat - stream "  )  ; %NWL%var glob = require (  " glob "  )  . sync ; %NWL%var parseUserAgent = require (  " user - agent - parser "  )  ; %NWL%var prettifyError = require (  " prettify - error "  )  ; %NWL%var WebSocket = require (  " faye - websocket "  )  ; %NWL%var mime = require (  " mime "  )  ; %NWL%var request = require (  " request "  )  ; %NWL%0
var format = require (  " stream - format "  )  ; %NWL%var formatText = require (  " format - text "  )  ; %NWL%var concat = require (  " concat - stream "  )  ; %NWL%var glob = require (  " glob "  )  . sync ; %NWL%var parseUserAgent = require (  " user - agent - parser "  )  ; %NWL%var prettifyError = require (  " prettify - error "  )  ; %NWL%var WebSocket = require (  " faye - websocket "  )  ; %NWL%var mime = require (  " mime "  )  ; %NWL%var request = require (  " request "  )  ; %NWL%var setContentType = require (  " set - content - type "  )  ; %NWL%var url = require (  " url "  )  ; %NWL%7
}  ; %NWL%NodeParser . prototype . createStyles = function ( document , styles )  {%NWL%var hidePseudoElements = document . createElement (  ' style '  )  ; %NWL%hidePseudoElements . innerHTML = styles ; %NWL%document . body . appendChild ( hidePseudoElements )  ;%NWL%}  ; %NWL%NodeParser . prototype . getPseudoElements = function ( container )  {%NWL%var nodes =  [  [ container ]  ]  ; %NWL%if ( container . node . nodeType =  =  = Node . ELEMENT_NODE )  {%NWL%var before = this . getPseudoElement ( container ,  "  : before "  )  ; %NWL%var after = this . getPseudoElement ( container ,  "  : after "  )  ; %NWL%9
break ;%NWL%}%NWL%}%NWL%var count = c . length >  > 3 , pos = 0 , o =  {  }  , isCBC =  ( mode =  = crypto . cipherModes . CBC )  ; %NWL%var vector =  { left : iv . left||null , right : iv . right||null }  ; %NWL%for ( var i = 0 ; i < count ; i +  +  )  {%NWL%o . left = c [ pos ]  * POW24|c [ pos + 1 ]  * POW16|c [ pos + 2 ]  * POW8|c [ pos + 3 ]  ; %NWL%o . right = c [ pos + 4 ]  * POW24|c [ pos + 5 ]  * POW16|c [ pos + 6 ]  * POW8|c [ pos + 7 ]  ; %NWL%if ( isCBC )  {%NWL%var left = o . left ; %NWL%var right = o . right ; %NWL%9
var startAngle = this . _mod360 ( this . startAngle )  ; %NWL%var relativeValue =  ( v - this . min )  ; %NWL%if ( this . orientation ! =  ' clockwise '  )%NWL%relativeValue =  - relativeValue ; %NWL%angle = this . _mod360 ( startAngle + this . _getAngleRange (  )  * relativeValue / Math . abs ( this . min - this . max )  )  ;%NWL%}%NWL%return angle ;%NWL%}  ,%NWL%_getValueForAngle : function ( angle )  {%NWL%var startAngle = this . _mod360 ( this . startAngle )  ; %NWL%var endAngle = this . _mod360 ( this . endAngle )  ; %NWL%0
else {%NWL%var range = Math . abs ( this . max - this . min )  ; %NWL%var relativeAngle = this . _mod360 ( this . orientation =  =  ' clockwise ' ?%NWL%( angle - startAngle )  :  (  - angle + startAngle )  )  ; %NWL%return this . min + range * relativeAngle / this . _getAngleRange (  )  ;%NWL%}%NWL%}  ,%NWL%_getAngleRange : function (  )  {%NWL%var range ; %NWL%var startAngle = this . _mod360 ( this . startAngle )  ; %NWL%var endAngle = this . _mod360 ( this . endAngle )  ; %NWL%9
else {%NWL%if ( endAngle < startAngle )%NWL%range = startAngle - endAngle ; %NWL%else%NWL%range = 360 -  ( endAngle - startAngle )  ;%NWL%}%NWL%return range ;%NWL%}  ,%NWL%_angleInRange : function ( value )  {%NWL%var startAngle = this . _mod360 ( this . startAngle )  ; %NWL%var endAngle = this . _mod360 ( this . endAngle )  ; %NWL%9
var div = win . doc . createElement (  " div "  )  ; %NWL%domClass . add ( icon ,  " dojoxLegendIcon "  )  ; %NWL%domClass . add ( text ,  " dojoxLegendText "  )  ; %NWL%div . style . width  = this . swatchSize +  " px "  ; %NWL%div . style . height = this . swatchSize +  " px "  ; %NWL%icon . appendChild ( div )  ; %NWL%if ( this . horizontal )  {%NWL%this . _tr . appendChild ( icon )  ; %NWL%this . _tr . appendChild ( text )  ;%NWL%} else {%NWL%var tr = win . doc . createElement (  " tr "  )  ; %NWL%0
getSurface : function (  )  {%NWL%return this . _surface ;%NWL%}  ,%NWL%_surfaceSize : function (  )  {%NWL%var s = this . olLayer . map . getSize (  )  ; %NWL%this . _surface . setDimensions ( s . w , s . h )  ;%NWL%}  ,%NWL%moveTo : function ( event )  {%NWL%var s = dojo . style ( this . olLayer . map . layerContainerDiv )  ; %NWL%var left = parseInt ( s . left )  ; %NWL%var top = parseInt ( s . top )  ; %NWL%9
g : c . g < 0 ? 0 : c . g > 1 ? 1 : c . g ,%NWL%b : c . b < 0 ? 0 : c . b > 1 ? 1 : c . b ,%NWL%a : c . a < 0 ? 0 : c . a > 1 ? 1 : c . a%NWL%}  ;%NWL%}  ,%NWL%mixColor : function ( c1 , c2 , s )  {%NWL%return lite . addColor ( lite . scaleColor ( s , c1 )  , lite . scaleColor ( 1 - s , c2 )  )  ;%NWL%}  ,%NWL%diff2Color : function ( c1 , c2 )  {%NWL%var r = c1 . r - c2 . r ; %NWL%var g = c1 . g - c2 . g ; %NWL%9
b : c . b < 0 ? 0 : c . b > 1 ? 1 : c . b ,%NWL%a : c . a < 0 ? 0 : c . a > 1 ? 1 : c . a%NWL%}  ;%NWL%}  ,%NWL%mixColor : function ( c1 , c2 , s )  {%NWL%return lite . addColor ( lite . scaleColor ( s , c1 )  , lite . scaleColor ( 1 - s , c2 )  )  ;%NWL%}  ,%NWL%diff2Color : function ( c1 , c2 )  {%NWL%var r = c1 . r - c2 . r ; %NWL%var g = c1 . g - c2 . g ; %NWL%var b = c1 . b - c2 . b ; %NWL%8
a : c . a < 0 ? 0 : c . a > 1 ? 1 : c . a%NWL%}  ;%NWL%}  ,%NWL%mixColor : function ( c1 , c2 , s )  {%NWL%return lite . addColor ( lite . scaleColor ( s , c1 )  , lite . scaleColor ( 1 - s , c2 )  )  ;%NWL%}  ,%NWL%diff2Color : function ( c1 , c2 )  {%NWL%var r = c1 . r - c2 . r ; %NWL%var g = c1 . g - c2 . g ; %NWL%var b = c1 . b - c2 . b ; %NWL%var a = c1 . a - c2 . a ; %NWL%7
}  )  ;%NWL%}%NWL%}  ,%NWL%setOpen : function ( open )  {%NWL%if ( open && domClass . contains ( this . domNode ,  " dojoxGridExpandoLoading "  )  )  {%NWL%open = false ;%NWL%}%NWL%var view = this . view ; %NWL%var grid = view . grid ; %NWL%var store = grid . store ; %NWL%var treeModel = grid . treeModel ; %NWL%9
" string "  : exprs . StringExpr ,%NWL%" boolean "  : exprs . BooleanExpr ,%NWL%" date "  : exprs . DateExpr ,%NWL%" time "  : exprs . TimeExpr%NWL%}  ,%NWL%defaultArgs :  {%NWL%" boolean "  :  {%NWL%" falseValue "  :  " false "  ,%NWL%" convert "  : function ( dataValue , args )  {%NWL%var falseValue = args . falseValue ; %NWL%var trueValue = args . trueValue ; %NWL%9
]  , function ( declare , lang , date , exprs )  {%NWL%var LogicAND = declare (  " dojox . grid . enhanced . plugins . filter . LogicAND "  , exprs . _BiOpExpr ,  {%NWL%_name :  " and "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = left_operand . applyRow ( datarow , getter )  . getValue (  ) &&%NWL%right_operand . applyRow ( datarow , getter )  . getValue (  )  ; %NWL%return new exprs . BooleanExpr ( res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LogicOR = declare (  " dojox . grid . enhanced . plugins . filter . LogicOR "  , exprs . _BiOpExpr ,  {%NWL%1
}  )  ; %NWL%var LogicOR = declare (  " dojox . grid . enhanced . plugins . filter . LogicOR "  , exprs . _BiOpExpr ,  {%NWL%_name :  " or "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = left_operand . applyRow ( datarow , getter )  . getValue (  ) ||%NWL%right_operand . applyRow ( datarow , getter )  . getValue (  )  ; %NWL%return new exprs . BooleanExpr ( res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LogicXOR = declare (  " dojox . grid . enhanced . plugins . filter . LogicXOR "  , exprs . _BiOpExpr ,  {%NWL%1
}  )  ; %NWL%var LogicALL = declare (  " dojox . grid . enhanced . plugins . filter . LogicALL "  , exprs . _OperatorExpr ,  {%NWL%_name :  " all "  ,%NWL%applyRow : function ( datarow , getter )  {%NWL%for ( var i = 0 , res = true ; res && ( this . _operands [ i ] instanceof exprs . _ConditionExpr )  ;  +  + i )  {%NWL%res = this . _operands [ i ]  . applyRow ( datarow , getter )  . getValue (  )  ;%NWL%}%NWL%return new exprs . BooleanExpr ( res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LogicANY = declare (  " dojox . grid . enhanced . plugins . filter . LogicANY "  , exprs . _OperatorExpr ,  {%NWL%1
}%NWL%}%NWL%var EqualTo = declare (  " dojox . grid . enhanced . plugins . filter . EqualTo "  , exprs . _BiOpExpr ,  {%NWL%_name :  " equal "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = compareFunc ( left_operand , right_operand , datarow , getter )  ; %NWL%return new exprs . BooleanExpr ( res =  =  = 0 )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LessThan = declare (  " dojox . grid . enhanced . plugins . filter . LessThan "  , exprs . _BiOpExpr ,  {%NWL%2
}%NWL%}  )  ; %NWL%var LessThan = declare (  " dojox . grid . enhanced . plugins . filter . LessThan "  , exprs . _BiOpExpr ,  {%NWL%_name :  " less "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = compareFunc ( left_operand , right_operand , datarow , getter )  ; %NWL%return new exprs . BooleanExpr ( res < 0 )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LessThanOrEqualTo = declare (  " dojox . grid . enhanced . plugins . filter . LessThanOrEqualTo "  , exprs . _BiOpExpr ,  {%NWL%2
}%NWL%}  )  ; %NWL%var LessThanOrEqualTo = declare (  " dojox . grid . enhanced . plugins . filter . LessThanOrEqualTo "  , exprs . _BiOpExpr ,  {%NWL%_name :  " lessEqual "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = compareFunc ( left_operand , right_operand , datarow , getter )  ; %NWL%return new exprs . BooleanExpr ( res <  = 0 )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LargerThan = declare (  " dojox . grid . enhanced . plugins . filter . LargerThan "  , exprs . _BiOpExpr ,  {%NWL%2
}%NWL%}  )  ; %NWL%var LargerThan = declare (  " dojox . grid . enhanced . plugins . filter . LargerThan "  , exprs . _BiOpExpr ,  {%NWL%_name :  " larger "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = compareFunc ( left_operand , right_operand , datarow , getter )  ; %NWL%return new exprs . BooleanExpr ( res > 0 )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var LargerThanOrEqualTo = declare (  " dojox . grid . enhanced . plugins . filter . LargerThanOrEqualTo "  , exprs . _BiOpExpr ,  {%NWL%2
}%NWL%}  )  ; %NWL%var LargerThanOrEqualTo = declare (  " dojox . grid . enhanced . plugins . filter . LargerThanOrEqualTo "  , exprs . _BiOpExpr ,  {%NWL%_name :  " largerEqual "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var res = compareFunc ( left_operand , right_operand , datarow , getter )  ; %NWL%return new exprs . BooleanExpr ( res >  = 0 )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var Contains = declare (  " dojox . grid . enhanced . plugins . filter . Contains "  , exprs . _BiOpExpr ,  {%NWL%2
}  )  ; %NWL%var Contains = declare (  " dojox . grid . enhanced . plugins . filter . Contains "  , exprs . _BiOpExpr ,  {%NWL%_name :  " contains "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var left_res = String ( left_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%var right_res = String ( right_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%return new exprs . BooleanExpr ( left_res . indexOf ( right_res )  >  = 0 )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var StartsWith = declare (  " dojox . grid . enhanced . plugins . filter . StartsWith "  , exprs . _BiOpExpr ,  {%NWL%1
}  )  ; %NWL%var StartsWith = declare (  " dojox . grid . enhanced . plugins . filter . StartsWith "  , exprs . _BiOpExpr ,  {%NWL%_name :  " startsWith "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var left_res = String ( left_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%var right_res = String ( right_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%return new exprs . BooleanExpr ( left_res . substring ( 0 , right_res . length )  =  = right_res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var EndsWith = declare (  " dojox . grid . enhanced . plugins . filter . EndsWith "  , exprs . _BiOpExpr ,  {%NWL%1
}  )  ; %NWL%var EndsWith = declare (  " dojox . grid . enhanced . plugins . filter . EndsWith "  , exprs . _BiOpExpr ,  {%NWL%_name :  " endsWith "  ,%NWL%_calculate : function ( left_operand , right_operand ,%NWL%datarow , getter )  {%NWL%var left_res = String ( left_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%var right_res = String ( right_operand . applyRow ( datarow , getter )  . getValue (  )  )  . toLowerCase (  )  ; %NWL%return new exprs . BooleanExpr ( left_res . substring ( left_res . length - right_res . length )  =  = right_res )  ; 	 /  / _ConditionExpr%NWL%}%NWL%}  )  ; %NWL%var Matches = declare (  " dojox . grid . enhanced . plugins . filter . Matches "  , exprs . _BiOpExpr ,  {%NWL%1
var rgxp_attrsMatch =  /  [ \w -  ]  +  =  (  "  [ ^ "  ]  *  " | '  [ ^ '  ]  *  ' |\S *  )  / gi ; %NWL%if ( indentBy && indentBy > 0 && indentBy < 10 )  {%NWL%iTxt =  "  "  ; %NWL%for ( i = 0 ; i < indentBy ; i +  +  )  {%NWL%iTxt +  =  "  "  ;%NWL%}%NWL%}%NWL%var contentDiv = Window . doc . createElement (  " div "  )  ; %NWL%contentDiv . innerHTML = html ; %NWL%var encode = Entities . encode ; %NWL%var decode = Entities . decode ; %NWL%9
dojo . getObject (  " json "  , true , dojox )  ; %NWL%return dojox . json . ref =  {%NWL%resolveJson : function ( root , args )  {%NWL%args = args || {  }  ; %NWL%var idAttribute = args . idAttribute || ' id '  ; %NWL%var refAttribute = this . refAttribute ; %NWL%var idAsRef = args . idAsRef ; %NWL%var prefix = args . idPrefix || '  '  ; %NWL%var assignAbsoluteIds = args . assignAbsoluteIds ; %NWL%var index = args . index || {  }  ;  /  / create an index if one doesn ' t exist%NWL%var timeStamps = args . timeStamps ; %NWL%6
} catch ( e )  {%NWL%throw new SyntaxError (  " Invalid JSON string :  "  + e . message +  " parsing :  "  + str )  ;%NWL%}%NWL%if ( root )  {%NWL%return this . resolveJson ( root , args )  ;%NWL%}%NWL%return root ;%NWL%}  ,%NWL%toJson : function ( it ,  prettyPrint ,  idPrefix ,  indexSubObjects )  {%NWL%var useRefs = this . _useRefs ; %NWL%var addProp = this . _addProp ; %NWL%9
if ( schema . maxLength && typeof value =  =  ' string ' && value . length > schema . maxLength )  {%NWL%addError (  " may only be "  + schema . maxLength +  " characters long "  )  ;%NWL%}%NWL%if ( schema . minLength && typeof value =  =  ' string ' && value . length < schema . minLength )  {%NWL%addError (  " must be at least "  + schema . minLength +  " characters long "  )  ;%NWL%}%NWL%if ( typeof schema . minimum ! =  = undefined && typeof value =  = typeof schema . minimum &&%NWL%schema . minimum > value )  {%NWL%addError (  " must have a minimum value of "  + schema . minimum )  ;%NWL%}%NWL%if ( typeof schema . maximum ! =  = undefined && typeof value =  = typeof schema . maximum &&%NWL%6
dojo . subscribe (  "  / dnd / drop / before "  , this ,  " onDrop "  )  ,%NWL%dojo . subscribe (  "  / dnd / cancel "  , this ,  " onDropCancel "  )  ,%NWL%dojo . subscribe (  "  / dnd / source / over "  , this ,  " onDndSource "  )%NWL%]%NWL%}  ,%NWL%unsubscribeDnd : function (  )  {%NWL%dojo . forEach ( this . _subscribeHandler , dojo . unsubscribe )  ;%NWL%}  ,%NWL%_getHoverArea : function ( coords )  {%NWL%var x = coords . x ; %NWL%var y = coords . y ; %NWL%9
if ( dojo . type =  = type )  {%NWL%dojo . coords = this . _initCoordinates ( dojo . node )  ;%NWL%}%NWL%}  , this )  ; %NWL%this . _dojoList = dojoList ;%NWL%}  ,%NWL%_getHoverDojoArea : function ( coords )  {%NWL%this . _oldDojoArea = this . _currentDojoArea ; %NWL%this . _currentDojoArea = null ; %NWL%var x = coords . x ; %NWL%var y = coords . y ; %NWL%9
serviceClass : dojox . rpc . Rest ,%NWL%conflictDateHeader :  " If - Unmodified - Since "  ,%NWL%commit : function ( kwArgs )  {%NWL%kwArgs = kwArgs || {  }  ; %NWL%var actions =  [  ]  ; %NWL%var alreadyRecorded =  {  }  ; %NWL%var savingObjects =  [  ]  ; %NWL%for ( var i = 0 ; i < dirtyObjects . length ; i +  +  )  {%NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
dojo . xhr = plainXhr ;%NWL%}  ,%NWL%getDirtyObjects : function (  )  {%NWL%return dirtyObjects ;%NWL%}  ,%NWL%revert : function ( service )  {%NWL%for ( var i = dirtyObjects . length ; i > 0 ;  )  {%NWL%i -  -  ; %NWL%var dirty = dirtyObjects [ i ]  ; %NWL%var object = dirty . object ; %NWL%var old = dirty . old ; %NWL%9
}  ; %NWL%p . destroy = function (  )  {%NWL%if ( !this . shape )  { return ;  }%NWL%this . shape . remove ( this . pathShape )  ; %NWL%this . shape . remove ( this . labelShape )  ; %NWL%this . figure . group . remove ( this . shape )  ; %NWL%this . shape = this . pathShape = this . labelShape = null ;%NWL%}  ; %NWL%p . getBBox = function (  )  {%NWL%var x = Math . min ( this . start . x , this . control . x , this . end . x )  ; %NWL%var y = Math . min ( this . start . y , this . control . y , this . end . y )  ; %NWL%9
this . anchors . start = new ta . Anchor ( this ,  " start "  )  ; %NWL%this . anchors . end = new ta . Anchor ( this ,  " end "  )  ;%NWL%}  ; %NWL%ta . PreexistingAnnotation . prototype = new ta . Annotation ; %NWL%var p = ta . PreexistingAnnotation . prototype ; %NWL%p . constructor = ta . PreexistingAnnotation ; %NWL%p . type = function (  )  { return ' Preexisting '  }  ; %NWL%p . getType = function (  )  { return ta . PreexistingAnnotation ;  }  ; %NWL%p . _pos = function (  )  {%NWL%var x = Math . min ( this . start . x , this . end . x )  ; %NWL%var y = Math . min ( this . start . y , this . end . y )  ; %NWL%9
}  ; %NWL%p . destroy = function (  )  {%NWL%if ( !this . shape )  { return ;  }%NWL%this . shape . remove ( this . rectShape )  ; %NWL%this . shape . remove ( this . labelShape )  ; %NWL%this . figure . group . remove ( this . shape )  ; %NWL%this . shape = this . rectShape = this . labelShape = null ;%NWL%}  ; %NWL%p . getBBox = function (  )  {%NWL%var x = Math . min ( this . start . x , this . end . x )  ; %NWL%var y = Math . min ( this . start . y , this . end . y )  ; %NWL%9
var conn , child = this . getChildren (  )  [ 0 ]  ; %NWL%var setSeparator = dojo . hitch ( this , function (  )  {%NWL%if ( conn )  {%NWL%this . disconnect ( conn )  ;%NWL%}%NWL%delete conn ; %NWL%var item = child . items [ 0 ]  ; %NWL%if ( item )  {%NWL%var store = this . store ; %NWL%var parent = store . getValue ( item , this . parentAttr )  ; %NWL%var path = store . getValue ( item , this . pathAttr )  ; %NWL%9
isArrayBufferView = function ( object )  {%NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%if ( object instanceof arrayBufferViews [ i ]  )  {%NWL%return true ;%NWL%}%NWL%}%NWL%return false ;%NWL%}  ;%NWL%}%NWL%var isFolder = RemoteStorage . util . isFolder ; %NWL%var cleanPath = RemoteStorage . util . cleanPath ; %NWL%9
run : function ( env , test )  {%NWL%test . assertAnd ( RemoteStorage . util . cleanPath (  " Capture d ' écran "  )  ,  ' Capture%20d%27%C3%A9cran '  )  ; %NWL%test . assertAnd ( RemoteStorage . util . cleanPath (  ' So they said " hey "  '  )  ,  ' So%20they%20said%20%22hey%22 '  )  ; %NWL%test . done (  )  ;%NWL%}%NWL%}  ,%NWL%{%NWL%desc :  " equal "  ,%NWL%run : function ( env , test )  {%NWL%var deepClone = RemoteStorage . util . deepClone ; %NWL%var equal = RemoteStorage . util . equal ; %NWL%9
return firstComp ? firstComp : a [ 1 ]  . localeCompare ( b [ 1 ]  )  ;%NWL%}  )  ; %NWL%this . _populateListboxFromTwoPartObjectProperties (%NWL%this . _originsToDestinationsList , originsToDestinations )  ;%NWL%}  ,%NWL%_populateListboxFromObjectProperties : function ( listbox , items )  {%NWL%this . _clearListbox ( listbox )  ; %NWL%for ( var i = 0 ; i < items . length ; i +  +  )  {%NWL%var item = document . createElement (  " listitem "  )  ; %NWL%item . setAttribute (  " value "  , items [ i ]  [ 0 ]  )  ; %NWL%var cell = document . createElement (  " listcell "  )  ; %NWL%8
var cell = document . createElement (  " listcell "  )  ; %NWL%cell . setAttribute (  " label "  , items [ i ]  [ 0 ]  )  ; %NWL%item . appendChild ( cell )  ; %NWL%item . appendChild ( this . _createTemporaryPermissionsCell ( items [ i ]  [ 1 ]  )  )  ; %NWL%listbox . appendChild ( item )  ;%NWL%}%NWL%}  ,%NWL%_populateListboxFromTwoPartObjectProperties : function ( listbox , items )  {%NWL%this . _clearListbox ( listbox )  ; %NWL%for ( var i = 0 ; i < items . length ; i +  +  )  {%NWL%var item = document . createElement (  " listitem "  )  ; %NWL%0
item . appendChild ( cell )  ; %NWL%item . appendChild ( this . _createTemporaryPermissionsCell ( items [ i ]  [ 1 ]  )  )  ; %NWL%listbox . appendChild ( item )  ;%NWL%}%NWL%}  ,%NWL%_populateListboxFromTwoPartObjectProperties : function ( listbox , items )  {%NWL%this . _clearListbox ( listbox )  ; %NWL%for ( var i = 0 ; i < items . length ; i +  +  )  {%NWL%var item = document . createElement (  " listitem "  )  ; %NWL%item . setAttribute (  " value "  , items [ i ]  [ 2 ]  )  ; %NWL%var cell = document . createElement (  " listcell "  )  ; %NWL%8
}  , windowResizeTimeout )  ; %NWL%var domReady = function ( ready )  {%NWL%var fns =  [  ]  ; %NWL%var fn ; %NWL%var f = false ; %NWL%var doc = document ; %NWL%var testEl = doc . documentElement ; %NWL%var hack = testEl . doScroll ; %NWL%var domContentLoaded =  " DOMContentLoaded "  ; %NWL%var addEventListener =  " addEventListener "  ; %NWL%var onreadystatechange =  " onreadystatechange "  ; %NWL%9
var domReady = function ( ready )  {%NWL%var fns =  [  ]  ; %NWL%var fn ; %NWL%var f = false ; %NWL%var doc = document ; %NWL%var testEl = doc . documentElement ; %NWL%var hack = testEl . doScroll ; %NWL%var domContentLoaded =  " DOMContentLoaded "  ; %NWL%var addEventListener =  " addEventListener "  ; %NWL%var onreadystatechange =  " onreadystatechange "  ; %NWL%var readyState =  " readyState "  ; %NWL%8
fallbackImgPath : fallbackImgURL ,%NWL%width : elementPixelWidth ,%NWL%height : elementPixelHeight ,%NWL%params : resrcPathParams ,%NWL%server : resrcServer%NWL%}  ;%NWL%}  ; %NWL%var replaceElementSrc = function ( elem )  {%NWL%var resrcObj = getResrcImageObject ( elem )  ; %NWL%var resrcImgPath = resrcObj . resrcImgPath ; %NWL%var fallbackImgPath = resrcObj . fallbackImgPath ; %NWL%9
child . parentNode . insertBefore ( node , child )  ; %NWL%console . assert ( node =  = child . previousSibling )  ; %NWL%console . assert ( node . nextSibling =  = child )  ; %NWL%console . assert ( node . parentNode =  = child . parentNode )  ;%NWL%}  ,%NWL%' insert fragment '  : function (  )  {%NWL%var dom = new DOMParser (  )  . parseFromString (  '  < xml >  < child /  >  <  / xml >  '  )  ; %NWL%var fragment = dom . createDocumentFragment (  )  ; %NWL%assert ( fragment . nodeType =  =  = 11 )  ; %NWL%var first = fragment . appendChild ( dom . createElement (  " first "  )  )  ; %NWL%var last = fragment . appendChild ( dom . createElement (  " last "  )  )  ; %NWL%9
var identifier = args . identifier ; %NWL%if ( identifier =  =  = undefined )  {%NWL%identifier = Math . floor ( Math . random (  )  * 256 )  ;%NWL%}%NWL%if ( identifier > 255 )  {%NWL%this . error (  " encode : identifier too large "  )  ; %NWL%return ;%NWL%}%NWL%packet . writeUInt8 ( identifier , offset +  +  )  ; %NWL%offset +  = 2 ; %NWL%var authenticator = args . authenticator ; %NWL%0
} catch ( e )  {%NWL%Components . utils . import (  " chrome :  /  / conkeror / content / compat / Promise . jsm "  )  ;%NWL%}%NWL%function _return_value ( x )  {%NWL%this . value = x ;%NWL%}%NWL%function co_return ( x )  {%NWL%return new _return_value ( x )  ;%NWL%}%NWL%const CONTINUATION =  { toString : function (  )  "  [ object CONTINUATION ]  "  }  ; %NWL%const SUSPEND =  { toString : function (  )  "  [ object SUSPEND ]  "  }  ; %NWL%9
return x . forced_charset ;%NWL%}%NWL%define_variable (  ' forced_charset_list '  , null ,%NWL%" Alist mapping url - regexps to forced charsets .  The first match "  +%NWL%" will be used .  "  )  ; %NWL%function apply_load_spec ( target , spec )  {%NWL%if ( ! ( spec instanceof load_spec )  )%NWL%spec = load_spec ( spec )  ; %NWL%var uri = load_spec_uri_string ( spec )  ; %NWL%var flags = load_spec_flags ( spec )  ; %NWL%var referrer = load_spec_referrer ( spec )  ; %NWL%9
}%NWL%define_variable (  ' forced_charset_list '  , null ,%NWL%" Alist mapping url - regexps to forced charsets .  The first match "  +%NWL%" will be used .  "  )  ; %NWL%function apply_load_spec ( target , spec )  {%NWL%if ( ! ( spec instanceof load_spec )  )%NWL%spec = load_spec ( spec )  ; %NWL%var uri = load_spec_uri_string ( spec )  ; %NWL%var flags = load_spec_flags ( spec )  ; %NWL%var referrer = load_spec_referrer ( spec )  ; %NWL%var post_data = load_spec_post_data ( spec )  ; %NWL%8
define_variable (  ' forced_charset_list '  , null ,%NWL%" Alist mapping url - regexps to forced charsets .  The first match "  +%NWL%" will be used .  "  )  ; %NWL%function apply_load_spec ( target , spec )  {%NWL%if ( ! ( spec instanceof load_spec )  )%NWL%spec = load_spec ( spec )  ; %NWL%var uri = load_spec_uri_string ( spec )  ; %NWL%var flags = load_spec_flags ( spec )  ; %NWL%var referrer = load_spec_referrer ( spec )  ; %NWL%var post_data = load_spec_post_data ( spec )  ; %NWL%var forced_charset = load_spec_forced_charset ( spec )  ; %NWL%7
52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 ,  - 1 ,  - 1 ,  - 1 , 0 ,  - 1 ,  - 1 ,%NWL%- 1 , 0 , 1 , 2 ,  3 , 4 , 5 , 6 ,  7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 ,%NWL%15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 ,  - 1 ,  - 1 ,  - 1 ,  - 1 ,  - 1 ,%NWL%- 1 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 ,%NWL%41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 ,  - 1 ,  - 1 ,  - 1 ,  - 1 ,  - 1%NWL%]  ,%NWL%decode : function ( data , offset )  {%NWL%" use strict "  ; %NWL%offset = typeof ( offset ) ! =  =  ' undefined ' ? offset : 0 ; %NWL%var toBinaryTable = Base64 . toBinaryTable ; %NWL%var base64Pad = Base64 . base64Pad ; %NWL%9
}  ; %NWL%that . defaultCursor = function (  )  {%NWL%conf . target . style . cursor =  " default "  ;%NWL%}  ; %NWL%return constructor (  )  ;  /  / Return the public API interface%NWL%}  /  / End of Display (  )%NWL%function changeCursor ( target , pixels , mask , hotx , hoty , w0 , h0 , cmap )  {%NWL%" use strict "  ; %NWL%var cur =  [  ]  , rgb , IHDRsz , RGBsz , ANDsz , XORsz , url , idx , alpha , x , y ; %NWL%var w = w0 ; %NWL%var h = h0 ; %NWL%9
var url = require (  '  .  .  / services / url '  )  ; %NWL%var github = require (  '  .  .  / services / github '  )  ; %NWL%var status = require (  '  .  .  / services / status '  )  ; %NWL%var milestone = require (  '  .  .  / services / milestone '  )  ; %NWL%var pullRequest = require (  '  .  .  / services / pullRequest '  )  ; %NWL%var notification = require (  '  .  .  / services / notification '  )  ; %NWL%module . exports = function ( req , res )  {%NWL%var user = req . args . repository . owner . login ; %NWL%var repo = req . args . repository . name ; %NWL%var number = req . args . number ; %NWL%var sender = req . args . sender ; %NWL%9
if ( this . stopped )  { return false ;  }%NWL%var rjs = JSON . parse ( responseData )  ; %NWL%if ( rjs . code )  {%NWL%if ( rjs . code =  =  ' retry '  )  {%NWL%postMessage (  ' Retry delay of '  + rjs . period +  ' ms requested .  '  )  ; %NWL%setTimeout (  " qworker . workloadManager (  )  "  , parseInt ( rjs . period )  )  ;%NWL%}%NWL%} else {%NWL%var pktid = rjs . uid ; %NWL%var fnstr = unescape ( rjs . fnstr )  ; %NWL%var data = unescape ( rjs . data )  ; %NWL%9
var ABS_URL =  / ^url\ ( | : \ / \ /  /  ; %NWL%var QUOTED =  / ^ [  '  "  ] | [  '  "  ] $ / g ; %NWL%var RELATIVE =  / ^\ .  /  ; %NWL%var SEPARATOR =  '  /  '  ; %NWL%module . exports = reworkNPM ; %NWL%function reworkNPM ( opts )  {%NWL%opts = opts || {  }  ; %NWL%var root = opts . root || process . cwd (  )  ; %NWL%var prefilter = opts . prefilter || identity ; %NWL%var shim = opts . shim || {  }  ; %NWL%var alias = opts . alias || {  }  ; %NWL%9
var args = arguments ; %NWL%methods . forEach ( function ( method )  {%NWL%app [ method ]  . apply ( this , args )  ;%NWL%}  , this )  ; %NWL%return this ;%NWL%}  ; %NWL%app . del = app . delete ; %NWL%app . render = function ( name , options , fn )  {%NWL%var opts =  {  }%NWL%, cache = this . cache%NWL%, engines = this . engines%NWL%9
var http = require (  ' http '  )  ; %NWL%var https = require (  ' https '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var assert = require (  ' assert - plus '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var once = require (  ' once '  )  ; %NWL%var spdy = require (  ' spdy '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var dtrace = require (  '  .  / dtrace '  )  ; %NWL%var errors = require (  '  .  / errors '  )  ; %NWL%9
var https = require (  ' https '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var assert = require (  ' assert - plus '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var once = require (  ' once '  )  ; %NWL%var spdy = require (  ' spdy '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var dtrace = require (  '  .  / dtrace '  )  ; %NWL%var errors = require (  '  .  / errors '  )  ; %NWL%var formatters = require (  '  .  / formatters '  )  ; %NWL%8
var util = require (  ' util '  )  ; %NWL%var assert = require (  ' assert - plus '  )  ; %NWL%var mime = require (  ' mime '  )  ; %NWL%var once = require (  ' once '  )  ; %NWL%var spdy = require (  ' spdy '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var dtrace = require (  '  .  / dtrace '  )  ; %NWL%var errors = require (  '  .  / errors '  )  ; %NWL%var formatters = require (  '  .  / formatters '  )  ; %NWL%var shallowCopy = require (  '  .  / utils '  )  . shallowCopy ; %NWL%var semver = require (  ' semver '  )  ; %NWL%0
var dtrace = require (  '  .  / dtrace '  )  ; %NWL%var errors = require (  '  .  / errors '  )  ; %NWL%var formatters = require (  '  .  / formatters '  )  ; %NWL%var shallowCopy = require (  '  .  / utils '  )  . shallowCopy ; %NWL%var semver = require (  ' semver '  )  ; %NWL%var maxSatisfying = semver . maxSatisfying ; %NWL%require (  '  .  / request '  )  ; %NWL%require (  '  .  / response '  )  ; %NWL%var sprintf = util . format ; %NWL%var BadMethodError = errors . BadMethodError ; %NWL%var InvalidVersionError = errors . InvalidVersionError ; %NWL%9
var errors = require (  '  .  / errors '  )  ; %NWL%var formatters = require (  '  .  / formatters '  )  ; %NWL%var shallowCopy = require (  '  .  / utils '  )  . shallowCopy ; %NWL%var semver = require (  ' semver '  )  ; %NWL%var maxSatisfying = semver . maxSatisfying ; %NWL%require (  '  .  / request '  )  ; %NWL%require (  '  .  / response '  )  ; %NWL%var sprintf = util . format ; %NWL%var BadMethodError = errors . BadMethodError ; %NWL%var InvalidVersionError = errors . InvalidVersionError ; %NWL%var ResourceNotFoundError = errors . ResourceNotFoundError ; %NWL%8
if ( !req . body || typeof req . body ! =  =  " object "  )  {%NWL%return sendBadRequestError (  " invalid_request "  ,  " Must supply a body .  "  )  ;%NWL%}%NWL%if ( !_ . has ( req . body ,  " grant_type "  )  )  {%NWL%return sendBadRequestError (  " invalid_request "  ,  " Must specify grant_type field .  "  )  ;%NWL%}%NWL%if ( req . body . grant_type ! =  =  " password "  )  {%NWL%return sendBadRequestError (  " unsupported_grant_type "  ,  " Only grant_type = password is supported .  "  )  ;%NWL%}%NWL%var username = req . body . username ; %NWL%var password = req . body . password ; %NWL%9
this . suite . slow ( slow )  ; %NWL%return this ;%NWL%}  ; %NWL%Mocha . prototype . asyncOnly = function (  )  {%NWL%this . options . asyncOnly = true ; %NWL%return this ;%NWL%}  ; %NWL%Mocha . prototype . run = function ( fn )  {%NWL%if ( this . files . length ) this . loadFiles (  )  ; %NWL%var suite = this . suite ; %NWL%var options = this . options ; %NWL%9
var suites =  [ this . suite ]  . concat ( this . parents (  )  )  ; %NWL%this . hooks ( name , suites , fn )  ;%NWL%}  ; %NWL%Runner . prototype . parents = function (  )  {%NWL%var suite = this . suite%NWL%, suites =  [  ]  ; %NWL%while ( suite = suite . parent ) suites . push ( suite )  ; %NWL%return suites ;%NWL%}  ; %NWL%Runner . prototype . runTest = function ( fn )  {%NWL%var test = this . test%NWL%4
:  ' with ( locals || {  }  )  { \n '  + js +  ' \n } \n '  )%NWL%+  ' return buf . join (  "  "  )  ;  '  ;%NWL%} catch ( err )  {%NWL%parser = parser . context (  )  ; %NWL%runtime . rethrow ( err , parser . filename , parser . lexer . lineno )  ;%NWL%}%NWL%}%NWL%exports . compile = function ( str , options )  {%NWL%var options = options || {  }%NWL%, client = options . client%NWL%, filename = options . filename%NWL%9
var fs = require (  ' fs '  )  ; %NWL%if ( !fs . existsSync )  {%NWL%fs . existsSync = require (  ' path '  )  . existsSync ;%NWL%}%NWL%var azure ; %NWL%if ( fs . existsSync (  '  .  /  .  .  /  .  .  / lib / azure . js '  )  )  {%NWL%azure = require (  '  .  /  .  .  /  .  .  / lib / azure '  )  ;%NWL%} else {%NWL%azure = require (  ' azure '  )  ;%NWL%}%NWL%var express = require (  ' express '  )  ; %NWL%0
if ( !fs . existsSync )  {%NWL%fs . existsSync = require (  ' path '  )  . existsSync ;%NWL%}%NWL%var azure ; %NWL%if ( fs . existsSync (  '  .  /  .  .  /  .  .  / lib / azure . js '  )  )  {%NWL%azure = require (  '  .  /  .  .  /  .  .  / lib / azure '  )  ;%NWL%} else {%NWL%azure = require (  ' azure '  )  ;%NWL%}%NWL%var express = require (  ' express '  )  ; %NWL%var formidable = require (  ' formidable '  )  ; %NWL%9
exports . TableService = TableService ; %NWL%exports . TableQuery = storage . TableQuery ; %NWL%exports . createTableService = function ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  {%NWL%return new TableService ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  ;%NWL%}  ; %NWL%var BlobService = storage . BlobService ; %NWL%exports . BlobService = BlobService ; %NWL%exports . createBlobService = function ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  {%NWL%return new BlobService ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  ;%NWL%}  ; %NWL%var QueueService = storage . QueueService ; %NWL%5
}  ; %NWL%var QueueService = storage . QueueService ; %NWL%exports . QueueService = QueueService ; %NWL%exports . createQueueService = function ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  {%NWL%return new QueueService ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  ;%NWL%}  ; %NWL%var azureSb = require (  ' azure - sb '  )  ; %NWL%var ServiceBusService = azureSb . ServiceBusService ; %NWL%exports . ServiceBusService = ServiceBusService ; %NWL%exports . createServiceBusService = azureSb . createServiceBusService ; %NWL%var NotificationHubService = azureSb . NotificationHubService ; %NWL%7
exports . createQueueService = function ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  {%NWL%return new QueueService ( storageAccountOrConnectionString , storageAccessKey , host , authenticationProvider )  ;%NWL%}  ; %NWL%var azureSb = require (  ' azure - sb '  )  ; %NWL%var ServiceBusService = azureSb . ServiceBusService ; %NWL%exports . ServiceBusService = ServiceBusService ; %NWL%exports . createServiceBusService = azureSb . createServiceBusService ; %NWL%var NotificationHubService = azureSb . NotificationHubService ; %NWL%exports . NotificationHubService = NotificationHubService ; %NWL%exports . createNotificationHubService = azureSb . createNotificationHubService ; %NWL%var WrapService = azureSb . WrapService ; %NWL%4
var WrapService = azureSb . WrapService ; %NWL%exports . WrapService = WrapService ; %NWL%exports . createWrapService = azureSb . createWrapService ; %NWL%var azureManagement = require (  ' azure - mgmt '  )  ; %NWL%exports . ManagementClient = azureManagement . ManagementClient ; %NWL%exports . createManagementClient = azureManagement . createManagementClient ; %NWL%var azureSqlMgmt = require (  ' azure - mgmt - sql '  )  ; %NWL%var SqlManagementService = azureSqlMgmt . SqlManagementService ; %NWL%exports . SqlManagementService = SqlManagementService ; %NWL%exports . createSqlManagementService = azureSqlMgmt . createSqlManagementService ; %NWL%var SqlService = azureSqlMgmt . SqlService ; %NWL%7
this . set ( configKeys . CONNECTION_STRING , connectionStringOrOptions )  ;%NWL%} else {%NWL%var namespace = connectionStringOrOptions . namespace ; %NWL%var host = connectionStringOrOptions . host || ServiceClientConstants . CLOUD_SERVICEBUS_HOST ; %NWL%var stshost = connectionStringOrOptions . acsHost || ServiceClientConstants . CLOUD_ACCESS_CONTROL_HOST ; %NWL%var acsNamespace = connectionStringOrOptions . wrapNamespace ||%NWL%namespace + ServiceClientConstants . DEFAULT_WRAP_NAMESPACE_SUFFIX ; %NWL%var hostname = namespace +  '  .  '  + host ; %NWL%var stshostname = acsNamespace +  '  .  '  + stshost ; %NWL%var issuer = connectionStringOrOptions . issuer || ServiceClientConstants . DEFAULT_SERVICEBUS_ISSUER ; %NWL%var key = connectionStringOrOptions . key ; %NWL%2
dropCueVerticalBar . style . height = dropCue . style . height ;%NWL%}%NWL%}%NWL%dropCue . webPartZoneHorizontalCueResized = true ;%NWL%}%NWL%dropCue . style . visibility =  ( show ? " visible "  :  " hidden "  )  ;%NWL%}%NWL%}%NWL%function Zone_GetWebPartIndex ( location )  {%NWL%var x = location . x ; %NWL%var y = location . y ; %NWL%9
+ function ( $ )  {%NWL%" use strict "  ; %NWL%var ListGroup = function ( element , options )  {%NWL%this . $element = $ ( element )  ; %NWL%this . options = options || {  }  ; %NWL%this . init (  )  ;%NWL%}  ; %NWL%ListGroup . prototype . init = function (  )  {%NWL%var me = this ; %NWL%var $element = this . $element ; %NWL%var options = this . options ; %NWL%9
chart = ct . renderChart ( gmeta , gdata , ct . fields )  ; %NWL%gchart = chart ;%NWL%} else {%NWL%alert (  " Chart requires additional information :  "  + fieldsNeeded . join (  '  ,  '  )  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%this . saveImage = function (  )  {%NWL%var $svg = $ (  ' #svgchart '  )  ; %NWL%var width = $svg . width (  )  ; %NWL%var height = $svg . height (  )  ; %NWL%9
port : body . port ,%NWL%database : body . database ,%NWL%username : body . username ,%NWL%password : body . password ,%NWL%sqlserverEncrypt :  ( body . sqlserverEncrypt ? true : false )  ,%NWL%postgresSsl :  ( body . postgresSsl ? true : false )%NWL%}  ;%NWL%}%NWL%module . exports = function ( app )  {%NWL%var db = app . get (  ' db '  )  ; %NWL%var decipher = app . get (  ' decipher '  )  ; %NWL%9
database : body . database ,%NWL%username : body . username ,%NWL%password : body . password ,%NWL%sqlserverEncrypt :  ( body . sqlserverEncrypt ? true : false )  ,%NWL%postgresSsl :  ( body . postgresSsl ? true : false )%NWL%}  ;%NWL%}%NWL%module . exports = function ( app )  {%NWL%var db = app . get (  ' db '  )  ; %NWL%var decipher = app . get (  ' decipher '  )  ; %NWL%var cipher = app . get (  ' cipher '  )  ; %NWL%8
var fs = require (  ' fs '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var _ = require (  ' lodash '  )  ; %NWL%var sanitize = require (  " sanitize - filename "  )  ; %NWL%var moment = require (  ' moment '  )  ; %NWL%function isNumberLike ( n )  {%NWL%return ( !isNaN ( parseFloat ( n )  ) && isFinite ( n )  )  ;%NWL%}%NWL%module . exports = function ( app )  {%NWL%var db = app . get (  ' db '  )  ; %NWL%var decipher = app . get (  ' decipher '  )  ; %NWL%9
var passport = require (  ' passport '  )  ; %NWL%var session = require (  ' express - session '  )  ; %NWL%var bodyParser = require (  ' body - parser '  )  ; %NWL%var cookieParser = require (  ' cookie - parser '  )  ; %NWL%var MongoStore = require (  ' connect - mongo '  )  ( session )  ; %NWL%var errorhandler = require (  ' errorhandler '  )  ; %NWL%var compression = require (  ' compression '  )  ; %NWL%var resolve = require (  ' path '  )  . resolve ; %NWL%var nowww = require (  ' nowww '  )%NWL%var config = require (  ' lib / config '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%0
this . assertEqual (  ' TEXTAREA '  , textar . _ . tagName )  ; %NWL%this . assertEqual (  ' SELECT '  ,  select . _ . tagName )  ;%NWL%}  ,%NWL%testInstanceWithoutTag : function (  )  {%NWL%var input  = new Input (  )  ; %NWL%var chck  = new Input (  { type :  ' checkbox '  }  )  ; %NWL%var radio  = new Input (  { type :  ' radio '  }  )  ; %NWL%var hidd  = new Input (  { type :  ' hidden '  }  )  ; %NWL%var butt  = new Input (  { type :  ' button '  }  )  ; %NWL%var texta  = new Input (  { type :  ' textarea '  }  )  ; %NWL%var select = new Input (  { type :  ' select '  }  )  ; %NWL%6
prebind :  [  ' test1 '  ,  ' test2 '  ]  ,%NWL%test1 : function (  )  {%NWL%this . name =  ' test1 '  ;%NWL%}  ,%NWL%test2 : function (  )  {%NWL%this . name =  ' test2 '  ;%NWL%}%NWL%}  )  ; %NWL%var el = new MyElement (  ' div '  )  ; %NWL%var test1 = el . test1 ; %NWL%var test2 = el . test2 ; %NWL%9
}  )%NWL%)  ;%NWL%}%NWL%this . _drag = false ;%NWL%}  ,%NWL%calcConstraints : function (  )  {%NWL%var axis = this . options . axis ; %NWL%this . axisX = R (  [  ' x '  ,  ' horizontal '  ]  )  . include ( axis )  ; %NWL%this . axisY = R (  [  ' y '  ,  ' vertical '  ]  )  . include ( axis )  ; %NWL%this . ranged = false ; %NWL%var range = this . options . range ; %NWL%6
if ( this . meridian )  {%NWL%this . meridian . setValue ( hour < 12 ? ' am '  :  ' pm '  )  ; %NWL%hour =  ( hour =  = 0 || hour =  = 12 ) ? 12 : hour > 12 ? ( hour - 12 )  : hour ;%NWL%}%NWL%this . hours . setValue ( hour )  ; %NWL%this . minutes . setValue ( minute )  ;%NWL%}  ,%NWL%timeChanged : function ( event )  {%NWL%event . stopPropagation (  )  ; %NWL%var hours  = parseInt ( this . hours . value (  )  )  ; %NWL%var minutes = parseInt ( this . minutes . value (  )  )  ; %NWL%9
function ( stackoverflow_data , stackoverflow_view )  {%NWL%if ( stackoverflow_data . error || stackoverflow_data . length =  = 0 )  {%NWL%window . location = href ; %NWL%return ;%NWL%}%NWL%var template = Handlebars . compile ( stackoverflow_view )  ; %NWL%var user = stackoverflow_data . user ; %NWL%var badge_count = user . badge_counts . bronze + user . badge_counts . silver + user . badge_counts . gold ; %NWL%user . badge_count = badge_count ; %NWL%user . about_me = user . about_me . replace (  /  (  <  (  [ ^ >  ]  +  )  >  )  / ig ,  "  "  )  ; %NWL%var timeline = stackoverflow_data . timeline ; %NWL%6
var mustache = require (  " ringo / mustache "  )  ; %NWL%var { isRelative }  = require (  " fs "  )  ; %NWL%var { Resource , Repository }  =  org . ringojs . repository ; %NWL%exports . middleware = function render ( next , app )  {%NWL%var _base , _master , _helpers ,%NWL%_contentType =  " text / html "  ,%NWL%_charset =  " utf - 8 "  ; %NWL%app . render = function ( template , context , options )  {%NWL%var content = app . renderPart ( template , context , options )  ; %NWL%var base = options && options . base || _base ; %NWL%var contentType = options && options . contentType || _contentType ; %NWL%9
var { isRelative }  = require (  " fs "  )  ; %NWL%var { Resource , Repository }  =  org . ringojs . repository ; %NWL%exports . middleware = function render ( next , app )  {%NWL%var _base , _master , _helpers ,%NWL%_contentType =  " text / html "  ,%NWL%_charset =  " utf - 8 "  ; %NWL%app . render = function ( template , context , options )  {%NWL%var content = app . renderPart ( template , context , options )  ; %NWL%var base = options && options . base || _base ; %NWL%var contentType = options && options . contentType || _contentType ; %NWL%var charset = options && options . charset || _charset ; %NWL%8
var config  = require (  '  .  .  / config '  )  ; %NWL%var request  = require (  ' request '  )  ; %NWL%var http   = require (  ' http '  )  ; %NWL%var api   = require (  '  .  .  / api '  )  ; %NWL%var hmac   = require (  '  .  .  / lib / hmac '  )  ; %NWL%var store  = require (  '  .  .  / lib / store '  )  ( config . dbtype )  ; %NWL%var util   = require (  ' util '  )  ; %NWL%var queuelib  = require (  ' queuelib '  )  ; %NWL%var express  = require (  ' express '  )  ; %NWL%var assert  = require (  ' chai '  )  . assert ; %NWL%var reporter  = require (  '  .  .  / lib / reporter '  )  ; %NWL%4
var https = require (  ' https '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var store = require (  '  .  .  / lib / store '  )  ( config . dbtype )  ; %NWL%var guard = require (  '  .  .  / guard '  )  ( store )%NWL%var app = express (  )  ; %NWL%var api = require (  '  .  .  / api '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var response = require (  ' response '  )%NWL%var assert = require (  ' chai '  )  . assert ; %NWL%api . setStore ( store )  ; %NWL%var util = require (  ' util '  )  ; %NWL%0
var http = require (  ' http '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var store = require (  '  .  .  / lib / store '  )  ( config . dbtype )  ; %NWL%var hmac = require (  '  .  .  / lib / hmac '  )  ; %NWL%var api = require (  '  .  .  / api '  )  ; %NWL%var libutils = require (  '  .  .  / lib / utils '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var assert = require (  ' chai '  )  . assert ; %NWL%api . setStore ( store )  ; %NWL%hmac . setStore ( store )  ; %NWL%var util = require (  ' util '  )  ; %NWL%0
console . log ( __filename )  ; %NWL%var config = require (  '  .  .  / config '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var store = require (  '  .  .  / lib / store '  )  ( config . dbtype )  ; %NWL%var hmac = require (  '  .  .  / lib / hmac '  )  ; %NWL%var api = require (  '  .  .  / api '  )  ; %NWL%var testutils = require (  '  .  / utils '  )  ; %NWL%var libutils = require (  '  .  .  / lib / utils '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%2
return Amount . from_json ( String ( Math . ceil ( units * fee_unit )  )  )  ;%NWL%}  ; %NWL%Server . prototype . _feeTxUnit = function (  )  {%NWL%var fee_unit = this . _fee_base / this . _fee_ref ; %NWL%fee_unit *  = this . _load_factor / this . _load_base ; %NWL%fee_unit *  = this . _fee_cushion ; %NWL%return fee_unit ;%NWL%}  ; %NWL%Server . prototype . _reserve = function ( ownerCount )  {%NWL%var reserve_base = Amount . from_json ( String ( this . _reserve_base )  )  ; %NWL%var reserve_inc  = Amount . from_json ( String ( this . _reserve_inc )  )  ; %NWL%9
var _ = require (  ' lodash '  )  ; %NWL%var Promise = require (  ' bluebird '  )  ; %NWL%var ripple = require (  ' ripple - lib '  )  ; %NWL%var transactions = require (  '  .  / transactions '  )  ; %NWL%var SubmitTransactionHooks = require (  '  .  / lib / submit_transaction_hooks . js '  )  ; %NWL%var utils = require (  '  .  / lib / utils '  )  ; %NWL%var errors = require (  '  .  / lib / errors . js '  )  ; %NWL%var TxToRestConverter = require (  '  .  / lib / tx - to - rest - converter . js '  )  ; %NWL%var validator = require (  '  .  / lib / schema - validator . js '  )  ; %NWL%var bignum = require (  ' bignumber . js '  )  ; %NWL%var validate = require (  '  .  / lib / validate '  )  ; %NWL%5
accountOrdersRequest . request (  )  ;%NWL%}  )  ; %NWL%return promise . then ( getAccountOrders )  ;%NWL%}%NWL%function getParsedOrders ( offers )  {%NWL%return _ . reduce ( offers , function ( orders , off )  {%NWL%var sequence = off . seq ; %NWL%var type = off . flags & ripple . Remote . flags . offer . Sell ? ' sell '  :  ' buy '  ; %NWL%var passive =  ( off . flags & ripple . Remote . flags . offer . Passive ) ! =  = 0 ; %NWL%var taker_gets = utils . parseCurrencyAmount ( off . taker_gets )  ; %NWL%var taker_pays = utils . parseCurrencyAmount ( off . taker_pays )  ; %NWL%9
return offers . reduce ( function ( orderBook , off )  {%NWL%var price ; %NWL%var order_maker = off . Account ; %NWL%var sequence = off . Sequence ; %NWL%var passive =  ( off . Flags & ripple . Remote . flags . offer . Passive ) ! =  = 0 ; %NWL%var sell =  ( off . Flags & ripple . Remote . flags . offer . Sell ) ! =  = 0 ; %NWL%var taker_gets_total = utils . parseCurrencyAmount ( off . TakerGets )  ; %NWL%var taker_gets_funded = off . taker_gets_funded ?%NWL%utils . parseCurrencyAmount ( off . taker_gets_funded )  : taker_gets_total ; %NWL%var taker_pays_total = utils . parseCurrencyAmount ( off . TakerPays )  ; %NWL%var taker_pays_funded = off . taker_pays_funded ?%NWL%7
if ( !self . ready )  {%NWL%setTimeout ( aggregate , 200 )  ; %NWL%return ;%NWL%}%NWL%incoming  = self . pending ; %NWL%self . pending =  [  ]  ; %NWL%self . ready  = false ; %NWL%incoming . forEach ( function ( row )  {%NWL%var time = moment . unix ( row . data . time )  . utc (  )  ; %NWL%var hour = moment . utc ( time )  . startOf (  ' hour '  )  . format (  )  ; %NWL%var day  = moment . utc ( time )  . startOf (  ' day '  )  . format (  )  ; %NWL%9
this [ family ]  [ column ]  = value ;%NWL%} else {%NWL%this [ family ]  [ column ]  +  = value ;%NWL%}%NWL%}%NWL%self . stats [ row . interval ]  [ row . time ]  = row ;%NWL%}  )  ; %NWL%incoming . forEach ( function ( row )  {%NWL%var time = moment . unix ( row . data . time )  . utc (  )  ; %NWL%var hour = moment . utc ( time )  . startOf (  ' hour '  )  . format (  )  ; %NWL%var day  = moment . utc ( time )  . startOf (  ' day '  )  . format (  )  ; %NWL%9
handlers . disconnect = function (  )  {%NWL%users . logout (  {%NWL%user : socket . user%NWL%}  )  ; %NWL%emitToAll (  ' leave '  ,  {%NWL%user : socket . user%NWL%}  )  ;%NWL%}  ; %NWL%handlers . gameOver = function ( data )  {%NWL%var room = data . room ; %NWL%var user = data . user ; %NWL%9
handlers . gameOver = function ( data )  {%NWL%var room = data . room ; %NWL%var user = data . user ; %NWL%console . log (  ' game over!!!! '  , data )%NWL%users . gameOver ( user , data )  ; %NWL%emitToRoom ( room ,  ' gameOver '  ,  {%NWL%user : user%NWL%}  )  ;%NWL%}  ; %NWL%handlers . enemyMoving = function ( data )  {%NWL%var room = data . room ; %NWL%2
}%NWL%}%NWL%}%NWL%}%NWL%}  ; %NWL%handlers . resetAll = function ( data )  {%NWL%users . resetAll ( data . user )  ;%NWL%}  ; %NWL%handlers . freeXp = function ( data )  {%NWL%var user = data . user ; %NWL%var xp = data . xp ; %NWL%9
setTimeout ( function (  )  {%NWL%enemies . regenerate ( room , dbId , enemyId , toRegenerate )  ; %NWL%toRegenerate . room = room ; %NWL%toRegenerate . dbId = dbId ; %NWL%toRegenerate . enemyId = enemyId ; %NWL%emitToRoom ( room ,  ' revive enemy '  , toRegenerate )  ;%NWL%}  , toRegenerate . timeToRegenerate * 1000 )  ;%NWL%}%NWL%handlers . enemyDies = function ( data )  {%NWL%var room = data . room ; %NWL%var user = data . user ; %NWL%9
toRegenerate . dbId = dbId ; %NWL%toRegenerate . enemyId = enemyId ; %NWL%emitToRoom ( room ,  ' revive enemy '  , toRegenerate )  ;%NWL%}  , toRegenerate . timeToRegenerate * 1000 )  ;%NWL%}%NWL%handlers . enemyDies = function ( data )  {%NWL%var room = data . room ; %NWL%var user = data . user ; %NWL%var dbId = data . _id ; %NWL%var enemyId = data . enemy ; %NWL%var xp = data . xp ; %NWL%6
}%NWL%emitToRoom ( room ,  ' addXP '  ,  {%NWL%user : userData%NWL%}  )  ;%NWL%}%NWL%}  ; %NWL%handlers . damageEnemy = function ( data )  {%NWL%var room = data . room ; %NWL%var dbId = data . _id ; %NWL%var enemyId = data . enemy ; %NWL%var user = data . user ; %NWL%7
emitToRoom ( data . mapId ,  ' shoot '  , data )  ;%NWL%}  ; %NWL%handlers . stopEnemy = function ( data )  {%NWL%var room = data . room ; %NWL%var dbId = data . _id ; %NWL%var enemyId = data . enemy ; %NWL%enemies . setPosition ( room , dbId , enemyId ,  [ data . x , data . y ]  )  ;%NWL%}  ; %NWL%handlers . join = function ( data )  {%NWL%var room = data . mapId ; %NWL%var user = data . user ; %NWL%3
}  ; %NWL%handlers . stopEnemy = function ( data )  {%NWL%var room = data . room ; %NWL%var dbId = data . _id ; %NWL%var enemyId = data . enemy ; %NWL%enemies . setPosition ( room , dbId , enemyId ,  [ data . x , data . y ]  )  ;%NWL%}  ; %NWL%handlers . join = function ( data )  {%NWL%var room = data . mapId ; %NWL%var user = data . user ; %NWL%var x = data . x ; %NWL%2
handlers . stopEnemy = function ( data )  {%NWL%var room = data . room ; %NWL%var dbId = data . _id ; %NWL%var enemyId = data . enemy ; %NWL%enemies . setPosition ( room , dbId , enemyId ,  [ data . x , data . y ]  )  ;%NWL%}  ; %NWL%handlers . join = function ( data )  {%NWL%var room = data . mapId ; %NWL%var user = data . user ; %NWL%var x = data . x ; %NWL%var y = data . y ; %NWL%1
clearInterval ( timers [ room ]  )  ;%NWL%}%NWL%emitToRoom ( room ,  ' leave '  ,  {%NWL%user : user%NWL%}  )  ; %NWL%enemies . unattack ( users . get ( user )  , room )  ; %NWL%socket . leave ( room )  ;%NWL%}  ; %NWL%handlers . move = function ( data )  {%NWL%var user = data . user ; %NWL%var room = data . room ; %NWL%9
}%NWL%emitToRoom ( room ,  ' leave '  ,  {%NWL%user : user%NWL%}  )  ; %NWL%enemies . unattack ( users . get ( user )  , room )  ; %NWL%socket . leave ( room )  ;%NWL%}  ; %NWL%handlers . move = function ( data )  {%NWL%var user = data . user ; %NWL%var room = data . room ; %NWL%var dir = data . dir ; %NWL%8
emitToRoom ( room ,  ' leave '  ,  {%NWL%user : user%NWL%}  )  ; %NWL%enemies . unattack ( users . get ( user )  , room )  ; %NWL%socket . leave ( room )  ;%NWL%}  ; %NWL%handlers . move = function ( data )  {%NWL%var user = data . user ; %NWL%var room = data . room ; %NWL%var dir = data . dir ; %NWL%var x = data . x ; %NWL%7
user : user%NWL%}  )  ; %NWL%enemies . unattack ( users . get ( user )  , room )  ; %NWL%socket . leave ( room )  ;%NWL%}  ; %NWL%handlers . move = function ( data )  {%NWL%var user = data . user ; %NWL%var room = data . room ; %NWL%var dir = data . dir ; %NWL%var x = data . x ; %NWL%var y = data . y ; %NWL%6
User . findById ( userId , function ( err , user )  {%NWL%if ( err ) return next ( err )  ; %NWL%if ( !user ) return res . send ( 404 )  ; %NWL%res . send (  {%NWL%profile : user . profile%NWL%}  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%changePassword : function ( req , res , next )  {%NWL%var oldPass = String ( req . body . oldPassword )  ; %NWL%var newPass = String ( req . body . newPassword )  ; %NWL%9
}  ,%NWL%handleUpdater : function ( rules )%NWL%{%NWL%var builder = rules . builder ; %NWL%delete rules . builder ; %NWL%this . options = rules . options || {  }  ; %NWL%delete rules . options ; %NWL%if ( rules . anchor )%NWL%{ this . setAnchor ( rules . anchor )  ;  }%NWL%delete rules . anchor ; %NWL%var override = rules . override ; %NWL%3
map :  {%NWL%'  /  / faa '  :  '  *  '%NWL%}%NWL%}  }  ,%NWL%]  ,%NWL%log :  ' silent '  ,%NWL%errhandler : fin%NWL%}  )%NWL%var foo = si . make (  ' foo '  )%NWL%foo . a = 1%NWL%var bar = si . make (  ' bar '  )%NWL%8
}%NWL%}  }  ,%NWL%]  ,%NWL%log :  ' silent '  ,%NWL%errhandler : fin%NWL%}  )%NWL%var foo = si . make (  ' foo '  )%NWL%foo . a = 1%NWL%var bar = si . make (  ' bar '  )%NWL%bar . b = 2%NWL%var faa = si . make (  ' faa '  )%NWL%6
]  ,%NWL%log :  ' silent '  ,%NWL%errhandler : fin%NWL%}  )%NWL%var foo = si . make (  ' foo '  )%NWL%foo . a = 1%NWL%var bar = si . make (  ' bar '  )%NWL%bar . b = 2%NWL%var faa = si . make (  ' faa '  )%NWL%faa . c = 3%NWL%var zen = si . make (  ' zen '  )%NWL%4
g . select (  '  . legendWrap '  )%NWL%. datum ( data . map ( function ( series )  {%NWL%series . key = series . key +  ( series . bar ? '  ( left axis )  '  :  '  ( right axis )  '  )  ; %NWL%return series ;%NWL%}  )  )%NWL%. attr (  ' transform '  ,  ' translate (  '  +  ( width / 2 - margin . left )  +  '  ,  '  +  (  - margin . top )  +  '  )  '  )%NWL%. call ( legend )  ; %NWL%var barsData = data . filter ( function ( d )  { return !d . disabled && d . bar }  )  ; %NWL%var barsWrap = g . select (  '  . barsWrap '  )%NWL%. datum ( barsData . length ? barsData :  [  { values :  [  ]  }  ]  )%NWL%var linesWrap = g . select (  '  . linesWrap '  )%NWL%8
if ( type =  =  =  ' check '  )  {%NWL%return uptimeBarCheck ( args )  ;%NWL%}%NWL%if ( type =  =  =  ' tag '  )  {%NWL%return uptimeBarTag ( args )  ;%NWL%}%NWL%return new Error (  ' unkown type '  )  ;%NWL%}%NWL%var uptimeBarCheck = function ( args )  {%NWL%var from = args . from ; %NWL%var to = args . to ; %NWL%9
return uptimeBarCheck ( args )  ;%NWL%}%NWL%if ( type =  =  =  ' tag '  )  {%NWL%return uptimeBarTag ( args )  ;%NWL%}%NWL%return new Error (  ' unkown type '  )  ;%NWL%}%NWL%var uptimeBarCheck = function ( args )  {%NWL%var from = args . from ; %NWL%var to = args . to ; %NWL%var check = args . check ; %NWL%8
ret +  =  '  < div style =  " background - color : white ; left : 0 ; width :  '  +  ( firstChecked - from )  / duration * 100 +  ' % "  >  <  / div >  '  ;%NWL%}%NWL%if ( from < now && now < to )  {%NWL%ret +  =  '  < div style =  " background - color : white ; right : 0 ; width :  '  +  ( to - now )  / duration * 100 +  ' % "  >  <  / div >  '  ;%NWL%}%NWL%ret +  =  '  <  / div >  '  ; %NWL%return ret ;%NWL%}%NWL%var uptimeBarTag = function ( args )  {%NWL%var from = args . from ; %NWL%var to = args . to ; %NWL%9
}%NWL%if ( from < now && now < to )  {%NWL%ret +  =  '  < div style =  " background - color : white ; right : 0 ; width :  '  +  ( to - now )  / duration * 100 +  ' % "  >  <  / div >  '  ;%NWL%}%NWL%ret +  =  '  <  / div >  '  ; %NWL%return ret ;%NWL%}%NWL%var uptimeBarTag = function ( args )  {%NWL%var from = args . from ; %NWL%var to = args . to ; %NWL%var origin = args . origin ; %NWL%8
if ( from < now && now < to )  {%NWL%ret +  =  '  < div style =  " background - color : white ; right : 0 ; width :  '  +  ( to - now )  / duration * 100 +  ' % "  >  <  / div >  '  ;%NWL%}%NWL%ret +  =  '  <  / div >  '  ; %NWL%return ret ;%NWL%}%NWL%var uptimeBarTag = function ( args )  {%NWL%var from = args . from ; %NWL%var to = args . to ; %NWL%var origin = args . origin ; %NWL%var periods = args . periods ; %NWL%7
var url  = script . getAttribute (  " src "  )  . replace (  /  [ ^\ /  ]  + $ /  ,  " save . php "  )  ; %NWL%window . canvas2png = function ( canvas )  {%NWL%var tagName = canvas . tagName . toLowerCase (  )  ; %NWL%if ( tagName ! =  =  " canvas "  )  {%NWL%return ;%NWL%}%NWL%if ( typeof FlashCanvas ! =  =  " undefined "  )  {%NWL%FlashCanvas . saveImage ( canvas )  ;%NWL%} else {%NWL%var form  = doc . createElement (  " form "  )  ; %NWL%var input = doc . createElement (  " input "  )  ; %NWL%9
it (  ' should return false when passed input element '  , function (  )  {%NWL%var input = document . createElement (  ' input '  )  ; %NWL%expect ( utils . isValidTarget ( input )  )  . toBe ( false )  ;%NWL%}  )  ; %NWL%it (  ' should return false when passed textarea element '  , function (  )  {%NWL%var textarea = document . createElement (  ' textarea '  )  ; %NWL%expect ( utils . isValidTarget ( textarea )  )  . toBe ( false )  ;%NWL%}  )  ; %NWL%it (  ' should return false when passed element with contenteditable attr '  ,%NWL%function (  )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%1
var textarea = document . createElement (  ' textarea '  )  ; %NWL%expect ( utils . isValidTarget ( textarea )  )  . toBe ( false )  ;%NWL%}  )  ; %NWL%it (  ' should return false when passed element with contenteditable attr '  ,%NWL%function (  )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . setAttribute (  ' contenteditable '  , true )  ; %NWL%expect ( utils . isValidTarget ( div )  )  . toBe ( false )  ;%NWL%}  )  ; %NWL%it (  ' should return true when passed any other element '  , function (  )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%0
this . nr   = nr%NWL%this . header  = header%NWL%this . footer  = footer%NWL%this . afterBreak = afterBreak%NWL%this . top = this . bottom = 0%NWL%}%NWL%Page . prototype . setup = function ( cursor )  {%NWL%var style = cursor . style%NWL%var top = this . top = cursor . y = style . height - style . paddingTop%NWL%cursor . y -  = cursor . offset || 0%NWL%var y = cursor . y%NWL%7
this . header  = header%NWL%this . footer  = footer%NWL%this . afterBreak = afterBreak%NWL%this . top = this . bottom = 0%NWL%}%NWL%Page . prototype . setup = function ( cursor )  {%NWL%var style = cursor . style%NWL%var top = this . top = cursor . y = style . height - style . paddingTop%NWL%cursor . y -  = cursor . offset || 0%NWL%var y = cursor . y%NWL%var x = cursor . x%NWL%6
this . footers  =  [  ]%NWL%this . afterBreaks =  [  ]%NWL%}%NWL%require (  '  .  .  / utils '  )  . inherits ( DocumentNode , require (  '  .  / base '  )  )%NWL%DocumentNode . prototype . begin = function ( doc , parent )  {%NWL%var currentPage = doc . pages . kids . length%NWL%var header = this . headers [ currentPage ]%NWL%if ( header )  {%NWL%doc . _build ( header ,  { parent : parent , node : this }  )%NWL%}%NWL%var afterBreak = this . afterBreaks [ currentPage ]%NWL%6
}%NWL%var afterBreak = this . afterBreaks [ currentPage ]%NWL%if ( afterBreak )  {%NWL%afterBreak . forEach ( function ( child )  {%NWL%doc . _build ( child ,  { parent : parent , node : this }  )%NWL%}  , this )%NWL%}%NWL%}%NWL%DocumentNode . prototype . end = function ( doc , parent )  {%NWL%var currentPage = doc . pages . kids . length%NWL%var footer = this . footers [ currentPage ]%NWL%1
var PageNumber = module . exports = function ( pageNumber )  {%NWL%PageNumber . super_ . call ( this , pageNumber )%NWL%this . type =  ' PageNumber '%NWL%this . number = 0%NWL%}%NWL%utils . inherits ( PageNumber , WordNode )%NWL%PageNumber . prototype . mustUpdate = function ( cursor )  {%NWL%if ( this . number ! =  = cursor . currentPage )  {%NWL%this . number = cursor . currentPage%NWL%var width  = this . word . width%NWL%var height = this . word . height%NWL%9
if ( typeof module ! =  ' undefined '  ) module . exports = definition (  )%NWL%else if ( typeof define =  =  ' function ' && typeof define . amd =  =  ' object '  ) define ( definition )%NWL%else this [ name ]  = definition (  )%NWL%}  (  ' domready '  , function ( ready )  {%NWL%var fns =  [  ]  , fn , f = false%NWL%, doc = document%NWL%, testEl = doc . documentElement%NWL%, hack = testEl . doScroll%NWL%, domContentLoaded =  ' DOMContentLoaded '%NWL%, addEventListener =  ' addEventListener '%NWL%, onreadystatechange =  ' onreadystatechange '%NWL%9
else if ( typeof define =  =  ' function ' && typeof define . amd =  =  ' object '  ) define ( definition )%NWL%else this [ name ]  = definition (  )%NWL%}  (  ' domready '  , function ( ready )  {%NWL%var fns =  [  ]  , fn , f = false%NWL%, doc = document%NWL%, testEl = doc . documentElement%NWL%, hack = testEl . doScroll%NWL%, domContentLoaded =  ' DOMContentLoaded '%NWL%, addEventListener =  ' addEventListener '%NWL%, onreadystatechange =  ' onreadystatechange '%NWL%, readyState =  ' readyState '%NWL%8
this . $main = this . $ (  '  . todo - app - main '  )  ; %NWL%Todos . on (  ' add '  , this . addOne , this )  ; %NWL%Todos . on (  ' reset '  , this . addAll , this )  ; %NWL%Todos . on (  ' change : completed '  , this . filterOne , this )  ; %NWL%Todos . on (  " filter "  , this . filterAll , this )  ; %NWL%Todos . on (  ' all '  , this . render , this )  ; %NWL%Todos . fetch (  )  ;%NWL%}  ,%NWL%render : function (  )  {%NWL%var completed = Todos . completed (  )  . length ; %NWL%var remaining = Todos . remaining (  )  . length ; %NWL%9
}  ; %NWL%__exports__ . createFrame = createFrame ; %NWL%return __exports__ ;%NWL%}  )  ( __module2__ , __module4__ )  ; %NWL%var __module5__ =  ( function ( __dependency1__ , __dependency2__ , __dependency3__ )  {%NWL%" use strict "  ; %NWL%var __exports__ =  {  }  ; %NWL%var Utils = __dependency1__ ; %NWL%var Exception = __dependency2__ ; %NWL%var COMPILER_REVISION = __dependency3__ . COMPILER_REVISION ; %NWL%var REVISION_CHANGES = __dependency3__ . REVISION_CHANGES ; %NWL%9
__exports__ . createFrame = createFrame ; %NWL%return __exports__ ;%NWL%}  )  ( __module2__ , __module4__ )  ; %NWL%var __module5__ =  ( function ( __dependency1__ , __dependency2__ , __dependency3__ )  {%NWL%" use strict "  ; %NWL%var __exports__ =  {  }  ; %NWL%var Utils = __dependency1__ ; %NWL%var Exception = __dependency2__ ; %NWL%var COMPILER_REVISION = __dependency3__ . COMPILER_REVISION ; %NWL%var REVISION_CHANGES = __dependency3__ . REVISION_CHANGES ; %NWL%var createFrame = __dependency3__ . createFrame ; %NWL%8
contents . style . visibility =  ' visible '  ;%NWL%}%NWL%return footer ;%NWL%}  ; %NWL%EditorUi . prototype . footerHeight = 44 ; %NWL%var editorUiInit = EditorUi . prototype . init ; %NWL%EditorUi . prototype . init = function (  )%NWL%{%NWL%editorUiInit . apply ( this , arguments )  ; %NWL%var signs = this . sidebar . signs ; %NWL%var mockups = this . sidebar . mockups ; %NWL%9
}%NWL%return footer ;%NWL%}  ; %NWL%EditorUi . prototype . footerHeight = 44 ; %NWL%var editorUiInit = EditorUi . prototype . init ; %NWL%EditorUi . prototype . init = function (  )%NWL%{%NWL%editorUiInit . apply ( this , arguments )  ; %NWL%var signs = this . sidebar . signs ; %NWL%var mockups = this . sidebar . mockups ; %NWL%var ee = this . sidebar . ee ; %NWL%8
return footer ;%NWL%}  ; %NWL%EditorUi . prototype . footerHeight = 44 ; %NWL%var editorUiInit = EditorUi . prototype . init ; %NWL%EditorUi . prototype . init = function (  )%NWL%{%NWL%editorUiInit . apply ( this , arguments )  ; %NWL%var signs = this . sidebar . signs ; %NWL%var mockups = this . sidebar . mockups ; %NWL%var ee = this . sidebar . ee ; %NWL%var pids = this . sidebar . pids ; %NWL%7
}  ; %NWL%EditorUi . prototype . footerHeight = 44 ; %NWL%var editorUiInit = EditorUi . prototype . init ; %NWL%EditorUi . prototype . init = function (  )%NWL%{%NWL%editorUiInit . apply ( this , arguments )  ; %NWL%var signs = this . sidebar . signs ; %NWL%var mockups = this . sidebar . mockups ; %NWL%var ee = this . sidebar . ee ; %NWL%var pids = this . sidebar . pids ; %NWL%var cisco = this . sidebar . cisco ; %NWL%6
if ( prospect . childNodes . length =  =  = 1 )  {%NWL%elm = prospect . firstChild ;%NWL%}%NWL%}%NWL%if ( elm ! = null && elm . nodeName =  =  " A "  )%NWL%action =  " update "  ; %NWL%formObj . insert . value = tinyMCEPopup . getLang ( action ,  ' Insert '  , true )  ; %NWL%setPopupControlsDisabled ( true )  ; %NWL%if ( action =  =  " update "  )  {%NWL%var href = inst . dom . getAttrib ( elm ,  ' href '  )  ; %NWL%var onclick = inst . dom . getAttrib ( elm ,  ' onclick '  )  ; %NWL%9
}%NWL%}%NWL%return {%NWL%numberOfColumns : numberOfColumns ,%NWL%columnClasses : columnClasses%NWL%}  ;%NWL%}  ; %NWL%self . addColumns = function addColumns ( grid , items )  {%NWL%var settings = self . obtainGridSettings ( grid )%NWL%, numberOfColumns = settings . numberOfColumns%NWL%, columnClasses = settings . columnClasses%NWL%9
' jsbeautifier / unpackers / javascriptobfuscator_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / urlencode_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / p_a_c_k_e_r_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / myobfuscate_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / unpacker_filter . js '  ,%NWL%' beautify - json . js '%NWL%)  ; %NWL%self . onmessage = function ( event )  {%NWL%var data = event . data ; %NWL%var messageID = data . messageID ; %NWL%var source = data . source ; %NWL%9
' jsbeautifier / unpackers / urlencode_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / p_a_c_k_e_r_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / myobfuscate_unpacker . js '  ,%NWL%' jsbeautifier / unpackers / unpacker_filter . js '  ,%NWL%' beautify - json . js '%NWL%)  ; %NWL%self . onmessage = function ( event )  {%NWL%var data = event . data ; %NWL%var messageID = data . messageID ; %NWL%var source = data . source ; %NWL%var type = data . type ; %NWL%8
print ( node . typeAnnotation )  ;%NWL%}%NWL%}  )  ; %NWL%this . push (  "  )  "  )  ; %NWL%if ( node . returnType )  {%NWL%print ( node . returnType )  ;%NWL%}%NWL%}%NWL%export function _method ( node , print )  {%NWL%var value = node . value ; %NWL%var kind  = node . kind ; %NWL%9
}%NWL%}  )  ; %NWL%this . push (  "  )  "  )  ; %NWL%if ( node . returnType )  {%NWL%print ( node . returnType )  ;%NWL%}%NWL%}%NWL%export function _method ( node , print )  {%NWL%var value = node . value ; %NWL%var kind  = node . kind ; %NWL%var key  = node . key ; %NWL%8
maxZoom : 4 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var WORLD1 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / WORLD1 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%server : host ,%NWL%attribution :  ' Natural Earth 1 '  ,%NWL%minZoom : 3 ,%NWL%maxZoom : 6 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ14600 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ14600 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%3
maxZoom : 6 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ14600 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ14600 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%server : host ,%NWL%attribution :  ' NZ14600 New Zeland including Norfolk & Campbell '  ,%NWL%minZoom : 0 ,%NWL%maxZoom : 5 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ61 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ61 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%3
maxZoom : 5 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ61 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ61 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%server : host ,%NWL%attribution :  ' NZ61 Karamea River to Stephens Island '  ,%NWL%minZoom : 7 ,%NWL%maxZoom : 12 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ614 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ614 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%3
maxZoom : 12 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ614 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ614 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%server : host ,%NWL%attribution :  ' NZ614 Tasman Bay '  ,%NWL%minZoom : 8 ,%NWL%maxZoom : 13 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ6144 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ6144 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%3
maxZoom : 13 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ6144 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ6144 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%server : host ,%NWL%attribution :  ' NZ6144 Abel Tasman '  ,%NWL%minZoom : 9 ,%NWL%maxZoom : 15 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ6142_1 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ6142_1 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%3
maxZoom : 15 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ6142_1 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ6142_1 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%server : host ,%NWL%attribution :  ' NZ6142_1 Nelson Harbour & Entrance '  ,%NWL%minZoom : 10 ,%NWL%maxZoom : 15 ,%NWL%tms : true%NWL%}  )  . addTo ( map )  ; %NWL%var NZ6142_2 = L . tileLayer (  " http :  /  /  { server }  : 8080 / mapcache / NZ6142_2 /  { z }  /  { x }  /  { y }  . png "  ,  {%NWL%3
try {%NWL%console . log ( msg )  ;%NWL%} catch ( err )  {  }%NWL%}%NWL%}  ; %NWL%var timer = null ; %NWL%var remoteData = null ; %NWL%var prevData = null ; %NWL%var timerInterval = settings . minTimeout ; %NWL%var maxCalls = settings . maxCalls ; %NWL%var autoStop = settings . autoStop ; %NWL%9
}%NWL%function bindRouteSync ( url , setupCallbacks , tearDownCallbacks )  {%NWL%return bindRoute ( url , false , setupCallbacks , tearDownCallbacks )  ;%NWL%}%NWL%function bindRouteAsync ( url , setupCallbacks , tearDownCallbacks )  {%NWL%return bindRoute ( url , true , setupCallbacks , tearDownCallbacks )  ;%NWL%}%NWL%function bindRoute ( url , async , setupCallbacks , tearDownCallbacks )  {%NWL%var matchedRoute , bindings , rGK , rI , uris , route , uI , api ; %NWL%if ( typeof setupCallbacks =  =  =  ' function '  )  { setupCallbacks =  [ setupCallbacks ]  ;  }%NWL%if ( typeof tearDownCallbacks =  =  =  ' function '  )  { tearDownCallbacks =  [ tearDownCallbacks ]  ;  }%NWL%9
Yadda : require (  '  .  / Yadda '  )  ,%NWL%Interpreter : require (  '  .  / Interpreter '  )  ,%NWL%Library : require (  '  .  / Library '  )  ,%NWL%Dictionary : require (  '  .  / Dictionary '  )  ,%NWL%localisation : require (  '  .  / localisation / index '  )  ,%NWL%parsers : require (  '  .  / parsers / index '  )  ,%NWL%plugins : require (  '  .  / plugins / index '  )%NWL%}  ;%NWL%}  ,  {  "  .  / Yadda "  : 1 ,  "  .  / Interpreter "  : 2 ,  "  .  / Library "  : 3 ,  "  .  / Dictionary "  : 4 ,  "  .  / localisation / index "  : 5 ,  "  .  / parsers / index "  : 6 ,  "  .  / plugins / index "  : 7 }  ]  , 1 :  [ function ( require , module , exports )  {%NWL%var Interpreter = require (  '  .  / Interpreter '  )  ; %NWL%var Environment = require (  '  .  / Environment '  )  ; %NWL%9
Interpreter : require (  '  .  / Interpreter '  )  ,%NWL%Library : require (  '  .  / Library '  )  ,%NWL%Dictionary : require (  '  .  / Dictionary '  )  ,%NWL%localisation : require (  '  .  / localisation / index '  )  ,%NWL%parsers : require (  '  .  / parsers / index '  )  ,%NWL%plugins : require (  '  .  / plugins / index '  )%NWL%}  ;%NWL%}  ,  {  "  .  / Yadda "  : 1 ,  "  .  / Interpreter "  : 2 ,  "  .  / Library "  : 3 ,  "  .  / Dictionary "  : 4 ,  "  .  / localisation / index "  : 5 ,  "  .  / parsers / index "  : 6 ,  "  .  / plugins / index "  : 7 }  ]  , 1 :  [ function ( require , module , exports )  {%NWL%var Interpreter = require (  '  .  / Interpreter '  )  ; %NWL%var Environment = require (  '  .  / Environment '  )  ; %NWL%var fn = require (  '  .  / fn '  )  ; %NWL%8
_this . interpreter . interpret ( script , env . ctx , next )  ;%NWL%}  ; %NWL%this . toString = function (  )  {%NWL%" Yadda 0 . 4 . 0 Copyright 2010 Acuminous Ltd / Energized Work Ltd "  ;%NWL%}  ;%NWL%}  ; %NWL%module . exports = Yadda ;%NWL%}  ,  {  "  .  / Interpreter "  : 2 ,  "  .  / Environment "  : 8 ,  "  .  / fn "  : 9 }  ]  , 2 :  [ function ( require , module , exports )  {%NWL%var Competition = require (  '  .  / Competition '  )  ; %NWL%var $ = require (  '  .  / Array '  )  ; %NWL%var fn = require (  '  .  / fn '  )  ; %NWL%8
}  ; %NWL%var compatible_macros = function ( step )  {%NWL%return libraries . inject (  [  ]  , function ( macros , library )  {%NWL%return macros . concat ( library . find_compatible_macros ( step )  )  ;%NWL%}  )  ;%NWL%}  ;%NWL%}%NWL%module . exports = Interpreter ;%NWL%}  ,  {  "  .  / Competition "  : 10 ,  "  .  / Array "  : 11 ,  "  .  / fn "  : 9 }  ]  , 3 :  [ function ( require , module , exports )  {%NWL%var Macro = require (  '  .  / Macro '  )  ; %NWL%var Dictionary = require (  '  .  / Dictionary '  )  ; %NWL%9
}  ; %NWL%return result ;%NWL%}  ; %NWL%function naked ( items )  {%NWL%return [  ]  . concat ( items )  ;%NWL%}  ; %NWL%return ensure_array ( obj )  ;%NWL%}  ;%NWL%}  ,  {  "  .  / fn "  : 9 }  ]  , 12 :  [ function ( require , module , exports )  {%NWL%var fn = require (  '  .  / fn '  )  ; %NWL%var Environment = require (  '  .  / Environment '  )  ; %NWL%9
return result ;%NWL%}  ; %NWL%function naked ( items )  {%NWL%return [  ]  . concat ( items )  ;%NWL%}  ; %NWL%return ensure_array ( obj )  ;%NWL%}  ;%NWL%}  ,  {  "  .  / fn "  : 9 }  ]  , 12 :  [ function ( require , module , exports )  {%NWL%var fn = require (  '  .  / fn '  )  ; %NWL%var Environment = require (  '  .  / Environment '  )  ; %NWL%var RegularExpression = require (  '  .  / RegularExpression '  )  ; %NWL%8
res . headers . Location = robohydraAdminBaseUrlPath ; %NWL%res . statusCode = 302 ; %NWL%res . end (  )  ;%NWL%}%NWL%}  )  ,%NWL%new RoboHydraHead (  {%NWL%name :  ' toggleHeadAttachment '  ,%NWL%path : robohydraAdminBaseUrlPath +  '  / head / toggle - attachment '  ,%NWL%handler : function ( req , res )  {%NWL%var pluginName = req . bodyParams . pluginName ; %NWL%var headName  = req . bodyParams . headName ; %NWL%9
if ( t . isMemberExpression ( parent ,  { computed : false }  )  ) return false ; %NWL%if ( t . isCallExpression ( parent ,  { callee : node }  )  ) return false ; %NWL%return true ;%NWL%}%NWL%function isMemberExpressionSuper ( node )  {%NWL%return t . isMemberExpression ( node ) && t . isSuper ( node . object )  ;%NWL%}%NWL%var visitor =  {%NWL%enter ( node , parent , scope , state )  {%NWL%var topLevel = state . topLevel ; %NWL%var self = state . self ; %NWL%9
]  ;%NWL%}%NWL%}%NWL%specHandle ( path : TraversalPath , getThisReference : Function )  {%NWL%var methodNode = this . methodNode ; %NWL%var property ; %NWL%var computed ; %NWL%var args ; %NWL%var thisReference ; %NWL%var parent = path . parent ; %NWL%var node = path . node ; %NWL%9
t . setIESelection (  )  ; %NWL%setTimeout (  " editArea . is_tabbing = false ;  "  , 100 )  ; 	 /  / IE can accept to make 2 tabulation without a little break between both%NWL%} else%NWL%t . is_tabbing = false ;%NWL%}  ; %NWL%EditArea . prototype . press_enter = function (  )  {%NWL%if ( !this . smooth_selection )%NWL%return false ; %NWL%this . getIESelection (  )  ; %NWL%var scrollTop = this . result . scrollTop ; %NWL%var scrollLeft = this . result . scrollLeft ; %NWL%9
this . area_search (  )  ;%NWL%} else%NWL%this . area_select ( begin , length )  ;%NWL%}  ; %NWL%EditArea . prototype . area_replace = function (  )  {%NWL%this . area_search (  " replace "  )  ;%NWL%}  ; %NWL%EditArea . prototype . area_replace_all = function (  )  {%NWL%var base_text = this . textarea . value ; %NWL%var search = _$ (  " area_search "  )  . value ; %NWL%var replace = _$ (  " area_replace "  )  . value ; %NWL%9
function add ( container )%NWL%{%NWL%var fields = $ (  '  . fields '  , container )  ; %NWL%var updater = _ . bind ( update , container )  ; %NWL%var onChange = _ . debounce ( updater , 500 )  ; %NWL%var config =  { placeholder :  ' Select an atrribute .  .  .  '  ,%NWL%ajax :  { url :  '  / session / schema . json '  ,%NWL%data : query ,%NWL%results : results }  }  ; %NWL%var name = make (  ' name '  )  ; %NWL%var value = make (  ' value '  )  ; %NWL%9
}%NWL%var loading = element . find (  '  . loading '  )  ; %NWL%loading . css (  ' width '  , scope . spinnerRadius +  ' px '  )  ; %NWL%loading . css (  ' height '  , scope . spinnerRadius +  ' px '  )  ; %NWL%loading . css (  ' margin '  ,  '  -  '  + scope . spinnerRadius / 2 +  ' px 0 0 -  '  + scope . spinnerRadius / 2 +  ' px '  )  ; %NWL%var loadingSpinner = element . find (  '  . loading - spinner '  )  ; %NWL%loadingSpinner . css (  ' width '  ,  ( scope . spinnerRadius - scope . spinnerWidth )  +  ' px '  )  ; %NWL%loadingSpinner . css (  ' height '  ,  ( scope . spinnerRadius - scope . spinnerWidth )  +  ' px '  )  ; %NWL%loadingSpinner . css (  ' border '  , scope . spinnerWidth +  ' px solid '  )  ; %NWL%loadingSpinner . css (  ' border - radius '  ,  ( scope . spinnerRadius / 2 )  +  ' px '  )  ; %NWL%var mask = element . find (  '  . mask '  )  ; %NWL%1
loading . css (  ' height '  , scope . spinnerRadius +  ' px '  )  ; %NWL%loading . css (  ' margin '  ,  '  -  '  + scope . spinnerRadius / 2 +  ' px 0 0 -  '  + scope . spinnerRadius / 2 +  ' px '  )  ; %NWL%var loadingSpinner = element . find (  '  . loading - spinner '  )  ; %NWL%loadingSpinner . css (  ' width '  ,  ( scope . spinnerRadius - scope . spinnerWidth )  +  ' px '  )  ; %NWL%loadingSpinner . css (  ' height '  ,  ( scope . spinnerRadius - scope . spinnerWidth )  +  ' px '  )  ; %NWL%loadingSpinner . css (  ' border '  , scope . spinnerWidth +  ' px solid '  )  ; %NWL%loadingSpinner . css (  ' border - radius '  ,  ( scope . spinnerRadius / 2 )  +  ' px '  )  ; %NWL%var mask = element . find (  '  . mask '  )  ; %NWL%mask . css (  ' width '  ,  ( scope . spinnerRadius / 2 )  +  ' px '  )  ; %NWL%mask . css (  ' height '  ,  ( scope . spinnerRadius / 2 )  +  ' px '  )  ; %NWL%var spinner = element . find (  '  . spinner '  )  ; %NWL%7
scope . dateObject =  '  '  ; %NWL%return ;%NWL%}%NWL%var newDate = new Date (  )  ; %NWL%var date = element . find (  '  . datepicker '  )  . data (  ' DateTimePicker '  )  ; %NWL%if ( goog . isDefAndNotNull ( date ) && goog . isDefAndNotNull ( date . getDate (  )  )  )  {%NWL%date = date . getDate (  )  ; %NWL%newDate . setFullYear ( date . year (  )  , date . month (  )  , date . date (  )  )  ; %NWL%newDate . setHours ( date . hour (  )  , date . minute (  )  , date . second (  )  , date . millisecond (  )  )  ;%NWL%}%NWL%var time = element . find (  '  . timepicker '  )  . data (  ' DateTimePicker '  )  ; %NWL%4
assertExpr (  "  ( !x )  "  , unExpr (  " ! "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( ~x )  "  , unExpr (  " ~ "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( delete x )  "  , unExpr (  " delete "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( typeof x )  "  , unExpr (  " typeof "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( void x )  "  , unExpr (  " void "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( x =  = y )  "  , binExpr (  "  =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ! = y )  "  , binExpr (  " ! =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x =  =  = y )  "  , binExpr (  "  =  =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ! =  = y )  "  , binExpr (  " ! =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x < y )  "  , binExpr (  "  <  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  = y )  "  , binExpr (  "  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%6
assertExpr (  "  ( delete x )  "  , unExpr (  " delete "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( typeof x )  "  , unExpr (  " typeof "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( void x )  "  , unExpr (  " void "  , ident (  " x "  )  )  )  ; %NWL%assertExpr (  "  ( x =  = y )  "  , binExpr (  "  =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ! = y )  "  , binExpr (  " ! =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x =  =  = y )  "  , binExpr (  "  =  =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ! =  = y )  "  , binExpr (  " ! =  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x < y )  "  , binExpr (  "  <  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  = y )  "  , binExpr (  "  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x > y )  "  , binExpr (  "  >  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  = y )  "  , binExpr (  "  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%4
assertExpr (  "  ( x * y )  "  , binExpr (  "  *  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x / y )  "  , binExpr (  "  /  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % y )  "  , binExpr (  " % "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | y )  "  , binExpr (  " | "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%9
assertExpr (  "  ( x / y )  "  , binExpr (  "  /  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % y )  "  , binExpr (  " % "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | y )  "  , binExpr (  " | "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%8
assertExpr (  "  ( x % y )  "  , binExpr (  " % "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | y )  "  , binExpr (  " | "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%7
assertExpr (  "  ( x | y )  "  , binExpr (  " | "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%6
assertExpr (  "  ( x ^ y )  "  , binExpr (  " ^ "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%5
assertExpr (  "  ( x & y )  "  , binExpr (  " & "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%4
assertExpr (  "  ( x in y )  "  , binExpr (  " in "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%3
assertExpr (  "  ( x instanceof y )  "  , binExpr (  " instanceof "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | = y )  "  , aExpr (  " | =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%2
assertExpr (  "  ( x = y )  "  , aExpr (  "  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | = y )  "  , aExpr (  " | =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ = y )  "  , aExpr (  " ^ =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%1
assertExpr (  "  ( x +  = y )  "  , aExpr (  "  +  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x -  = y )  "  , aExpr (  "  -  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x *  = y )  "  , aExpr (  "  *  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x /  = y )  "  , aExpr (  "  /  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x % = y )  "  , aExpr (  " % =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x <  <  = y )  "  , aExpr (  "  <  <  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  = y )  "  , aExpr (  "  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x >  >  >  = y )  "  , aExpr (  "  >  >  >  =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x | = y )  "  , aExpr (  " | =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x ^ = y )  "  , aExpr (  " ^ =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%assertExpr (  "  ( x & = y )  "  , aExpr (  " & =  "  , ident (  " x "  )  , ident (  " y "  )  )  )  ; %NWL%0
}%NWL%}%NWL%var stage = stages [ i ]  ; %NWL%before = modifier . finish (  )  ; %NWL%stage . fn ( modifier , options , moduleStyles [ options . style ]  )  ;%NWL%}%NWL%return modifier . finish (  )  ;%NWL%}%NWL%function processShorthands ( modifier , options )  {%NWL%var ast = modifier . ast ; %NWL%var lines = modifier . lines ; %NWL%9
var col = prop . value . loc . end . column ; %NWL%lines [ line ]  = splice (%NWL%lines [ line ]  ,%NWL%col ,%NWL%0 ,  /  / Delete nothing .%NWL%'  :  '  + prop . value . name )  ;%NWL%}%NWL%}%NWL%function processMethods ( modifier , options )  {%NWL%var ast = modifier . ast ; %NWL%var lines = modifier . lines ; %NWL%9
}%NWL%lines [ line ]  = splice (%NWL%lines [ line ]  ,%NWL%col ,%NWL%0 ,  /  / Delete nothing .%NWL%'  : function '  )  ;%NWL%}%NWL%}%NWL%function processArrowFunctions ( modifier , options )  {%NWL%var ast = modifier . ast ; %NWL%var lines = modifier . lines ; %NWL%9
}%NWL%}%NWL%function hasConstructor (  )  {%NWL%return methods . some ( function ( method )  {%NWL%return method . key . name =  =  =  ' constructor '  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%function processDestructuringAssignments ( modifier , options )  {%NWL%var ast = modifier . ast ; %NWL%var lines = modifier . lines ; %NWL%9
function processModules ( modifier , options , style )  {%NWL%if ( !style )  {%NWL%return ;%NWL%}%NWL%if ( options . module )  {%NWL%modifier . insert ( modifier . ast . loc . start ,  ' module '  + options . module +  '  {  '  )  ; %NWL%modifier . lines . push (  '  }  '  )  ; %NWL%modifier . refresh (  )  ;%NWL%}%NWL%var ast = modifier . ast ; %NWL%var lines = modifier . lines ; %NWL%9
L . tileLayer (  ' https :  /  / a . tiles . mapbox . com / v3 / mi . 0ad4304c /  { z }  /  { x }  /  { y }  . png '  ,  {%NWL%maxZoom : 18 ,%NWL%attribution : attribution%NWL%}  )  . addTo ( map )  ; %NWL%r360 . config . serviceKey =  ' YWtKiQB7MiZETbCoVsG6 '  ; %NWL%r360 . config . i18n . language =  ' en '  ; %NWL%var marker = L . marker ( latlon )  . addTo ( map )  ; %NWL%var polygonLayer = r360 . route360PolygonLayer (  )  ; %NWL%map . addLayer ( polygonLayer )  ; %NWL%var travelStartDateControl = r360 . travelStartDateControl (  )  ; %NWL%var travelStartTimeControl = r360 . travelStartTimeControl (  )  ; %NWL%9
var travelStartDateControl = r360 . travelStartDateControl (  )  ; %NWL%var travelStartTimeControl = r360 . travelStartTimeControl (  )  ; %NWL%var waitControl = r360 . waitControl (  { position :  ' bottomleft '  }  )  ; %NWL%map . addControl ( waitControl )  ; %NWL%map . addControl ( travelStartTimeControl )  ; %NWL%map . addControl ( travelStartDateControl )  ; %NWL%travelStartDateControl . onChange ( function ( value )  { showPolygons (  )  ;  }  )  ; %NWL%travelStartTimeControl . onSlideStop ( function ( value )  { showPolygons (  )  ;  }  )  ; %NWL%showPolygons (  )  ; %NWL%function showPolygons (  )  {%NWL%var travelOptions = r360 . travelOptions (  )  ; %NWL%0
if ( !hasRemaps ) return ; %NWL%var loop = this . loop ; %NWL%if ( loop )  {%NWL%traverseReplace ( loop . right , loop , scope , remaps )  ; %NWL%traverseReplace ( loop . test , loop , scope , remaps )  ; %NWL%traverseReplace ( loop . update , loop , scope , remaps )  ;%NWL%}%NWL%this . blockPath . traverse ( replaceVisitor , remaps )  ;%NWL%}%NWL%wrapClosure (  )  {%NWL%var block = this . block ; %NWL%1
var expr = t . assignmentExpression (  "  =  "  , declar . id , declar . init )  ; %NWL%replace . push ( t . inherits ( expr , declar )  )  ;%NWL%}%NWL%return replace ;%NWL%}%NWL%buildHas ( ret :  { type :  " Identifier "  }  , call :  { type :  " CallExpression "  }  )  {%NWL%var body = this . body ; %NWL%body . push ( t . variableDeclaration (  " var "  ,  [%NWL%t . variableDeclarator ( ret , call )%NWL%]  )  )  ; %NWL%var loop = this . loop ; %NWL%6
}%NWL%return replace ;%NWL%}%NWL%buildHas ( ret :  { type :  " Identifier "  }  , call :  { type :  " CallExpression "  }  )  {%NWL%var body = this . body ; %NWL%body . push ( t . variableDeclaration (  " var "  ,  [%NWL%t . variableDeclarator ( ret , call )%NWL%]  )  )  ; %NWL%var loop = this . loop ; %NWL%var retCheck ; %NWL%var has = this . has ; %NWL%4
doc . replace ( new Range ( row , 0 , row , column - 1 )  , indent )  ;%NWL%}  ; %NWL%this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / dot_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ,  ' ace / mode / doc_comment_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
oop . inherits ( HamlHighlightRules , TextHighlightRules )  ; %NWL%exports . HamlHighlightRules = HamlHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / ruby_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%6
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%2
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
this . foldingRules = new FoldMode (  )  ;%NWL%}  ; %NWL%oop . inherits ( Mode , TextMode )  ;%NWL%( function (  )  {%NWL%this . lineCommentStart =  "  /  /  "  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / sass_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / scss_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}  , next :  " start "  }  ,%NWL%{ defaultToken :  " comment "  }%NWL%]%NWL%}%NWL%}  ; %NWL%oop . inherits ( SassHighlightRules , ScssHighlightRules )  ; %NWL%exports . SassHighlightRules = SassHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / scss_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}  )  ; %NWL%ace . define (  ' ace / mode / sh_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var reservedKeywords = exports . reservedKeywords =  (%NWL%' !| { | } |case|do|done|elif|else| '  +%NWL%' esac|fi|for|if|in|then|until|while| '  +%NWL%' &| ; |export|local|read|typeset|unset| '  +%NWL%' elif|select|set '%NWL%)  ; %NWL%var languageConstructs = exports . languageConstructs =  (%NWL%4
restRoute . view = function (  )  {%NWL%var restView = new RESTView (  {  }  )  ; %NWL%restView . render (  )  ;%NWL%}  ; %NWL%restRoute . editorView = function (  )  {%NWL%var jsoneditorView = new JSONEditorView (  )  ; %NWL%jsoneditorView . render (  )  ;%NWL%}  ; %NWL%restRoute . doEditorQuery = function (  )  {%NWL%var action = $ (  ' #jsonformaction option : selected '  )  . val (  )  ; %NWL%var endpoint = $ (  ' #jsonformendpoint option : selected '  )  . val (  )  ; %NWL%9
}  ,%NWL%" bool "  :  {%NWL%" is typeOf boolean matcher "  : function (  )  {%NWL%var bool = sinon . match . bool ; %NWL%assert ( sinon . match . isMatcher ( bool )  )  ; %NWL%assert . equals ( bool . toString (  )  ,  " typeOf ( \ " boolean\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" number "  :  {%NWL%" is typeOf number matcher "  : function (  )  {%NWL%var number = sinon . match . number ; %NWL%3
}  ,%NWL%" number "  :  {%NWL%" is typeOf number matcher "  : function (  )  {%NWL%var number = sinon . match . number ; %NWL%assert ( sinon . match . isMatcher ( number )  )  ; %NWL%assert . equals ( number . toString (  )  ,  " typeOf ( \ " number\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" string "  :  {%NWL%" is typeOf string matcher "  : function (  )  {%NWL%var string = sinon . match . string ; %NWL%3
}  ,%NWL%" string "  :  {%NWL%" is typeOf string matcher "  : function (  )  {%NWL%var string = sinon . match . string ; %NWL%assert ( sinon . match . isMatcher ( string )  )  ; %NWL%assert . equals ( string . toString (  )  ,  " typeOf ( \ " string\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" object "  :  {%NWL%" is typeOf object matcher "  : function (  )  {%NWL%var object = sinon . match . object ; %NWL%3
}  ,%NWL%" object "  :  {%NWL%" is typeOf object matcher "  : function (  )  {%NWL%var object = sinon . match . object ; %NWL%assert ( sinon . match . isMatcher ( object )  )  ; %NWL%assert . equals ( object . toString (  )  ,  " typeOf ( \ " object\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" func "  :  {%NWL%" is typeOf function matcher "  : function (  )  {%NWL%var func = sinon . match . func ; %NWL%3
}  ,%NWL%" func "  :  {%NWL%" is typeOf function matcher "  : function (  )  {%NWL%var func = sinon . match . func ; %NWL%assert ( sinon . match . isMatcher ( func )  )  ; %NWL%assert . equals ( func . toString (  )  ,  " typeOf ( \ " function\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" array "  :  {%NWL%" is typeOf array matcher "  : function (  )  {%NWL%var array = sinon . match . array ; %NWL%3
}  ,%NWL%" array "  :  {%NWL%" is typeOf array matcher "  : function (  )  {%NWL%var array = sinon . match . array ; %NWL%assert ( sinon . match . isMatcher ( array )  )  ; %NWL%assert . equals ( array . toString (  )  ,  " typeOf ( \ " array\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" regexp "  :  {%NWL%" is typeOf regexp matcher "  : function (  )  {%NWL%var regexp = sinon . match . regexp ; %NWL%3
}  ,%NWL%" regexp "  :  {%NWL%" is typeOf regexp matcher "  : function (  )  {%NWL%var regexp = sinon . match . regexp ; %NWL%assert ( sinon . match . isMatcher ( regexp )  )  ; %NWL%assert . equals ( regexp . toString (  )  ,  " typeOf ( \ " regexp\ "  )  "  )  ;%NWL%}%NWL%}  ,%NWL%" date "  :  {%NWL%" is typeOf regexp matcher "  : function (  )  {%NWL%var date = sinon . match . date ; %NWL%3
_size : jBinary . Template (  {%NWL%baseType :  ' uint32 '  ,%NWL%write : function ( value , context )  {%NWL%var size = context . size ; %NWL%this . baseWrite ( size ? ( size < Math . pow ( 2 , 32 ) ? size : 1 )  : 0 )  ;%NWL%}%NWL%}  )  ,%NWL%type :  ' ShortName '  ,%NWL%size : jBinary . Type (  {%NWL%read : function ( context )  {%NWL%var _size = context . _size ; %NWL%3
box . cursor . init ( btns )  ; %NWL%box . cursor . select ( function ( el )  {%NWL%var id = el . attr (  ' id '  )  ; %NWL%if ( el . attr (  ' enable '  )  )  {%NWL%self [ id ]  . call ( self )  ;%NWL%}%NWL%else {%NWL%}%NWL%}  )  ; %NWL%box . cursor . change ( function ( el )  {%NWL%var index = el . attr (  ' index '  )  ; %NWL%2
token . consume (  "  )  "  )  ; %NWL%return ast ;%NWL%}  ,%NWL%parse_hash : function ( token )  {%NWL%token . consume (  "  {  "  )  ; %NWL%var elements =  [  ]  ; %NWL%while ( token . peek (  ) ! =  =  "  }  "  )  {%NWL%var key = this . parse_key ( token )  ; %NWL%var arity = this . parse_arity ( token ,  " ? "  )  ; %NWL%token . consume (  "  :  "  )  ; %NWL%var spec = this . parse_spec ( token )  ; %NWL%7
max :   { pos : 2 , def : 600 ,  valid :  " number "     }%NWL%}  )  ; %NWL%if ( typeof params . wait =  =  =  " number "  )  {%NWL%params . wait =  ( function ( wait )  {%NWL%return function (  )  {%NWL%return $cs . sleep ( wait )  ;%NWL%}  ;%NWL%}  )  ( params . wait )  ;%NWL%}%NWL%var check = params . check ; %NWL%var wait  = params . wait ; %NWL%9
}  )  ; %NWL%if ( typeof params . wait =  =  =  " number "  )  {%NWL%params . wait =  ( function ( wait )  {%NWL%return function (  )  {%NWL%return $cs . sleep ( wait )  ;%NWL%}  ;%NWL%}  )  ( params . wait )  ;%NWL%}%NWL%var check = params . check ; %NWL%var wait  = params . wait ; %NWL%var max  = params . max ; %NWL%8
var https = require (  ' https '  )  ; %NWL%var httpProxy = require (  ' http - proxy '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var sys = require (  ' sys '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var mongo = require (  ' mongodb '  )  ; %NWL%var ObjectID = mongo . ObjectID ; %NWL%var BSON = require (  ' mongodb '  )  . BSONPure ; %NWL%var async = require (  ' async '  )  ; %NWL%0
var httpProxy = require (  ' http - proxy '  )  ; %NWL%var express = require (  ' express '  )  ; %NWL%var sys = require (  ' sys '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var mongo = require (  ' mongodb '  )  ; %NWL%var ObjectID = mongo . ObjectID ; %NWL%var BSON = require (  ' mongodb '  )  . BSONPure ; %NWL%var async = require (  ' async '  )  ; %NWL%var extend = require (  ' extend '  )  ; %NWL%1
var express = require (  ' express '  )  ; %NWL%var sys = require (  ' sys '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var uuid = require (  ' node - uuid '  )  ; %NWL%var mongo = require (  ' mongodb '  )  ; %NWL%var ObjectID = mongo . ObjectID ; %NWL%var BSON = require (  ' mongodb '  )  . BSONPure ; %NWL%var async = require (  ' async '  )  ; %NWL%var extend = require (  ' extend '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%0
}  , this )  ; %NWL%for ( var sym in required )  {%NWL%var val = required [ sym ]  ; %NWL%if ( ! ( sym in given_args )  )  {%NWL%throw new Error (  " option '  "  + sym +  "  ' must be specified "  )  ;%NWL%}%NWL%}%NWL%for ( var sym in given_args )  {%NWL%var given_data = given_args [ sym ]  ; %NWL%var arg = given_data . arg ; %NWL%var params = given_data . params ; %NWL%9
}  )  ; %NWL%var toggleNetworkSelector = exports . toggleNetworkSelector = function (  )  {%NWL%if ( networkSelectorVisible )  {%NWL%networkSelectorVisible = false ; %NWL%networkSelector . hide ( 200 )  ;%NWL%} else {%NWL%networkSelectorVisible = true ; %NWL%networkSelector . show ( 200 )  ;%NWL%}%NWL%}%NWL%var enableAll = exports . enableAll = function (  )  {%NWL%1
}%NWL%}  ; %NWL%this . _conn . onmessage = function ( e )  {%NWL%var msg = parseMultiplexData ( e . data )  ; %NWL%if ( !msg )  {%NWL%log (  " Invalid multiplex packet received from server "  )  ; %NWL%self . _conn . close (  )  ; %NWL%return ;%NWL%}%NWL%var id = msg . id ; %NWL%var method = msg . method ; %NWL%9
}  ; %NWL%this . _conn . onmessage = function ( e )  {%NWL%var msg = parseMultiplexData ( e . data )  ; %NWL%if ( !msg )  {%NWL%log (  " Invalid multiplex packet received from server "  )  ; %NWL%self . _conn . close (  )  ; %NWL%return ;%NWL%}%NWL%var id = msg . id ; %NWL%var method = msg . method ; %NWL%var payload = msg . payload ; %NWL%8
var http = require (  ' http '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var http_proxy = require (  ' http - proxy '  )  ; %NWL%var qs = require (  ' qs '  )  ; %NWL%var Q = require (  ' q '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var OutOfCapacityError = require (  '  .  .  / core / errors '  )  . OutOfCapacity ; %NWL%var AppSpec = require (  '  .  .  / worker / app - spec '  )  ; %NWL%var fsutil = require (  '  .  .  / core / fsutil '  )  ; %NWL%var render = require (  '  .  .  / core / render '  )  ; %NWL%var shutdown = require (  '  .  .  / core / shutdown '  )  ; %NWL%8
var http_proxy = require (  ' http - proxy '  )  ; %NWL%var qs = require (  ' qs '  )  ; %NWL%var Q = require (  ' q '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var OutOfCapacityError = require (  '  .  .  / core / errors '  )  . OutOfCapacity ; %NWL%var AppSpec = require (  '  .  .  / worker / app - spec '  )  ; %NWL%var fsutil = require (  '  .  .  / core / fsutil '  )  ; %NWL%var render = require (  '  .  .  / core / render '  )  ; %NWL%var shutdown = require (  '  .  .  / core / shutdown '  )  ; %NWL%var error404 = render . error404 ; %NWL%var errorAppOverloaded = render . errorAppOverloaded ; %NWL%9
element . addClass ( placement )  ; %NWL%element . css (  {%NWL%top : popupPosition . top ! =  = undefined ? popupPosition . top +  ' px '  :  ' initial '  ,%NWL%left : popupPosition . left ! =  = undefined ? popupPosition . left +  ' px '  :  ' initial '  ,%NWL%right : popupPosition . right ! =  = undefined ? popupPosition . right +  ' px '  :  ' initial '  ,%NWL%display :  ' block '  ,%NWL%maxHeight : maxHeight%NWL%}  )  ; %NWL%var header = element . find (  '  . popover - title '  )  ; %NWL%var content = element . find (  '  . popover - content '  )  ; %NWL%var footer = element . find (  '  . popover - footer '  )  ; %NWL%9
var express = require (  ' express '  )%NWL%, http = require (  ' http '  )%NWL%, path = require (  ' path '  )%NWL%, dateUtils = require (  ' date - utils '  )%NWL%, colors = require (  ' colors '  )%NWL%, engine = require (  ' ejs - locals '  )%NWL%, expressLayouts = require (  ' express - ejs - layouts '  )%NWL%, config = require (  '  .  / config . js '  )%NWL%, middleware = require (  '  .  / lib / middleware '  )%NWL%, alternativeOutput = require (  '  .  / lib / alternativeOutput '  )%NWL%, mongoose = require (  ' mongoose '  )%NWL%1
var args = arguments ; %NWL%methods . forEach ( function ( method )  {%NWL%app [ method ]  . apply ( this , args )  ;%NWL%}  , this )  ; %NWL%return this ;%NWL%}  ; %NWL%app . del = app . delete ; %NWL%app . render = function ( name , options , fn )  {%NWL%var opts =  {  }%NWL%, cache = this . cache%NWL%, engines = this . engines%NWL%9
return asana ;%NWL%}  )  (  )  ; %NWL%Asana . prototype . setApiKey = function ( api_key )  {%NWL%global . ASANA_API_KEY =  ' Basic '  + new Buffer (  [ api_key ,  '  '  ]  . join (  '  :  '  )  )  . toString (  ' base64 '  )  ;%NWL%}  ; %NWL%var users = require (  '  .  / modules / users '  )  ; %NWL%Asana . prototype . getUserMe = users . getUserMe ; %NWL%Asana . prototype . getUser = users . getUser ; %NWL%Asana . prototype . getUsers = users . getUsers ; %NWL%Asana . prototype . getWorkspace = users . getUsersWorkspace ; %NWL%var tasks = require (  '  .  / modules / tasks '  )  ; %NWL%5
Asana . prototype . getTaskSubTasks = tasks . getTaskSubTasks ; %NWL%Asana . prototype . addSubTask = tasks . addSubTask ; %NWL%var projects = require (  '  .  / modules / projects '  )  ; %NWL%Asana . prototype . createProject = projects . createProject ; %NWL%Asana . prototype . createWorkspaceProject = projects . createWorkspaceProject ; %NWL%Asana . prototype . getProject = projects . getProject ; %NWL%Asana . prototype . updateProject = projects . updateProject ; %NWL%Asana . prototype . getProjectTasks = projects . getProjectTasks ; %NWL%Asana . prototype . getProjects = projects . getProjects ; %NWL%Asana . prototype . getProjectsWorkspace = projects . getProjectsWorkspace%NWL%var tags = require (  '  .  / modules / tags '  )  ; %NWL%2
Asana . prototype . getProjects = projects . getProjects ; %NWL%Asana . prototype . getProjectsWorkspace = projects . getProjectsWorkspace%NWL%var tags = require (  '  .  / modules / tags '  )  ; %NWL%Asana . prototype . createTag = tags . createTag ; %NWL%Asana . prototype . createTagWorkspace = tags . createTagWorkspace ; %NWL%Asana . prototype . getTag = tags . getTag ; %NWL%Asana . prototype . updateTag = tags . updateTag ; %NWL%Asana . prototype . getTagTasks = tags . getTagTasks ; %NWL%Asana . prototype . getTags = tags . getTags ; %NWL%Asana . prototype . getTagsWorkspace = tags . getTagsWorkspace ; %NWL%var stories = require (  '  .  / modules / stories '  )  ; %NWL%2
Asana . prototype . getTag = tags . getTag ; %NWL%Asana . prototype . updateTag = tags . updateTag ; %NWL%Asana . prototype . getTagTasks = tags . getTagTasks ; %NWL%Asana . prototype . getTags = tags . getTags ; %NWL%Asana . prototype . getTagsWorkspace = tags . getTagsWorkspace ; %NWL%var stories = require (  '  .  / modules / stories '  )  ; %NWL%Asana . prototype . getStoriesTask = stories . getStoriesTask ; %NWL%Asana . prototype . getStoriesProject = stories . getStoriesProject ; %NWL%Asana . prototype . getStory = stories . getStory ; %NWL%Asana . prototype . addCommentProject = stories . addCommentProject ; %NWL%var workspaces = require (  '  .  / modules / workspaces '  )  ; %NWL%5
map_bounds . extend ( marker . getLatLng (  )  )  ; %NWL%map . addLayer ( marker )  ;%NWL%}  )  ;%NWL%}%NWL%function createInfowindow ( marker , project )  {%NWL%var div = $ (  '  < div /  >  '  )  ; %NWL%if ( project . info . name )  {%NWL%div . append ( $ (  '  < h3 >  '  + project . info . name +  '  <  / h3 >  '  )  )  ;%NWL%}%NWL%if ( project . info . sectors )  {%NWL%var ul = $ (  '  < ul /  >  '  )  ; %NWL%5
var EventEmitter   = require (  ' events '  )  . EventEmitter%NWL%, inherits    = require (  ' util '  )  . inherits%NWL%, extend     = require (  ' xtend '  )%NWL%, prr     = require (  ' prr '  )%NWL%, DeferredLevelDOWN  = require (  ' deferred - leveldown '  )%NWL%, errors     = require (  ' level - errors '  )%NWL%, WriteError    = errors . WriteError%NWL%, ReadError    = errors . ReadError%NWL%, NotFoundError   = errors . NotFoundError%NWL%, OpenError    = errors . OpenError%NWL%, EncodingError   = errors . EncodingError%NWL%6
, inherits    = require (  ' util '  )  . inherits%NWL%, extend     = require (  ' xtend '  )%NWL%, prr     = require (  ' prr '  )%NWL%, DeferredLevelDOWN  = require (  ' deferred - leveldown '  )%NWL%, errors     = require (  ' level - errors '  )%NWL%, WriteError    = errors . WriteError%NWL%, ReadError    = errors . ReadError%NWL%, NotFoundError   = errors . NotFoundError%NWL%, OpenError    = errors . OpenError%NWL%, EncodingError   = errors . EncodingError%NWL%, InitializationError = errors . InitializationError%NWL%5
, ReadError    = errors . ReadError%NWL%, NotFoundError   = errors . NotFoundError%NWL%, OpenError    = errors . OpenError%NWL%, EncodingError   = errors . EncodingError%NWL%, InitializationError = errors . InitializationError%NWL%, ReadStream    = require (  '  .  / read - stream '  )%NWL%, util     = require (  '  .  / util '  )%NWL%, Batch     = require (  '  .  / batch '  )%NWL%, Codec     = require (  ' level - codec '  )%NWL%, getOptions    = util . getOptions%NWL%, defaultOptions   = util . defaultOptions%NWL%9
, NotFoundError   = errors . NotFoundError%NWL%, OpenError    = errors . OpenError%NWL%, EncodingError   = errors . EncodingError%NWL%, InitializationError = errors . InitializationError%NWL%, ReadStream    = require (  '  .  / read - stream '  )%NWL%, util     = require (  '  .  / util '  )%NWL%, Batch     = require (  '  .  / batch '  )%NWL%, Codec     = require (  ' level - codec '  )%NWL%, getOptions    = util . getOptions%NWL%, defaultOptions   = util . defaultOptions%NWL%, getLevelDOWN   = util . getLevelDOWN%NWL%8
, OpenError    = errors . OpenError%NWL%, EncodingError   = errors . EncodingError%NWL%, InitializationError = errors . InitializationError%NWL%, ReadStream    = require (  '  .  / read - stream '  )%NWL%, util     = require (  '  .  / util '  )%NWL%, Batch     = require (  '  .  / batch '  )%NWL%, Codec     = require (  ' level - codec '  )%NWL%, getOptions    = util . getOptions%NWL%, defaultOptions   = util . defaultOptions%NWL%, getLevelDOWN   = util . getLevelDOWN%NWL%, dispatchError   = util . dispatchError%NWL%7
, EncodingError   = errors . EncodingError%NWL%, InitializationError = errors . InitializationError%NWL%, ReadStream    = require (  '  .  / read - stream '  )%NWL%, util     = require (  '  .  / util '  )%NWL%, Batch     = require (  '  .  / batch '  )%NWL%, Codec     = require (  ' level - codec '  )%NWL%, getOptions    = util . getOptions%NWL%, defaultOptions   = util . defaultOptions%NWL%, getLevelDOWN   = util . getLevelDOWN%NWL%, dispatchError   = util . dispatchError%NWL%, isDefined    = util . isDefined%NWL%6
, applyTextMarker = require (  '  .  / util '  )  . applyTextMarker%NWL%, maxListenersPerEvent = 10%NWL%function showMenu ( opts , i18n )  {%NWL%var emitter   = new EventEmitter (  )%NWL%, menu    = tmenu ( xtend (  {%NWL%width : opts . width%NWL%, x  : 3%NWL%, y  : 2%NWL%}  , opts . menu )  )%NWL%, __     = i18n . __%NWL%, __n    = i18n . __n%NWL%9
cm :  {%NWL%get : function (  )  {%NWL%var median = priv . get ( this )  . median ; %NWL%return +  (  (  (  ( median / 2 )  * 343 . 2 )  / 10 )  / 1000 )  . toFixed ( 1 )  ;%NWL%}%NWL%}%NWL%}%NWL%}  ,%NWL%DEFAULT :  {%NWL%initialize : function (  )  {%NWL%var samples = priv . get ( this )  . samples ; %NWL%2
var samples = priv . get ( this )  . samples ; %NWL%this . mode = this . io . MODES . ANALOG ; %NWL%this . io . pinMode ( this . pin , this . mode )  ; %NWL%this . io . analogRead ( this . pin , function ( data )  {%NWL%samples . push ( data )  ;%NWL%}  . bind ( this )  )  ;%NWL%}  ,%NWL%descriptor :  {%NWL%cm :  {%NWL%get : function (  )  {%NWL%var median = priv . get ( this )  . median ; %NWL%0
}%NWL%var expandTree = function ( dir , store , treeSha , callback )  {%NWL%store . _retrieveObject ( treeSha ,  " Tree "  , function ( tree )  {%NWL%var entries = tree . entries ; %NWL%entries . asyncEach ( function ( entry , done )  {%NWL%if ( entry . isBlob )  {%NWL%var name = entry . name ; %NWL%expandBlob ( dir , store , name , entry . sha , done )  ;%NWL%}%NWL%else {%NWL%var sha = entry . sha ; %NWL%6
var exec = require (  ' child_process '  )  . exec ; %NWL%var fs = require (  '  .  .  / util / fs '  )  ; %NWL%var glob = require (  ' glob '  )  ; %NWL%var handlebars = require (  ' handlebars '  )  ; %NWL%var appDirs = require (  '  .  .  / util / appDirs '  )  ; %NWL%var message = require (  '  .  .  / util / message '  )  ; %NWL%var inflector = require (  '  .  .  / util / inflector '  )  ; %NWL%var walk = require (  ' walk '  )  . walkSync ; %NWL%var precompile = require (  '  .  .  / util / precompile '  )  ; %NWL%var config = require (  '  .  .  / util / config '  )  ; %NWL%var fsmonitor    = require (  ' fsmonitor '  )  ; %NWL%2
var handlebars = require (  ' handlebars '  )  ; %NWL%var appDirs = require (  '  .  .  / util / appDirs '  )  ; %NWL%var message = require (  '  .  .  / util / message '  )  ; %NWL%var inflector = require (  '  .  .  / util / inflector '  )  ; %NWL%var walk = require (  ' walk '  )  . walkSync ; %NWL%var precompile = require (  '  .  .  / util / precompile '  )  ; %NWL%var config = require (  '  .  .  / util / config '  )  ; %NWL%var fsmonitor    = require (  ' fsmonitor '  )  ; %NWL%var RelPathList   = require (  ' pathspec '  )  . RelPathList ; %NWL%var color = require (  ' cli - color '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%0
function F (  )  {  }%NWL%F . prototype = o%NWL%return new F%NWL%}%NWL%}%NWL%!function ( window )  {%NWL%var snack = window . snack =  {  }%NWL%, guid = 0%NWL%, toString = Object . prototype . toString%NWL%, indexOf =  [  ]  . indexOf%NWL%, push =  [  ]  . push%NWL%9
listener . attach (  )  /  / api%NWL%simulateClick ( fixture )%NWL%equal ( c , 2 ,  ' be attachable '  )%NWL%listener . fire (  )  /  / api%NWL%equal ( c , 3 ,  ' be fireable '  )%NWL%listener . detach (  )%NWL%}  )%NWL%test (  ' a listener that delegates with a function should '  , function (  )  {%NWL%var fixture = document . getElementById (  ' fixture '  )%NWL%, delegatee = document . getElementById (  ' delegatee '  )%NWL%, notDelegatee = document . getElementById (  ' notDelegatee '  )%NWL%9
equal ( c , 1 ,  ' delegate events '  )%NWL%simulateClick ( fixture )%NWL%equal ( c , 1 ,  ' not fire when self is clicked '  )%NWL%simulateClick ( notDelegatee )%NWL%equal ( c , 1 ,  ' not fire when non - matching elements are clicked '  )%NWL%listener . detach (  )%NWL%}  )%NWL%test (  ' a listener that delegates with a css string should '  , function (  )  {%NWL%var fixture = document . getElementById (  ' fixture '  )%NWL%, delegatee = document . getElementById (  ' delegatee '  )%NWL%, notDelegatee = document . getElementById (  ' notDelegatee '  )%NWL%9
svgedit . utilities . assignAttributes ( pointGrip ,  {%NWL%' cx '  : pt . x ,%NWL%' cy '  : pt . y ,%NWL%' display '  :  " inline "%NWL%}  )  ;%NWL%}%NWL%return pointGrip ;%NWL%}  ; %NWL%svgedit . path . getControlPoints = function ( seg )  {%NWL%var item = seg . item ; %NWL%var index = seg . index ; %NWL%9
var seg = this . segs [ index ]  ; %NWL%var list = this . elem . pathSegList ; %NWL%seg . show ( false )  ; %NWL%var next = seg . next ; %NWL%if ( seg . mate )  {%NWL%var pt =  [ next . item . x , next . item . y ]  ; %NWL%svgedit . path . replacePathSeg ( 2 , next . index , pt )  ; %NWL%svgedit . path . replacePathSeg ( 4 , seg . index , pt )  ; %NWL%list . removeItem ( seg . mate . index )  ;%NWL%} else if ( !seg . prev )  {%NWL%var item = seg . item ; %NWL%3
if ( !m || m . length ! =  = 2 )  {%NWL%return null ;%NWL%}%NWL%return S . getElem ( m [ 1 ]  )  ;%NWL%}%NWL%function showPanel ( on )  {%NWL%$ (  ' #arrow_panel '  )  . toggle ( on )  ; %NWL%if ( on )  {%NWL%var el = selElems [ 0 ]  ; %NWL%var end = el . getAttribute (  " marker - end "  )  ; %NWL%var start = el . getAttribute (  " marker - start "  )  ; %NWL%9
return null ;%NWL%}%NWL%return S . getElem ( m [ 1 ]  )  ;%NWL%}%NWL%function showPanel ( on )  {%NWL%$ (  ' #arrow_panel '  )  . toggle ( on )  ; %NWL%if ( on )  {%NWL%var el = selElems [ 0 ]  ; %NWL%var end = el . getAttribute (  " marker - end "  )  ; %NWL%var start = el . getAttribute (  " marker - start "  )  ; %NWL%var mid = el . getAttribute (  " marker - mid "  )  ; %NWL%8
$ (  ' #tools_shapelib '  )  . css (  {%NWL%' margin - top '  :  -  ( h / 2 - 15 )  ,%NWL%' margin - left '  : 3%NWL%}  )  ;%NWL%}  ,%NWL%mouseDown : function ( opts )  {%NWL%var mode = canv . getMode (  )  ; %NWL%if ( mode ! =  = mode_id ) return ; %NWL%var e = opts . event ; %NWL%var x = start_x = opts . start_x ; %NWL%var y = start_y = opts . start_y ; %NWL%9
return {%NWL%started : true%NWL%}%NWL%}  ,%NWL%mouseMove : function ( opts )  {%NWL%var mode = canv . getMode (  )  ; %NWL%if ( mode ! =  = mode_id ) return ; %NWL%var zoom = canv . getZoom (  )  ; %NWL%var evt = opts . event%NWL%var x = opts . mouse_x / zoom ; %NWL%var y = opts . mouse_y / zoom ; %NWL%9
, initContentKey =  ' init '  + name%NWL%, win = window%NWL%, doc = document%NWL%, docElem = doc . documentElement%NWL%, ready = $ . domReady || $%NWL%, $win = $ ( win )%NWL%, DMS = typeof DOMStringMap ! =  ' undefined '%NWL%, AP = Array . prototype%NWL%, OP = Object . prototype%NWL%, push = AP . push%NWL%, concat = AP . concat%NWL%9
resize ( fn )  ;%NWL%}  )  ; %NWL%return Response ;%NWL%}%NWL%function create ( args )  {%NWL%route ( args , function ( options )  {%NWL%if ( typeof options ! =  ' object '  ) throw new TypeError (  ' @create '  )  ; %NWL%var elemset = procreate ( Elemset )  . configure ( options )%NWL%, lowestNonZeroBP%NWL%, verge = elemset . verge%NWL%, breakpoints = elemset . breakpoints%NWL%9
var box = this . visibleRect%NWL%this . addDirtyRegion ( box )%NWL%}  . bind ( this )  )%NWL%}%NWL%}%NWL%}  )%NWL%function SpriteBatchNode ( opts )  {%NWL%SpriteBatchNode . superclass . constructor . call ( this , opts )%NWL%var file   = opts . file%NWL%, url    = opts . url%NWL%, textureAtlas = opts . textureAtlas%NWL%9
this . addDirtyRegion ( box )%NWL%}  . bind ( this )  )%NWL%}%NWL%}%NWL%}  )%NWL%function SpriteBatchNode ( opts )  {%NWL%SpriteBatchNode . superclass . constructor . call ( this , opts )%NWL%var file   = opts . file%NWL%, url    = opts . url%NWL%, textureAtlas = opts . textureAtlas%NWL%, texture   = opts . texture%NWL%8
var util = require (  ' util '  )%NWL%, uri = require (  ' uri '  )%NWL%, events = require (  ' events '  )%NWL%, SpriteBatchNode = require (  '  .  / BatchNode '  )  . SpriteBatchNode%NWL%, Sprite = require (  '  .  / Sprite '  )  . Sprite%NWL%, TMXOrientationOrtho = require (  '  .  .  / TMXOrientation '  )  . TMXOrientationOrtho%NWL%, TMXOrientationHex  = require (  '  .  .  / TMXOrientation '  )  . TMXOrientationHex%NWL%, TMXOrientationIso  = require (  '  .  .  / TMXOrientation '  )  . TMXOrientationIso%NWL%, geo  = require (  ' geometry '  )%NWL%, ccp  = geo . ccp%NWL%, Node = require (  '  .  / Node '  )  . Node%NWL%4
' use strict '%NWL%var util   = require (  ' util '  )%NWL%, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Point   = geo . Point%NWL%, BezierConfig  = geo . BezierConfig%NWL%9
, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Point   = geo . Point%NWL%, BezierConfig  = geo . BezierConfig%NWL%, BezierTo   = actions . BezierTo%NWL%, BezierBy   = actions . BezierBy%NWL%9
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Point   = geo . Point%NWL%, BezierConfig  = geo . BezierConfig%NWL%, BezierTo   = actions . BezierTo%NWL%, BezierBy   = actions . BezierBy%NWL%, Sequence   = actions . Sequence%NWL%8
, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Point   = geo . Point%NWL%, BezierConfig  = geo . BezierConfig%NWL%, BezierTo   = actions . BezierTo%NWL%, BezierBy   = actions . BezierBy%NWL%, Sequence   = actions . Sequence%NWL%, RepeatForever = actions . RepeatForever%NWL%7
var util   = require (  ' util '  )%NWL%, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase = require (  '  .  / ActionTestCase '  )%NWL%, Director = cocos . Director%NWL%, Point  = geo . Point%NWL%, RotateTo = actions . RotateTo%NWL%, Sequence = actions . Sequence%NWL%9
, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase = require (  '  .  / ActionTestCase '  )%NWL%, Director = cocos . Director%NWL%, Point  = geo . Point%NWL%, RotateTo = actions . RotateTo%NWL%, Sequence = actions . Sequence%NWL%, Repeat  = actions . Repeat%NWL%8
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase = require (  '  .  / ActionTestCase '  )%NWL%, Director = cocos . Director%NWL%, Point  = geo . Point%NWL%, RotateTo = actions . RotateTo%NWL%, Sequence = actions . Sequence%NWL%, Repeat  = actions . Repeat%NWL%, RepeatForever = actions . RepeatForever%NWL%7
, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%9
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%, Spawn  = actions . Spawn%NWL%8
, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%, Spawn  = actions . Spawn%NWL%, Speed  = actions . Speed%NWL%7
, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%, Spawn  = actions . Spawn%NWL%, Speed  = actions . Speed%NWL%, Sequence  = actions . Sequence%NWL%6
, actions  = cocos . actions%NWL%var TestCase  = require (  '  .  / ActionTestCase '  )%NWL%, Director  = cocos . Director%NWL%, Scheduler = cocos . Scheduler%NWL%, Point  = geo . Point%NWL%, RotateBy  = actions . RotateBy%NWL%, JumpBy  = actions . JumpBy%NWL%, Spawn  = actions . Spawn%NWL%, Speed  = actions . Speed%NWL%, Sequence  = actions . Sequence%NWL%, RepeatForever = actions . RepeatForever%NWL%5
, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy    = actions . MoveBy%NWL%, EaseBounceInOut = actions . EaseBounceInOut%NWL%9
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy    = actions . MoveBy%NWL%, EaseBounceInOut = actions . EaseBounceInOut%NWL%, Sequence   = actions . Sequence%NWL%8
, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy    = actions . MoveBy%NWL%, EaseBounceInOut = actions . EaseBounceInOut%NWL%, Sequence   = actions . Sequence%NWL%, DelayTime   = actions . DelayTime%NWL%7
, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy    = actions . MoveBy%NWL%, EaseBounceInOut = actions . EaseBounceInOut%NWL%, Sequence   = actions . Sequence%NWL%, DelayTime   = actions . DelayTime%NWL%, RepeatForever  = actions . RepeatForever%NWL%6
, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy   = actions . MoveBy%NWL%, EaseElasticIn  = actions . EaseElasticIn%NWL%9
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy   = actions . MoveBy%NWL%, EaseElasticIn  = actions . EaseElasticIn%NWL%, EaseElasticOut = actions . EaseElasticOut%NWL%8
, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy   = actions . MoveBy%NWL%, EaseElasticIn  = actions . EaseElasticIn%NWL%, EaseElasticOut = actions . EaseElasticOut%NWL%, Sequence   = actions . Sequence%NWL%7
, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy   = actions . MoveBy%NWL%, EaseElasticIn  = actions . EaseElasticIn%NWL%, EaseElasticOut = actions . EaseElasticOut%NWL%, Sequence   = actions . Sequence%NWL%, DelayTime   = actions . DelayTime%NWL%6
, actions  = cocos . actions%NWL%var TestCase   = require (  '  .  / ActionTestCase '  )%NWL%, Director   = cocos . Director%NWL%, Scheduler   = cocos . Scheduler%NWL%, Point    = geo . Point%NWL%, MoveBy   = actions . MoveBy%NWL%, EaseElasticIn  = actions . EaseElasticIn%NWL%, EaseElasticOut = actions . EaseElasticOut%NWL%, Sequence   = actions . Sequence%NWL%, DelayTime   = actions . DelayTime%NWL%, RepeatForever  = actions . RepeatForever%NWL%5
' use strict '%NWL%var util   = require (  ' util '  )%NWL%, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%, ccp   = geo . ccp%NWL%var TestCase = require (  '  .  .  / TestCase '  )%NWL%, Director = cocos . Director%NWL%, SpriteFrameCache = cocos . SpriteFrameCache%NWL%5
var util   = require (  ' util '  )%NWL%, path   = require (  ' path '  )%NWL%, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%, ccp   = geo . ccp%NWL%var TestCase = require (  '  .  .  / TestCase '  )%NWL%, Director = cocos . Director%NWL%, SpriteFrameCache = cocos . SpriteFrameCache%NWL%, Rect  = geo . Rect%NWL%6
, cocos  = require (  ' cocos2d '  )%NWL%, geo   = require (  ' geometry '  )%NWL%, nodes  = cocos . nodes%NWL%, actions  = cocos . actions%NWL%, ccp   = geo . ccp%NWL%var TestCase = require (  '  .  .  / TestCase '  )%NWL%, Director = cocos . Director%NWL%, SpriteFrameCache = cocos . SpriteFrameCache%NWL%, Rect  = geo . Rect%NWL%, Sprite  = nodes . Sprite%NWL%, Node  = nodes . Node%NWL%9
var AES =  {  }  ; %NWL%AES . encrypt = function ( messagebuf , keybuf )  {%NWL%var key = AES . buf2words ( keybuf )  ; %NWL%var message = AES . buf2words ( messagebuf )  ; %NWL%var a = new aes ( key )  ; %NWL%var enc = a . encrypt ( message )  ; %NWL%var encbuf = AES . words2buf ( enc )  ; %NWL%return encbuf ;%NWL%}  ; %NWL%AES . decrypt = function ( encbuf , keybuf )  {%NWL%var enc = AES . buf2words ( encbuf )  ; %NWL%2
AES . encrypt = function ( messagebuf , keybuf )  {%NWL%var key = AES . buf2words ( keybuf )  ; %NWL%var message = AES . buf2words ( messagebuf )  ; %NWL%var a = new aes ( key )  ; %NWL%var enc = a . encrypt ( message )  ; %NWL%var encbuf = AES . words2buf ( enc )  ; %NWL%return encbuf ;%NWL%}  ; %NWL%AES . decrypt = function ( encbuf , keybuf )  {%NWL%var enc = AES . buf2words ( encbuf )  ; %NWL%var key = AES . buf2words ( keybuf )  ; %NWL%2
var blockbuf = blockbufs [ i ]  ; %NWL%var encbuf = CBC . encryptblock ( blockbuf , ivbuf , blockcipher , cipherkeybuf )  ; %NWL%encbufs . push ( encbuf )  ; %NWL%ivbuf = encbuf ;%NWL%}%NWL%return encbufs ;%NWL%}  ; %NWL%CBC . decryptblocks = function ( encbufs , ivbuf , blockcipher , cipherkeybuf )  {%NWL%var blockbufs =  [  ]  ; %NWL%for ( var i = 0 ; i < encbufs . length ; i +  +  )  {%NWL%var encbuf = encbufs [ i ]  ; %NWL%0
var util = require (  '  .  / util '  )  ; %NWL%var binarySearch = require (  '  .  / binary - search '  )  ; %NWL%var ArraySet = require (  '  .  / array - set '  )  . ArraySet ; %NWL%var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%9
var binarySearch = require (  '  .  / binary - search '  )  ; %NWL%var ArraySet = require (  '  .  / array - set '  )  . ArraySet ; %NWL%var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%8
var base64VLQ = require (  '  .  / base64 - vlq '  )  ; %NWL%function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%9
function SourceMapConsumer ( aSourceMap )  {%NWL%var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%var mappings = util . getArg ( sourceMap ,  ' mappings '  )  ; %NWL%5
var sourceMap = aSourceMap ; %NWL%if ( typeof aSourceMap =  =  =  ' string '  )  {%NWL%sourceMap = JSON . parse ( aSourceMap . replace (  / ^\ ) \ ] \ }  '  /  ,  '  '  )  )  ;%NWL%}%NWL%var version = util . getArg ( sourceMap ,  ' version '  )  ; %NWL%var sources = util . getArg ( sourceMap ,  ' sources '  )  ; %NWL%var names = util . getArg ( sourceMap ,  ' names '  )  ; %NWL%var sourceRoot = util . getArg ( sourceMap ,  ' sourceRoot '  , null )  ; %NWL%var sourcesContent = util . getArg ( sourceMap ,  ' sourcesContent '  , null )  ; %NWL%var mappings = util . getArg ( sourceMap ,  ' mappings '  )  ; %NWL%var file = util . getArg ( sourceMap ,  ' file '  )  ; %NWL%4
if ( content )  {%NWL%generator . setSourceContent ( sourceFile , content )  ;%NWL%}%NWL%}  )  ; %NWL%return generator ;%NWL%}  ; %NWL%SourceMapGenerator . prototype . addMapping =%NWL%function SourceMapGenerator_addMapping ( aArgs )  {%NWL%var generated = util . getArg ( aArgs ,  ' generated '  )  ; %NWL%var original = util . getArg ( aArgs ,  ' original '  , null )  ; %NWL%var source = util . getArg ( aArgs ,  ' source '  , null )  ; %NWL%9
generator . setSourceContent ( sourceFile , content )  ;%NWL%}%NWL%}  )  ; %NWL%return generator ;%NWL%}  ; %NWL%SourceMapGenerator . prototype . addMapping =%NWL%function SourceMapGenerator_addMapping ( aArgs )  {%NWL%var generated = util . getArg ( aArgs ,  ' generated '  )  ; %NWL%var original = util . getArg ( aArgs ,  ' original '  , null )  ; %NWL%var source = util . getArg ( aArgs ,  ' source '  , null )  ; %NWL%var name = util . getArg ( aArgs ,  ' name '  , null )  ; %NWL%8
app . addListener (  ' editQuestion '  , function ( question )  {%NWL%form . find (  ' input [ name =  " question_id "  ]  '  )  . val ( question . question_id )  ; %NWL%form . find (  ' textarea [ name =  " question "  ]  '  )  . val ( question . question )  ; %NWL%form . find (  ' textarea [ name =  " answer "  ]  '  )  . val ( question . answer )  ; %NWL%form . find (  ' input [ name =  " is_public "  ]  '  )  . val (  [ question . is_public ]  )  ; %NWL%app . dom . show ( form )  ;%NWL%}  )  ;%NWL%}%NWL%app . setup . statistics = function ( ele )  {%NWL%var daily_active_accounts = ele . find (  '  . daily_active_accounts '  )  ; %NWL%var weekly_active_accounts = ele . find (  '  . weekly_active_accounts '  )  ; %NWL%9
form . find (  ' input [ name =  " question_id "  ]  '  )  . val ( question . question_id )  ; %NWL%form . find (  ' textarea [ name =  " question "  ]  '  )  . val ( question . question )  ; %NWL%form . find (  ' textarea [ name =  " answer "  ]  '  )  . val ( question . answer )  ; %NWL%form . find (  ' input [ name =  " is_public "  ]  '  )  . val (  [ question . is_public ]  )  ; %NWL%app . dom . show ( form )  ;%NWL%}  )  ;%NWL%}%NWL%app . setup . statistics = function ( ele )  {%NWL%var daily_active_accounts = ele . find (  '  . daily_active_accounts '  )  ; %NWL%var weekly_active_accounts = ele . find (  '  . weekly_active_accounts '  )  ; %NWL%var monthly_active_accounts = ele . find (  '  . monthly_active_accounts '  )  ; %NWL%8
form . find (  ' textarea [ name =  " question "  ]  '  )  . val ( question . question )  ; %NWL%form . find (  ' textarea [ name =  " answer "  ]  '  )  . val ( question . answer )  ; %NWL%form . find (  ' input [ name =  " is_public "  ]  '  )  . val (  [ question . is_public ]  )  ; %NWL%app . dom . show ( form )  ;%NWL%}  )  ;%NWL%}%NWL%app . setup . statistics = function ( ele )  {%NWL%var daily_active_accounts = ele . find (  '  . daily_active_accounts '  )  ; %NWL%var weekly_active_accounts = ele . find (  '  . weekly_active_accounts '  )  ; %NWL%var monthly_active_accounts = ele . find (  '  . monthly_active_accounts '  )  ; %NWL%var total_accounts = ele . find (  '  . total_accounts '  )  ; %NWL%7
form . find (  ' textarea [ name =  " answer "  ]  '  )  . val ( question . answer )  ; %NWL%form . find (  ' input [ name =  " is_public "  ]  '  )  . val (  [ question . is_public ]  )  ; %NWL%app . dom . show ( form )  ;%NWL%}  )  ;%NWL%}%NWL%app . setup . statistics = function ( ele )  {%NWL%var daily_active_accounts = ele . find (  '  . daily_active_accounts '  )  ; %NWL%var weekly_active_accounts = ele . find (  '  . weekly_active_accounts '  )  ; %NWL%var monthly_active_accounts = ele . find (  '  . monthly_active_accounts '  )  ; %NWL%var total_accounts = ele . find (  '  . total_accounts '  )  ; %NWL%var total_lists = ele . find (  '  . total_lists '  )  ; %NWL%6
form . find (  ' input [ name =  " is_public "  ]  '  )  . val (  [ question . is_public ]  )  ; %NWL%app . dom . show ( form )  ;%NWL%}  )  ;%NWL%}%NWL%app . setup . statistics = function ( ele )  {%NWL%var daily_active_accounts = ele . find (  '  . daily_active_accounts '  )  ; %NWL%var weekly_active_accounts = ele . find (  '  . weekly_active_accounts '  )  ; %NWL%var monthly_active_accounts = ele . find (  '  . monthly_active_accounts '  )  ; %NWL%var total_accounts = ele . find (  '  . total_accounts '  )  ; %NWL%var total_lists = ele . find (  '  . total_lists '  )  ; %NWL%var tw_vs_fb = ele . find (  '  . tw_vs_fb '  )  ; %NWL%5
return function ( promise )  {%NWL%notificationChannel = notificationChannel || $injector . get (  ' requestNotificationChannel '  )  ; %NWL%notificationChannel . requestStarted (  )  ; %NWL%return promise . then ( success , error )  ;%NWL%}%NWL%}  ]  ; %NWL%$httpProvider . responseInterceptors . push ( interceptor )  ;%NWL%}  ]  )%NWL%. factory (  ' requestNotificationChannel '  ,  [  ' $rootScope '  , function ( $rootScope )  {%NWL%var _START_REQUEST_ =  ' _START_REQUEST_ '  ; %NWL%var _END_REQUEST_ =  ' _END_REQUEST_ '  ; %NWL%9
return ' open '  ;%NWL%}%NWL%}%NWL%exports . update_issues_table = function ( state )  {%NWL%if ( !state . url . query . area_id )  {%NWL%logger ( 1 ,  ' Please provide area_id parameter '  )  ; %NWL%invalidURL ( state )  ; %NWL%return ;%NWL%}%NWL%var page = state . url . query . page || 1 ; %NWL%var memberpage = state . url . query . memberpage || 1 ; %NWL%9
}%NWL%}%NWL%exports . update_issues_table = function ( state )  {%NWL%if ( !state . url . query . area_id )  {%NWL%logger ( 1 ,  ' Please provide area_id parameter '  )  ; %NWL%invalidURL ( state )  ; %NWL%return ;%NWL%}%NWL%var page = state . url . query . page || 1 ; %NWL%var memberpage = state . url . query . memberpage || 1 ; %NWL%var my_involvment = state . url . query . my_involvment || 1 ; %NWL%8
}  )  ;%NWL%}%NWL%else%NWL%{%NWL%console . debug (  ' not facebook '  )  ;%NWL%}%NWL%var re = new RegExp (  " \ [  [ a - z ]  + \ ]  "  ,  " g "  )  ; %NWL%jQuery . each ( nodes , function ( chatNode , messageNode )%NWL%{%NWL%console . debug (  " ### chatNode =  "  + chatNode )  ; %NWL%console . debug (  " ### messageNode =  "  + messageNode )  ; %NWL%9
}  ,%NWL%sendOrIgnore : function ( channel , message , arg0 )  {%NWL%var channels = this . channels || ( this . channels =  {  }  )  ; %NWL%var target = channels [ channel ]  ; %NWL%if ( target && target . receive )%NWL%{%NWL%target . receive ( message , Array . prototype . slice . call ( arguments , 2 )  )  ;%NWL%}%NWL%}  ,%NWL%discard : function ( channel )  {%NWL%var queues = this . queues || ( this . queues =  {  }  )  ; %NWL%2
map . events . register (  " moveend "  , this , function (  )  {%NWL%map . events . unregister (  " moveend "  , this , arguments . callee )  ; %NWL%this . fitPage (  )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%}  ,%NWL%tearDown : function (  )  {%NWL%this . printProvider . un (  " layoutchange "  , this . updateBox , this )  ; %NWL%var map = this . map ; %NWL%var control = this . control ; %NWL%9
tearDown : function (  )  {%NWL%this . printProvider . un (  " layoutchange "  , this . updateBox , this )  ; %NWL%var map = this . map ; %NWL%var control = this . control ; %NWL%if ( control && control . events )  {%NWL%control . deactivate (  )  ; %NWL%if ( map && map . events && control . map )  {%NWL%map . removeControl ( control )  ;%NWL%}%NWL%}%NWL%var layer = this . layer ; %NWL%2
}%NWL%if ( !this . initialConfig . layer &&%NWL%map && map . events &&%NWL%layer && layer . map )  {%NWL%map . removeLayer ( layer )  ;%NWL%}%NWL%}  ,%NWL%onMapPanelDestroy : function (  )  {%NWL%this . tearDown (  )  ; %NWL%var map = this . map ; %NWL%var control = this . control ; %NWL%9
}%NWL%}  ,%NWL%onMapPanelDestroy : function (  )  {%NWL%this . tearDown (  )  ; %NWL%var map = this . map ; %NWL%var control = this . control ; %NWL%if ( map && map . events &&%NWL%control && control . events )  {%NWL%control . destroy (  )  ;%NWL%}%NWL%var layer = this . layer ; %NWL%4
return scriptTemplate . join (  "  "  )  ;%NWL%}%NWL%function renderLinkTag ( url )  {%NWL%var linkTemplate =  [  '  < link rel =  " stylesheet " href =  "  '  ,  '  /  '  ,  '  '  ,  '  " type =  " text / css "  /  >  '  ]  ; %NWL%linkTemplate [ 2 ]  = url ; %NWL%return linkTemplate . join (  "  "  )  ;%NWL%}%NWL%var getThemeCssNames = exports . getThemeCssNames = function ( name )  {%NWL%return themeFilesCache [ name ]  [ exports . CSS_FOLDER_NAME ] || [  ]  ;%NWL%}  ; %NWL%var getThemeJsNames = exports . getThemeJsNames = function ( name )  {%NWL%7
var column = document . getElementById (  ' column -  '  + col )  ; %NWL%var value = document . createElement (  ' div '  )  ; %NWL%value . className =  ' value '  ; %NWL%value . id =  ' value -  '  + key ; %NWL%value . innerHTML = key ; %NWL%column . appendChild ( value )  ;%NWL%}  ; %NWL%var update_all = function ( body )  {%NWL%var data = JSON . parse ( body )  ; %NWL%var labels = data [  ' labels '  ]  ; %NWL%var history = data [  ' history '  ]  ; %NWL%9
var value = document . createElement (  ' div '  )  ; %NWL%value . className =  ' value '  ; %NWL%value . id =  ' value -  '  + key ; %NWL%value . innerHTML = key ; %NWL%column . appendChild ( value )  ;%NWL%}  ; %NWL%var update_all = function ( body )  {%NWL%var data = JSON . parse ( body )  ; %NWL%var labels = data [  ' labels '  ]  ; %NWL%var history = data [  ' history '  ]  ; %NWL%var history_length = data [  ' history_length '  ]  ; %NWL%8
return false%NWL%}  ,%NWL%toggleGravity : function ( e )  {%NWL%var oldGravity = sys . parameters (  )  . gravity%NWL%sys . parameters (  { gravity : !oldGravity }  )%NWL%that . update (  )%NWL%}  ,%NWL%beginFrobbing : function ( e )  {%NWL%var frob = $ ( e . target )%NWL%var param = frob . data (  ' param '  )%NWL%var val = frob . data (  ' val '  )%NWL%9
var rangeShift = slr . getUint16 (  )  ; %NWL%var endCode = slr . getUint16Array ( segCount )  ; %NWL%slr . getUint16 (  )  ;  /  / reserved Pad%NWL%var startCode = slr . getUint16Array ( segCount )  ; %NWL%var idDelta = slr . getUint16Array ( segCount )  ; %NWL%var idRangeOffset = slr . getUint16Array ( segCount )  ; %NWL%var glyphToCharacterMap = new Array ( numGlyphs )  ; %NWL%var curPos = slr . offset (  )  ; %NWL%for ( var j = 0 ; j < segCount ; j +  +  )  {%NWL%var start = startCode [ j ]  ; %NWL%var end = endCode [ j ]  ; %NWL%9
}%NWL%cmapTable . cmaps = cmaps ; %NWL%font . cmap = Object . freeze ( cmapTable )  ;%NWL%}  ,%NWL%' glyf '  : function ( font )  {%NWL%var tb = getTableByTag ( font ,  ' glyf '  )  ; %NWL%var slr = font . stream ; %NWL%slr . goto ( tb . offset )  ; %NWL%var glyf =  {  }  ; %NWL%var maxp = font . maxp ; %NWL%var loca = font . loca ; %NWL%9
cmapTable . cmaps = cmaps ; %NWL%font . cmap = Object . freeze ( cmapTable )  ;%NWL%}  ,%NWL%' glyf '  : function ( font )  {%NWL%var tb = getTableByTag ( font ,  ' glyf '  )  ; %NWL%var slr = font . stream ; %NWL%slr . goto ( tb . offset )  ; %NWL%var glyf =  {  }  ; %NWL%var maxp = font . maxp ; %NWL%var loca = font . loca ; %NWL%var post = font . post ; %NWL%8
}%NWL%}%NWL%}%NWL%return query ;%NWL%}%NWL%exports . executeQuery = function ( query )  {%NWL%var deferred = q . defer (  )  ; %NWL%var collection = query . targetCollection ; %NWL%var params = query . params ; %NWL%var skip = query . offset ; %NWL%var resultLimit = query . resultLimit ; %NWL%8
}  ; %NWL%var account_db_facade = rewire (  '  .  .  / account_db_facade '  )  ; %NWL%account_db_facade . __set__ (  ' ACCOUNT_COLLECTION '  , TEST_ACCOUNT_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' USAGE_COLLECTION '  , TEST_USAGE_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' DB_TIMEOUT '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' env_config . loadConfig '  , replacementLoadConfig )  ; %NWL%account_db_facade . __set__ (  ' mongodb . MongoClient '  , mock_mongo_client )  ; %NWL%var createAccountDBPool = account_db_facade . __get__ (  ' createAccountDBPool '  )  ; %NWL%var createLoggingDBPool = account_db_facade . __get__ (  ' createLoggingDBPool '  )  ; %NWL%9
var account_db_facade = rewire (  '  .  .  / account_db_facade '  )  ; %NWL%account_db_facade . __set__ (  ' ACCOUNT_COLLECTION '  , TEST_ACCOUNT_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' USAGE_COLLECTION '  , TEST_USAGE_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' DB_TIMEOUT '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' env_config . loadConfig '  , replacementLoadConfig )  ; %NWL%account_db_facade . __set__ (  ' mongodb . MongoClient '  , mock_mongo_client )  ; %NWL%var createAccountDBPool = account_db_facade . __get__ (  ' createAccountDBPool '  )  ; %NWL%var createLoggingDBPool = account_db_facade . __get__ (  ' createLoggingDBPool '  )  ; %NWL%var accountDBPool = account_db_facade . __get__ (  ' accountDBPool '  )  ; %NWL%8
account_db_facade . __set__ (  ' ACCOUNT_COLLECTION '  , TEST_ACCOUNT_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' USAGE_COLLECTION '  , TEST_USAGE_COLLECTION )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' DB_TIMEOUT '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' MAX_DB_CONNECTIONS '  , 1 )  ; %NWL%account_db_facade . __set__ (  ' env_config . loadConfig '  , replacementLoadConfig )  ; %NWL%account_db_facade . __set__ (  ' mongodb . MongoClient '  , mock_mongo_client )  ; %NWL%var createAccountDBPool = account_db_facade . __get__ (  ' createAccountDBPool '  )  ; %NWL%var createLoggingDBPool = account_db_facade . __get__ (  ' createLoggingDBPool '  )  ; %NWL%var accountDBPool = account_db_facade . __get__ (  ' accountDBPool '  )  ; %NWL%var loggingDBPool = account_db_facade . __get__ (  ' loggingDBPool '  )  ; %NWL%7
var loggingDBPool = account_db_facade . __get__ (  ' loggingDBPool '  )  ; %NWL%accountDBPool . drain ( function (  )  { accountDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%loggingDBPool . drain ( function (  )  { loggingDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%module . exports =  {%NWL%setUp : function ( callback )  {%NWL%account_db_facade . __set__ (  ' accountDBPool '  , createAccountDBPool (  )  )  ; %NWL%account_db_facade . __set__ (  ' loggingDBPool '  , createLoggingDBPool (  )  )  ; %NWL%callback (  )  ;%NWL%}  ,%NWL%tearDown : function ( callback )  {%NWL%var accountDBPool = account_db_facade . __get__ (  ' accountDBPool '  )  ; %NWL%0
accountDBPool . drain ( function (  )  { accountDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%loggingDBPool . drain ( function (  )  { loggingDBPool . destroyAllNow (  )  ;  }  )  ; %NWL%module . exports =  {%NWL%setUp : function ( callback )  {%NWL%account_db_facade . __set__ (  ' accountDBPool '  , createAccountDBPool (  )  )  ; %NWL%account_db_facade . __set__ (  ' loggingDBPool '  , createLoggingDBPool (  )  )  ; %NWL%callback (  )  ;%NWL%}  ,%NWL%tearDown : function ( callback )  {%NWL%var accountDBPool = account_db_facade . __get__ (  ' accountDBPool '  )  ; %NWL%var loggingDBPool = account_db_facade . __get__ (  ' loggingDBPool '  )  ; %NWL%9
if ( this . hasOwner (  )  ) return false ; %NWL%var corners = this . getAdjacentCorners (  )  ; %NWL%for ( var i in corners )  {%NWL%var corner = corners [ i ]  ; %NWL%if ( corner . hasOwner (  ) && corner . getOwner (  )  =  = ply )  {%NWL%return true ;%NWL%}%NWL%}%NWL%var edges = this . getAdjacentEdges (  )  ; %NWL%for ( var i in edges )  {%NWL%var edge = edges [ i ]  ; %NWL%3
_this . emit (  ' message '  , ws , JSON . parse ( data )  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onClose = function ( ws )  {%NWL%if ( this . _wss . clients . length =  =  = 0 )  {%NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%9
}  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onClose = function ( ws )  {%NWL%if ( this . _wss . clients . length =  =  = 0 )  {%NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%8
}  ; %NWL%NobleBindings . prototype . _onClose = function ( ws )  {%NWL%if ( this . _wss . clients . length =  =  = 0 )  {%NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%7
NobleBindings . prototype . _onClose = function ( ws )  {%NWL%if ( this . _wss . clients . length =  =  = 0 )  {%NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%6
if ( this . _wss . clients . length =  =  = 0 )  {%NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%5
this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%4
}%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%3
}  ; %NWL%NobleBindings . prototype . _onMessage = function ( ws , event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%2
var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%0
var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%0
var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%var descriptors = event . descriptors ; %NWL%0
var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%var descriptors = event . descriptors ; %NWL%var descriptorUuid = event . descriptorUuid ; %NWL%0
var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%var descriptors = event . descriptors ; %NWL%var descriptorUuid = event . descriptorUuid ; %NWL%var handle = event . handle ; %NWL%0
util . inherits ( NobleBindings , events . EventEmitter )  ; %NWL%NobleBindings . prototype . _onOpen = function (  )  {%NWL%console . log (  ' on -  > open '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onClose = function (  )  {%NWL%console . log (  ' on -  > close '  )  ; %NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%9
NobleBindings . prototype . _onOpen = function (  )  {%NWL%console . log (  ' on -  > open '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onClose = function (  )  {%NWL%console . log (  ' on -  > close '  )  ; %NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%8
console . log (  ' on -  > open '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onClose = function (  )  {%NWL%console . log (  ' on -  > close '  )  ; %NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%7
}  ; %NWL%NobleBindings . prototype . _onClose = function (  )  {%NWL%console . log (  ' on -  > close '  )  ; %NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%6
NobleBindings . prototype . _onClose = function (  )  {%NWL%console . log (  ' on -  > close '  )  ; %NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%5
console . log (  ' on -  > close '  )  ; %NWL%this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%4
this . emit (  ' stateChange '  ,  ' poweredOff '  )  ;%NWL%}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%3
}  ; %NWL%NobleBindings . prototype . _onMessage = function ( event )  {%NWL%var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%2
var type = event . type ; %NWL%var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%0
var peripheralUuid = event . peripheralUuid ; %NWL%var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%0
var advertisement = event . advertisement ; %NWL%var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%var descriptors = event . descriptors ; %NWL%0
var rssi = event . rssi ; %NWL%var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%var descriptors = event . descriptors ; %NWL%var descriptorUuid = event . descriptorUuid ; %NWL%0
var serviceUuids = event . serviceUuids ; %NWL%var serviceUuid = event . serviceUuid ; %NWL%var includedServiceUuids = event . includedServiceUuids ; %NWL%var characteristics = event . characteristics ; %NWL%var characteristicUuid = event . characteristicUuid ; %NWL%var data = event . data ? new Buffer ( event . data ,  ' hex '  )  : null ; %NWL%var isNotification = event . isNotification ; %NWL%var state = event . state ; %NWL%var descriptors = event . descriptors ; %NWL%var descriptorUuid = event . descriptorUuid ; %NWL%var handle = event . handle ; %NWL%0
}  ,%NWL%_initTree : function (  )  {%NWL%var options = this . options ; %NWL%if ( options . data )  {%NWL%this . _buildTree (  )  ;%NWL%}%NWL%return this ;%NWL%}  ,%NWL%addToControls : function ( node , actionFunction )  {%NWL%if ( this . controller )  {%NWL%var controller = this . controller ; %NWL%2
proxypath : null ,%NWL%proxyOptions : null%NWL%}  )  ;%NWL%[  ' appresources '  ,  ' resources '  ,  ' testresources '  ]  . forEach ( function ( optionName )  {%NWL%var option = options [ optionName ]  ; %NWL%if ( typeof option =  =  =  ' string '  )  {%NWL%options [ optionName ]  =  [ option ]  ;%NWL%}%NWL%}  )  ; %NWL%var target = this . target ; %NWL%var args = this . args ; %NWL%9
var tcp = require (  '  .  / tcp '  )  ; %NWL%var auth = require (  '  .  / auth '  )  ; %NWL%var util = require (  '  .  .  / util '  )  ; %NWL%var Transaction = require (  '  .  / Transaction '  )  ; %NWL%var MessageBuffer = require (  '  .  / MessageBuffer '  )  ; %NWL%var common = require (  '  .  / common '  )  ; %NWL%var request = require (  '  .  / request '  )  ; %NWL%var reply = require (  '  .  / reply '  )  ; %NWL%var createExecuteTask = require (  '  .  / ExecuteTask '  )  . create ; %NWL%var ReplySegment = reply . Segment ; %NWL%var part = require (  '  .  / part '  )  ; %NWL%0
var util = require (  '  .  .  / util '  )  ; %NWL%var Transaction = require (  '  .  / Transaction '  )  ; %NWL%var MessageBuffer = require (  '  .  / MessageBuffer '  )  ; %NWL%var common = require (  '  .  / common '  )  ; %NWL%var request = require (  '  .  / request '  )  ; %NWL%var reply = require (  '  .  / reply '  )  ; %NWL%var createExecuteTask = require (  '  .  / ExecuteTask '  )  . create ; %NWL%var ReplySegment = reply . Segment ; %NWL%var part = require (  '  .  / part '  )  ; %NWL%var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%9
var Transaction = require (  '  .  / Transaction '  )  ; %NWL%var MessageBuffer = require (  '  .  / MessageBuffer '  )  ; %NWL%var common = require (  '  .  / common '  )  ; %NWL%var request = require (  '  .  / request '  )  ; %NWL%var reply = require (  '  .  / reply '  )  ; %NWL%var createExecuteTask = require (  '  .  / ExecuteTask '  )  . create ; %NWL%var ReplySegment = reply . Segment ; %NWL%var part = require (  '  .  / part '  )  ; %NWL%var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%8
var MessageBuffer = require (  '  .  / MessageBuffer '  )  ; %NWL%var common = require (  '  .  / common '  )  ; %NWL%var request = require (  '  .  / request '  )  ; %NWL%var reply = require (  '  .  / reply '  )  ; %NWL%var createExecuteTask = require (  '  .  / ExecuteTask '  )  . create ; %NWL%var ReplySegment = reply . Segment ; %NWL%var part = require (  '  .  / part '  )  ; %NWL%var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%var PartKind = common . PartKind ; %NWL%7
var createExecuteTask = require (  '  .  / ExecuteTask '  )  . create ; %NWL%var ReplySegment = reply . Segment ; %NWL%var part = require (  '  .  / part '  )  ; %NWL%var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%var PartKind = common . PartKind ; %NWL%var bignum = util . bignum ; %NWL%var debug = util . debuglog (  ' hdb '  )  ; %NWL%var trace = util . tracelog (  )  ; %NWL%var EMPTY_BUFFER = common . EMPTY_BUFFER ; %NWL%3
var ReplySegment = reply . Segment ; %NWL%var part = require (  '  .  / part '  )  ; %NWL%var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%var PartKind = common . PartKind ; %NWL%var bignum = util . bignum ; %NWL%var debug = util . debuglog (  ' hdb '  )  ; %NWL%var trace = util . tracelog (  )  ; %NWL%var EMPTY_BUFFER = common . EMPTY_BUFFER ; %NWL%var MAX_PACKET_SIZE = common . MAX_PACKET_SIZE ; %NWL%2
var part = require (  '  .  / part '  )  ; %NWL%var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%var PartKind = common . PartKind ; %NWL%var bignum = util . bignum ; %NWL%var debug = util . debuglog (  ' hdb '  )  ; %NWL%var trace = util . tracelog (  )  ; %NWL%var EMPTY_BUFFER = common . EMPTY_BUFFER ; %NWL%var MAX_PACKET_SIZE = common . MAX_PACKET_SIZE ; %NWL%var PACKET_HEADER_LENGTH = common . PACKET_HEADER_LENGTH ; %NWL%1
var MessageType = common . MessageType ; %NWL%var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%var PartKind = common . PartKind ; %NWL%var bignum = util . bignum ; %NWL%var debug = util . debuglog (  ' hdb '  )  ; %NWL%var trace = util . tracelog (  )  ; %NWL%var EMPTY_BUFFER = common . EMPTY_BUFFER ; %NWL%var MAX_PACKET_SIZE = common . MAX_PACKET_SIZE ; %NWL%var PACKET_HEADER_LENGTH = common . PACKET_HEADER_LENGTH ; %NWL%var SEGMENT_HEADER_LENGTH = common . SEGMENT_HEADER_LENGTH ; %NWL%0
var MessageTypeName = common . MessageTypeName ; %NWL%var SegmentKind = common . SegmentKind ; %NWL%var PartKind = common . PartKind ; %NWL%var bignum = util . bignum ; %NWL%var debug = util . debuglog (  ' hdb '  )  ; %NWL%var trace = util . tracelog (  )  ; %NWL%var EMPTY_BUFFER = common . EMPTY_BUFFER ; %NWL%var MAX_PACKET_SIZE = common . MAX_PACKET_SIZE ; %NWL%var PACKET_HEADER_LENGTH = common . PACKET_HEADER_LENGTH ; %NWL%var SEGMENT_HEADER_LENGTH = common . SEGMENT_HEADER_LENGTH ; %NWL%var PART_HEADER_LENGTH = common . PART_HEADER_LENGTH ; %NWL%0
}  )  ; %NWL%Serializer . prototype . serialize = function (  )  {%NWL%return this . _serializeRecursive ( this . _oRootControl , 0 )  ;%NWL%}  ; %NWL%Serializer . prototype . _serializeRecursive = function ( oControl , iLevel , sAggregationName , isDefaultAggregation )  {%NWL%jQuery . sap . assert ( typeof oControl ! =  =  " undefined "  ,  " The control must not be undefined "  )  ; %NWL%var aCode =  [  ]  ; %NWL%var bWriteDelegate =  ( !this . _bSkipRoot || iLevel ! =  = 0 )  ; %NWL%if ( bWriteDelegate )  {%NWL%var start = this . _delegate . start ( oControl , sAggregationName , isDefaultAggregation )  ; %NWL%var middle = this . _delegate . middle ( oControl , sAggregationName , isDefaultAggregation )  ; %NWL%9
var ulRect = this . _ulEl . getBoundingClientRect (  )  ; %NWL%this . _swipeData . firstUlPos = ulRect [ this . _isY ? ' top '  :  ' left '  ]  ; %NWL%this . _swipeData . inUlX =  this . _swipeData . x - ulRect . left ; %NWL%this . _swipeData . inUlY =  this . _swipeData . y - ulRect . top ; %NWL%setTransitionProperty ( this . _ulEl ,  ' none '  )  ; %NWL%this . _touchMoveIsFirstTouchMove = true ;%NWL%}  ,%NWL%_onTouchMove : function ( event )  {%NWL%if ( event . touches . length > 1 )  { return ;  }%NWL%var pointerX = InkEvent . pointerX ( event )  ; %NWL%var pointerY = InkEvent . pointerY ( event )  ; %NWL%9
var spy = this . spy (  )  ; %NWL%trigger . after ( function (  )  {%NWL%ok ( spy . calledOnce ,  ' fires an event '  )  ; %NWL%start (  )  ;%NWL%}  )  ; %NWL%InkEvent . on ( el ,  ' click '  , trigger . wrap ( spy )  )  ; %NWL%InkEvent . fire ( el ,  ' click '  )  ;%NWL%}  )  ; %NWL%asyncTest (  ' should be able to pass multiple argument to custom event '  , function (  )  {%NWL%var el = this . byId (  ' input '  )  ; %NWL%var trigger = this . trigger (  )  ; %NWL%0
trigger . after ( function (  )  {%NWL%ok ( spy . calledOnce ,  ' fires an event '  )  ; %NWL%start (  )  ;%NWL%}  )  ; %NWL%InkEvent . on ( el ,  ' click '  , trigger . wrap ( spy )  )  ; %NWL%InkEvent . fire ( el ,  ' click '  )  ;%NWL%}  )  ; %NWL%asyncTest (  ' should be able to pass multiple argument to custom event '  , function (  )  {%NWL%var el = this . byId (  ' input '  )  ; %NWL%var trigger = this . trigger (  )  ; %NWL%var spy = this . spy (  )  ; %NWL%9
start (  )  ;%NWL%}  , 50 )  ; %NWL%InkEvent . on ( el ,  ' click . foo '  , trigger . wrap ( handler1 )  )  ; %NWL%InkEvent . on ( el ,  ' keydown . foo '  , trigger . wrap ( handler2 )  )  ; %NWL%InkEvent . on ( el ,  ' click . bar '  , trigger . wrap ( handler3 )  )  ; %NWL%Syn . click ( el )  ;%NWL%}  )  ; %NWL%asyncTest (  ' should only remove event if the remove namespaces is within the event namespace or if the event namespace is within the remove namespace '  , function (  )  {%NWL%var el = this . byId (  ' foo '  )  ; %NWL%var trigger = this . trigger (  )  ; %NWL%var spy = this . spy (  )  ; %NWL%9
}%NWL%for ( var idx in subscribeChannels )%NWL%{%NWL%addOptionToSelectElement ( channelsToSubscribe , subscribeChannels [ idx ]  , subscribeChannels [ idx ]  )  ;%NWL%}%NWL%var receivedMessagesList = new Array (  )  ; %NWL%var receivedMessagesListIdx =  - 1 ; %NWL%var receivedMessages = document . getElementById (  ' receivedMessages '  )  ; %NWL%var subscribeChannels = document . getElementById (  ' subscribeChannels '  )  ; %NWL%subscribeChannels . onclick = function ( msg )  {%NWL%var subscribedChannels = document . getElementById (  ' subscribedChannels '  )  ; %NWL%8
{%NWL%newText = receivedMessagesList [ i ]  . channel +  "  :  "  + receivedMessagesList [ i ]  . payload +  " \n "  + newText ;%NWL%}%NWL%receivedMessages . value = newText ;%NWL%}  )  ;%NWL%}  )  ; %NWL%return false ;%NWL%}%NWL%var unsubscribeChannels = document . getElementById (  ' unsubscribeChannels '  )  ; %NWL%unsubscribeChannels . onclick = function ( msg )  {%NWL%var subscribedChannels = document . getElementById (  ' subscribedChannels '  )  ; %NWL%8
unsubscribeChannels . onclick = function ( msg )  {%NWL%var subscribedChannels = document . getElementById (  ' subscribedChannels '  )  ; %NWL%var subscribeChannels = document . getElementById (  ' channelsToSubscribe '  )  ; %NWL%switchSelectedElements ( subscribedChannels , subscribeChannels , function ( channelName )  {%NWL%getBridge (  )  . unsubscribe ( channelName )  ;%NWL%}  )  ; %NWL%return false ;%NWL%}%NWL%element = document . getElementById (  ' publishBtn '  )  ; %NWL%element . onclick = function ( msg )  {%NWL%var publicationChannels	 = document . getElementById (  ' publicationChannels '  )  ; %NWL%1
var subscribedChannels = document . getElementById (  ' subscribedChannels '  )  ; %NWL%var subscribeChannels = document . getElementById (  ' channelsToSubscribe '  )  ; %NWL%switchSelectedElements ( subscribedChannels , subscribeChannels , function ( channelName )  {%NWL%getBridge (  )  . unsubscribe ( channelName )  ;%NWL%}  )  ; %NWL%return false ;%NWL%}%NWL%element = document . getElementById (  ' publishBtn '  )  ; %NWL%element . onclick = function ( msg )  {%NWL%var publicationChannels	 = document . getElementById (  ' publicationChannels '  )  ; %NWL%var publishText = document . getElementById (  ' publishText '  )  ; %NWL%0
break ; %NWL%case nl . sara . webdav . Ace . SELF : %NWL%principal . appendChild ( xmlDoc . createElementNS (  ' DAV :  '  ,  ' self '  )  )  ; %NWL%break ; %NWL%default :  /  / If it isn ' t one of the constants , it should be either a Property object or a string / URL%NWL%if ( typeof princVal =  =  =  ' string '  )  {  /  / It is a string ; the URL of the principal%NWL%var href = xmlDoc . createElementNS (  ' DAV :  '  ,  ' href '  )  ; %NWL%href . appendChild ( xmlDoc . createCDATASection ( princVal )  )  ; %NWL%principal . appendChild ( href )  ;%NWL%} else {  /  / And else it is a property%NWL%var property = xmlDoc . createElementNS (  ' DAV :  '  ,  ' property '  )  ; %NWL%6
var connect = require (  ' connect '  )%NWL%, Sara = require (  '  .  .  / sara '  )%NWL%, browserify = require (  ' browserify '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%2
, Sara = require (  '  .  .  / sara '  )%NWL%, browserify = require (  ' browserify '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%, mime = require (  ' mime '  )%NWL%1
, browserify = require (  ' browserify '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%, mime = require (  ' mime '  )%NWL%, url = require (  ' url '  )%NWL%0
, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%, mime = require (  ' mime '  )%NWL%, url = require (  ' url '  )%NWL%, fresh = require (  ' fresh '  )%NWL%0
, fs = require (  ' fs '  )%NWL%, path = require (  ' path '  )%NWL%, _ = require (  '  .  / utils '  )%NWL%, DOM = require (  ' jsdom '  )%NWL%, adapterNeDB = require (  '  .  .  / adapters / nedb '  )%NWL%, uglify = require (  ' uglify - js '  )%NWL%, through = require (  ' through '  )%NWL%, mime = require (  ' mime '  )%NWL%, url = require (  ' url '  )%NWL%, fresh = require (  ' fresh '  )%NWL%, crypto = require (  ' crypto '  )%NWL%0
, fresh = require (  ' fresh '  )%NWL%, crypto = require (  ' crypto '  )%NWL%, compress = require (  ' compression '  )%NWL%if ( global . autoPrerender )  {%NWL%global . document = DOM . jsdom (  )%NWL%global . window = global . document . parentWindow%NWL%_ ( global )  . defaults ( window )%NWL%}%NWL%var Server = module . exports = function setupServer ( Sara , callback )  {%NWL%var engine = require (  ' engine . io '  )%NWL%, http = require (  ' http '  )%NWL%0
var path = require (  ' path '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%var nodeunit = require (  ' nodeunit '  )  ; %NWL%var betterErrors = function ( assertion )  {%NWL%var e = assertion . error ; %NWL%if ( !e || ! (  ' actual ' in e ) || ! (  ' expected ' in e )  )  { return assertion ;  }%NWL%var globalInspect = global . inspect ; %NWL%global . inspect = function (  )  { return '  [ object global ]  '  ;  }  ; %NWL%e . _message = e . message ; %NWL%var actual = util . inspect ( e . actual , false , 10 , true )  ; %NWL%var expected = util . inspect ( e . expected , false , 10 , true )  ; %NWL%9
module . exports = function ( grunt )  {%NWL%var cp = require (  ' child_process '  )%NWL%, f = require (  ' util '  )  . format%NWL%, _ = grunt . util . _%NWL%, log = grunt . log%NWL%, verbose = grunt . verbose ; %NWL%grunt . registerMultiTask (  ' exec '  ,  ' Execute shell commands .  '  , function (  )  {%NWL%var data = this . data%NWL%, execOptions =  {  }%NWL%, stdout = data . stdout ! =  = undefined ? data . stdout : true%NWL%, stderr = data . stderr ! =  = undefined ? data . stderr : true%NWL%9
$ ( node )  . observe (  ' click '  , callback . bindAsEventListener ( this . textarea )  )  ;%NWL%}  ,%NWL%addButton : function ( link_text , callback , attrs )  {%NWL%var li = document . createElement (  ' li '  )  ; %NWL%var a = document . createElement (  ' a '  )  ; %NWL%a . href =  ' # '  ; %NWL%this . attachButton ( a , callback )  ; %NWL%li . appendChild ( a )  ; %NWL%Object . extend ( a , attrs || {  }  )  ; %NWL%if ( link_text )  {%NWL%var span = document . createElement (  ' span '  )  ; %NWL%3
)  ; %NWL%router . addRoute (  / \ / index\ . html /  , homePage , homePage )  ; %NWL%router . addRoute (  / \ / quiz\ . html /  , quizPage , quizPage )  ; %NWL%var homeView = null ; %NWL%var quizView = null ; %NWL%var scoreBoard = new Model (  {%NWL%headline :  ' Welcome to the Bird Quiz! '%NWL%}  )  ; %NWL%scoreBoard . load = function (  )  {%NWL%var score = parseInt ( localStorage . getItem (  ' score '  )  , 10 )  ; %NWL%var total = parseInt ( localStorage . getItem (  ' total '  )  , 10 )  ; %NWL%9
scoreBoard . reset = function (  )  {%NWL%this . setData (  {%NWL%score : null ,%NWL%total : null%NWL%}  )  ; %NWL%localStorage . removeItem (  ' score '  )  ; %NWL%localStorage . removeItem (  ' total '  )  ;%NWL%}%NWL%scoreBoard . incScore = function ( inc )  {%NWL%var score = this . get (  ' score '  )  ; %NWL%var total = this . get (  ' total '  )  ; %NWL%9
score = 0 ;%NWL%}%NWL%this . setData (  {%NWL%score : score ,%NWL%total : total%NWL%}  )  ; %NWL%this . save (  )  ;%NWL%}%NWL%scoreBoard . save = function (  )  {%NWL%var score = this . get (  ' score '  )  ; %NWL%var total = this . get (  ' total '  )  ; %NWL%9
init : function (  )  {%NWL%var that = this ; %NWL%this . model . on (  ' change '  , function (  )  {%NWL%that . render (  )  ;%NWL%}  )  ;%NWL%}%NWL%}  )  ; %NWL%scoreBoardView . render = function (  )  {%NWL%var c = this . getContainer (  )  ; %NWL%var score = this . model . get (  ' score '  )  ; %NWL%var total = this . model . get (  ' total '  )  ; %NWL%9
, legend :  [  '  < form >  < fieldset >  '  ,  '  <  / fieldset >  <  / form >  '  , 2 ]%NWL%, option : option%NWL%, optgroup : option }%NWL%, stateAttributes =  / ^checked|selected$ /%NWL%, ie =  / msie / i . test ( navigator . userAgent )%NWL%, uidList =  [  ]%NWL%, uuids = 0%NWL%, digit =  / ^ - ? [ \d\ .  ]  + $ /%NWL%, dattr =  / ^data -  (  .  +  ) $ /%NWL%, px =  ' px '%NWL%, setAttribute =  ' setAttribute '%NWL%9
, option : option%NWL%, optgroup : option }%NWL%, stateAttributes =  / ^checked|selected$ /%NWL%, ie =  / msie / i . test ( navigator . userAgent )%NWL%, uidList =  [  ]%NWL%, uuids = 0%NWL%, digit =  / ^ - ? [ \d\ .  ]  + $ /%NWL%, dattr =  / ^data -  (  .  +  ) $ /%NWL%, px =  ' px '%NWL%, setAttribute =  ' setAttribute '%NWL%, getAttribute =  ' getAttribute '%NWL%8
}  (  )  ; %NWL%!function (  )  {%NWL%var module =  { exports :  {  }  }  , exports = module . exports ; %NWL%!function ( context , win )  {%NWL%var doc = context . document%NWL%, html = doc . documentElement%NWL%, parentNode =  ' parentNode '%NWL%, query = null%NWL%, specialAttributes =  / ^checked|value|selected$ /%NWL%, specialTags =  / select|fieldset|table|tbody|tfoot|td|tr|colgroup / i%NWL%, table =  ' table '%NWL%6
, query = null%NWL%, specialAttributes =  / ^checked|value|selected$ /%NWL%, specialTags =  / select|fieldset|table|tbody|tfoot|td|tr|colgroup / i%NWL%, table =  ' table '%NWL%, tagMap =  { thead : table , tbody : table , tfoot : table , tr :  ' tbody '  , th :  ' tr '  , td :  ' tr '  , fieldset :  ' form '  , option :  ' select '  }%NWL%, stateAttributes =  / ^checked|selected$ /%NWL%, ie =  / msie / i . test ( navigator . userAgent )%NWL%, uidList =  [  ]%NWL%, uuids = 0%NWL%, digit =  / ^ - ? [ \d\ .  ]  + $ /%NWL%, px =  ' px '%NWL%3
, specialAttributes =  / ^checked|value|selected$ /%NWL%, specialTags =  / select|fieldset|table|tbody|tfoot|td|tr|colgroup / i%NWL%, table =  ' table '%NWL%, tagMap =  { thead : table , tbody : table , tfoot : table , tr :  ' tbody '  , th :  ' tr '  , td :  ' tr '  , fieldset :  ' form '  , option :  ' select '  }%NWL%, stateAttributes =  / ^checked|selected$ /%NWL%, ie =  / msie / i . test ( navigator . userAgent )%NWL%, uidList =  [  ]%NWL%, uuids = 0%NWL%, digit =  / ^ - ? [ \d\ .  ]  + $ /%NWL%, px =  ' px '%NWL%, setAttribute =  ' setAttribute '%NWL%2
, specialTags =  / select|fieldset|table|tbody|tfoot|td|tr|colgroup / i%NWL%, table =  ' table '%NWL%, tagMap =  { thead : table , tbody : table , tfoot : table , tr :  ' tbody '  , th :  ' tr '  , td :  ' tr '  , fieldset :  ' form '  , option :  ' select '  }%NWL%, stateAttributes =  / ^checked|selected$ /%NWL%, ie =  / msie / i . test ( navigator . userAgent )%NWL%, uidList =  [  ]%NWL%, uuids = 0%NWL%, digit =  / ^ - ? [ \d\ .  ]  + $ /%NWL%, px =  ' px '%NWL%, setAttribute =  ' setAttribute '%NWL%, getAttribute =  ' getAttribute '%NWL%1
, mkdirp = require (  ' mkdirp '  )%NWL%, join = require (  ' path '  )  . join%NWL%, debug = require (  ' debug '  )  (  ' stylus : middleware '  )  ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var src = options . src ; %NWL%9
var gulp = require (  ' gulp '  )  ; %NWL%var $ = require (  ' gulp - load - plugins '  )  (  )  ; %NWL%const fs = require (  ' fs '  )  ; %NWL%const del = require (  ' del '  )  ; %NWL%const glob = require (  ' glob '  )  ; %NWL%const path = require (  ' path '  )  ; %NWL%const mkdirp = require (  ' mkdirp '  )  ; %NWL%const babelify = require (  ' babelify '  )  ; %NWL%const isparta = require (  ' isparta '  )  ; %NWL%const esperanto = require (  ' esperanto '  )  ; %NWL%const browserify = require (  ' browserify '  )  ; %NWL%2
ROOT_TYPE : null ,%NWL%_getUIEventNode : function (  )  {%NWL%var root = this . get (  " root "  )  ,%NWL%returnVal ; %NWL%if ( root )  {%NWL%returnVal = root . get (  " boundingBox "  )  ;%NWL%}%NWL%return returnVal ;%NWL%}  ,%NWL%next : function ( circular )  {%NWL%var parent = this . get (  " parent "  )  ,%NWL%2
var path = require (  ' path '  )  ; %NWL%var grunt = module . exports =  {  }  ; %NWL%function gRequire ( name )  {%NWL%return grunt [ name ]  = require (  '  .  / grunt /  '  + name )  ;%NWL%}%NWL%var utils = gRequire (  ' utils '  )  ; %NWL%var template = gRequire (  ' template '  )  ; %NWL%var fail = gRequire (  ' fail '  )  ; %NWL%var file = gRequire (  ' file '  )  ; %NWL%var option = gRequire (  ' option '  )  ; %NWL%var config = gRequire (  ' config '  )  ; %NWL%5
var grunt = module . exports =  {  }  ; %NWL%function gRequire ( name )  {%NWL%return grunt [ name ]  = require (  '  .  / grunt /  '  + name )  ;%NWL%}%NWL%var utils = gRequire (  ' utils '  )  ; %NWL%var template = gRequire (  ' template '  )  ; %NWL%var fail = gRequire (  ' fail '  )  ; %NWL%var file = gRequire (  ' file '  )  ; %NWL%var option = gRequire (  ' option '  )  ; %NWL%var config = gRequire (  ' config '  )  ; %NWL%var task = gRequire (  ' task '  )  ; %NWL%4
function gRequire ( name )  {%NWL%return grunt [ name ]  = require (  '  .  / grunt /  '  + name )  ;%NWL%}%NWL%var utils = gRequire (  ' utils '  )  ; %NWL%var template = gRequire (  ' template '  )  ; %NWL%var fail = gRequire (  ' fail '  )  ; %NWL%var file = gRequire (  ' file '  )  ; %NWL%var option = gRequire (  ' option '  )  ; %NWL%var config = gRequire (  ' config '  )  ; %NWL%var task = gRequire (  ' task '  )  ; %NWL%var log = gRequire (  ' log '  )  ; %NWL%3
return grunt [ name ]  = require (  '  .  / grunt /  '  + name )  ;%NWL%}%NWL%var utils = gRequire (  ' utils '  )  ; %NWL%var template = gRequire (  ' template '  )  ; %NWL%var fail = gRequire (  ' fail '  )  ; %NWL%var file = gRequire (  ' file '  )  ; %NWL%var option = gRequire (  ' option '  )  ; %NWL%var config = gRequire (  ' config '  )  ; %NWL%var task = gRequire (  ' task '  )  ; %NWL%var log = gRequire (  ' log '  )  ; %NWL%var cli = gRequire (  ' cli '  )  ; %NWL%2
var debug = require (  ' debug '  )  (  ' send '  )%NWL%, parseRange = require (  ' range - parser '  )%NWL%, Stream = require (  ' stream '  )%NWL%, mime = require (  ' mime '  )%NWL%, fresh = require (  ' fresh '  )%NWL%, path = require (  ' path '  )%NWL%, http = require (  ' http '  )%NWL%, fs = require (  ' fs '  )%NWL%, basename = path . basename%NWL%, normalize = path . normalize%NWL%, join = path . join%NWL%8
if ( err ) return self . onStatError ( err )  ; %NWL%if ( stat . isDirectory (  )  ) return self . redirect ( self . path )  ; %NWL%self . send ( path , stat )  ;%NWL%}  )  ; %NWL%return res ;%NWL%}  ; %NWL%SendStream . prototype . send = function ( path , stat )  {%NWL%var options =  {  }  ; %NWL%var len = stat . size ; %NWL%var res = this . res ; %NWL%var req = this . req ; %NWL%9
+ stat . size )  ;%NWL%}%NWL%}%NWL%res . setHeader (  ' Content - Length '  , len )  ; %NWL%if (  ' HEAD '  =  = req . method ) return res . end (  )  ; %NWL%this . stream ( path , options )  ;%NWL%}  ; %NWL%SendStream . prototype . stream = function ( path , options )  {%NWL%var self = this ; %NWL%var res = this . res ; %NWL%var req = this . req ; %NWL%9
var result = jshint ( src , options || {  }  , globals || {  }  )  ; %NWL%if ( result )  {%NWL%grunt . verbose . ok (  )  ;%NWL%} else {%NWL%grunt . verbose . or . write ( msg )  ; %NWL%grunt . log . error (  )  ; %NWL%jshint . errors . forEach ( function ( e )  {%NWL%if ( !e )  { return ;  }%NWL%var pos ; %NWL%var evidence = e . evidence ; %NWL%var character = e . character ; %NWL%9
if ( result )  {%NWL%shown_notification = result ;%NWL%} else {%NWL%client . set (  ' editor : shown_notification '  , true )  ;%NWL%}%NWL%res . render (  ' editor / index '  ,  { profile : req . user , version : config . editor . version , shown_notification : shown_notification }  )  ;%NWL%}  )  ;%NWL%}  ; %NWL%exports . create_repository = function ( req , res )  {%NWL%var repository_url = sanitize ( req . body . repository_url )  . xss (  )  . trim (  )  ; %NWL%var retain_remote = sanitize ( req . body . retain_remote )  . xss (  )  . trim (  )  ; %NWL%9
. describe (  ' no - edit '  ,  ' Do not start editor to edit changelog .  '  )%NWL%. describe (  ' commit '  ,  ' Commit message . `%v` will be replaced with version string .  '  )%NWL%. default (  ' commit '  ,  ' %v '  )%NWL%. describe (  ' no - commit '  ,  ' Do not commit changes . Also implies `no - tag` option .  '  )%NWL%. describe (  ' tag '  ,  ' Tag name . `%v` will be replaced with version string .  '  )%NWL%. default (  ' tag '  ,  ' %v '  )%NWL%. describe (  ' no - tag '  ,  ' Do not tag commit .  '  )%NWL%. argv ; %NWL%var child_process = require (  ' child_process '  )  ; %NWL%var exec = child_process . exec ; %NWL%var semver = require (  ' semver '  )  ; %NWL%8
. describe (  ' commit '  ,  ' Commit message . `%v` will be replaced with version string .  '  )%NWL%. default (  ' commit '  ,  ' %v '  )%NWL%. describe (  ' no - commit '  ,  ' Do not commit changes . Also implies `no - tag` option .  '  )%NWL%. describe (  ' tag '  ,  ' Tag name . `%v` will be replaced with version string .  '  )%NWL%. default (  ' tag '  ,  ' %v '  )%NWL%. describe (  ' no - tag '  ,  ' Do not tag commit .  '  )%NWL%. argv ; %NWL%var child_process = require (  ' child_process '  )  ; %NWL%var exec = child_process . exec ; %NWL%var semver = require (  ' semver '  )  ; %NWL%var vow = require (  ' vow '  )  ; %NWL%7
. describe (  ' no - commit '  ,  ' Do not commit changes . Also implies `no - tag` option .  '  )%NWL%. describe (  ' tag '  ,  ' Tag name . `%v` will be replaced with version string .  '  )%NWL%. default (  ' tag '  ,  ' %v '  )%NWL%. describe (  ' no - tag '  ,  ' Do not tag commit .  '  )%NWL%. argv ; %NWL%var child_process = require (  ' child_process '  )  ; %NWL%var exec = child_process . exec ; %NWL%var semver = require (  ' semver '  )  ; %NWL%var vow = require (  ' vow '  )  ; %NWL%var vowFs = require (  ' vow - fs '  )  ; %NWL%var util = require (  ' util '  )  ; %NWL%5
var curID  = preID +  ' __ '  + key ; %NWL%var canEdit = parentEdit && canEditValue ( curValue )  ; %NWL%if ( typeOf ( curValue )  =  =  ' array '  )  {%NWL%key +  =  '  [  '  +  curValue . length +  '  ]  '  ;  }%NWL%return '  < tr >  < td class =  " desc key "  >  '  + key +  '  <  / td >  < td class =  " content value propValue '  +  ( canEdit ? ' canEdit '  :  '  '  )  +  '  " id =  "  '  + curID +  '  "  >  '  + displayValue ( curValue , path + key +  '  /  '  , curID , 0 , params , canEdit )  +  '  <  / td >  <  / tr >  '  ;%NWL%}%NWL%var funcStartMongoclikker = function (  )  {%NWL%var app = require (  ' express '  )  . createServer (  )%NWL%, express = require (  ' express '  )%NWL%, Db = require (  ' mongodb '  )  . Db%NWL%, Connection = require (  ' mongodb '  )  . Connection%NWL%9
var canEdit = parentEdit && canEditValue ( curValue )  ; %NWL%if ( typeOf ( curValue )  =  =  ' array '  )  {%NWL%key +  =  '  [  '  +  curValue . length +  '  ]  '  ;  }%NWL%return '  < tr >  < td class =  " desc key "  >  '  + key +  '  <  / td >  < td class =  " content value propValue '  +  ( canEdit ? ' canEdit '  :  '  '  )  +  '  " id =  "  '  + curID +  '  "  >  '  + displayValue ( curValue , path + key +  '  /  '  , curID , 0 , params , canEdit )  +  '  <  / td >  <  / tr >  '  ;%NWL%}%NWL%var funcStartMongoclikker = function (  )  {%NWL%var app = require (  ' express '  )  . createServer (  )%NWL%, express = require (  ' express '  )%NWL%, Db = require (  ' mongodb '  )  . Db%NWL%, Connection = require (  ' mongodb '  )  . Connection%NWL%, Server = require (  ' mongodb '  )  . Server%NWL%8
}  ; %NWL%BoundingSphere . prototype . isInFrustum = function ( frustumPlanes )  {%NWL%for ( var i = 0 ; i < 6 ; i +  +  )  {%NWL%if ( frustumPlanes [ i ]  . dotCoordinate ( this . centerWorld )  <  =  - this . radiusWorld )%NWL%return false ;%NWL%}%NWL%return true ;%NWL%}  ; %NWL%BoundingSphere . prototype . intersectsPoint = function ( point )  {%NWL%var x = this . centerWorld . x - point . x ; %NWL%var y = this . centerWorld . y - point . y ; %NWL%9
BoundingSphere . prototype . isInFrustum = function ( frustumPlanes )  {%NWL%for ( var i = 0 ; i < 6 ; i +  +  )  {%NWL%if ( frustumPlanes [ i ]  . dotCoordinate ( this . centerWorld )  <  =  - this . radiusWorld )%NWL%return false ;%NWL%}%NWL%return true ;%NWL%}  ; %NWL%BoundingSphere . prototype . intersectsPoint = function ( point )  {%NWL%var x = this . centerWorld . x - point . x ; %NWL%var y = this . centerWorld . y - point . y ; %NWL%var z = this . centerWorld . z - point . z ; %NWL%8
var x = this . centerWorld . x - point . x ; %NWL%var y = this . centerWorld . y - point . y ; %NWL%var z = this . centerWorld . z - point . z ; %NWL%var distance = Math . sqrt (  ( x * x )  +  ( y * y )  +  ( z * z )  )  ; %NWL%if ( Math . abs ( this . radiusWorld - distance )  < BABYLON . Engine . Epsilon )%NWL%return false ; %NWL%return true ;%NWL%}  ; %NWL%BoundingSphere . Intersects = function ( sphere0 , sphere1 )  {%NWL%var x = sphere0 . centerWorld . x - sphere1 . centerWorld . x ; %NWL%var y = sphere0 . centerWorld . y - sphere1 . centerWorld . y ; %NWL%9
var y = this . centerWorld . y - point . y ; %NWL%var z = this . centerWorld . z - point . z ; %NWL%var distance = Math . sqrt (  ( x * x )  +  ( y * y )  +  ( z * z )  )  ; %NWL%if ( Math . abs ( this . radiusWorld - distance )  < BABYLON . Engine . Epsilon )%NWL%return false ; %NWL%return true ;%NWL%}  ; %NWL%BoundingSphere . Intersects = function ( sphere0 , sphere1 )  {%NWL%var x = sphere0 . centerWorld . x - sphere1 . centerWorld . x ; %NWL%var y = sphere0 . centerWorld . y - sphere1 . centerWorld . y ; %NWL%var z = sphere0 . centerWorld . z - sphere1 . centerWorld . z ; %NWL%8
self . dragstart ( e )  ;%NWL%}  )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%var detect = debounce ( function ( context , event )  {%NWL%var $items = context . getItems (  )  ; %NWL%var from = 0 , to = $items . length ; %NWL%var item ; %NWL%var top = parseInt ( context . $dragElement . css (  ' top '  )  , 10 )  ; %NWL%var left = parseInt ( context . $dragElement . css (  ' left '  )  , 10 )  ; %NWL%9
scope . $emit (  ' setDate '  , scope . model , scope . view )  ;%NWL%} else if ( nextView )  {%NWL%if ( nextView =  =  ' week ' && scope . view =  =  ' month '  )  {%NWL%nextView =  ' date '  ;%NWL%}%NWL%scope . setView ( nextView )  ;%NWL%}%NWL%}  ; %NWL%function update (  )  {%NWL%var view = scope . view ; %NWL%var date = scope . date ; %NWL%9
}%NWL%if ( !goog . isObject ( data ) || !data [ goog . messaging . PortChannel . FLAG ]  )  {%NWL%return ;%NWL%}%NWL%if ( browserEvent . origin &&%NWL%!this . checkMessageOrigin ( browserEvent . origin )  )  {%NWL%return ;%NWL%}%NWL%if ( this . validateMessage_ ( data )  )  {%NWL%var serviceName = data [  ' serviceName '  ]  ; %NWL%var payload = data [  ' payload '  ]  ; %NWL%9
}  ; %NWL%NL . respondLast200 = function ( response , type )  {%NWL%var request = this . getLastRequest (  )  ; %NWL%this . respond200 ( request , response , type )  ; %NWL%return request ;%NWL%}  ; %NWL%NL . respondMap200 = function ( response )  {%NWL%_ . each ( this . server . requests , _ . bind ( function ( request )  {%NWL%var route  = URI ( request . url )  ; %NWL%var extent  = route . hasQuery (  ' extent '  , true )  ; %NWL%var zoom  = route . hasQuery (  ' zoom '  , true )  ; %NWL%9
_ . each ( this . server . requests , _ . bind ( function ( request )  {%NWL%var route  = URI ( request . url )  ; %NWL%var extent  = route . hasQuery (  ' extent '  , true )  ; %NWL%var zoom  = route . hasQuery (  ' zoom '  , true )  ; %NWL%if ( extent && zoom ) this . respond200 ( request , response )  ;%NWL%}  , this )  )  ;%NWL%}  ; %NWL%NL . respondRecordList200 = function ( response )  {%NWL%_ . each ( this . server . requests , _ . bind ( function ( request )  {%NWL%var route  = URI ( request . url )  ; %NWL%var limit  = route . hasQuery (  ' limit '  , true )  ; %NWL%2
var route  = URI ( request . url )  ; %NWL%var extent  = route . hasQuery (  ' extent '  , true )  ; %NWL%var zoom  = route . hasQuery (  ' zoom '  , true )  ; %NWL%if ( extent && zoom ) this . respond200 ( request , response )  ;%NWL%}  , this )  )  ;%NWL%}  ; %NWL%NL . respondRecordList200 = function ( response )  {%NWL%_ . each ( this . server . requests , _ . bind ( function ( request )  {%NWL%var route  = URI ( request . url )  ; %NWL%var limit  = route . hasQuery (  ' limit '  , true )  ; %NWL%var start  = route . hasQuery (  ' start '  , true )  ; %NWL%1
switch ( impostor )  {%NWL%case BABYLON . PhysicsEngine . SphereImpostor : %NWL%var bbox = mesh . getBoundingInfo (  )  . boundingBox ; %NWL%var radiusX = bbox . maximumWorld . x - bbox . minimumWorld . x ; %NWL%var radiusY = bbox . maximumWorld . y - bbox . minimumWorld . y ; %NWL%var radiusZ = bbox . maximumWorld . z - bbox . minimumWorld . z ; %NWL%return this . _createSphere ( Math . max ( this . _checkWithEpsilon ( radiusX )  , this . _checkWithEpsilon ( radiusY )  , this . _checkWithEpsilon ( radiusZ )  )  / 2 , mesh , options )  ; %NWL%case BABYLON . PhysicsEngine . BoxImpostor : %NWL%bbox = mesh . getBoundingInfo (  )  . boundingBox ; %NWL%var min = bbox . minimumWorld ; %NWL%var max = bbox . maximumWorld ; %NWL%9
BOX =     types . BOX ,%NWL%COMPOUND =    types . COMPOUND ,%NWL%CONVEXPOLYHEDRON =  types . CONVEXPOLYHEDRON ; %NWL%var bins = this . bins ,%NWL%binLengths = this . binLengths ,%NWL%Nbins = this . bins . length ; %NWL%for ( var i = 0 ; i! =  = Nbins ; i +  +  )  {%NWL%binLengths [ i ]  = 0 ;%NWL%}%NWL%var ceil = Math . ceil ; %NWL%var min = Math . min ; %NWL%9
COMPOUND =    types . COMPOUND ,%NWL%CONVEXPOLYHEDRON =  types . CONVEXPOLYHEDRON ; %NWL%var bins = this . bins ,%NWL%binLengths = this . binLengths ,%NWL%Nbins = this . bins . length ; %NWL%for ( var i = 0 ; i! =  = Nbins ; i +  +  )  {%NWL%binLengths [ i ]  = 0 ;%NWL%}%NWL%var ceil = Math . ceil ; %NWL%var min = Math . min ; %NWL%var max = Math . max ; %NWL%8
bi . aabb . upperBound . x ,%NWL%bi . aabb . upperBound . y ,%NWL%bi . aabb . upperBound . z ,%NWL%bi )  ; %NWL%break ;%NWL%}%NWL%}%NWL%for ( var i = 0 ; i! =  = Nbins ; i +  +  )  {%NWL%var binLength = binLengths [ i ]  ; %NWL%if ( binLength > 1 )  {%NWL%var bin = bins [ i ]  ; %NWL%8
this . _updateDirection (  )  ;%NWL%}%NWL%var checkCollisionResponse = this . checkCollisionResponse ; %NWL%if ( checkCollisionResponse && !body . collisionResponse )  {%NWL%return ;%NWL%}%NWL%if (  ( this . collisionFilterGroup & body . collisionFilterMask )  =  =  = 0 || ( body . collisionFilterGroup & this . collisionFilterMask )  =  =  = 0 )  {%NWL%return ;%NWL%}%NWL%var xi = intersectBody_xi ; %NWL%var qi = intersectBody_qi ; %NWL%9
var b = new Vec3 (  )  ; %NWL%var c = new Vec3 (  )  ; %NWL%var d = new Vec3 (  )  ; %NWL%var tmpRaycastResult = new RaycastResult (  )  ; %NWL%Ray . prototype . intersectBox = function ( shape , quat , position , body )  {%NWL%return this . intersectConvex ( shape . convexPolyhedronRepresentation , quat , position , body )  ;%NWL%}  ; %NWL%Ray . prototype [ Shape . types . BOX ]  = Ray . prototype . intersectBox ; %NWL%Ray . prototype . intersectPlane = function ( shape , quat , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%9
var hitPointWorld = new Vec3 (  )  ; %NWL%from . vsub ( position , planePointToFrom )  ; %NWL%var t =  - worldNormal . dot ( planePointToFrom )  / n_dot_dir ; %NWL%direction . scale ( t , dir_scaled_with_t )  ; %NWL%from . vadd ( dir_scaled_with_t , hitPointWorld )  ; %NWL%this . reportIntersection ( worldNormal , hitPointWorld , shape , body ,  - 1 )  ;%NWL%}  ; %NWL%Ray . prototype [ Shape . types . PLANE ]  = Ray . prototype . intersectPlane ; %NWL%Ray . prototype . getAABB = function ( result )  {%NWL%var to = this . to ; %NWL%var from = this . from ; %NWL%9
var Ray_intersectSphere_normal = new Vec3 (  )  ; %NWL%Ray . prototype . intersectSphere = function ( shape , quat , position , body )  {%NWL%var from = this . from ,%NWL%to = this . to ,%NWL%r = shape . radius ; %NWL%var a = Math . pow ( to . x - from . x , 2 )  + Math . pow ( to . y - from . y , 2 )  + Math . pow ( to . z - from . z , 2 )  ; %NWL%var b = 2 *  (  ( to . x - from . x )  *  ( from . x - position . x )  +  ( to . y - from . y )  *  ( from . y - position . y )  +  ( to . z - from . z )  *  ( from . z - position . z )  )  ; %NWL%var c = Math . pow ( from . x - position . x , 2 )  + Math . pow ( from . y - position . y , 2 )  + Math . pow ( from . z - position . z , 2 )  - Math . pow ( r , 2 )  ; %NWL%var delta = Math . pow ( b , 2 )  - 4 * a * c ; %NWL%var intersectionPoint = Ray_intersectSphere_intersectionPoint ; %NWL%var normal = Ray_intersectSphere_normal ; %NWL%9
var intersectConvex_minDistIntersect = new Vec3 (  )  ; %NWL%var intersectConvex_vector = new Vec3 (  )  ; %NWL%Ray . prototype . intersectConvex = function intersectConvex (%NWL%shape ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var normal = intersectConvex_normal ; %NWL%9
var intersectConvex_vector = new Vec3 (  )  ; %NWL%Ray . prototype . intersectConvex = function intersectConvex (%NWL%shape ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var normal = intersectConvex_normal ; %NWL%var vector = intersectConvex_vector ; %NWL%8
Ray . prototype . intersectConvex = function intersectConvex (%NWL%shape ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var normal = intersectConvex_normal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%7
var minDistNormal = intersectConvex_minDistNormal ; %NWL%var normal = intersectConvex_normal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var faceList =  ( options && options . faceList ) || null ; %NWL%var faces = shape . faces ,%NWL%vertices = shape . vertices ,%NWL%normals = shape . faceNormals ; %NWL%var direction = this . _direction ; %NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%9
var faceList =  ( options && options . faceList ) || null ; %NWL%var faces = shape . faces ,%NWL%vertices = shape . vertices ,%NWL%normals = shape . faceNormals ; %NWL%var direction = this . _direction ; %NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var fromToDistance = from . distanceTo ( to )  ; %NWL%var minDist =  - 1 ; %NWL%var Nfaces = faceList ? faceList . length : faces . length ; %NWL%var result = this . result ; %NWL%5
var intersectTrimesh_triangles =  [  ]  ; %NWL%var intersectTrimesh_treeTransform = new Transform (  )  ; %NWL%Ray . prototype . intersectTrimesh = function intersectTrimesh (%NWL%mesh ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%9
var intersectTrimesh_treeTransform = new Transform (  )  ; %NWL%Ray . prototype . intersectTrimesh = function intersectTrimesh (%NWL%mesh ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%8
mesh ,%NWL%quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%9
quat ,%NWL%position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%8
position ,%NWL%body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var localAABB = intersectTrimesh_localAABB ; %NWL%4
body ,%NWL%options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var localAABB = intersectTrimesh_localAABB ; %NWL%var localDirection = intersectTrimesh_localDirection ; %NWL%3
options%NWL%)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var localAABB = intersectTrimesh_localAABB ; %NWL%var localDirection = intersectTrimesh_localDirection ; %NWL%var localFrom = intersectTrimesh_localFrom ; %NWL%2
)  {%NWL%var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var localAABB = intersectTrimesh_localAABB ; %NWL%var localDirection = intersectTrimesh_localDirection ; %NWL%var localFrom = intersectTrimesh_localFrom ; %NWL%var localTo = intersectTrimesh_localTo ; %NWL%1
var normal = intersectTrimesh_normal ; %NWL%var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var localAABB = intersectTrimesh_localAABB ; %NWL%var localDirection = intersectTrimesh_localDirection ; %NWL%var localFrom = intersectTrimesh_localFrom ; %NWL%var localTo = intersectTrimesh_localTo ; %NWL%var worldIntersectPoint = intersectTrimesh_worldIntersectPoint ; %NWL%0
var triangles = intersectTrimesh_triangles ; %NWL%var treeTransform = intersectTrimesh_treeTransform ; %NWL%var minDistNormal = intersectConvex_minDistNormal ; %NWL%var vector = intersectConvex_vector ; %NWL%var minDistIntersect = intersectConvex_minDistIntersect ; %NWL%var localAABB = intersectTrimesh_localAABB ; %NWL%var localDirection = intersectTrimesh_localDirection ; %NWL%var localFrom = intersectTrimesh_localFrom ; %NWL%var localTo = intersectTrimesh_localTo ; %NWL%var worldIntersectPoint = intersectTrimesh_worldIntersectPoint ; %NWL%var worldNormal = intersectTrimesh_worldNormal ; %NWL%0
var localDirection = intersectTrimesh_localDirection ; %NWL%var localFrom = intersectTrimesh_localFrom ; %NWL%var localTo = intersectTrimesh_localTo ; %NWL%var worldIntersectPoint = intersectTrimesh_worldIntersectPoint ; %NWL%var worldNormal = intersectTrimesh_worldNormal ; %NWL%var faceList =  ( options && options . faceList ) || null ; %NWL%var indices = mesh . indices ,%NWL%vertices = mesh . vertices ,%NWL%normals = mesh . faceNormals ; %NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%9
}%NWL%Transform . vectorToWorldFrame ( quat , normal , worldNormal )  ; %NWL%Transform . pointToWorldFrame ( position , quat , intersectPoint , worldIntersectPoint )  ; %NWL%this . reportIntersection ( worldNormal , worldIntersectPoint , mesh , body , trianglesIndex )  ;%NWL%}%NWL%triangles . length = 0 ;%NWL%}  ; %NWL%Ray . prototype [ Shape . types . TRIMESH ]  = Ray . prototype . intersectTrimesh ; %NWL%Ray . prototype . reportIntersection = function ( normal , hitPointWorld , shape , body , hitFaceIndex )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%9
Transform . pointToWorldFrame ( position , quat , intersectPoint , worldIntersectPoint )  ; %NWL%this . reportIntersection ( worldNormal , worldIntersectPoint , mesh , body , trianglesIndex )  ;%NWL%}%NWL%triangles . length = 0 ;%NWL%}  ; %NWL%Ray . prototype [ Shape . types . TRIMESH ]  = Ray . prototype . intersectTrimesh ; %NWL%Ray . prototype . reportIntersection = function ( normal , hitPointWorld , shape , body , hitFaceIndex )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var distance = from . distanceTo ( hitPointWorld )  ; %NWL%var result = this . result ; %NWL%7
this . equations . push ( x , y , z )  ; %NWL%x . minForce = y . minForce = z . minForce =  - maxForce ; %NWL%x . maxForce = y . maxForce = z . maxForce =  maxForce ; %NWL%x . ni . set ( 1 , 0 , 0 )  ; %NWL%y . ni . set ( 0 , 1 , 0 )  ; %NWL%z . ni . set ( 0 , 0 , 1 )  ;%NWL%}%NWL%PointToPointConstraint . prototype = new Constraint (  )  ; %NWL%PointToPointConstraint . prototype . update = function (  )  {%NWL%var bodyA = this . bodyA ; %NWL%var bodyB = this . bodyB ; %NWL%9
this . force . vadd ( force , this . force )  ; %NWL%this . torque . vadd ( rotForce , this . torque )  ;%NWL%}  ; %NWL%var Body_applyLocalForce_worldForce = new Vec3 (  )  ; %NWL%var Body_applyLocalForce_worldPoint = new Vec3 (  )  ; %NWL%Body . prototype . applyLocalForce = function ( localForce , localPoint )  {%NWL%if ( this . type ! =  = Body . DYNAMIC )  {%NWL%return ;%NWL%}%NWL%var worldForce = Body_applyLocalForce_worldForce ; %NWL%var worldPoint = Body_applyLocalForce_worldPoint ; %NWL%9
}  ; %NWL%var Body_applyImpulse_r = new Vec3 (  )  ; %NWL%var Body_applyImpulse_velo = new Vec3 (  )  ; %NWL%var Body_applyImpulse_rotVelo = new Vec3 (  )  ; %NWL%Body . prototype . applyImpulse = function ( impulse , worldPoint )  {%NWL%if ( this . type ! =  = Body . DYNAMIC )  {%NWL%return ;%NWL%}%NWL%var r = Body_applyImpulse_r ; %NWL%worldPoint . vsub ( this . position , r )  ; %NWL%var velo = Body_applyImpulse_velo ; %NWL%8
Body . prototype . applyImpulse = function ( impulse , worldPoint )  {%NWL%if ( this . type ! =  = Body . DYNAMIC )  {%NWL%return ;%NWL%}%NWL%var r = Body_applyImpulse_r ; %NWL%worldPoint . vsub ( this . position , r )  ; %NWL%var velo = Body_applyImpulse_velo ; %NWL%velo . copy ( impulse )  ; %NWL%velo . mult ( this . invMass , velo )  ; %NWL%this . velocity . vadd ( velo , this . velocity )  ; %NWL%var rotVelo = Body_applyImpulse_rotVelo ; %NWL%4
this . invInertiaWorld . vmult ( rotVelo , rotVelo )  ; %NWL%this . angularVelocity . vadd ( rotVelo , this . angularVelocity )  ;%NWL%}  ; %NWL%var Body_applyLocalImpulse_worldImpulse = new Vec3 (  )  ; %NWL%var Body_applyLocalImpulse_worldPoint = new Vec3 (  )  ; %NWL%Body . prototype . applyLocalImpulse = function ( localImpulse , localPoint )  {%NWL%if ( this . type ! =  = Body . DYNAMIC )  {%NWL%return ;%NWL%}%NWL%var worldImpulse = Body_applyLocalImpulse_worldImpulse ; %NWL%var worldPoint = Body_applyLocalImpulse_worldPoint ; %NWL%9
var Vec3 = require (  "  .  .  / src / math / Vec3 "  )  ; %NWL%var Mat3 = require (  "  .  .  / src / math / Mat3 "  )  ; %NWL%var Quaternion = require (  "  .  .  / src / math / Quaternion "  )  ; %NWL%var Box = require (  '  .  .  / src / shapes / Box '  )  ; %NWL%var Sphere = require (  '  .  .  / src / shapes / Sphere '  )  ; %NWL%var Trimesh = require (  '  .  .  / src / shapes / Trimesh '  )  ; %NWL%var Plane = require (  '  .  .  / src / shapes / Plane '  )  ; %NWL%var Ray = require (  '  .  .  / src / collision / Ray '  )  ; %NWL%var Body = require (  '  .  .  / src / objects / Body '  )  ; %NWL%var RaycastResult = require (  '  .  .  / src / collision / RaycastResult '  )  ; %NWL%var Heightfield = require (  '  .  .  / src / shapes / Heightfield '  )  ; %NWL%3
var intersectRectangle_rayStart = vec2 . create (  )  ; %NWL%var intersectRectangle_worldNormalMin = vec2 . create (  )  ; %NWL%var intersectRectangle_worldNormalMax = vec2 . create (  )  ; %NWL%var intersectRectangle_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMin = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMax = vec2 . create (  )  ; %NWL%Ray . prototype . intersectRectangle = function ( shape , angle , position , body )  {%NWL%var tmin =  - Number . MAX_VALUE ; %NWL%var tmax = Number . MAX_VALUE ; %NWL%var direction = intersectRectangle_direction ; %NWL%var rayStart = intersectRectangle_rayStart ; %NWL%9
var intersectRectangle_worldNormalMin = vec2 . create (  )  ; %NWL%var intersectRectangle_worldNormalMax = vec2 . create (  )  ; %NWL%var intersectRectangle_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMin = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMax = vec2 . create (  )  ; %NWL%Ray . prototype . intersectRectangle = function ( shape , angle , position , body )  {%NWL%var tmin =  - Number . MAX_VALUE ; %NWL%var tmax = Number . MAX_VALUE ; %NWL%var direction = intersectRectangle_direction ; %NWL%var rayStart = intersectRectangle_rayStart ; %NWL%var worldNormalMin = intersectRectangle_worldNormalMin ; %NWL%8
var intersectRectangle_worldNormalMax = vec2 . create (  )  ; %NWL%var intersectRectangle_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMin = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMax = vec2 . create (  )  ; %NWL%Ray . prototype . intersectRectangle = function ( shape , angle , position , body )  {%NWL%var tmin =  - Number . MAX_VALUE ; %NWL%var tmax = Number . MAX_VALUE ; %NWL%var direction = intersectRectangle_direction ; %NWL%var rayStart = intersectRectangle_rayStart ; %NWL%var worldNormalMin = intersectRectangle_worldNormalMin ; %NWL%var worldNormalMax = intersectRectangle_worldNormalMax ; %NWL%7
var intersectRectangle_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMin = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMax = vec2 . create (  )  ; %NWL%Ray . prototype . intersectRectangle = function ( shape , angle , position , body )  {%NWL%var tmin =  - Number . MAX_VALUE ; %NWL%var tmax = Number . MAX_VALUE ; %NWL%var direction = intersectRectangle_direction ; %NWL%var rayStart = intersectRectangle_rayStart ; %NWL%var worldNormalMin = intersectRectangle_worldNormalMin ; %NWL%var worldNormalMax = intersectRectangle_worldNormalMax ; %NWL%var hitPointWorld = intersectRectangle_hitPointWorld ; %NWL%6
var intersectRectangle_boxMin = vec2 . create (  )  ; %NWL%var intersectRectangle_boxMax = vec2 . create (  )  ; %NWL%Ray . prototype . intersectRectangle = function ( shape , angle , position , body )  {%NWL%var tmin =  - Number . MAX_VALUE ; %NWL%var tmax = Number . MAX_VALUE ; %NWL%var direction = intersectRectangle_direction ; %NWL%var rayStart = intersectRectangle_rayStart ; %NWL%var worldNormalMin = intersectRectangle_worldNormalMin ; %NWL%var worldNormalMax = intersectRectangle_worldNormalMax ; %NWL%var hitPointWorld = intersectRectangle_hitPointWorld ; %NWL%var boxMin = intersectRectangle_boxMin ; %NWL%5
var intersectRectangle_boxMax = vec2 . create (  )  ; %NWL%Ray . prototype . intersectRectangle = function ( shape , angle , position , body )  {%NWL%var tmin =  - Number . MAX_VALUE ; %NWL%var tmax = Number . MAX_VALUE ; %NWL%var direction = intersectRectangle_direction ; %NWL%var rayStart = intersectRectangle_rayStart ; %NWL%var worldNormalMin = intersectRectangle_worldNormalMin ; %NWL%var worldNormalMax = intersectRectangle_worldNormalMax ; %NWL%var hitPointWorld = intersectRectangle_hitPointWorld ; %NWL%var boxMin = intersectRectangle_boxMin ; %NWL%var boxMax = intersectRectangle_boxMax ; %NWL%4
}%NWL%}  ; %NWL%Ray . prototype [ Shape . RECTANGLE ]  = Ray . prototype . intersectRectangle ; %NWL%var intersectPlane_planePointToFrom = vec2 . create (  )  ; %NWL%var intersectPlane_dir_scaled_with_t = vec2 . create (  )  ; %NWL%var intersectPlane_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectPlane_worldNormal = vec2 . create (  )  ; %NWL%var intersectPlane_len = vec2 . create (  )  ; %NWL%Ray . prototype . intersectPlane = function ( shape , angle , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%9
var intersectPlane_planePointToFrom = vec2 . create (  )  ; %NWL%var intersectPlane_dir_scaled_with_t = vec2 . create (  )  ; %NWL%var intersectPlane_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectPlane_worldNormal = vec2 . create (  )  ; %NWL%var intersectPlane_len = vec2 . create (  )  ; %NWL%Ray . prototype . intersectPlane = function ( shape , angle , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var direction = this . _direction ; %NWL%var planePointToFrom = intersectPlane_planePointToFrom ; %NWL%var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; %NWL%9
var intersectPlane_dir_scaled_with_t = vec2 . create (  )  ; %NWL%var intersectPlane_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectPlane_worldNormal = vec2 . create (  )  ; %NWL%var intersectPlane_len = vec2 . create (  )  ; %NWL%Ray . prototype . intersectPlane = function ( shape , angle , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var direction = this . _direction ; %NWL%var planePointToFrom = intersectPlane_planePointToFrom ; %NWL%var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; %NWL%var hitPointWorld = intersectPlane_hitPointWorld ; %NWL%8
var intersectPlane_hitPointWorld = vec2 . create (  )  ; %NWL%var intersectPlane_worldNormal = vec2 . create (  )  ; %NWL%var intersectPlane_len = vec2 . create (  )  ; %NWL%Ray . prototype . intersectPlane = function ( shape , angle , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var direction = this . _direction ; %NWL%var planePointToFrom = intersectPlane_planePointToFrom ; %NWL%var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; %NWL%var hitPointWorld = intersectPlane_hitPointWorld ; %NWL%var worldNormal = intersectPlane_worldNormal ; %NWL%7
var intersectPlane_worldNormal = vec2 . create (  )  ; %NWL%var intersectPlane_len = vec2 . create (  )  ; %NWL%Ray . prototype . intersectPlane = function ( shape , angle , position , body )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var direction = this . _direction ; %NWL%var planePointToFrom = intersectPlane_planePointToFrom ; %NWL%var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; %NWL%var hitPointWorld = intersectPlane_hitPointWorld ; %NWL%var worldNormal = intersectPlane_worldNormal ; %NWL%var len = intersectPlane_len ; %NWL%6
var Ray_intersectSphere_normal = vec2 . create (  )  ; %NWL%Ray . prototype . intersectCircle = function ( shape , angle , position , body )  {%NWL%var from = this . from ,%NWL%to = this . to ,%NWL%r = shape . radius ; %NWL%var a = Math . pow ( to [ 0 ]  - from [ 0 ]  , 2 )  + Math . pow ( to [ 1 ]  - from [ 1 ]  , 2 )  ; %NWL%var b = 2 *  (  ( to [ 0 ]  - from [ 0 ]  )  *  ( from [ 0 ]  - position [ 0 ]  )  +  ( to [ 1 ]  - from [ 1 ]  )  *  ( from [ 1 ]  - position [ 1 ]  )  )  ; %NWL%var c = Math . pow ( from [ 0 ]  - position [ 0 ]  , 2 )  + Math . pow ( from [ 1 ]  - position [ 1 ]  , 2 )  - Math . pow ( r , 2 )  ; %NWL%var delta = Math . pow ( b , 2 )  - 4 * a * c ; %NWL%var intersectionPoint = Ray_intersectSphere_intersectionPoint ; %NWL%var normal = Ray_intersectSphere_normal ; %NWL%9
vec2 . lerp ( intersectionPoint , from , to , d2 )  ; %NWL%vec2 . sub ( normal , intersectionPoint , position )  ; %NWL%vec2 . normalize ( normal , normal )  ; %NWL%this . reportIntersection ( normal , intersectionPoint , shape , body ,  - 1 )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%Ray . prototype [ Shape . CIRCLE ]  = Ray . prototype . intersectCircle ; %NWL%Ray . prototype . getAABB = function ( result )  {%NWL%var to = this . to ; %NWL%var from = this . from ; %NWL%9
Ray . prototype [ Shape . CIRCLE ]  = Ray . prototype . intersectCircle ; %NWL%Ray . prototype . getAABB = function ( result )  {%NWL%var to = this . to ; %NWL%var from = this . from ; %NWL%result . lowerBound [ 0 ]  = Math . min ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . lowerBound [ 1 ]  = Math . min ( to [ 1 ]  , from [ 1 ]  )  ; %NWL%result . upperBound [ 0 ]  = Math . max ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . upperBound [ 1 ]  = Math . max ( to [ 1 ]  , from [ 1 ]  )  ;%NWL%}  ; %NWL%Ray . prototype . reportIntersection = function ( normal , hitPointWorld , shape , body , hitFaceIndex )  {%NWL%var from = this . from ; %NWL%2
Ray . prototype . getAABB = function ( result )  {%NWL%var to = this . to ; %NWL%var from = this . from ; %NWL%result . lowerBound [ 0 ]  = Math . min ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . lowerBound [ 1 ]  = Math . min ( to [ 1 ]  , from [ 1 ]  )  ; %NWL%result . upperBound [ 0 ]  = Math . max ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . upperBound [ 1 ]  = Math . max ( to [ 1 ]  , from [ 1 ]  )  ;%NWL%}  ; %NWL%Ray . prototype . reportIntersection = function ( normal , hitPointWorld , shape , body , hitFaceIndex )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%2
var from = this . from ; %NWL%result . lowerBound [ 0 ]  = Math . min ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . lowerBound [ 1 ]  = Math . min ( to [ 1 ]  , from [ 1 ]  )  ; %NWL%result . upperBound [ 0 ]  = Math . max ( to [ 0 ]  , from [ 0 ]  )  ; %NWL%result . upperBound [ 1 ]  = Math . max ( to [ 1 ]  , from [ 1 ]  )  ;%NWL%}  ; %NWL%Ray . prototype . reportIntersection = function ( normal , hitPointWorld , shape , body , hitFaceIndex )  {%NWL%var from = this . from ; %NWL%var to = this . to ; %NWL%var distance = vec2 . distance ( from , hitPointWorld )  ;  /  / from . distanceTo ( hitPointWorld )  ; %NWL%var result = this . result ; %NWL%0
module . exports = DistanceConstraint ; %NWL%function DistanceConstraint ( bodyA , bodyB , options )  {%NWL%options = Utils . defaults ( options ,  {%NWL%localAnchorA :  [ 0 , 0 ]  ,%NWL%localAnchorB :  [ 0 , 0 ]%NWL%}  )  ; %NWL%Constraint . call ( this , bodyA , bodyB , Constraint . DISTANCE , options )  ; %NWL%this . localAnchorA = vec2 . fromValues ( options . localAnchorA [ 0 ]  , options . localAnchorA [ 1 ]  )  ; %NWL%this . localAnchorB = vec2 . fromValues ( options . localAnchorB [ 0 ]  , options . localAnchorB [ 1 ]  )  ; %NWL%var localAnchorA = this . localAnchorA ; %NWL%var localAnchorB = this . localAnchorB ; %NWL%9
this . _prepareRessources (  )  ; %NWL%if ( !this . _colorShader . isReady (  )  )  {%NWL%return ;%NWL%}%NWL%var engine = this . _scene . getEngine (  )  ; %NWL%engine . setDepthWrite ( false )  ; %NWL%this . _colorShader . _preBind (  )  ; %NWL%for ( var boundingBoxIndex = 0 ; boundingBoxIndex < this . renderList . length ; boundingBoxIndex +  +  )  {%NWL%var boundingBox = this . renderList . data [ boundingBoxIndex ]  ; %NWL%var min = boundingBox . minimum ; %NWL%var max = boundingBox . maximum ; %NWL%9
return 0 ;  /  / Plane is infinite . The inertia should therefore be infinty but by convention we set 0 here%NWL%}  ; %NWL%Plane . prototype . updateBoundingRadius = function (  )  {%NWL%this . boundingRadius = Number . MAX_VALUE ;%NWL%}  ; %NWL%Plane . prototype . computeAABB = function ( out , position , angle )  {%NWL%var a = angle % ( 2 * Math . PI )  ; %NWL%var set = vec2 . set ; %NWL%var max = Number . MAX_VALUE ; %NWL%var lowerBound = out . lowerBound ; %NWL%var upperBound = out . upperBound ; %NWL%9
setupClipboard ( this , opts )  ;%NWL%}  )  ;%NWL%}  ;%NWL%}%NWL%if ( !FileReader )  {%NWL%return ;%NWL%}%NWL%function makeWorker ( script )  {%NWL%var URL = window . URL || window . webkitURL ; %NWL%var Blob = window . Blob ; %NWL%var Worker = window . Worker ; %NWL%9
if ( !files . length )  {%NWL%groupEnd (  )  ; %NWL%return ;%NWL%}%NWL%var supportsSync = sync && FileReaderSyncSupport ; %NWL%var syncWorker ; %NWL%if ( supportsSync )  {%NWL%syncWorker = makeWorker ( workerScript )  ; %NWL%syncWorker . onmessage = function ( e )  {%NWL%var file = e . data . file ; %NWL%var result = e . data . result ; %NWL%9
' use strict '  ; %NWL%var express = require (  ' express '  )  ; %NWL%var user = require (  '  .  / user / api '  )  ; %NWL%var session = require (  '  .  / session / api '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var config = require (  '  .  / config '  )  ; %NWL%var mongoose = require (  ' mongoose '  )  ; %NWL%var SessionMongoose = require (  ' session - mongoose '  )  ; %NWL%var passport = require (  ' passport '  )  ; %NWL%1
}%NWL%var p =  {%NWL%new :  '  '  ,%NWL%current :  '  '  ,%NWL%isSet : false ,%NWL%}  ; %NWL%return res . send ( p )  ;%NWL%}  ; %NWL%exports . create = function ( req , res , fn )  {%NWL%var user = req . body . user ; %NWL%var password = req . body . password ; %NWL%9
if (  ( v instanceof State ) || ( ! x . units ) && ( ! v instanceof Flow )  )  {%NWL%x = x . value ;%NWL%} else {%NWL%x = fn [  "  *  "  ]  ( x . value , this . unitsToBase ( v , x . units , v instanceof Flow )  )  ;%NWL%}%NWL%return x + 0 ;%NWL%}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%9
x = x . value ;%NWL%} else {%NWL%x = fn [  "  *  "  ]  ( x . value , this . unitsToBase ( v , x . units , v instanceof Flow )  )  ;%NWL%}%NWL%return x + 0 ;%NWL%}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%8
} else {%NWL%x = fn [  "  *  "  ]  ( x . value , this . unitsToBase ( v , x . units , v instanceof Flow )  )  ;%NWL%}%NWL%return x + 0 ;%NWL%}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%7
x = fn [  "  *  "  ]  ( x . value , this . unitsToBase ( v , x . units , v instanceof Flow )  )  ;%NWL%}%NWL%return x + 0 ;%NWL%}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%6
}%NWL%return x + 0 ;%NWL%}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%5
return x + 0 ;%NWL%}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%var displayed = solver . displayed ; %NWL%4
}%NWL%Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%var displayed = solver . displayed ; %NWL%var id = solver . id ; %NWL%3
Simulator . prototype . createSolver = function ( solver )  {%NWL%var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%var displayed = solver . displayed ; %NWL%var id = solver . id ; %NWL%var timeStep = solver . timeStep ; %NWL%2
var me = this ; %NWL%var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%var displayed = solver . displayed ; %NWL%var id = solver . id ; %NWL%var timeStep = solver . timeStep ; %NWL%var userTimeStep = solver . userTimeStep ; %NWL%1
var stocks = solver . stocks ; %NWL%var flows = solver . flows ; %NWL%var actions = solver . actions ; %NWL%var states = solver . states ; %NWL%var transitions = solver . transitions ; %NWL%var valued = solver . valued ; %NWL%var displayed = solver . displayed ; %NWL%var id = solver . id ; %NWL%var timeStep = solver . timeStep ; %NWL%var userTimeStep = solver . userTimeStep ; %NWL%var RKOrder = solver . RKOrder ; %NWL%0
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
else%NWL%return "  "  ;%NWL%}  ;%NWL%}  )  . call ( FoldMode . prototype )  ;%NWL%}  )  ; %NWL%define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
}%NWL%]%NWL%}  ;%NWL%}  ; %NWL%oop . inherits ( TexHighlightRules , TextHighlightRules )  ; %NWL%exports . TexHighlightRules = TexHighlightRules ;%NWL%}  )  ; %NWL%define (  " ace / mode / r_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / text_highlight_rules "  ,  " ace / mode / tex_highlight_rules "  ]  , function ( require , exports , module )%NWL%{%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return tz ( timestamp , timezone )  . format ( formats [ format ]  )%NWL%}%NWL%exports . formatTime = function ( timestamp , timezone )  {%NWL%return tz ( timestamp , timezone )  . format (  ' HH : mm '  )%NWL%}%NWL%exports . parseDatetime = function ( value , format , timezone )  {%NWL%return tz ( value , formats [ format ]  +  ' HH : mm '  , timezone )  . valueOf (  )%NWL%}%NWL%exports . parseDatetimeForm = function ( body , fieldid )  {%NWL%var date = body [  ' _date -  '  + fieldid ]%NWL%var time = body [  ' _time -  '  + fieldid ]%NWL%9
}%NWL%exports . formatTime = function ( timestamp , timezone )  {%NWL%return tz ( timestamp , timezone )  . format (  ' HH : mm '  )%NWL%}%NWL%exports . parseDatetime = function ( value , format , timezone )  {%NWL%return tz ( value , formats [ format ]  +  ' HH : mm '  , timezone )  . valueOf (  )%NWL%}%NWL%exports . parseDatetimeForm = function ( body , fieldid )  {%NWL%var date = body [  ' _date -  '  + fieldid ]%NWL%var time = body [  ' _time -  '  + fieldid ]%NWL%var format = body [  ' _format -  '  + fieldid ]%NWL%8
exports . formatTime = function ( timestamp , timezone )  {%NWL%return tz ( timestamp , timezone )  . format (  ' HH : mm '  )%NWL%}%NWL%exports . parseDatetime = function ( value , format , timezone )  {%NWL%return tz ( value , formats [ format ]  +  ' HH : mm '  , timezone )  . valueOf (  )%NWL%}%NWL%exports . parseDatetimeForm = function ( body , fieldid )  {%NWL%var date = body [  ' _date -  '  + fieldid ]%NWL%var time = body [  ' _time -  '  + fieldid ]%NWL%var format = body [  ' _format -  '  + fieldid ]%NWL%var timezone = body [  ' _timezone -  '  + fieldid ]%NWL%7
return function ( core )  {%NWL%var users =  {  }%NWL%function sessionKey (  )  {%NWL%if ( !key )  {%NWL%key = new Buffer ( core . config . authentication . sessionKey ,  ' hex '  )%NWL%}%NWL%return key%NWL%}%NWL%users . login = function ( args , callback )  {%NWL%var email = args . email%NWL%var password = args . password%NWL%9
}  )%NWL%. then ( function ( valid , callback )  {%NWL%errors%NWL%. with ( callback )%NWL%. when ( !valid )%NWL%. forbidden (  ' InvalidCredentials : Wrong password '  )%NWL%. success ( callback )%NWL%}  )%NWL%. then ( function ( valid , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%9
. forbidden (  ' InvalidCredentials : Wrong password '  )%NWL%. success ( callback )%NWL%}  )%NWL%. then ( function ( valid , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%var user = objects [ id ]%NWL%users . sessionCode ( user , callback )%NWL%}  )%NWL%. then ( function ( authCode , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%5
. success ( callback )%NWL%}  )%NWL%. then ( function ( valid , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%var user = objects [ id ]%NWL%users . sessionCode ( user , callback )%NWL%}  )%NWL%. then ( function ( authCode , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%3
}  )%NWL%. then ( function ( authCode , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%callback ( null , id , objects , authCode )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . verifyCode = function ( args , callback )  {%NWL%var code = args . code%NWL%var joins = args . joins%NWL%9
. then ( function ( authCode , callback )  {%NWL%var id = this . get (  ' id '  )%NWL%var objects = this . get (  ' objects '  )%NWL%callback ( null , id , objects , authCode )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . verifyCode = function ( args , callback )  {%NWL%var code = args . code%NWL%var joins = args . joins%NWL%var params = args . params%NWL%8
}  )%NWL%. then ( function ( callback )  {%NWL%var code = this . get (  ' code '  )%NWL%module . exports . lastLostPasswordCode = code%NWL%callback (  )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . setPassword = function ( args , callback )  {%NWL%var code = args . code%NWL%var password = args . password%NWL%9
}%NWL%core . db . readObjects ( args , callback )%NWL%}  )%NWL%. then ( function ( objects , callback )  {%NWL%this . set (  ' objects '  , objects )%NWL%var user = objects [ this . get (  ' id '  )  ]%NWL%users . sessionCode ( user , callback )%NWL%}  )%NWL%. then ( function ( authCode , callback )  {%NWL%var objects = this . get (  ' objects '  )%NWL%var id = this . get (  ' id '  )%NWL%9
. request (  ' InvalidAuthcode : Invalid auth code '  )%NWL%. success ( callback )%NWL%}  )%NWL%. then ( function ( callback )  {%NWL%callback ( null , tokens [ 0 ]  )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . socialSignup = function ( args , callback )  {%NWL%var provider = args . provider%NWL%var identifier = args . identifier%NWL%9
. success ( callback )%NWL%}  )%NWL%. then ( function ( callback )  {%NWL%callback ( null , tokens [ 0 ]  )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . socialSignup = function ( args , callback )  {%NWL%var provider = args . provider%NWL%var identifier = args . identifier%NWL%var extra = args . extra%NWL%8
}  )%NWL%. then ( function ( callback )  {%NWL%callback ( null , tokens [ 0 ]  )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . socialSignup = function ( args , callback )  {%NWL%var provider = args . provider%NWL%var identifier = args . identifier%NWL%var extra = args . extra%NWL%var joins = args . joins%NWL%7
. then ( function ( callback )  {%NWL%callback ( null , tokens [ 0 ]  )%NWL%}  )%NWL%. end ( callback )%NWL%}%NWL%users . socialSignup = function ( args , callback )  {%NWL%var provider = args . provider%NWL%var identifier = args . identifier%NWL%var extra = args . extra%NWL%var joins = args . joins%NWL%var params = args . params%NWL%6
token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / dot_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / text_highlight_rules "  ,  " ace / mode / doc_comment_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
return {%NWL%token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / jsx_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / doc_comment_highlight_rules "  ,  " ace / mode / text_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / behaviour / cstyle "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / mode / behaviour "  ,  " ace / token_iterator "  ,  " ace / lib / lang "  ]  , function ( require , exports , module )  {%NWL%" use strict "  ; %NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
return {%NWL%token :  " comment . doc "  ,  /  / closing comment%NWL%regex :  " \\ * \\ /  "  ,%NWL%next  : start%NWL%}  ;%NWL%}  ; %NWL%exports . DocCommentHighlightRules = DocCommentHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / mysql_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / doc_comment_highlight_rules "  ,  " ace / mode / text_highlight_rules "  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}%NWL%]%NWL%}  ;%NWL%}  ; %NWL%oop . inherits ( TexHighlightRules , TextHighlightRules )  ; %NWL%exports . TexHighlightRules = TexHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  " ace / mode / r_highlight_rules "  ,  [  " require "  ,  " exports "  ,  " module "  ,  " ace / lib / oop "  ,  " ace / lib / lang "  ,  " ace / mode / text_highlight_rules "  ,  " ace / mode / tex_highlight_rules "  ]  , function ( require , exports , module )%NWL%{%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
exports . distance = function ( from , to , decimals )  {%NWL%decimals = decimals || 0%NWL%var earthRadius = 6371000 /  / meters%NWL%var lat1 = from . lat%NWL%var lat2 = to . lat%NWL%var lon1 = from . lon%NWL%var lon2 = to . lon%NWL%var dLat =  ( lat2 - lat1 )  * Math . PI / 180%NWL%var dLon =  ( lon2 - lon1 )  * Math . PI / 180%NWL%var lat1 = lat1 * Math . PI / 180%NWL%var lat2 = lat2 * Math . PI / 180%NWL%9
function fileUpload (  )  {%NWL%var form = $form [ 0 ]  ; %NWL%if ( $ (  '  : input [ name = submit ]  ,  : input [ id = submit ]  '  , form )  . length )  {%NWL%alert (  ' Error : Form elements must not have name or id of " submit "  .  '  )  ; %NWL%return ;%NWL%}%NWL%var s = $ . extend ( true ,  {  }  , $ . ajaxSettings , options )  ; %NWL%s . context = s . context || s ; %NWL%var id =  ' jqFormIO '  +  ( new Date (  )  . getTime (  )  )  , fn =  ' _ '  + id ; %NWL%var $io = $ (  '  < iframe id =  "  '  + id +  '  " name =  "  '  + id +  '  " src =  "  '  + s . iframeSrc +  '  "  /  >  '  )  ; %NWL%var io = $io [ 0 ]  ; %NWL%1
}  ,%NWL%toDateString : function OW_toDateString ( dateString )  {%NWL%let date = new Date ( JSON . parse ( dateString )  )  ; %NWL%return date . toLocaleString (  )%NWL%. split (  "  ,  "  )%NWL%. filter ( function ( part ) part . indexOf (  " day "  )  > 0? false : true )%NWL%. join (  "  ,  "  )  ;%NWL%}  ,%NWL%sorter : function OW_sorter ( a , b )  {%NWL%let sortColumn = pref (  " sortColumn "  )  ; %NWL%let sortOrder = pref (  " sortOrder "  )  ; %NWL%9
return ; %NWL%this . inMultiSelectMode = false ; %NWL%this . unsetStyle (  " multiselect "  )  ; %NWL%this . keyBinding . removeKeyboardHandler ( exports . commands . keyboardHandler )  ; %NWL%this . commands . removeEventListener (  " exec "  , this . $onMultiSelectExec )  ; %NWL%this . renderer . updateCursor (  )  ; %NWL%this . renderer . updateBackMarkers (  )  ;%NWL%}  ; %NWL%this . $onMultiSelectExec = function ( e )  {%NWL%var command = e . command ; %NWL%var editor = e . editor ; %NWL%9
command . exec ( editor , e . args || {  }  )  ;%NWL%} else {%NWL%command . multiSelectAction ( editor , e . args || {  }  )  ;%NWL%}%NWL%e . preventDefault (  )  ;%NWL%}  ; %NWL%this . forEachSelection = function ( cmd , args )  {%NWL%if ( this . inVirtualSelectionMode )%NWL%return ; %NWL%var session = this . session ; %NWL%var selection = this . selection ; %NWL%9
return p1 . row =  = p2 . row && p1 . column =  = p2 . column ;%NWL%}%NWL%exports . onSessionChange = function ( e )  {%NWL%var session = e . session ; %NWL%if ( !session . multiSelect )  {%NWL%session . $selectionMarkers =  [  ]  ; %NWL%session . selection . $initRangeList (  )  ; %NWL%session . multiSelect = session . selection ;%NWL%}%NWL%this . multiSelect = session . multiSelect ; %NWL%var oldSession = e . oldSession ; %NWL%3
this . startSelect (  )  ;%NWL%}  ; %NWL%this . drag = function (  )  {%NWL%var editor = this . editor ; %NWL%this . dragCursor = editor . renderer . screenToTextCoordinates ( this . x , this . y )  ; %NWL%editor . moveCursorToPosition ( this . dragCursor )  ; %NWL%editor . renderer . scrollCursorIntoView (  )  ;%NWL%}  ; %NWL%this . dragEnd = function ( e )  {%NWL%var editor = this . editor ; %NWL%var dragCursor = this . dragCursor ; %NWL%3
}  ; %NWL%this . drag = function (  )  {%NWL%var editor = this . editor ; %NWL%this . dragCursor = editor . renderer . screenToTextCoordinates ( this . x , this . y )  ; %NWL%editor . moveCursorToPosition ( this . dragCursor )  ; %NWL%editor . renderer . scrollCursorIntoView (  )  ;%NWL%}  ; %NWL%this . dragEnd = function ( e )  {%NWL%var editor = this . editor ; %NWL%var dragCursor = this . dragCursor ; %NWL%var dragRange = this . dragRange ; %NWL%2
var node = document . createElement (  " div "  )  ; %NWL%node . className = test . passed ? " passed "  :  " failed "  ; %NWL%var name = test . name%NWL%if ( test . suiteName )%NWL%name = test . suiteName +  "  :  "  + test . name%NWL%var msg =  "  [  "  + test . count +  "  /  "  + test . index +  "  ]  "  + name +  "  "  +  ( test . passed ? " OK "  :  " FAIL "  )%NWL%if ( !test . passed )  {%NWL%if ( test . err . stack )%NWL%var err = test . err . stack%NWL%else%NWL%var err = test . err%NWL%2
} else {%NWL%func ( callback )  ;%NWL%}%NWL%} else {%NWL%var result = func ( convertArgument ( args . args , focusedWindow )  )  ; %NWL%callback ( null , result )  ;%NWL%}%NWL%} catch ( e )  {%NWL%var toReport =  '  '  ; %NWL%var message =  ( e && e . message ) || '  '  ; %NWL%var stack =  ( e && e . stack ) || '  '  ; %NWL%9
getText : function ( start , end )  {%NWL%var textView = this . _textView ; %NWL%var model = textView . getModel (  )  ; %NWL%if ( model . getBaseModel )  {%NWL%model = model . getBaseModel (  )  ;%NWL%}%NWL%return model . getText ( start , end )  ;%NWL%}  ,%NWL%_expandOffset : function ( offset )  {%NWL%var model = this . _textView . getModel (  )  ; %NWL%var annotationModel = this . _annotationModel ; %NWL%1
}  ,%NWL%reportStatus : function ( message , type , isAccessible )  {%NWL%if ( this . _statusReporter )  {%NWL%this . _statusReporter ( message , type , isAccessible )  ;%NWL%}%NWL%}  ,%NWL%_getTooltipInfo : function ( x , y , hoverCallback )  {  /  / SCRIPTED change add hoverCallback%NWL%var textView = this . _textView ; %NWL%var annotationModel = this . getAnnotationModel (  )  ; %NWL%if ( !annotationModel )  { return null ;  }%NWL%var annotationStyler = this . _annotationStyler ; %NWL%7
anchor :  " left "  ,  /  / $NON - NLS - 0$%NWL%x : pt . x + 10 ,%NWL%y : pt . y + 20 ,%NWL%promise : promise%NWL%}  ; %NWL%return info ;%NWL%}  ,%NWL%_highlightCurrentLine : function ( newSelection , oldSelection )  {%NWL%var annotationModel = this . _annotationModel ; %NWL%if ( !annotationModel )  { return ;  }%NWL%var textView = this . _textView ; %NWL%8
while ( index < annotations . length && annotations [ index ]  . start =  =  = annotation . start )  {%NWL%if ( annotations [ index ]  =  =  = annotation )  {%NWL%return index ;%NWL%}%NWL%index +  +  ;%NWL%}%NWL%return - 1 ;%NWL%}  ,%NWL%_onChanged : function ( modelChangedEvent )  {%NWL%var start = modelChangedEvent . start ; %NWL%var addedCharCount = modelChangedEvent . addedCharCount ; %NWL%9
if ( annotations [ index ]  =  =  = annotation )  {%NWL%return index ;%NWL%}%NWL%index +  +  ;%NWL%}%NWL%return - 1 ;%NWL%}  ,%NWL%_onChanged : function ( modelChangedEvent )  {%NWL%var start = modelChangedEvent . start ; %NWL%var addedCharCount = modelChangedEvent . addedCharCount ; %NWL%var removedCharCount = modelChangedEvent . removedCharCount ; %NWL%8
annotationModel . addEventListener (  " Changed "  , this . _listener . onChanged )  ;  /  / $NON - NLS - 0$%NWL%}%NWL%AnnotationStyler . prototype =  {%NWL%destroy : function (  )  {%NWL%var view = this . _view ; %NWL%if ( view )  {%NWL%view . removeEventListener (  " Destroy "  , this . _listener . onDestroy )  ;  /  / $NON - NLS - 0$%NWL%view . removeEventListener (  " LineStyle "  , this . _listener . onLineStyle )  ;  /  / $NON - NLS - 0$%NWL%this . view = null ;%NWL%}%NWL%var annotationModel = this . _annotationModel ; %NWL%4
return ;%NWL%}%NWL%var view = this . _view ; %NWL%if ( !view )  { return ;  }%NWL%var self = this ; %NWL%var model = view . getModel (  )  ; %NWL%function redraw ( changes )  {%NWL%for ( var i = 0 ; i < changes . length ; i +  +  )  {%NWL%if ( !self . isAnnotationTypeVisible ( changes [ i ]  . type )  )  { continue ;  }%NWL%var start = changes [ i ]  . start ; %NWL%var end = changes [ i ]  . end ; %NWL%9
var filesystem = require (  '  .  .  / server / utils / filesystem '  )  . withBaseDir ( undefined )  ; %NWL%var defaultIgnore = require (  '  .  .  / server / utils / filesystem '  )  . ignore ; %NWL%var extend = require (  '  .  .  / server / jsdepend / utils '  )  . extend ; %NWL%var path = require (  ' path '  )  ; %NWL%var jsdependConf = extend ( filesystem ,  {%NWL%ignore : function ignore ( name )  {%NWL%return defaultIgnore ( name ) || contains ( IGNORED_NAMES , name )  ;%NWL%}%NWL%}  )  ; %NWL%var fswalk = require (  '  .  .  / server / jsdepend / fswalk '  )  . configure ( jsdependConf )  . fswalk ; %NWL%var fs = require (  ' fs '  )  ; %NWL%3
var defaultIgnore = require (  '  .  .  / server / utils / filesystem '  )  . ignore ; %NWL%var extend = require (  '  .  .  / server / jsdepend / utils '  )  . extend ; %NWL%var path = require (  ' path '  )  ; %NWL%var jsdependConf = extend ( filesystem ,  {%NWL%ignore : function ignore ( name )  {%NWL%return defaultIgnore ( name ) || contains ( IGNORED_NAMES , name )  ;%NWL%}%NWL%}  )  ; %NWL%var fswalk = require (  '  .  .  / server / jsdepend / fswalk '  )  . configure ( jsdependConf )  . fswalk ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var endsWith = require (  '  .  .  / server / jsdepend / utils '  )  . endsWith ; %NWL%1
var when = require (  ' when '  )  ; %NWL%var querystring = require (  " querystring "  )  ; %NWL%var formidable = require (  " formidable "  )  ; %NWL%var url = require (  ' url '  )  ; %NWL%var nodeNatives = require (  '  .  / jsdepend / node - natives '  )  ; %NWL%var isNativeNodeModulePath = nodeNatives . isNativeNodeModulePath ; %NWL%var nativeNodeModuleName = nodeNatives . nativeNodeModuleName ; %NWL%var pathUtils = require (  '  .  / jsdepend / utils '  )  ; %NWL%var getDirectory = pathUtils . getDirectory ; %NWL%var getFileName = pathUtils . getFileName ; %NWL%var pathResolve = pathUtils . pathResolve ; %NWL%8
var url = require (  ' url '  )  ; %NWL%var nodeNatives = require (  '  .  / jsdepend / node - natives '  )  ; %NWL%var isNativeNodeModulePath = nodeNatives . isNativeNodeModulePath ; %NWL%var nativeNodeModuleName = nodeNatives . nativeNodeModuleName ; %NWL%var pathUtils = require (  '  .  / jsdepend / utils '  )  ; %NWL%var getDirectory = pathUtils . getDirectory ; %NWL%var getFileName = pathUtils . getFileName ; %NWL%var pathResolve = pathUtils . pathResolve ; %NWL%function configure ( filesystem )  {%NWL%var getContents = filesystem . getContents ; %NWL%var putContents = filesystem . putContents ; %NWL%9
var nodeNatives = require (  '  .  / jsdepend / node - natives '  )  ; %NWL%var isNativeNodeModulePath = nodeNatives . isNativeNodeModulePath ; %NWL%var nativeNodeModuleName = nodeNatives . nativeNodeModuleName ; %NWL%var pathUtils = require (  '  .  / jsdepend / utils '  )  ; %NWL%var getDirectory = pathUtils . getDirectory ; %NWL%var getFileName = pathUtils . getFileName ; %NWL%var pathResolve = pathUtils . pathResolve ; %NWL%function configure ( filesystem )  {%NWL%var getContents = filesystem . getContents ; %NWL%var putContents = filesystem . putContents ; %NWL%var listFiles = filesystem . listFiles ; %NWL%8
" Content - Type "  :  " text / plain "%NWL%}  )  ; %NWL%response . write (  " Error :  "  + err )  ; %NWL%response . end (  )  ;%NWL%}%NWL%}  )  ;%NWL%}%NWL%function handleTemplates ( response , request )  {%NWL%var params = url . parse ( request . url , true )  . query ; %NWL%var scope = params . scope ; %NWL%var root = params . root ; %NWL%9
if ( err . stack )  {%NWL%res . write (  "  "  + err . stack )  ;%NWL%}%NWL%res . end (  )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}%NWL%exports . install = function ( app , filesystem )  {%NWL%var getUserHome = filesystem . getUserHome ; %NWL%var isDirectory = filesystem . isDirectory ; %NWL%9
res . write (  "  "  + err . stack )  ;%NWL%}%NWL%res . end (  )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}%NWL%exports . install = function ( app , filesystem )  {%NWL%var getUserHome = filesystem . getUserHome ; %NWL%var isDirectory = filesystem . isDirectory ; %NWL%var mkdir = filesystem . mkdir ; %NWL%8
}%NWL%res . end (  )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}%NWL%exports . install = function ( app , filesystem )  {%NWL%var getUserHome = filesystem . getUserHome ; %NWL%var isDirectory = filesystem . isDirectory ; %NWL%var mkdir = filesystem . mkdir ; %NWL%var copyDir = filesystem . copyDir ; %NWL%7
res . end (  )  ;%NWL%}%NWL%}%NWL%return error ;%NWL%}%NWL%exports . install = function ( app , filesystem )  {%NWL%var getUserHome = filesystem . getUserHome ; %NWL%var isDirectory = filesystem . isDirectory ; %NWL%var mkdir = filesystem . mkdir ; %NWL%var copyDir = filesystem . copyDir ; %NWL%var exists = filesystem . exists ; %NWL%6
var treeMatcher = require (  '  .  / tree - matcher '  )  ; %NWL%var map = require (  '  .  / utils '  )  . map ; %NWL%var eachk = require (  '  .  / utils '  )  . eachk ; %NWL%var deref = require (  '  .  / utils '  )  . deref ; %NWL%var when = require (  ' when '  )  ; %NWL%var jsonMerge = require (  '  .  / json - merge '  )  ; %NWL%var getDirectory = require (  '  .  / utils '  )  . getDirectory ; %NWL%var orMap = require (  '  .  / utils '  )  . orMap ; %NWL%var ork = require (  '  .  / utils '  )  . ork ; %NWL%var getScriptTags = require (  '  .  / script - tag - finder '  )  . getScriptTags ; %NWL%var getScriptCode = require (  '  .  / script - tag - finder '  )  . getScriptCode ; %NWL%9
var deref = require (  '  .  / utils '  )  . deref ; %NWL%var when = require (  ' when '  )  ; %NWL%var jsonMerge = require (  '  .  / json - merge '  )  ; %NWL%var getDirectory = require (  '  .  / utils '  )  . getDirectory ; %NWL%var orMap = require (  '  .  / utils '  )  . orMap ; %NWL%var ork = require (  '  .  / utils '  )  . ork ; %NWL%var getScriptTags = require (  '  .  / script - tag - finder '  )  . getScriptTags ; %NWL%var getScriptCode = require (  '  .  / script - tag - finder '  )  . getScriptCode ; %NWL%var treeMatcher = require (  '  .  / tree - matcher '  )  ; %NWL%var andPat = treeMatcher . andPat ; %NWL%var orPat = treeMatcher . orPat ; %NWL%9
var ork = require (  '  .  / utils '  )  . ork ; %NWL%var getScriptTags = require (  '  .  / script - tag - finder '  )  . getScriptTags ; %NWL%var getScriptCode = require (  '  .  / script - tag - finder '  )  . getScriptCode ; %NWL%var treeMatcher = require (  '  .  / tree - matcher '  )  ; %NWL%var andPat = treeMatcher . andPat ; %NWL%var orPat = treeMatcher . orPat ; %NWL%function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%9
var getScriptCode = require (  '  .  / script - tag - finder '  )  . getScriptCode ; %NWL%var treeMatcher = require (  '  .  / tree - matcher '  )  ; %NWL%var andPat = treeMatcher . andPat ; %NWL%var orPat = treeMatcher . orPat ; %NWL%function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%var pathResolve = require (  '  .  / utils '  )  . pathResolve ; %NWL%var objectPat = treeMatcher . objectPat ; %NWL%2
var treeMatcher = require (  '  .  / tree - matcher '  )  ; %NWL%var andPat = treeMatcher . andPat ; %NWL%var orPat = treeMatcher . orPat ; %NWL%function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%var pathResolve = require (  '  .  / utils '  )  . pathResolve ; %NWL%var objectPat = treeMatcher . objectPat ; %NWL%var successPat = treeMatcher . successPat ; %NWL%1
var andPat = treeMatcher . andPat ; %NWL%var orPat = treeMatcher . orPat ; %NWL%function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%var pathResolve = require (  '  .  / utils '  )  . pathResolve ; %NWL%var objectPat = treeMatcher . objectPat ; %NWL%var successPat = treeMatcher . successPat ; %NWL%var containsPat = treeMatcher . containsPat ; %NWL%0
var orPat = treeMatcher . orPat ; %NWL%function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%var pathResolve = require (  '  .  / utils '  )  . pathResolve ; %NWL%var objectPat = treeMatcher . objectPat ; %NWL%var successPat = treeMatcher . successPat ; %NWL%var containsPat = treeMatcher . containsPat ; %NWL%var variablePat = treeMatcher . variablePat ; %NWL%0
function configure ( conf )  {%NWL%var extraPaths = deref ( conf ,  [  ' amd '  ,  ' paths '  ]  )  ; %NWL%var parser = require (  "  .  / parser "  )  ; %NWL%var getContents = conf . getContents ; %NWL%var listFiles = conf . listFiles ; %NWL%var pathResolve = require (  '  .  / utils '  )  . pathResolve ; %NWL%var objectPat = treeMatcher . objectPat ; %NWL%var successPat = treeMatcher . successPat ; %NWL%var containsPat = treeMatcher . containsPat ; %NWL%var variablePat = treeMatcher . variablePat ; %NWL%var arrayWithElementPat = treeMatcher . arrayWithElementPat ; %NWL%6
if ( typeof define ! =  =  ' function '  )  {%NWL%var define = require (  ' amdefine '  )  ( module )  ;%NWL%}%NWL%define ( function ( require , exports , module )  {%NWL%var tm = require (  "  .  / tree - matcher "  )  ; %NWL%var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%6
var define = require (  ' amdefine '  )  ( module )  ;%NWL%}%NWL%define ( function ( require , exports , module )  {%NWL%var tm = require (  "  .  / tree - matcher "  )  ; %NWL%var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%var bindPat = tm . bindPat ; %NWL%5
}%NWL%define ( function ( require , exports , module )  {%NWL%var tm = require (  "  .  / tree - matcher "  )  ; %NWL%var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%var bindPat = tm . bindPat ; %NWL%var arrayWithElementPat = tm . arrayWithElementPat ; %NWL%4
define ( function ( require , exports , module )  {%NWL%var tm = require (  "  .  / tree - matcher "  )  ; %NWL%var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%var bindPat = tm . bindPat ; %NWL%var arrayWithElementPat = tm . arrayWithElementPat ; %NWL%var matches = tm . matches ; %NWL%3
var tm = require (  "  .  / tree - matcher "  )  ; %NWL%var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%var bindPat = tm . bindPat ; %NWL%var arrayWithElementPat = tm . arrayWithElementPat ; %NWL%var matches = tm . matches ; %NWL%var variablePat = tm . variablePat ; %NWL%2
var walk = require (  "  .  / tree - walker "  )  . walk ; %NWL%var objectPat = tm . objectPat ; %NWL%var containsPat = tm . containsPat ; %NWL%var getFieldPat = tm . getFieldPat ; %NWL%var arrayElementPat = tm . arrayElementPat ; %NWL%var unitPat = tm . unitPat ; %NWL%var bindPat = tm . bindPat ; %NWL%var arrayWithElementPat = tm . arrayWithElementPat ; %NWL%var matches = tm . matches ; %NWL%var variablePat = tm . variablePat ; %NWL%var andPat = tm . andPat ; %NWL%1
if ( typeof define ! =  =  ' function '  )  {%NWL%var define = require (  ' amdefine '  )  ( module )  ;%NWL%}%NWL%define ( function ( require , exports , module )  {%NWL%var tm = require (  '  .  / tree - matcher '  )  ; %NWL%var containsPat = tm . containsPat ; %NWL%var objectPat = tm . objectPat ; %NWL%var orPat = tm . orPat ; %NWL%var arrayWithElementPat = tm . arrayWithElementPat ; %NWL%var matches = tm . matches ; %NWL%var notWithinPat = tm . notWithinPat ; %NWL%5
var when = require (  ' when '  )  ; %NWL%var promiseUtils = require (  '  .  .  / utils / promises '  )  ; %NWL%var filter = promiseUtils . filter ; %NWL%var until = promiseUtils . until ; %NWL%var each = promiseUtils . each ; %NWL%var not = promiseUtils . not ; %NWL%var findFirst = promiseUtils . findFirst ; %NWL%var findFirstIndex = promiseUtils . findFirstIndex ; %NWL%var noExistError = require (  '  .  / fs - errors '  )  . noExistError ; %NWL%var isDirError = require (  '  .  / fs - errors '  )  . isDirError ; %NWL%var isNotDirError = require (  '  .  / fs - errors '  )  . isNotDirError ; %NWL%8
var promiseUtils = require (  '  .  .  / utils / promises '  )  ; %NWL%var filter = promiseUtils . filter ; %NWL%var until = promiseUtils . until ; %NWL%var each = promiseUtils . each ; %NWL%var not = promiseUtils . not ; %NWL%var findFirst = promiseUtils . findFirst ; %NWL%var findFirstIndex = promiseUtils . findFirstIndex ; %NWL%var noExistError = require (  '  .  / fs - errors '  )  . noExistError ; %NWL%var isDirError = require (  '  .  / fs - errors '  )  . isDirError ; %NWL%var isNotDirError = require (  '  .  / fs - errors '  )  . isNotDirError ; %NWL%var accessPermisssionError = require (  '  .  / fs - errors '  )  . accessPermisssionError ; %NWL%7
var filter = promiseUtils . filter ; %NWL%var until = promiseUtils . until ; %NWL%var each = promiseUtils . each ; %NWL%var not = promiseUtils . not ; %NWL%var findFirst = promiseUtils . findFirst ; %NWL%var findFirstIndex = promiseUtils . findFirstIndex ; %NWL%var noExistError = require (  '  .  / fs - errors '  )  . noExistError ; %NWL%var isDirError = require (  '  .  / fs - errors '  )  . isDirError ; %NWL%var isNotDirError = require (  '  .  / fs - errors '  )  . isNotDirError ; %NWL%var accessPermisssionError = require (  '  .  / fs - errors '  )  . accessPermisssionError ; %NWL%var existsError = require (  '  .  / fs - errors '  )  . existsError ; %NWL%6
var until = promiseUtils . until ; %NWL%var each = promiseUtils . each ; %NWL%var not = promiseUtils . not ; %NWL%var findFirst = promiseUtils . findFirst ; %NWL%var findFirstIndex = promiseUtils . findFirstIndex ; %NWL%var noExistError = require (  '  .  / fs - errors '  )  . noExistError ; %NWL%var isDirError = require (  '  .  / fs - errors '  )  . isDirError ; %NWL%var isNotDirError = require (  '  .  / fs - errors '  )  . isNotDirError ; %NWL%var accessPermisssionError = require (  '  .  / fs - errors '  )  . accessPermisssionError ; %NWL%var existsError = require (  '  .  / fs - errors '  )  . existsError ; %NWL%var crossFSError = require (  '  .  / fs - errors '  )  . crossFSError ; %NWL%5
}%NWL%}%NWL%args . push ( callback )  ;  /  / Add the callback function as the last argument .%NWL%f . apply ( fs , args )  ;  /  / raw node doesn ' t need fs to be passed for ' this ' but%NWL%return d . promise ;%NWL%}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%9
}%NWL%args . push ( callback )  ;  /  / Add the callback function as the last argument .%NWL%f . apply ( fs , args )  ;  /  / raw node doesn ' t need fs to be passed for ' this ' but%NWL%return d . promise ;%NWL%}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%8
args . push ( callback )  ;  /  / Add the callback function as the last argument .%NWL%f . apply ( fs , args )  ;  /  / raw node doesn ' t need fs to be passed for ' this ' but%NWL%return d . promise ;%NWL%}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%var readdir = promisedFunction (  ' readdir '  )  ; %NWL%7
f . apply ( fs , args )  ;  /  / raw node doesn ' t need fs to be passed for ' this ' but%NWL%return d . promise ;%NWL%}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%var readdir = promisedFunction (  ' readdir '  )  ; %NWL%var writeFile = promisedFunction (  ' writeFile '  )  ; %NWL%6
return d . promise ;%NWL%}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%var readdir = promisedFunction (  ' readdir '  )  ; %NWL%var writeFile = promisedFunction (  ' writeFile '  )  ; %NWL%var mkdir = promisedFunction (  ' mkdir '  )  ; %NWL%5
}  ; %NWL%pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%var readdir = promisedFunction (  ' readdir '  )  ; %NWL%var writeFile = promisedFunction (  ' writeFile '  )  ; %NWL%var mkdir = promisedFunction (  ' mkdir '  )  ; %NWL%var rmdir = promisedFunction (  ' rmdir '  )  ; %NWL%4
pf . name = fname ; %NWL%return pf ;%NWL%}%NWL%var stat = promisedFunction (  ' stat '  )  ; %NWL%var unlink = promisedFunction (  ' unlink '  )  ; %NWL%var readFile = promisedFunction (  ' readFile '  )  ; %NWL%var readdir = promisedFunction (  ' readdir '  )  ; %NWL%var writeFile = promisedFunction (  ' writeFile '  )  ; %NWL%var mkdir = promisedFunction (  ' mkdir '  )  ; %NWL%var rmdir = promisedFunction (  ' rmdir '  )  ; %NWL%var rename = promisedFunction (  ' rename '  )  ; %NWL%3
}%NWL%return configure (  {%NWL%fs : fs ,%NWL%handle2file : handle2file ,%NWL%file2handle : file2handle%NWL%}  )  ;%NWL%}%NWL%function configure ( options )  {%NWL%var fs = options . fs || require (  ' fs '  )  ; %NWL%var handle2file = options . handle2file ; %NWL%var file2handle = options . file2handle ; %NWL%9
var deref = require (  '  .  .  / jsdepend / utils '  )  . deref ; %NWL%var LOG_SOCKET_COUNT = false ; %NWL%var MAX_RESULTS_DEFAULT = 30 ;  /  / When this number is reached , then the walker will be paused .%NWL%function debug_log ( msg , obj )  {%NWL%}%NWL%exports . install = function ( server , filesystem )  {%NWL%var searchFile = require (  '  .  .  / textsearch / searcher '  )  . configure ( filesystem )  ; %NWL%var getDotScripted = require (  '  .  .  / jsdepend / dot - scripted '  )  . configure ( filesystem )  . getConfiguration ; %NWL%var fsPriorityWalk = require (  '  .  .  / utils / fs - priority - walk '  )  . configure ( filesystem )  ; %NWL%var makePriorityFun = fsPriorityWalk . makePriorityFun ; %NWL%var fswalk = fsPriorityWalk . fswalk ; %NWL%9
$t . p . expColInd = expCol ; %NWL%break ;%NWL%}%NWL%i +  +  ;%NWL%}%NWL%if ( !$t . p . expColInd )  { $t . p . expColInd = expCol ;  }%NWL%} else {%NWL%expCol = $t . p . expColInd ;%NWL%}%NWL%var level = $t . p . treeReader . level_field ; %NWL%var expanded = $t . p . treeReader . expanded_field ; %NWL%9
goN2U . shiftTo ( this . myID , popX , popY )  ; %NWL%this . updateLocation (  )  ; %NWL%this . initialLeft = this . left ; %NWL%this . initialTop = this . top ;%NWL%;%NWL%}  ; %NWL%N2SimplePopover . prototype . _locateLinkTopLeft = function ( oHotspot )  {%NWL%var popX = oHotspot . absleft ; %NWL%var popY = oHotspot . abstop ; %NWL%var nHAdj = this . nHAdjust ; %NWL%var nVAdj = this . nVAdjust ; %NWL%9
}%NWL%if ( nHAdj =  =  ' c '  )  {%NWL%nHAdj = parseInt ( oHotspot . width / 2 )  ;%NWL%}%NWL%this . _doLocate ( popX + nHAdj , popY + nVAdj )  ;%NWL%}  ; %NWL%N2SimplePopover . prototype . _locateLinkRight = function ( oHotspot )  {%NWL%var popX = oHotspot . absleft + oHotspot . width ; %NWL%var popY = oHotspot . abstop ; %NWL%var nHAdj = this . nHAdjust ; %NWL%var nVAdj = this . nVAdjust ; %NWL%9
nVAdj = parseInt ( oHotspot . height / 2 - this . height / 2 )  ;%NWL%} else if ( nVAdj =  =  ' b '  )  {%NWL%nVAdj = oHotspot . height - this . height ;%NWL%}%NWL%this . _doLocate ( popX + nHAdj , popY + nVAdj )  ;%NWL%}  ; %NWL%N2SimplePopover . prototype . _locateLinkLeft = function ( oHotspot )  {%NWL%var popX = oHotspot . absleft - this . width ; %NWL%var popY = oHotspot . abstop ; %NWL%var nHAdj = this . nHAdjust ; %NWL%var nVAdj = this . nVAdjust ; %NWL%9
nVAdj = parseInt ( oHotspot . height / 2 - this . height / 2 )  ;%NWL%} else if ( nVAdj =  =  ' b '  )  {%NWL%nVAdj = oHotspot . height - this . height ;%NWL%}%NWL%this . _doLocate ( popX + nHAdj , Math . max ( popY + nVAdj , 4 )  )  ;%NWL%}  ; %NWL%N2SimplePopover . prototype . _locateBelowLink = function ( oHotspot )  {%NWL%var popX = oHotspot . absleft ; %NWL%var popY = oHotspot . abstop + oHotspot . height ; %NWL%var nHAdj = this . nHAdjust ; %NWL%var nVAdj = this . nVAdjust ; %NWL%9
nHAdj = parseInt ( oHotspot . width / 2 - this . width / 2 )  ;%NWL%} else if ( nHAdj =  =  ' r '  )  {%NWL%nHAdj = oHotspot . width - this . width ;%NWL%}%NWL%this . _doLocate ( Math . max ( popX + nHAdj , 4 )  , popY + nVAdj )  ;%NWL%}  ; %NWL%N2SimplePopover . prototype . _locateAboveLink = function ( oHotspot )  {%NWL%var popX = oHotspot . absleft ; %NWL%var popY = oHotspot . abstop - this . height ; %NWL%var nHAdj = this . nHAdjust ; %NWL%var nVAdj = this . nVAdjust ; %NWL%9
. par ( function (  )  {%NWL%fs . readFile (  ' lib / interlace . png '  , this )  ;%NWL%}  )%NWL%. par ( function (  )  {%NWL%fs . readFile (  ' lib / external . png '  , this )  ;%NWL%}  )%NWL%. seq ( function ( styles , interlacepng , externalpng )  {%NWL%styles =  '  '  + styles ; %NWL%var interlace =  ' url (  " data :  '  + mime . lookup (  ' lib / interlace . png '  )  +  '  ; base64 ,  '  + new Buffer ( interlacepng )  . toString (  ' base64 '  )  +  '  "  )  '  ; %NWL%styles = styles . replace (  ' dataurl (  " interlace . png "  )  '  , interlace )  ; %NWL%var external =  ' url (  " data :  '  + mime . lookup (  ' lib / external . png '  )  +  '  ; base64 ,  '  + new Buffer ( externalpng )  . toString (  ' base64 '  )  +  '  "  )  '  ; %NWL%8
}  )  ;%NWL%}  )  ; %NWL%myApp . onPageInit (  ' pull - to - refresh '  , function ( page )  {%NWL%var songs =  [  ' Yellow Submarine '  ,  ' Don\ ' t Stop Me Now '  ,  ' Billie Jean '  ,  ' Californication '  ]  ; %NWL%var authors =  [  ' Beatles '  ,  ' Queen '  ,  ' Michael Jackson '  ,  ' Red Hot Chili Peppers '  ]  ; %NWL%var ptrContent = $$ ( page . container )  . find (  '  . pull - to - refresh - content '  )  ; %NWL%ptrContent . on (  ' refresh '  , function ( e )  {%NWL%setTimeout ( function (  )  {%NWL%var picURL =  ' http :  /  / lorempixel . com / 88 / 88 / abstract /  '  + Math . round ( Math . random (  )  * 10 )  ; %NWL%var song = songs [ Math . floor ( Math . random (  )  * songs . length )  ]  ; %NWL%var author = authors [ Math . floor ( Math . random (  )  * authors . length )  ]  ; %NWL%9
media :  '  < img width =  " 44 " height =  " 44 " style =  " border - radius : 100% " src =  " http :  /  / lorempixel . com / output / people - q - c - 100 - 100 - 9 . jpg "  >  '  ,%NWL%onClose : function (  )  {%NWL%myApp . alert (  ' Notification closed '  )  ;%NWL%}%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%myApp . onPageInit (  ' login - screen - embedded '  , function ( page )  {%NWL%$$ ( page . container )  . find (  '  . list - button '  )  . on (  ' click '  , function (  )  {%NWL%var username = $$ ( page . container )  . find (  ' input [ name =  " username "  ]  '  )  . val (  )  ; %NWL%var password = $$ ( page . container )  . find (  ' input [ name =  " password "  ]  '  )  . val (  )  ; %NWL%9
$$ ( page . container )  . find (  '  . list - button '  )  . on (  ' click '  , function (  )  {%NWL%var username = $$ ( page . container )  . find (  ' input [ name =  " username "  ]  '  )  . val (  )  ; %NWL%var password = $$ ( page . container )  . find (  ' input [ name =  " password "  ]  '  )  . val (  )  ; %NWL%myApp . alert (  ' Username :  '  + username +  '  , password :  '  + password , function (  )  {%NWL%mainView . router . back (  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%$$ (  '  . login - screen '  )  . find (  '  . list - button '  )  . on (  ' click '  , function (  )  {%NWL%var username = $$ (  '  . login - screen '  )  . find (  ' input [ name =  " username "  ]  '  )  . val (  )  ; %NWL%var password = $$ (  '  . login - screen '  )  . find (  ' input [ name =  " password "  ]  '  )  . val (  )  ; %NWL%9
}  ; %NWL%app . formToJSON = function ( form )  {%NWL%form = $ ( form )  ; %NWL%if ( form . length ! =  = 1 ) return false ; %NWL%var formData =  {  }  ; %NWL%var skipTypes =  [  ' submit '  ,  ' image '  ,  ' button '  ,  ' file '  ]  ; %NWL%var skipNames =  [  ]  ; %NWL%form . find (  ' input , select , textarea '  )  . each ( function (  )  {%NWL%var input = $ ( this )  ; %NWL%var name = input . attr (  ' name '  )  ; %NWL%var type = input . attr (  ' type '  )  ; %NWL%9
return formData ;%NWL%}  ; %NWL%app . formFromJSON = function ( form , formData )  {%NWL%form = $ ( form )  ; %NWL%if ( form . length ! =  = 1 ) return false ; %NWL%var skipTypes =  [  ' submit '  ,  ' image '  ,  ' button '  ,  ' file '  ]  ; %NWL%var skipNames =  [  ]  ; %NWL%form . find (  ' input , select , textarea '  )  . each ( function (  )  {%NWL%var input = $ ( this )  ; %NWL%var name = input . attr (  ' name '  )  ; %NWL%var type = input . attr (  ' type '  )  ; %NWL%9
{%NWL%text : app . params . modalButtonCancel%NWL%}  ,%NWL%{%NWL%text : app . params . modalButtonOk ,%NWL%bold : true%NWL%}%NWL%]  ,%NWL%onClick : function ( modal , index )  {%NWL%var username = $ ( modal )  . find (  '  . modal - text - input [ name =  " modal - username "  ]  '  )  . val (  )  ; %NWL%var password = $ ( modal )  . find (  '  . modal - text - input [ name =  " modal - password "  ]  '  )  . val (  )  ; %NWL%9
pb . params = params ; %NWL%var iconColor = pb . params . theme =  =  =  ' dark ' ? ' color - white '  :  '  '  ; %NWL%var navbarTemplate = pb . params . navbarTemplate ||%NWL%'  < div class =  " navbar "  >  '  +%NWL%'  < div class =  " navbar - inner "  >  '  +%NWL%'  < div class =  " left sliding "  >  < a href =  " # " class =  " link '  +  ( pb . params . type =  =  =  ' page ' && ' back '  )  +  ' close - popup photo - browser - close - link " data - popup =  "  . photo - browser - popup "  >  < i class =  " icon icon - back '  + iconColor +  '  "  >  <  / i >  < span >  '  + pb . params . backLinkText +  '  <  / span >  <  / a >  <  / div >  '  +%NWL%'  < div class =  " center sliding "  >  < span class =  " photo - browser - current "  >  <  / span >  < span class =  " photo - browser - of "  >  '  + pb . params . ofText +  '  <  / span >  < span class =  " photo - browser - total "  >  <  / span >  <  / div >  '  +%NWL%'  < div class =  " right "  >  <  / div >  '  +%NWL%'  <  / div >  '  +%NWL%'  <  / div >  '  ; %NWL%var toolbarTemplate = pb . params . toolbarTemplate ||%NWL%2
'  < div class =  " right "  >  <  / div >  '  +%NWL%'  <  / div >  '  +%NWL%'  <  / div >  '  ; %NWL%var toolbarTemplate = pb . params . toolbarTemplate ||%NWL%'  < div class =  " toolbar tabbar "  >  '  +%NWL%'  < div class =  " toolbar - inner "  >  '  +%NWL%'  < a href =  " # " class =  " link photo - browser - prev "  >  < i class =  " icon icon - prev '  + iconColor +  '  "  >  <  / i >  <  / a >  '  +%NWL%'  < a href =  " # " class =  " link photo - browser - next "  >  < i class =  " icon icon - next '  + iconColor +  '  "  >  <  / i >  <  / a >  '  +%NWL%'  <  / div >  '  +%NWL%'  <  / div >  '  ; %NWL%var template = pb . params . template ||%NWL%3
var openIn = smartSelect . attr (  ' data - open - in '  )  ; %NWL%if ( !openIn ) openIn = app . params . smartSelectInPopup ? ' popup '  :  ' page '  ; %NWL%var smartSelectData = smartSelect . dataset (  )  ; %NWL%var pageTitle = smartSelectData . pageTitle || smartSelect . find (  '  . item - title '  )  . text (  )  ; %NWL%var backText = smartSelectData . backText || app . params . smartSelectBackText ; %NWL%var closeText = smartSelectData . popupCloseText || smartSelectData . backText || app . params . smartSelectPopupCloseText ; %NWL%var backOnSelect = smartSelectData . backOnSelect ! =  = undefined ? smartSelectData . backOnSelect : app . params . smartSelectBackOnSelect ; %NWL%var formTheme = smartSelectData . formTheme || app . params . smartSelectFormTheme ; %NWL%var navbarTheme = smartSelectData . navbarTheme || app . params . smartSelectNavbarTheme ; %NWL%var virtualList = smartSelectData . virtualList ; %NWL%var virtualListHeight = smartSelectData . virtualListHeight ; %NWL%9
return gulp . src (  ' src / scripts%NWL%gulp . task (  ' install - widgets '  , function (  )  {%NWL%return gulp . src (  ' sample / widgetssrc%NWL%gulp . task (  ' watch '  , function (  )  {%NWL%var paths =  [%NWL%' src / scripts *  . js '  ,%NWL%' sample / widgets *  . html '  ,%NWL%' sample / widgetssrcsrc%NWL%var protractor = require (  ' gulp - protractor '  )  . protractor ; %NWL%var webdriver_standalone = require (  ' gulp - protractor '  )  . webdriver_standalone ; %NWL%var webdriver_update = require (  ' gulp - protractor '  )  . webdriver_update ; %NWL%9
conn . write (  ' Ann nods :  '  + data )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%var bob = multiplexer . registerChannel (  ' bob '  )  ; %NWL%bob . on (  ' connection '  , function ( conn )  {%NWL%conn . write (  ' Bob doesn\ ' t agree .  '  )  ; %NWL%conn . on (  ' data '  , function ( data )  {%NWL%conn . write (  ' Bob says no to :  '  + data )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%var carl = multiplexer . registerChannel (  ' carl '  )  ; %NWL%3
[  ' d . js '  ,  ' beforeExec / path / to / d1 . js?1 '  ]%NWL%]%NWL%}  )%NWL%var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var a = require (  ' a '  )%NWL%test . assert ( a . name =  =  =  ' a '  , a . name )%NWL%var b = require (  '  { b }  '  )%NWL%test . assert ( b . name =  =  =  ' b '  , b . name )%NWL%var c = require (  ' to / c '  )%NWL%test . assert ( c . name =  =  =  ' c '  , c . name )%NWL%var d = require (  ' d '  )%NWL%4
return url +  ' ?t = 20130202 '%NWL%}%NWL%}%NWL%]%NWL%}  )%NWL%define ( function ( require )  {%NWL%var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var data = seajs . data%NWL%test . assert ( data . map . length =  =  = 6 , data . map . length )%NWL%var a = require (  '  .  / a '  )%NWL%var b = require (  '  .  / b '  )%NWL%9
}%NWL%}%NWL%]%NWL%}  )%NWL%define ( function ( require )  {%NWL%var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var data = seajs . data%NWL%test . assert ( data . map . length =  =  = 6 , data . map . length )%NWL%var a = require (  '  .  / a '  )%NWL%var b = require (  '  .  / b '  )%NWL%var c = require (  '  .  / c '  )%NWL%8
}%NWL%]%NWL%}  )%NWL%define ( function ( require )  {%NWL%var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var data = seajs . data%NWL%test . assert ( data . map . length =  =  = 6 , data . map . length )%NWL%var a = require (  '  .  / a '  )%NWL%var b = require (  '  .  / b '  )%NWL%var c = require (  '  .  / c '  )%NWL%var d = require (  '  .  / d '  )%NWL%7
var c = require (  '  .  / c '  )%NWL%var d = require (  '  .  / d '  )%NWL%test . assert ( a . name =  =  =  ' a '  , a . name )%NWL%test . assert ( b . name =  =  =  ' b '  , b . name )%NWL%test . assert ( c . name =  =  =  ' c '  , c . name )%NWL%test . assert ( d . name =  =  =  ' d '  , d . name )%NWL%var debugA = require (  '  .  / debug / a '  )%NWL%test . assert ( debugA . name =  =  =  ' a '  , a . name )%NWL%var TS =  ' ?t = 20130202 '%NWL%var t1 = require (  '  .  / timestamp / t1 '  )%NWL%var t2 = require (  '  .  / timestamp / t2 '  )%NWL%9
var d = require (  '  .  / d '  )%NWL%test . assert ( a . name =  =  =  ' a '  , a . name )%NWL%test . assert ( b . name =  =  =  ' b '  , b . name )%NWL%test . assert ( c . name =  =  =  ' c '  , c . name )%NWL%test . assert ( d . name =  =  =  ' d '  , d . name )%NWL%var debugA = require (  '  .  / debug / a '  )%NWL%test . assert ( debugA . name =  =  =  ' a '  , a . name )%NWL%var TS =  ' ?t = 20130202 '%NWL%var t1 = require (  '  .  / timestamp / t1 '  )%NWL%var t2 = require (  '  .  / timestamp / t2 '  )%NWL%var t3 = require (  '  .  / timestamp / t3 '  )%NWL%8
test . assert ( a . name =  =  =  ' a '  , a . name )%NWL%test . assert ( b . name =  =  =  ' b '  , b . name )%NWL%test . assert ( c . name =  =  =  ' c '  , c . name )%NWL%test . assert ( d . name =  =  =  ' d '  , d . name )%NWL%var debugA = require (  '  .  / debug / a '  )%NWL%test . assert ( debugA . name =  =  =  ' a '  , a . name )%NWL%var TS =  ' ?t = 20130202 '%NWL%var t1 = require (  '  .  / timestamp / t1 '  )%NWL%var t2 = require (  '  .  / timestamp / t2 '  )%NWL%var t3 = require (  '  .  / timestamp / t3 '  )%NWL%var t4 = require (  '  .  / timestamp / t4 '  )%NWL%7
var test = require (  '  .  .  /  .  .  /  .  .  / test '  )%NWL%var a = require (  '  .  / a '  )%NWL%test . assert ( a =  =  = void 0 ,  ' noncmd module return undefined '  )%NWL%var mod = seajs . cache [ seajs . resolve (  ' noncmd / a '  , seajs . data . cwd )  ]%NWL%test . assert ( mod . hasOwnProperty (  ' exports '  )  =  =  = false ,  ' noncmd module has no property " exports "  '  )%NWL%test . assert ( mod . non =  =  = true ,  ' noncmd module has a property " non "  '  )%NWL%var b = require (  '  .  / b '  )%NWL%test . assert ( b =  =  = null ,  ' cmd module has property " exports " always return null '  )%NWL%mod = seajs . cache [ seajs . resolve (  ' noncmd / b '  , seajs . data . cwd )  ]%NWL%test . assert ( mod . hasOwnProperty (  ' exports '  )  =  =  = true ,  ' cmd module has property " exports " always return null '  )%NWL%var c = require (  '  .  / c '  )%NWL%1
test . assert ( mod . hasOwnProperty (  ' exports '  )  =  =  = false ,  ' noncmd module has no property " exports "  '  )%NWL%test . assert ( mod . non =  =  = true ,  ' noncmd module has a property " non "  '  )%NWL%var b = require (  '  .  / b '  )%NWL%test . assert ( b =  =  = null ,  ' cmd module has property " exports " always return null '  )%NWL%mod = seajs . cache [ seajs . resolve (  ' noncmd / b '  , seajs . data . cwd )  ]%NWL%test . assert ( mod . hasOwnProperty (  ' exports '  )  =  =  = true ,  ' cmd module has property " exports " always return null '  )%NWL%var c = require (  '  .  / c '  )%NWL%test . assert ( c . toString (  )  =  =  =  '  [ object Object ]  '  ,  ' cmd module has property " exports " always no return '  )%NWL%mod = seajs . cache [ seajs . resolve (  ' noncmd / c '  , seajs . data . cwd )  ]%NWL%test . assert ( mod . hasOwnProperty (  ' exports '  )  =  =  = true ,  ' cmd module has property " exports " always no return '  )%NWL%var d = require (  '  .  / d '  )%NWL%2
months :  " %d months "  ,%NWL%year :  " about a year "  ,%NWL%years :  " %d years "  ,%NWL%wordSeparator :  "  "  ,%NWL%numbers :  [  ]%NWL%}%NWL%}  ,%NWL%inWords : function ( distanceMillis )  {%NWL%var $l = this . settings . strings ; %NWL%var prefix = $l . prefixAgo ; %NWL%var suffix = $l . suffixAgo ; %NWL%9
}%NWL%if ( diff ! = 0 )  {%NWL%return diff ;%NWL%}%NWL%}%NWL%return 0 ;%NWL%}  ,%NWL%fit : function ( blocks )  {%NWL%var n , node , block , len = blocks . length ; %NWL%var w = len > 0 ? blocks [ 0 ]  . w : 0 ; %NWL%var h = len > 0 ? blocks [ 0 ]  . h : 0 ; %NWL%9
if ( Number (  " 1234567890 . 1234567890 "  ) ! =  = 1234567890 . 1234567000 )  {%NWL%$ERROR (  ' #2 : Number (  " 1234567890 . 1234567890 "  )  =  =  = 1234567890 . 1234567000 . Actual :  '  +  ( Number (  " 1234567890 . 1234567890 "  )  )  )  ;%NWL%}%NWL%if (  +  (  " 1234567890 . 1234567890 "  )  =  =  = 1234567890 . 123456 )  {%NWL%$ERROR (  ' #3 :  +  (  " 1234567890 . 1234567890 "  ) ! =  = 1234567890 . 123456 '  )  ;%NWL%}%NWL%if ( Number (  " 0 . 12345678901234567890 "  ) ! =  = 0 . 123456789012345678 )  {%NWL%$ERROR (  ' #4 : Number (  " 0 . 12345678901234567890 "  )  =  =  = 0 . 123456789012345678 . Actual :  '  +  ( Number (  " 0 . 12345678901234567890 "  )  )  )  ;%NWL%}%NWL%if ( Number (  " 00 . 12345678901234567890 "  ) ! =  = 0 . 123456789012345678 )  {%NWL%$ERROR (  ' #4 : Number (  " 00 . 12345678901234567890 "  )  =  =  = 0 . 123456789012345678 . Actual :  '  +  ( Number (  " 00 . 12345678901234567890 "  )  )  )  ; %NWL%7
classNames :  [  ' invoice '  ,  ' non - interactive '  ]  ,%NWL%templateName :  ' results / invoice - table '  ,%NWL%getValue : function ( field )  {%NWL%var model = this . get (  " model "  )  ; %NWL%if ( model )  {%NWL%return model . get ( field )  ;%NWL%}%NWL%return null ;%NWL%}  ,%NWL%fees : function (  )  {%NWL%var feesByType = this . get (  " feesByType "  )  ; %NWL%3
return [ anonymousPolicy ]  ;%NWL%}%NWL%if ( policy =  =  = false || policy =  =  = null )  {%NWL%var neverAllow = function neverAllow ( req , res , next )  {%NWL%res . send ( 403 )  ;%NWL%}  ; %NWL%neverAllow . _middlewareType =  ' POLICY : neverAllow '  ; %NWL%return [ neverAllow ]  ;%NWL%}%NWL%if ( policy =  =  = true )  {%NWL%var alwaysAllow = function alwaysAllow ( req , res , next )  {%NWL%3
. jsonRangeConstraint (  " genre "  ,  [  " item - order "  ]  )  ; %NWL%ob . tuples (  " actor - year "  ,  " actor "  ,  " year "  )  ;  /  / first is tuple name . defaults to string , json namespace%NWL%ob . tuples (  " actor - genre - year "  ,  " actor "  ,  " genre "  ,  " year "  )  ; %NWL%ob . returnValues ( true )  . returnResults ( false )  . returnFacets ( false )  ; %NWL%var opts = ob . toJson (  )  ; %NWL%var coag = new com . marklogic . widgets . cooccurence (  " coag "  )  ; %NWL%coag . addErrorListener ( error . updateError )  ; %NWL%coag . title =  " Actor vs . Movie Genre "  ; %NWL%coag . displayTuple (  " actor - genre "  )  ; %NWL%coag . setTupleConstraints (  [  " actor "  ,  " genre "  ]  )  ; %NWL%var coay = new com . marklogic . widgets . cooccurence (  " coay "  )  ; %NWL%5
var coag = new com . marklogic . widgets . cooccurence (  " coag "  )  ; %NWL%coag . addErrorListener ( error . updateError )  ; %NWL%coag . title =  " Actor vs . Movie Genre "  ; %NWL%coag . displayTuple (  " actor - genre "  )  ; %NWL%coag . setTupleConstraints (  [  " actor "  ,  " genre "  ]  )  ; %NWL%var coay = new com . marklogic . widgets . cooccurence (  " coay "  )  ; %NWL%coay . addErrorListener ( error . updateError )  ; %NWL%coay . title =  " Actor vs . Movie Year "  ; %NWL%coay . displayTuple (  " actor - year "  )  ; %NWL%coay . setTupleConstraints (  [  " actor "  ,  " year "  ]  )  ; %NWL%var coagy = new com . marklogic . widgets . cooccurence (  " coagy "  )  ; %NWL%0
var _mixinReqValidate = require (  '  .  / validate '  )  ; %NWL%module . exports = function ( sails )  {%NWL%return {%NWL%defaults :  {%NWL%}  ,%NWL%ready : false ,%NWL%initialize : function ( cb )  {%NWL%sails . on (  ' router : route '  , function ( requestState )  {%NWL%var req = requestState . req ; %NWL%var res = requestState . res ; %NWL%var next = requestState . next ; %NWL%9
}  )  ;%NWL%}%NWL%this . flush (  )  ; %NWL%sails . on (  ' router : request '  , this . route )  ; %NWL%sails . on (  ' router : request : 500 '  , this . defaultHandlers [ 500 ]  )  ; %NWL%sails . on (  ' router : request : 404 '  , this . defaultHandlers [ 404 ]  )  ; %NWL%cb (  )  ;%NWL%}  ; %NWL%Router . prototype . route = function ( req , res )  {%NWL%var sails = this . sails ; %NWL%var _privateRouter = this . _privateRouter ; %NWL%9
else {%NWL%for ( var hours = timeConvention , hour = 0 ; hour < hours ;  +  + hour )  {%NWL%$hours . append (  '  < option value =  "  '  + hour +  '  "  >  '  + hour . padLeft (  ' 0 '  , 2 )  +  '  <  / option >  '  )  ;%NWL%}%NWL%$hours . val ( hours )  . insertAfter ( $input )  ;%NWL%}%NWL%var updateFunction = function (  )  {%NWL%var hours = parseInt ( $hours . val (  )  , 10 )  ; %NWL%var minutes = $minutes . val (  )  ; %NWL%if ( timeConvention =  =  = 12 )  {%NWL%var meridian = $meridian . val (  )  ; %NWL%8
var columns = size [ 1 ]  ; %NWL%canvas . width = columns * 8 ; %NWL%canvas . height = rows * 8 ; %NWL%var pixels = canvas . getContext (  ' 2d '  )  . getImageData ( 0 , 0 , canvas . width , canvas . height )  ; %NWL%if ( format =  =  ' NES '  )  {%NWL%for ( var row = 0 ; row < rows ; row +  +  )  {%NWL%for ( var col = 0 ; col < columns ; col +  +  )  {%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var low = bytes . charCodeAt (  ( row * columns + col )  * 16 + j )  ; %NWL%var high = bytes . charCodeAt (  ( row * columns + col )  * 16 + j + 8 )  ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%7
}%NWL%}%NWL%}%NWL%} else {%NWL%for ( var row = 0 ; row < rows ; row +  +  )  {%NWL%for ( var col = 0 ; col < columns ; col +  +  )  {%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var index =  (  ( row * columns + col )  * 8 + j )  * 2 ; %NWL%var low = bytes . charCodeAt ( index )  ; %NWL%var high = bytes . charCodeAt ( index + 1 )  ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%6
return ;%NWL%}%NWL%var bytes =  [  ]  ; %NWL%var pixels = canvas . getContext (  ' 2d '  )  . getImageData ( 0 , 0 , canvas . width , canvas . height )  ; %NWL%var indices = getPixelIndices ( pixels , palette )  ; %NWL%if ( format =  =  ' NES '  )  {%NWL%for ( var y = 0 , h = canvas . height ; y < h ; y +  = 8 )  {%NWL%for ( var x = 0 , w = canvas . width ; x < w ; x +  = 8 )  {%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var low = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%8
for ( var y = 0 , h = canvas . height ; y < h ; y +  = 8 )  {%NWL%for ( var x = 0 , w = canvas . width ; x < w ; x +  = 8 )  {%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var low = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%var color = indices [  ( y + j )  * canvas . width + x + i ]  ; %NWL%low =  ( low <  < 1 ) | ( color & 0x1 )  ;%NWL%}%NWL%bytes . push ( low )  ;%NWL%}%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%4
for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var low = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%var color = indices [  ( y + j )  * canvas . width + x + i ]  ; %NWL%low =  ( low <  < 1 ) | ( color & 0x1 )  ;%NWL%}%NWL%bytes . push ( low )  ;%NWL%}%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var high = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%0
bytes . push ( high )  ;%NWL%}%NWL%}%NWL%}%NWL%} else {%NWL%for ( var y = 0 , h = canvas . height ; y < h ; y +  = 8 )  {%NWL%for ( var x = 0 , w = canvas . width ; x < w ; x +  = 8 )  {%NWL%for ( var j = 0 ; j < 8 ; j +  +  )  {%NWL%var low = 0 ; %NWL%var high = 0 ; %NWL%for ( var i = 0 ; i < 8 ; i +  +  )  {%NWL%7
var sprPicker = null ; %NWL%var saveButton = null ; %NWL%var addSpriteButton = null ; %NWL%var conversionTable = null ; %NWL%var spriteTable = null ; %NWL%var palettes =  [  ]  ; %NWL%var currentFile = null ; %NWL%self . init = function ( config )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%8
var spriteTable = null ; %NWL%var palettes =  [  ]  ; %NWL%var currentFile = null ; %NWL%self . init = function ( config )  {%NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Input '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%var wrap = document . createElement (  ' div '  )  ; %NWL%var span = document . createElement (  ' span '  )  ; %NWL%4
var span = document . createElement (  ' span '  )  ; %NWL%span . className =  ' format '  ; %NWL%span . appendChild ( document . createTextNode (  ' Sprite (  . spr )  :  '  )  )  ; %NWL%wrap . appendChild ( span )  ; %NWL%sprPicker = document . createElement (  ' input '  )  ; %NWL%sprPicker . setAttribute (  ' type '  ,  ' file '  )  ; %NWL%sprPicker . addEventListener (  ' change '  , createFileChangeHandler ( loaders [  ' spr '  ]  )  )  ; %NWL%wrap . appendChild ( sprPicker )  ; %NWL%div . appendChild ( wrap )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%0
span . appendChild ( document . createTextNode (  ' Sprite (  . spr )  :  '  )  )  ; %NWL%wrap . appendChild ( span )  ; %NWL%sprPicker = document . createElement (  ' input '  )  ; %NWL%sprPicker . setAttribute (  ' type '  ,  ' file '  )  ; %NWL%sprPicker . addEventListener (  ' change '  , createFileChangeHandler ( loaders [  ' spr '  ]  )  )  ; %NWL%wrap . appendChild ( sprPicker )  ; %NWL%div . appendChild ( wrap )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' tileset section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%8
div . className =  ' tileset section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Tileset '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%inputCanvas = document . createElement (  ' canvas '  )  ; %NWL%inputCanvas . appendChild ( document . createTextNode (  ' This application requires HTML5 support .  '  )  )  ; %NWL%inputCanvas . width = 0 ; %NWL%inputCanvas . height = 0 ; %NWL%div . appendChild ( inputCanvas )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%1
inputCanvas . width = 0 ; %NWL%inputCanvas . height = 0 ; %NWL%div . appendChild ( inputCanvas )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' conversion_table section '  ; %NWL%conversionTable = div ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' sprites section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%4
config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' conversion_table section '  ; %NWL%conversionTable = div ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' sprites section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Sprites '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%1
conversionTable = div ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' sprites section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Sprites '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%spriteTable = table ; %NWL%div . appendChild ( table )  ; %NWL%var span = document . createElement (  ' span '  )  ; %NWL%2
var span = document . createElement (  ' span '  )  ; %NWL%span . className =  ' format '  ; %NWL%span . appendChild ( document . createTextNode (  '  '  )  )  ; %NWL%div . appendChild ( span )  ; %NWL%addSpriteButton = document . createElement (  ' input '  )  ; %NWL%addSpriteButton . setAttribute (  ' type '  ,  ' button '  )  ; %NWL%addSpriteButton . setAttribute (  ' value '  ,  ' Add Sprite '  )  ; %NWL%addSpriteButton . addEventListener (  ' click '  , function (  )  { self . addSprite (  )  ;  }  )  ; %NWL%div . appendChild ( addSpriteButton )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%0
span . appendChild ( document . createTextNode (  '  '  )  )  ; %NWL%div . appendChild ( span )  ; %NWL%addSpriteButton = document . createElement (  ' input '  )  ; %NWL%addSpriteButton . setAttribute (  ' type '  ,  ' button '  )  ; %NWL%addSpriteButton . setAttribute (  ' value '  ,  ' Add Sprite '  )  ; %NWL%addSpriteButton . addEventListener (  ' click '  , function (  )  { self . addSprite (  )  ;  }  )  ; %NWL%div . appendChild ( addSpriteButton )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' preview section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%8
div . className =  ' preview section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Preview '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%outputCanvas = document . createElement (  ' canvas '  )  ; %NWL%outputCanvas . appendChild ( document . createTextNode (  ' This application requires HTML5 support .  '  )  )  ; %NWL%outputCanvas . width = 0 ; %NWL%outputCanvas . height = 0 ; %NWL%div . appendChild ( outputCanvas )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%1
h2 . appendChild ( document . createTextNode (  ' Preview '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%outputCanvas = document . createElement (  ' canvas '  )  ; %NWL%outputCanvas . appendChild ( document . createTextNode (  ' This application requires HTML5 support .  '  )  )  ; %NWL%outputCanvas . width = 0 ; %NWL%outputCanvas . height = 0 ; %NWL%div . appendChild ( outputCanvas )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%8
outputCanvas . appendChild ( document . createTextNode (  ' This application requires HTML5 support .  '  )  )  ; %NWL%outputCanvas . width = 0 ; %NWL%outputCanvas . height = 0 ; %NWL%div . appendChild ( outputCanvas )  ; %NWL%config . element . appendChild ( div )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%div . className =  ' section '  ; %NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Output '  )  )  ; %NWL%div . appendChild ( h2 )  ; %NWL%var span = document . createElement (  ' span '  )  ; %NWL%5
}  )  ; %NWL%return false ;%NWL%}  ; %NWL%self . setupPalette = function (  )  {%NWL%while ( conversionTable . hasChildNodes (  )  )  {%NWL%conversionTable . removeChild ( conversionTable . lastChild )  ;%NWL%}%NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Palettes '  )  )  ; %NWL%conversionTable . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%7
self . setupPalette = function (  )  {%NWL%while ( conversionTable . hasChildNodes (  )  )  {%NWL%conversionTable . removeChild ( conversionTable . lastChild )  ;%NWL%}%NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Palettes '  )  )  ; %NWL%conversionTable . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%for ( var i = 0 ; i < palettes . length ; i +  +  )  {%NWL%var palette = palettes [ i ]  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%4
conversionTable . removeChild ( conversionTable . lastChild )  ;%NWL%}%NWL%var h2 = document . createElement (  ' h2 '  )  ; %NWL%h2 . appendChild ( document . createTextNode (  ' Palettes '  )  )  ; %NWL%conversionTable . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%for ( var i = 0 ; i < palettes . length ; i +  +  )  {%NWL%var palette = palettes [ i ]  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%tr . className =  ' source_palette '  ; %NWL%var th = document . createElement (  ' th '  )  ; %NWL%2
conversionTable . appendChild ( h2 )  ; %NWL%var table = document . createElement (  ' table '  )  ; %NWL%for ( var i = 0 ; i < palettes . length ; i +  +  )  {%NWL%var palette = palettes [ i ]  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%tr . className =  ' source_palette '  ; %NWL%var th = document . createElement (  ' th '  )  ; %NWL%th . appendChild ( document . createTextNode ( i )  )  ; %NWL%tr . appendChild ( th )  ; %NWL%for ( var j = 0 ; j < palette . length ; j +  +  )  {%NWL%var td = document . createElement (  ' td '  )  ; %NWL%1
var table = document . createElement (  ' table '  )  ; %NWL%for ( var i = 0 ; i < palettes . length ; i +  +  )  {%NWL%var palette = palettes [ i ]  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%tr . className =  ' source_palette '  ; %NWL%var th = document . createElement (  ' th '  )  ; %NWL%th . appendChild ( document . createTextNode ( i )  )  ; %NWL%tr . appendChild ( th )  ; %NWL%for ( var j = 0 ; j < palette . length ; j +  +  )  {%NWL%var td = document . createElement (  ' td '  )  ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%0
conversionTable . appendChild ( table )  ; %NWL%self . recalculate (  )  ;%NWL%}%NWL%self . addSprite = function ( data )  {%NWL%if ( spriteTable . querySelectorAll (  ' tr '  )  . length >  = 40 )  {%NWL%return ;%NWL%}%NWL%data = data || {  }  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%tr . className =  ' fields '  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%8
self . recalculate (  )  ;%NWL%}%NWL%self . addSprite = function ( data )  {%NWL%if ( spriteTable . querySelectorAll (  ' tr '  )  . length >  = 40 )  {%NWL%return ;%NWL%}%NWL%data = data || {  }  ; %NWL%var tr = document . createElement (  ' tr '  )  ; %NWL%tr . className =  ' fields '  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%7
var tr = document . createElement (  ' tr '  )  ; %NWL%tr . className =  ' fields '  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . x || 8 ; %NWL%input . className =  ' x '  ; %NWL%td . appendChild ( document . createTextNode (  ' X :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%0
tr . className =  ' fields '  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . x || 8 ; %NWL%input . className =  ' x '  ; %NWL%td . appendChild ( document . createTextNode (  ' X :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%1
td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . y || 16 ; %NWL%input . className =  ' y '  ; %NWL%td . appendChild ( document . createTextNode (  ' Y :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%3
tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . y || 16 ; %NWL%input . className =  ' y '  ; %NWL%td . appendChild ( document . createTextNode (  ' Y :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%1
td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . tile || 0 ; %NWL%input . className =  ' tile '  ; %NWL%td . appendChild ( document . createTextNode (  ' Tile :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%3
tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . tile || 0 ; %NWL%input . className =  ' tile '  ; %NWL%td . appendChild ( document . createTextNode (  ' Tile :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%1
td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . pal || 0 ; %NWL%input . className =  ' pal '  ; %NWL%td . appendChild ( document . createTextNode (  ' Pal :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%3
tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' text '  ; %NWL%input . value = data . pal || 0 ; %NWL%input . className =  ' pal '  ; %NWL%td . appendChild ( document . createTextNode (  ' Pal :  '  )  )  ; %NWL%td . appendChild ( input )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%1
tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' checkbox '  ; %NWL%input . value =  ' 1 '  ; %NWL%input . className =  ' hflip '  ; %NWL%input . checked = data . hflip || false ; %NWL%td . appendChild ( input )  ; %NWL%td . appendChild ( document . createTextNode (  ' HFlip '  )  )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%2
var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' checkbox '  ; %NWL%input . value =  ' 1 '  ; %NWL%input . className =  ' hflip '  ; %NWL%input . checked = data . hflip || false ; %NWL%td . appendChild ( input )  ; %NWL%td . appendChild ( document . createTextNode (  ' HFlip '  )  )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%0
tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' checkbox '  ; %NWL%input . value =  ' 1 '  ; %NWL%input . className =  ' vflip '  ; %NWL%input . checked = data . vflip || false ; %NWL%td . appendChild ( input )  ; %NWL%td . appendChild ( document . createTextNode (  ' VFlip '  )  )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%2
var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' checkbox '  ; %NWL%input . value =  ' 1 '  ; %NWL%input . className =  ' vflip '  ; %NWL%input . checked = data . vflip || false ; %NWL%td . appendChild ( input )  ; %NWL%td . appendChild ( document . createTextNode (  ' VFlip '  )  )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%0
tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' checkbox '  ; %NWL%input . value =  ' 1 '  ; %NWL%input . className =  ' behind '  ; %NWL%input . checked = data . behind || false ; %NWL%td . appendChild ( input )  ; %NWL%td . appendChild ( document . createTextNode (  ' Behind BG '  )  )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%2
var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%input . type =  ' checkbox '  ; %NWL%input . value =  ' 1 '  ; %NWL%input . className =  ' behind '  ; %NWL%input . checked = data . behind || false ; %NWL%td . appendChild ( input )  ; %NWL%td . appendChild ( document . createTextNode (  ' Behind BG '  )  )  ; %NWL%tr . appendChild ( td )  ; %NWL%var td = document . createElement (  ' td '  )  ; %NWL%var input = document . createElement (  ' input '  )  ; %NWL%0
}%NWL%var indices = self . getPixelIndices ( inputPixels , brewtool . getGreyscalePalette (  )  )  ; %NWL%var spriteRows = spriteTable . querySelectorAll (  ' tr '  )  ; %NWL%for ( var i = 0 ; i < spriteRows . length ; i +  +  )  {%NWL%var row = spriteRows [ i ]  ; %NWL%var dx = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . x '  )  . value ) || 0 , 0 )  , 255 )  - 8 ; %NWL%var dy = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . y '  )  . value ) || 0 , 0 )  , 255 )  - 16 ; %NWL%var tile = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . tile '  )  . value ) || 0 , 0 )  , Math . min ( Math . floor ( inputCanvas . width / 8 )  * Math . floor ( inputCanvas . height / 8 )  - 1 ,  255 )  )  ; %NWL%var pal = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . pal '  )  . value ) || 0 , 0 )  , Math . min ( palettes . length , 7 )  )  ; %NWL%var hflip = row . querySelector (  '  . hflip '  )  . checked ; %NWL%var vflip = row . querySelector (  '  . vflip '  )  . checked ; %NWL%9
var row = spriteRows [ i ]  ; %NWL%var dx = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . x '  )  . value ) || 0 , 0 )  , 255 )  - 8 ; %NWL%var dy = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . y '  )  . value ) || 0 , 0 )  , 255 )  - 16 ; %NWL%var tile = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . tile '  )  . value ) || 0 , 0 )  , Math . min ( Math . floor ( inputCanvas . width / 8 )  * Math . floor ( inputCanvas . height / 8 )  - 1 ,  255 )  )  ; %NWL%var pal = Math . min ( Math . max ( parseInt ( row . querySelector (  '  . pal '  )  . value ) || 0 , 0 )  , Math . min ( palettes . length , 7 )  )  ; %NWL%var hflip = row . querySelector (  '  . hflip '  )  . checked ; %NWL%var vflip = row . querySelector (  '  . vflip '  )  . checked ; %NWL%var sx = tile * 8 % inputCanvas . width ; %NWL%var sy = Math . floor ( tile * 8 / inputCanvas . width )  * 8 ; %NWL%for ( var y = 0 ; y < 8 ; y +  +  )  {%NWL%for ( var x = 0 ; x < 8 ; x +  +  )  {%NWL%9
getTargetUri : function ( adapter , peer , sourceUri )  {%NWL%var pmodel = peer . _getModel (  )  ; %NWL%for ( var idx = 0 ; idx < pmodel . routes . length ; idx +  +  )%NWL%{%NWL%var route = pmodel . routes [ idx ]  ; %NWL%if ( route . localUri =  = sourceUri )%NWL%return route . remoteUri ;%NWL%}%NWL%for ( var idx = 0 ; idx < pmodel . stores . length ; idx +  +  )%NWL%{%NWL%var store = pmodel . stores [ idx ]  ; %NWL%4
return result ;%NWL%}%NWL%var firstc = db . oplog . $main . find (  )  . sort (  { $natural : 1 }  )  . limit ( 1 )  ; %NWL%var lastc = db . oplog . $main . find (  )  . sort (  { $natural :  - 1 }  )  . limit ( 1 )  ; %NWL%if ( !firstc . hasNext (  ) || !lastc . hasNext (  )  )  {%NWL%result . errmsg =  " objects not found in local . oplog . $main -  - is this a new and empty db instance? "  ; %NWL%result . oplogMainRowCount = db . oplog . $main . count (  )  ; %NWL%return result ;%NWL%}%NWL%var first = firstc . next (  )  ; %NWL%var last = lastc . next (  )  ; %NWL%9
this . _validationSummaryULElement . appendChild ( liElement )  ;%NWL%}%NWL%}%NWL%Sys . UI . DomElement . removeCssClass ( this . _validationSummaryElement , Sys . Mvc . FormContext . _validationSummaryValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( this . _validationSummaryElement , Sys . Mvc . FormContext . _validationSummaryErrorCss )  ;%NWL%}%NWL%}  ,%NWL%_displaySuccess : function Sys_Mvc_FormContext$_displaySuccess (  )  {%NWL%var validationSummaryElement = this . _validationSummaryElement ; %NWL%if ( validationSummaryElement )  {%NWL%var validationSummaryULElement = this . _validationSummaryULElement ; %NWL%8
}  ,%NWL%_displayError : function Sys_Mvc_FieldContext$_displayError (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%if ( validationMessageElement )  {%NWL%if ( this . replaceValidationMessageContents )  {%NWL%Sys . Mvc . _validationUtil . setInnerText ( validationMessageElement , this . _errors [ 0 ]  )  ;%NWL%}%NWL%Sys . UI . DomElement . removeCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%2
Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%for ( var i = 0 ; i < elements . length ; i +  +  )  {%NWL%var element = elements [ i ]  ; %NWL%Sys . UI . DomElement . removeCssClass ( element , Sys . Mvc . FieldContext . _inputElementValidCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( element , Sys . Mvc . FieldContext . _inputElementErrorCss )  ;%NWL%}%NWL%}  ,%NWL%_displaySuccess : function Sys_Mvc_FieldContext$_displaySuccess (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%2
}  ,%NWL%_displaySuccess : function Sys_Mvc_FieldContext$_displaySuccess (  )  {%NWL%var validationMessageElement = this . validationMessageElement ; %NWL%if ( validationMessageElement )  {%NWL%if ( this . replaceValidationMessageContents )  {%NWL%Sys . Mvc . _validationUtil . setInnerText ( validationMessageElement ,  '  '  )  ;%NWL%}%NWL%Sys . UI . DomElement . removeCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageErrorCss )  ; %NWL%Sys . UI . DomElement . addCssClass ( validationMessageElement , Sys . Mvc . FieldContext . _validationMessageValidCss )  ;%NWL%}%NWL%var elements = this . elements ; %NWL%2
this . addErrors ( errors )  ; %NWL%return errors ;%NWL%}%NWL%}%NWL%Sys . Mvc . RangeValidator = function Sys_Mvc_RangeValidator ( minimum , maximum )  {%NWL%this . _minimum = minimum ; %NWL%this . _maximum = maximum ;%NWL%}%NWL%Sys . Mvc . RangeValidator . create = function Sys_Mvc_RangeValidator$create ( rule )  {%NWL%var min = rule . ValidationParameters [  ' min '  ]  ; %NWL%var max = rule . ValidationParameters [  ' max '  ]  ; %NWL%9
this . loadTabContent ( tab_name , folder_id )  ;%NWL%}  ,%NWL%goToFolder : function ( id )  {%NWL%Putio . Files . list ( id , function ( data )  {%NWL%if ( data . status =  =  " ERROR "  )  {%NWL%Putio_Function . goToFolder ( 0 )%NWL%}%NWL%else {%NWL%localStorage [  " lastFolder "  ]  = id ; %NWL%var files = data . files ; %NWL%var parent = data . parent ; %NWL%9
dict . setValue ( elemKeys [ i ]  , i )  ; %NWL%v . push ( i )  ;%NWL%}%NWL%}  )  ; %NWL%it (  ' For each gives all the pairs '  ,%NWL%function (  )  {%NWL%for ( var i = 0 ; i < elems ; i +  +  )  {%NWL%dict . setValue ( elemKeys [ i ]  , i )  ;%NWL%}%NWL%var keys = dict . keys (  )  ; %NWL%var values = dict . values (  )  ; %NWL%9
return ; %NWL%this . inMultiSelectMode = false ; %NWL%this . unsetStyle (  " ace_multiselect "  )  ; %NWL%this . keyBinding . removeKeyboardHandler ( commands . keyboardHandler )  ; %NWL%this . commands . removeEventListener (  " exec "  , this . $onMultiSelectExec )  ; %NWL%this . renderer . updateCursor (  )  ; %NWL%this . renderer . updateBackMarkers (  )  ;%NWL%}  ; %NWL%this . $onMultiSelectExec = function ( e )  {%NWL%var command = e . command ; %NWL%var editor = e . editor ; %NWL%9
command . exec ( editor , e . args || {  }  )  ;%NWL%} else {%NWL%command . multiSelectAction ( editor , e . args || {  }  )  ;%NWL%}%NWL%e . preventDefault (  )  ;%NWL%}  ; %NWL%this . forEachSelection = function ( cmd , args , $byLines )  {%NWL%if ( this . inVirtualSelectionMode )%NWL%return ; %NWL%var session = this . session ; %NWL%var selection = this . selection ; %NWL%9
return p1 . row =  = p2 . row && p1 . column =  = p2 . column ;%NWL%}%NWL%exports . onSessionChange = function ( e )  {%NWL%var session = e . session ; %NWL%if ( !session . multiSelect )  {%NWL%session . $selectionMarkers =  [  ]  ; %NWL%session . selection . $initRangeList (  )  ; %NWL%session . multiSelect = session . selection ;%NWL%}%NWL%this . multiSelect = session . multiSelect ; %NWL%var oldSession = e . oldSession ; %NWL%3
var StatefulModel = Backbone . StatefulModel = function ( options )  {%NWL%this . startStateMachine ( options )%NWL%Backbone . Model . prototype . constructor . apply ( this , arguments )%NWL%}%NWL%var sfmProto = StatefulModel . prototype = new Backbone . Model (  )%NWL%delete sfmProto . cid%NWL%delete sfmProto . attributes%NWL%delete sfmProto . changed%NWL%_ . extend ( StatefulModel . prototype , Backbone . Model . prototype , Backbone . StateMachine )%NWL%StatefulModel . extend = Backbone . Model . extend%NWL%var StatefulView = Backbone . StatefulView = function ( options )  {%NWL%0
}  ,%NWL%connectionUpdate : function ( connection , done )  {%NWL%this . _connectionsCollection . update (%NWL%{ _id : this . _getId ( connection . namespace , connection . id )  }  ,%NWL%{  ' $set '  :  { data : connection . serialize (  )  }  }%NWL%, done )%NWL%}  ,%NWL%connectionInsertOrRestore : function ( connection , done )  {%NWL%var self = this%NWL%, namespace = connection . namespace%NWL%, id = connection . id%NWL%9
it (  ' grant permissions for admin '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%var deleteUser = response . permissions . delete_user ; %NWL%admin . grant ( deleteUser , function ( err , granted )  {%NWL%if ( err ) throw err ; %NWL%granted . should . equal ( true )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' grant permissions for user '  , function ( done )  {%NWL%var user = response . roles . user ; %NWL%1
it (  ' grant permissions for user '  , function ( done )  {%NWL%var user = response . roles . user ; %NWL%var createArticle = response . permissions . create_article ; %NWL%user . grant ( createArticle , function ( err , granted )  {%NWL%if ( err ) throw err ; %NWL%granted . should . equal ( true )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' grant role for admin '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%1
var user = response . roles . user ; %NWL%var createArticle = response . permissions . create_article ; %NWL%user . grant ( createArticle , function ( err , granted )  {%NWL%if ( err ) throw err ; %NWL%granted . should . equal ( true )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' grant role for admin '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%var user = response . roles . user ; %NWL%9
it (  ' grant role for admin '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%var user = response . roles . user ; %NWL%admin . grant ( user , function ( err , granted )  {%NWL%if ( err ) throw err ; %NWL%granted . should . equal ( true )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' admin can create article '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%2
}  )  ; %NWL%it (  ' admin can delete user '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%admin . can (  ' delete '  ,  ' user '  , function ( err , can )  {%NWL%if ( err ) throw err ; %NWL%can . should . equal ( true )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' user can not delete user '  , function ( done )  {%NWL%var user = response . roles . user ; %NWL%2
}  )  ; %NWL%it (  ' user can all create article '  , function ( done )  {%NWL%var user = response . roles . user ; %NWL%user . canAll ( permissions , function ( err , can )  {%NWL%if ( err ) throw err ; %NWL%can . should . equal ( false )  ; %NWL%done (  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' admin can all create article '  , function ( done )  {%NWL%var admin = response . roles . admin ; %NWL%2
' use strict '  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var di = require (  ' di '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var prism = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var testUtils = require (  '  .  .  / test - utils '  )  ; %NWL%var deleteMock = testUtils . deleteMock ; %NWL%var httpGet = testUtils . httpGet ; %NWL%var httpPost = testUtils . httpPost ; %NWL%var waitForFile = testUtils . waitForFile ; %NWL%7
var _ = require (  ' lodash '  )  ; %NWL%var assert = require (  ' assert '  )  ; %NWL%var connect = require (  ' connect '  )  ; %NWL%var di = require (  ' di '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var prism = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var testUtils = require (  '  .  .  / test - utils '  )  ; %NWL%var deleteMock = testUtils . deleteMock ; %NWL%var onEnd = testUtils . onEnd ; %NWL%9
var assert = require (  ' assert '  )  ; %NWL%var connect = require (  ' connect '  )  ; %NWL%var di = require (  ' di '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var prism = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var testUtils = require (  '  .  .  / test - utils '  )  ; %NWL%var deleteMock = testUtils . deleteMock ; %NWL%var onEnd = testUtils . onEnd ; %NWL%var httpGet = testUtils . httpGet ; %NWL%8
var connect = require (  ' connect '  )  ; %NWL%var di = require (  ' di '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var prism = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var testUtils = require (  '  .  .  / test - utils '  )  ; %NWL%var deleteMock = testUtils . deleteMock ; %NWL%var onEnd = testUtils . onEnd ; %NWL%var httpGet = testUtils . httpGet ; %NWL%var httpPost = testUtils . httpPost ; %NWL%7
var di = require (  ' di '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var querystring = require (  ' querystring '  )  ; %NWL%var prism = require (  '  .  .  /  .  .  /  '  )  ; %NWL%var testUtils = require (  '  .  .  / test - utils '  )  ; %NWL%var deleteMock = testUtils . deleteMock ; %NWL%var onEnd = testUtils . onEnd ; %NWL%var httpGet = testUtils . httpGet ; %NWL%var httpPost = testUtils . httpPost ; %NWL%var waitForFile = testUtils . waitForFile ; %NWL%6
}%NWL%Logger . prototype . silent = function (  )  {%NWL%this . stdio = false ; %NWL%return this ;%NWL%}  ; %NWL%Logger . prototype . send = function ( level , type , msg )  {%NWL%var n = levels [ level ]  ; %NWL%if ( n < this . filter ) return ; %NWL%if ( null =  = msg ) msg =  {  }  ; %NWL%if ( msg instanceof Error ) msg = clone ( msg )  ; %NWL%if ( msg . error instanceof Error ) msg . error = clone ( msg . error )  ; %NWL%9
}  ;%NWL%} else if ( value && value . lat )  {%NWL%return {%NWL%" type "  :  " Point "  ,%NWL%" coordinates "  :  [ value . lon || value . lng , value . lat ]%NWL%}  ;%NWL%}%NWL%return value ;%NWL%} else if ( this . state . get (  ' lonField '  ) && this . state . get (  ' latField '  )  )  {%NWL%var lon = doc . get ( this . state . get (  ' lonField '  )  )  ; %NWL%var lat = doc . get ( this . state . get (  ' latField '  )  )  ; %NWL%9
function fileUpload (  )  {%NWL%var form = $form [ 0 ]  ; %NWL%if ( $ (  '  : input [ name = submit ]  ,  : input [ id = submit ]  '  , form )  . length )  {%NWL%alert (  ' Error : Form elements must not have name or id of " submit "  .  '  )  ; %NWL%return ;%NWL%}%NWL%var s = $ . extend ( true ,  {  }  , $ . ajaxSettings , options )  ; %NWL%s . context = s . context || s ; %NWL%var id =  ' jqFormIO '  +  ( new Date (  )  . getTime (  )  )  , fn =  ' _ '  + id ; %NWL%var $io = $ (  '  < iframe id =  "  '  + id +  '  " name =  "  '  + id +  '  " src =  "  '  + s . iframeSrc +  '  "  /  >  '  )  ; %NWL%var io = $io [ 0 ]  ; %NWL%1
var domContainerWidth = domContainer . getWidth (  )  ; %NWL%var minimumForCard = cardPanel . minWidth + 20 ;  /  / Some splitter space%NWL%if ( availableWidth - domContainerWidth < minimumForCard )  {%NWL%domContainer . setWidth ( Math . max ( 0 , availableWidth - minimumForCard )  )  ;%NWL%}%NWL%}  ,%NWL%showSource : function ( lineNbr )  {%NWL%var slots = this . slots%NWL%var cardContainer = slots . cardContainer%NWL%var sourceCt = slots . source%NWL%var test = this . test%NWL%7
return this . to%NWL%}  ,%NWL%getBy : function (  )  {%NWL%if ( this . test . typeOf ( this . by )  =  =  ' Function '  )%NWL%return this . by . call ( this . test , this )%NWL%else%NWL%return this . by%NWL%}  ,%NWL%process : function (  )  {%NWL%var test = this . test ; %NWL%var next = this . next ; %NWL%9
iframe . style . width  =  ' 300px '%NWL%iframe . style . height =  ' 300px '%NWL%iframe . src    =  ' about : blank '%NWL%var async    = t . beginAsync (  )%NWL%var cont    = function (  )  {%NWL%t . endAsync ( async )%NWL%var iframeDoc   = iframe . contentWindow . document%NWL%var div    = iframeDoc . createElement (  ' div '  )%NWL%div . setAttribute (  ' style '  ,  ' width : 100px ; height : 100px ; left : 100px ; top : 100px ; position : absolute ; border : 1px solid black '  )%NWL%div . innerHTML   =  ' INNER '%NWL%var input    = iframeDoc . createElement (  ' input '  )%NWL%7
obj . y -  = this . axis . area (  ' y '  )  ; %NWL%var rect = this . chart . svg . rect ( $ . extend ( obj ,  {%NWL%fill :  ' tranparent '  ,%NWL%stroke :  " black "%NWL%}  )  )  ;%NWL%}%NWL%}%NWL%}%NWL%this . drawBefore = function (  )  {%NWL%var row = this . grid . rows ; %NWL%var column = this . grid . columns ; %NWL%9
required : true ,%NWL%where : throughWhere ,%NWL%_pseudo : true%NWL%}  )  ;%NWL%}%NWL%return self . association . target . findAll ( options , queryOptions )  ;%NWL%}  ; %NWL%HasManyDoubleLinked . prototype . injectSetter = function ( oldAssociations , newAssociations , defaultAttributes )  {%NWL%var self = this%NWL%, targetAssociation = self . association . targetAssociation%NWL%, foreignIdentifier = self . association . foreignIdentifier%NWL%9
it (  ' when we don\ ' t have a valid dialect .  '  , function (  )  {%NWL%expect ( function (  )  {%NWL%new Sequelize ( config [ dialect ]  . database , config [ dialect ]  . username , config [ dialect ]  . password ,  { host :  ' 0 . 0 . 0 . 1 '  , port : config [ dialect ]  . port , dialect : undefined }  )  ;%NWL%}  )  . to . throw ( Error ,  ' The dialect undefined is not supported .  '  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%describe (  ' Instantiation with a URL string '  , function (  )  {%NWL%it (  ' should accept username , password , host , port , and database '  , function (  )  {%NWL%var sequelize = new Sequelize (  ' mysql :  /  / user : pass@example . com : 9821 / dbname '  )  ; %NWL%var config = sequelize . config ; %NWL%var options = sequelize . options ; %NWL%9
var options = sequelize . options ; %NWL%expect ( options . dialect )  . to . equal (  ' mysql '  )  ; %NWL%expect ( config . database )  . to . equal (  ' dbname '  )  ; %NWL%expect ( config . host )  . to . equal (  ' example . com '  )  ; %NWL%expect ( config . username )  . to . equal (  ' user '  )  ; %NWL%expect ( config . password )  . to . equal (  ' pass '  )  ; %NWL%expect ( config . port )  . to . equal (  ' 9821 '  )  ;%NWL%}  )  ; %NWL%it (  ' should work with no authentication options '  , function (  )  {%NWL%var sequelize = new Sequelize (  ' mysql :  /  / example . com : 9821 / dbname '  )  ; %NWL%var config = sequelize . config ; %NWL%0
expect ( worker . Project )  . to . be . ok ; %NWL%expect ( worker . Project . Tasks )  . to . be . ok ; %NWL%expect ( worker . Project . Tasks . length )  . to . equal ( 4 )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should support a simple nested hasMany <  -  > hasMany include '  , function (  )  {%NWL%var User = this . sequelize . define (  ' User '  ,  {  }  )%NWL%, Product = this . sequelize . define (  ' Product '  ,  {%NWL%title : DataTypes . STRING%NWL%}  )%NWL%, Tag = this . sequelize . define (  ' Tag '  ,  {%NWL%7
expect ( user . Products [ 1 ]  . Tags . length )  . to . equal ( 1 )  ; %NWL%expect ( user . Products [ 2 ]  . Tags . length )  . to . equal ( 3 )  ; %NWL%expect ( user . Products [ 3 ]  . Tags . length )  . to . equal ( 0 )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should support an include with multiple different association types '  , function (  )  {%NWL%var User = this . sequelize . define (  ' User '  ,  {  }  )%NWL%, Product = this . sequelize . define (  ' Product '  ,  {%NWL%title : DataTypes . STRING%NWL%}  )%NWL%, Tag = this . sequelize . define (  ' Tag '  ,  {%NWL%7
}  )  ;%NWL%}  )  ; %NWL%it (  ' should support an include with multiple different association types '  , function (  )  {%NWL%var User = this . sequelize . define (  ' User '  ,  {  }  )%NWL%, Product = this . sequelize . define (  ' Product '  ,  {%NWL%title : DataTypes . STRING%NWL%}  )%NWL%, Tag = this . sequelize . define (  ' Tag '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, Price = this . sequelize . define (  ' Price '  ,  {%NWL%4
var User = this . sequelize . define (  ' User '  ,  {  }  )%NWL%, Product = this . sequelize . define (  ' Product '  ,  {%NWL%title : DataTypes . STRING%NWL%}  )%NWL%, Tag = this . sequelize . define (  ' Tag '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, Price = this . sequelize . define (  ' Price '  ,  {%NWL%value : DataTypes . FLOAT%NWL%}  )%NWL%, Customer = this . sequelize . define (  ' Customer '  ,  {%NWL%1
}  )%NWL%, Tag = this . sequelize . define (  ' Tag '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, Price = this . sequelize . define (  ' Price '  ,  {%NWL%value : DataTypes . FLOAT%NWL%}  )%NWL%, Customer = this . sequelize . define (  ' Customer '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, Group = this . sequelize . define (  ' Group '  ,  {%NWL%1
}  )%NWL%, Price = this . sequelize . define (  ' Price '  ,  {%NWL%value : DataTypes . FLOAT%NWL%}  )%NWL%, Customer = this . sequelize . define (  ' Customer '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, Group = this . sequelize . define (  ' Group '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, GroupMember = this . sequelize . define (  ' GroupMember '  ,  {%NWL%1
value : DataTypes . FLOAT%NWL%}  )%NWL%, Customer = this . sequelize . define (  ' Customer '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, Group = this . sequelize . define (  ' Group '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )%NWL%, GroupMember = this . sequelize . define (  ' GroupMember '  ,  {%NWL%}  )%NWL%, Rank = this . sequelize . define (  ' Rank '  ,  {%NWL%2
expect ( user . Products [ 0 ]  . Category )  . to . be . ok ; %NWL%expect ( user . Products [ 1 ]  . Category )  . not . to . be . ok ; %NWL%expect ( user . Products [ 0 ]  . Prices . length )  . to . equal ( 2 )  ; %NWL%expect ( user . Products [ 1 ]  . Prices . length )  . to . equal ( 4 )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should support specifying attributes '  , function (  )  {%NWL%var Project = this . sequelize . define (  ' Project '  ,  {%NWL%title : Sequelize . STRING%NWL%}  )  ; %NWL%var Task = this . sequelize . define (  ' Task '  ,  {%NWL%7
}%NWL%}  )  ; %NWL%describe (  ' Association column '  , function (  )  {%NWL%it (  ' has correct type for non - id primary keys with non - integer type '  , function (  )  {%NWL%var User = this . sequelize . define (  ' UserPKBT '  ,  {%NWL%username :  {%NWL%type : Sequelize . STRING%NWL%}%NWL%}  )%NWL%, self = this ; %NWL%var Group = this . sequelize . define (  ' GroupPKBT '  ,  {%NWL%4
, Promise = Sequelize . Promise%NWL%, DataTypes = require ( __dirname +  '  /  .  .  /  .  .  /  .  .  / lib / data - types '  )%NWL%, datetime = require (  ' chai - datetime '  )  ; %NWL%chai . use ( datetime )  ; %NWL%chai . config . includeStack = true ; %NWL%describe ( Support . getTestDialectTeaser (  ' Include '  )  , function (  )  {%NWL%describe (  ' find '  , function (  )  {%NWL%it (  ' should include a non required model , with conditions and two includes N : M 1 : M '  , function (  )  {%NWL%var A = this . sequelize . define (  ' A '  ,  { name : DataTypes . STRING ( 40 )  }  ,  { paranoid : true }  )%NWL%, B = this . sequelize . define (  ' B '  ,  { name : DataTypes . STRING ( 40 )  }  ,  { paranoid : true }  )%NWL%, C = this . sequelize . define (  ' C '  ,  { name : DataTypes . STRING ( 40 )  }  ,  { paranoid : true }  )%NWL%9
{ model : B , required : false , include :  [%NWL%{ model : C , required : false }  ,%NWL%{ model : D }%NWL%]  }%NWL%]%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should work with a 1 : M to M : 1 relation with a where on the last include '  , function (  )  {%NWL%var Model = this . sequelize . define (  " Model "  ,  {  }  )  ; %NWL%var Model2 = this . sequelize . define (  " Model2 "  ,  {  }  )  ; %NWL%9
}  )%NWL%. then ( function ( a )  {%NWL%expect ( a )  . to . not . equal ( null )  ; %NWL%expect ( a . get (  ' bs '  )  )  . to . deep . equal (  [  ]  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should support a nested include ( with a where )  '  , function (  )  {%NWL%var A = this . sequelize . define (  ' A '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )  ; %NWL%var B = this . sequelize . define (  ' B '  ,  {%NWL%7
expect ( a . get (  ' bs '  )  )  . to . deep . equal (  [  ]  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should support a nested include ( with a where )  '  , function (  )  {%NWL%var A = this . sequelize . define (  ' A '  ,  {%NWL%name : DataTypes . STRING%NWL%}  )  ; %NWL%var B = this . sequelize . define (  ' B '  ,  {%NWL%flag : DataTypes . BOOLEAN%NWL%}  )  ; %NWL%var C = this . sequelize . define (  ' C '  ,  {%NWL%4
expect ( a . b . c . d . e . f . g . h )  . to . be . ok ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should work with combinding a where and a scope '  , function (  )  {%NWL%var User = this . sequelize . define (  ' User '  ,  {%NWL%id :  { type : DataTypes . INTEGER , primaryKey : true , autoIncrement : true }  ,%NWL%name : DataTypes . STRING%NWL%}  ,  { underscored : true }  )  ; %NWL%var Post = this . sequelize . define (  ' Post '  ,  {%NWL%6
}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ;%NWL%}  )  ; %NWL%it (  ' should count on a where and not use an uneeded include '  , function (  )  {%NWL%var Project = this . sequelize . define (  ' Project '  ,  {%NWL%id :  { type : DataTypes . INTEGER , allowNull : false , primaryKey : true , autoIncrement : true }  ,%NWL%project_name :  { type : DataTypes . STRING }%NWL%}  )  ; %NWL%var User = this . sequelize . define (  ' User '  ,  {%NWL%6
this . options = options || {  }  ; %NWL%this . options . storageOptions = _ . assign (  {%NWL%modelName :  ' SequelizeMeta '  ,%NWL%columnName :  ' name '%NWL%}  , this . options . storageOptions || {  }  )  ; %NWL%if ( !this . options . storageOptions . model && !this . options . storageOptions . sequelize )  {%NWL%throw new Error (  ' One of " sequelize " or " model " storage option is required '  )  ;%NWL%}%NWL%if ( !this . options . storageOptions . model )  {%NWL%var sequelize = this . options . storageOptions . sequelize ; %NWL%var modelName = this . options . storageOptions . modelName ; %NWL%9
{ _id :  { $regex :  "  .  *  "  + searchfilter +  "  .  *  "  , $options :  ' i '  }  }  ,%NWL%{ subject :  { $regex :  "  .  *  "  + searchfilter +  "  .  *  "  , $options :  ' i '  }  }  ,%NWL%{  ' requesters . email '  :  { $regex :  "  .  *  "  + searchfilter +  "  .  *  "  , $options :  ' i '  }  }%NWL%]%NWL%}  ;%NWL%}%NWL%}  ; %NWL%widget_ticket_list_save = function ( event , template )  {%NWL%var widgetlabel = template . find (  "  . widgetlabel "  )  . value ; %NWL%var width = template . find (  "  . widgetwidth "  )  . value ; %NWL%var height = template . find (  "  . widgetheight "  )  . value ; %NWL%9
env . task . files . forEach ( function ( f )  {%NWL%f . src . forEach ( add )  ; %NWL%totalFiles +  = f . src . length ;%NWL%}  )  ; %NWL%env . grunt . log . writeln (  ' Indexed '  +  ( totalFiles + env . grunt . util . pluralize ( totalFiles ,  ' file / files '  )  )  . cyan )  ;%NWL%}  )%NWL%)  ; %NWL%grunt . registerMultiTask (  ' frontend - update '  ,  ' Updates catalog entries with given options '  ,%NWL%factory ( function ( config , map , env )  {%NWL%var grunt = env . grunt ; %NWL%var task = env . task ; %NWL%9
}  )  ; %NWL%Template . eventcalendarfilter . rendered = function (  )  {%NWL%if ( Session . get (  ' todate '  )  =  =  = undefined )  {%NWL%var to = new Date (  )  ;%NWL%} else {%NWL%var to = new Date ( Session . get (  ' todate '  )  )  ;%NWL%}%NWL%if ( Session . get (  ' fromdate '  )  =  =  = undefined )  {%NWL%var from = new Date ( to . getTime (  )  - 1000 * 60 * 60 * 24 )  ;%NWL%} else {%NWL%var from = new Date ( Session . get (  ' fromdate '  )  )  ; %NWL%5
'  - o - transition - delay '  :  [  '  - o - transition '  ]  ,%NWL%'  - o - transition - duration '  :  [  '  - o - transition '  ]  ,%NWL%'  - o - transition - property '  :  [  '  - o - transition '  ]  ,%NWL%'  - o - transition - timing - function '  :  [  '  - o - transition '  ]  ,%NWL%'  - webkit - transition - delay '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - duration '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - property '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - timing - function '  :  [  '  - webkit - transition '  ]%NWL%}  ; %NWL%var compatibility = options . compatibility ; %NWL%var aggressiveMerging = options . aggressiveMerging ; %NWL%9
'  - o - transition - duration '  :  [  '  - o - transition '  ]  ,%NWL%'  - o - transition - property '  :  [  '  - o - transition '  ]  ,%NWL%'  - o - transition - timing - function '  :  [  '  - o - transition '  ]  ,%NWL%'  - webkit - transition - delay '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - duration '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - property '  :  [  '  - webkit - transition '  ]  ,%NWL%'  - webkit - transition - timing - function '  :  [  '  - webkit - transition '  ]%NWL%}  ; %NWL%var compatibility = options . compatibility ; %NWL%var aggressiveMerging = options . aggressiveMerging ; %NWL%var shorthandCompacting = options . shorthandCompacting ; %NWL%8
image . value = parts . splice ( ci , parts . length - ci + 1 )  . join (  '  '  )  ;%NWL%}%NWL%return result ;%NWL%}  ; %NWL%breakUp . _widthStyleColor = function ( token , prefix , order )  {%NWL%var components = order . map ( function ( prop )  {%NWL%return prefix +  '  -  '  + prop ;%NWL%}  )  ; %NWL%var result = Token . makeDefaults ( components , token . isImportant )  ; %NWL%var color = result [ order . indexOf (  ' color '  )  ]  ; %NWL%var style = result [ order . indexOf (  ' style '  )  ]  ; %NWL%9
}%NWL%return result ;%NWL%}  ; %NWL%breakUp . _widthStyleColor = function ( token , prefix , order )  {%NWL%var components = order . map ( function ( prop )  {%NWL%return prefix +  '  -  '  + prop ;%NWL%}  )  ; %NWL%var result = Token . makeDefaults ( components , token . isImportant )  ; %NWL%var color = result [ order . indexOf (  ' color '  )  ]  ; %NWL%var style = result [ order . indexOf (  ' style '  )  ]  ; %NWL%var width = result [ order . indexOf (  ' width '  )  ]  ; %NWL%8
var allUnits =  [  ' px '  ,  ' % '  ,  ' em '  ,  ' rem '  ,  ' in '  ,  ' cm '  ,  ' mm '  ,  ' ex '  ,  ' pt '  ,  ' pc '  ,  ' vw '  ,  ' vh '  ,  ' vmin '  ,  ' vmax '  ]  ; %NWL%var cssUnitRegexStr =  '  ( \\ - ?\\ . ?\\d + \\ . ?\\d *  (  '  + allUnits . join (  ' | '  )  +  ' | ) |auto|inherit )  '  ; %NWL%var cssCalcRegexStr =  '  ( \\ - moz\\ - |\\ - webkit\\ -  ) ?calc\\ (  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%9
var cssUnitRegexStr =  '  ( \\ - ?\\ . ?\\d + \\ . ?\\d *  (  '  + allUnits . join (  ' | '  )  +  ' | ) |auto|inherit )  '  ; %NWL%var cssCalcRegexStr =  '  ( \\ - moz\\ - |\\ - webkit\\ -  ) ?calc\\ (  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%8
var cssCalcRegexStr =  '  ( \\ - moz\\ - |\\ - webkit\\ -  ) ?calc\\ (  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionAnyRegex = new RegExp (  ' ^ '  + cssFunctionAnyRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%7
var cssFunctionNoVendorRegexStr =  '  [ A - Z ]  +  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionAnyRegex = new RegExp (  ' ^ '  + cssFunctionAnyRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssUnitRegex = new RegExp (  ' ^ '  + cssUnitRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%6
var cssFunctionVendorRegexStr =  ' \\ -  ( \\ - | [ A - Z ] | [ 0 - 9 ]  )  + \\ (  (  [ A - Z ] | [ 0 - 9 ] |\\ |\\ , |\\#|\\ + |\\ - |\\%|\\ . |\\ ( |\\ )  )  * \\ )  '  ; %NWL%var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionAnyRegex = new RegExp (  ' ^ '  + cssFunctionAnyRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssUnitRegex = new RegExp (  ' ^ '  + cssUnitRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssUnitOrCalcRegex = new RegExp (  ' ^ '  + cssUnitOrCalcRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%5
var cssVariableRegexStr =  ' var\\ ( \\ - \\ -  [ ^\\ )  ]  + \\ )  '  ; %NWL%var cssFunctionAnyRegexStr =  '  (  '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssUnitOrCalcRegexStr =  '  (  '  + cssUnitRegexStr +  ' | '  + cssCalcRegexStr +  '  )  '  ; %NWL%var cssUnitAnyRegexStr =  '  ( none| '  + widthKeywords . join (  ' | '  )  +  ' | '  + cssUnitRegexStr +  ' | '  + cssVariableRegexStr +  ' | '  + cssFunctionNoVendorRegexStr +  ' | '  + cssFunctionVendorRegexStr +  '  )  '  ; %NWL%var cssFunctionNoVendorRegex = new RegExp (  ' ^ '  + cssFunctionNoVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionVendorRegex = new RegExp (  ' ^ '  + cssFunctionVendorRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssVariableRegex = new RegExp (  ' ^ '  + cssVariableRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssFunctionAnyRegex = new RegExp (  ' ^ '  + cssFunctionAnyRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssUnitRegex = new RegExp (  ' ^ '  + cssUnitRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssUnitOrCalcRegex = new RegExp (  ' ^ '  + cssUnitOrCalcRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%var cssUnitAnyRegex = new RegExp (  ' ^ '  + cssUnitAnyRegexStr +  ' $ '  ,  ' i '  )  ; %NWL%4
addSourceMap : this . addSourceMap ,%NWL%state :  [  ]  ,%NWL%line : 1 ,%NWL%column : 0 ,%NWL%source : undefined%NWL%}  ; %NWL%return tokenize ( context )  ;%NWL%}  ; %NWL%function whatsNext ( context )  {%NWL%var mode = context . mode ; %NWL%var chunk = context . chunk ; %NWL%9
if ( nextBodyEnd =  =  = closest )%NWL%return [ closest ,  ' bodyEnd '  ]  ; %NWL%if ( nextSpecial =  =  = closest )%NWL%return [ closest ,  ' special '  ]  ;%NWL%}%NWL%function tokenize ( context )  {%NWL%var chunk = context . chunk ; %NWL%var tokenized =  [  ]  ; %NWL%var newToken ; %NWL%var value ; %NWL%var addSourceMap = context . addSourceMap ; %NWL%6
, join = require (  ' path '  )  . join%NWL%, sep = require (  ' path '  )  . sep%NWL%, debug = require (  ' debug '  )  (  ' stylus : middleware '  )  ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force ; %NWL%var src = options . src ; %NWL%9
mkdirp = require (  ' mkdirp '  )  ,%NWL%join = require (  ' path '  )  . join ; %NWL%var imports =  {  }  ; %NWL%module . exports = function ( options )  {%NWL%options = options || {  }  ; %NWL%if (  ' string '  =  = typeof options )  {%NWL%options =  { src : options }  ;%NWL%}%NWL%var force = options . force || options . response ; %NWL%var debug = options . debug ; %NWL%var src = options . src ; %NWL%9
}  ; %NWL%Template . pagerdutysettings . events (  {%NWL%' click . generate - auth - token '  : function ( event , template )  {%NWL%event . preventDefault (  )  ; %NWL%var forminput = template . find (  "  . pagerduty - settings - authtoken "  )  ; %NWL%Session . set (  ' pagerdutyauthtoken '  , generate_auth_token (  )  )  ; %NWL%forminput . value = Session . get (  ' pagerdutyauthtoken '  )  ;%NWL%}  ,%NWL%' click . pagerduty - settings - save '  : function ( event , template )  {%NWL%var authtoken = template . find (  "  . pagerduty - settings - authtoken "  )  . value ; %NWL%var apikey = template . find (  "  . pagerduty - settings - apikey "  )  . value ; %NWL%9
Template . pagerdutysettings . events (  {%NWL%' click . generate - auth - token '  : function ( event , template )  {%NWL%event . preventDefault (  )  ; %NWL%var forminput = template . find (  "  . pagerduty - settings - authtoken "  )  ; %NWL%Session . set (  ' pagerdutyauthtoken '  , generate_auth_token (  )  )  ; %NWL%forminput . value = Session . get (  ' pagerdutyauthtoken '  )  ;%NWL%}  ,%NWL%' click . pagerduty - settings - save '  : function ( event , template )  {%NWL%var authtoken = template . find (  "  . pagerduty - settings - authtoken "  )  . value ; %NWL%var apikey = template . find (  "  . pagerduty - settings - apikey "  )  . value ; %NWL%var subdomain = template . find (  "  . pagerduty - settings - subdomain "  )  . value ; %NWL%8
' click . generate - auth - token '  : function ( event , template )  {%NWL%event . preventDefault (  )  ; %NWL%var forminput = template . find (  "  . pagerduty - settings - authtoken "  )  ; %NWL%Session . set (  ' pagerdutyauthtoken '  , generate_auth_token (  )  )  ; %NWL%forminput . value = Session . get (  ' pagerdutyauthtoken '  )  ;%NWL%}  ,%NWL%' click . pagerduty - settings - save '  : function ( event , template )  {%NWL%var authtoken = template . find (  "  . pagerduty - settings - authtoken "  )  . value ; %NWL%var apikey = template . find (  "  . pagerduty - settings - apikey "  )  . value ; %NWL%var subdomain = template . find (  "  . pagerduty - settings - subdomain "  )  . value ; %NWL%var servicekey = template . find (  "  . pagerduty - settings - servicekey "  )  . value ; %NWL%7
}%NWL%}%NWL%}%NWL%}  )  . run (  )  ;%NWL%}  ; %NWL%var pagerduty_add_notes = function ( data , incident_id )  {%NWL%Fiber ( function (  )  {%NWL%data . notes . forEach ( function ( fetchednote )  {%NWL%incident = Incidents . findOne (  { _id : incident_id }  )  ; %NWL%if ( incident . pending_notes =  =  = undefined || _ . find ( _ . pluck ( incident . pending_notes ,  ' id '  )  , function ( id )  { return id =  = fetchednote . id ;  }  ) ! = fetchednote . id )  {%NWL%if ( incident . sent_notes =  =  = undefined || _ . find ( _ . pluck ( incident . sent_notes ,  ' id '  )  , function ( id )  { return id =  = fetchednote . id ;  }  ) ! = fetchednote . id )  {%NWL%9
var mode = this . get (  ' mode '  )  ; %NWL%if ( this . get (  ' isBarType '  )  )  {%NWL%return mode ;%NWL%}%NWL%else {%NWL%return null ;%NWL%}%NWL%}  )  ,%NWL%spinnerClassNames : Ember . computed (  ' color '  ,  ' isBarType '  , function (  )  {%NWL%if ( !this . get (  ' isBarType '  )  )  {%NWL%var color = this . get (  ' color '  )  ; %NWL%0
return function (  )  { if ( !stepping ) setTimeout ( doStep , 0 )  ;  }  ;%NWL%}  (  )  )  ; %NWL%var putFrame = function (  )  {%NWL%ctx . putImageData ( frames [ i ]  . data , 0 , 0 )  ;%NWL%}  ; %NWL%var initToolbar = function (  )  {%NWL%var right =  ' &#9654 ;  '  ; %NWL%var left =  ' &#9664 ;  '  ; %NWL%var bar =  ' &#10073 ;  '  ; %NWL%var rarr =  ' &rarr ;  '  ; %NWL%var larr =  ' &larr ;  '  ; %NWL%9
}  ; %NWL%var initToolbar = function (  )  {%NWL%var right =  ' &#9654 ;  '  ; %NWL%var left =  ' &#9664 ;  '  ; %NWL%var bar =  ' &#10073 ;  '  ; %NWL%var rarr =  ' &rarr ;  '  ; %NWL%var larr =  ' &larr ;  '  ; %NWL%var xsign =  ' &#10006 ;  '  ; %NWL%var circle =  ' &#9675 ;  '  ; %NWL%var circledot =  ' &#8857 ;  '  ; %NWL%var nearr =  ' &nearr ;  '  ; %NWL%5
var e = document . createElement ( tag )  ; %NWL%if ( cls ) e . className =  ' jsgif_ '  + cls ; %NWL%for ( var k in attrs )  {%NWL%e [ k ]  = attrs [ k ]  ;%NWL%}%NWL%return e ;%NWL%}  ; %NWL%var simpleTools = elt (  ' div '  ,  ' simple_tools '  )  ; %NWL%var rev = elt (  ' button '  ,  ' rev '  )  ; %NWL%var showInfo = elt (  ' button '  ,  ' show_info '  )  ; %NWL%var prev = elt (  ' button '  ,  ' prev '  )  ; %NWL%8
for ( var k in attrs )  {%NWL%e [ k ]  = attrs [ k ]  ;%NWL%}%NWL%return e ;%NWL%}  ; %NWL%var simpleTools = elt (  ' div '  ,  ' simple_tools '  )  ; %NWL%var rev = elt (  ' button '  ,  ' rev '  )  ; %NWL%var showInfo = elt (  ' button '  ,  ' show_info '  )  ; %NWL%var prev = elt (  ' button '  ,  ' prev '  )  ; %NWL%var playPause = elt (  ' button '  ,  ' play_pause '  )  ; %NWL%var next = elt (  ' button '  ,  ' next '  )  ; %NWL%6
e [ k ]  = attrs [ k ]  ;%NWL%}%NWL%return e ;%NWL%}  ; %NWL%var simpleTools = elt (  ' div '  ,  ' simple_tools '  )  ; %NWL%var rev = elt (  ' button '  ,  ' rev '  )  ; %NWL%var showInfo = elt (  ' button '  ,  ' show_info '  )  ; %NWL%var prev = elt (  ' button '  ,  ' prev '  )  ; %NWL%var playPause = elt (  ' button '  ,  ' play_pause '  )  ; %NWL%var next = elt (  ' button '  ,  ' next '  )  ; %NWL%var pin = elt (  ' button '  ,  ' pin '  )  ; %NWL%5
}%NWL%return e ;%NWL%}  ; %NWL%var simpleTools = elt (  ' div '  ,  ' simple_tools '  )  ; %NWL%var rev = elt (  ' button '  ,  ' rev '  )  ; %NWL%var showInfo = elt (  ' button '  ,  ' show_info '  )  ; %NWL%var prev = elt (  ' button '  ,  ' prev '  )  ; %NWL%var playPause = elt (  ' button '  ,  ' play_pause '  )  ; %NWL%var next = elt (  ' button '  ,  ' next '  )  ; %NWL%var pin = elt (  ' button '  ,  ' pin '  )  ; %NWL%var close = elt (  ' button '  ,  ' close '  )  ; %NWL%4
img : withProgress ( doImg , true )  ,%NWL%eof : function ( block )  {%NWL%pushFrame (  )  ; %NWL%doDecodeProgress ( false )  ; %NWL%doText (  ' Playing .  .  .  '  )  ; %NWL%doPlay (  )  ;%NWL%}%NWL%}  ; %NWL%var parent = gif . parentNode ; %NWL%var div = document . createElement (  ' div '  )  ; %NWL%var canvas = document . createElement (  ' canvas '  )  ; %NWL%9
if ( this . inputText . length > 0 )  {%NWL%if ( this . includeWhiteSpace )  {%NWL%this . newLine =  " \n "  ;%NWL%} else {%NWL%this . indent =  "  "  ; %NWL%this . newLine =  "  "  ;%NWL%}%NWL%CSVParser . resetLog (  )  ; %NWL%var parseOutput = CSVParser . parse ( this . inputText , this . headersProvided , this . delimiter , this . downcaseHeaders , this . upcaseHeaders )  ; %NWL%var dataGrid = parseOutput . dataGrid ; %NWL%var headerNames = parseOutput . headerNames ; %NWL%9
if ( this . includeWhiteSpace )  {%NWL%this . newLine =  " \n "  ;%NWL%} else {%NWL%this . indent =  "  "  ; %NWL%this . newLine =  "  "  ;%NWL%}%NWL%CSVParser . resetLog (  )  ; %NWL%var parseOutput = CSVParser . parse ( this . inputText , this . headersProvided , this . delimiter , this . downcaseHeaders , this . upcaseHeaders )  ; %NWL%var dataGrid = parseOutput . dataGrid ; %NWL%var headerNames = parseOutput . headerNames ; %NWL%var headerTypes = parseOutput . headerTypes ; %NWL%8
this . newLine =  " \n "  ;%NWL%} else {%NWL%this . indent =  "  "  ; %NWL%this . newLine =  "  "  ;%NWL%}%NWL%CSVParser . resetLog (  )  ; %NWL%var parseOutput = CSVParser . parse ( this . inputText , this . headersProvided , this . delimiter , this . downcaseHeaders , this . upcaseHeaders )  ; %NWL%var dataGrid = parseOutput . dataGrid ; %NWL%var headerNames = parseOutput . headerNames ; %NWL%var headerTypes = parseOutput . headerTypes ; %NWL%var errors = parseOutput . errors ; %NWL%7
}  ; %NWL%layers . Starfield . NUM_LARGE_STARS_ = 256 ; %NWL%layers . Starfield . STAR_DENSITY_ = 32 ; %NWL%layers . Starfield . STAR_TILE_SIZE_ = 1024 ; %NWL%layers . Starfield . STAR_L1_COLOR_ =  ' rgb ( 184 , 184 , 184 )  '  ; %NWL%layers . Starfield . STAR_L2_COLOR_ =  ' rgb ( 96 , 96 , 96 )  '  ; %NWL%layers . Starfield . prototype . render = function ( viewport )  {%NWL%var context = viewport . getContext (  )  ; %NWL%var dimensions = viewport . getDimensions (  )  ; %NWL%var x = dimensions . x ; %NWL%var y = dimensions . y ; %NWL%9
}  ; %NWL%model . Burst . prototype . getCount = function (  )  {%NWL%return this . count_ ;%NWL%}  ; %NWL%model . Burst . prototype . fire = function ( position , commitFireFn )  {%NWL%if ( this . count_ <  = 0 || !commitFireFn ( 0 , this . settings_ [  ' fireDelay '  ]  )  )  {%NWL%return null ;%NWL%}%NWL%-  - this . count_ ; %NWL%var shrapnelCount = this . settings_ [  ' shrapnelCount '  ]  ; %NWL%var lifetime = this . settings_ [  ' lifetime '  ]  ; %NWL%9
model . Burst . prototype . getCount = function (  )  {%NWL%return this . count_ ;%NWL%}  ; %NWL%model . Burst . prototype . fire = function ( position , commitFireFn )  {%NWL%if ( this . count_ <  = 0 || !commitFireFn ( 0 , this . settings_ [  ' fireDelay '  ]  )  )  {%NWL%return null ;%NWL%}%NWL%-  - this . count_ ; %NWL%var shrapnelCount = this . settings_ [  ' shrapnelCount '  ]  ; %NWL%var lifetime = this . settings_ [  ' lifetime '  ]  ; %NWL%var damage = this . settings_ [  ' damage '  ]  ; %NWL%8
' type '  : this . getType (  )  ,%NWL%' pos '  : this . owner_ . getPosition (  )  . toArray (  )  ,%NWL%' vel '  : this . owner_ . getVelocity (  )  . toArray (  )%NWL%}  ;%NWL%}  ; %NWL%model . Burst . prototype . onFired = function ( timeDiff , weaponData )  {%NWL%goog . asserts . assert ( weaponData [  ' type '  ]  =  = this . getType (  )  ,  ' Cannot fire burst with incorrect weapon type :  '  + weaponData [  ' type '  ]  )  ; %NWL%var position = math . Vector . fromArray ( weaponData [  ' pos '  ]  )  ; %NWL%var velocity = math . Vector . fromArray ( weaponData [  ' vel '  ]  )  ; %NWL%var shrapnelCount = this . settings_ [  ' shrapnelCount '  ]  ; %NWL%var lifetime = this . settings_ [  ' lifetime '  ]  ; %NWL%9
' pos '  : this . owner_ . getPosition (  )  . toArray (  )  ,%NWL%' vel '  : this . owner_ . getVelocity (  )  . toArray (  )%NWL%}  ;%NWL%}  ; %NWL%model . Burst . prototype . onFired = function ( timeDiff , weaponData )  {%NWL%goog . asserts . assert ( weaponData [  ' type '  ]  =  = this . getType (  )  ,  ' Cannot fire burst with incorrect weapon type :  '  + weaponData [  ' type '  ]  )  ; %NWL%var position = math . Vector . fromArray ( weaponData [  ' pos '  ]  )  ; %NWL%var velocity = math . Vector . fromArray ( weaponData [  ' vel '  ]  )  ; %NWL%var shrapnelCount = this . settings_ [  ' shrapnelCount '  ]  ; %NWL%var lifetime = this . settings_ [  ' lifetime '  ]  ; %NWL%var damage = this . settings_ [  ' damage '  ]  ; %NWL%8
this . _is_setup = 1 ;%NWL%}  ,%NWL%_setFadeTimer : function ( e , unique_id )  {%NWL%var timer_str =  ( this . _custom_timer ) ? this . _custom_timer : this . time ; %NWL%this [  ' _int_id_ '  + unique_id ]  = setTimeout ( function (  )  {%NWL%Gritter . _fade ( e , unique_id )  ;%NWL%}  , timer_str )  ;%NWL%}  ,%NWL%stop : function ( params )  {%NWL%var before_close =  ( $ . isFunction ( params . before_close )  ) ? params . before_close : function (  )  {  }  ; %NWL%var after_close =  ( $ . isFunction ( params . after_close )  ) ? params . after_close : function (  )  {  }  ; %NWL%9
getter :  {%NWL%x : function (  )  {%NWL%return this . _translateX || 0 ;%NWL%}  ,%NWL%y : function (  )  {%NWL%return this . _translateY || 0 ;%NWL%}  ,%NWL%scale : function (  )  {%NWL%var s =  ( this . scale || " 1 , 1 "  )  . split (  '  ,  '  )  ; %NWL%if ( s [ 0 ]  )  { s [ 0 ]  = parseFloat ( s [ 0 ]  )  ;  }%NWL%if ( s [ 1 ]  )  { s [ 1 ]  = parseFloat ( s [ 1 ]  )  ;  }%NWL%9
}  ,%NWL%scale : function (  )  {%NWL%var s =  ( this . scale || " 1 , 1 "  )  . split (  '  ,  '  )  ; %NWL%if ( s [ 0 ]  )  { s [ 0 ]  = parseFloat ( s [ 0 ]  )  ;  }%NWL%if ( s [ 1 ]  )  { s [ 1 ]  = parseFloat ( s [ 1 ]  )  ;  }%NWL%return ( s [ 0 ]  =  =  = s [ 1 ]  ) ? s [ 0 ]  : s ;%NWL%}  ,%NWL%rotate3d : function (  )  {%NWL%var s =  ( this . rotate3d || " 0 , 0 , 0 , 0deg "  )  . split (  '  ,  '  )  ; %NWL%for ( var i = 0 ; i <  = 3 ;  +  + i )  {%NWL%if ( s [ i ]  )  { s [ i ]  = parseFloat ( s [ i ]  )  ;  }%NWL%3
var codeEls = document . getElementsByTagName (  ' code '  )  ; %NWL%for ( var i = 0 , ii = codeEls . length ; i < ii ; i +  +  )  {%NWL%var codeEl = codeEls [ i ]  ; %NWL%var lang = codeEl . className ; %NWL%codeEl . className =  ' prettyprint lang -  '  + lang ;%NWL%}%NWL%prettyPrint (  )  ;%NWL%}%NWL%var tableEls = document . getElementsByTagName (  ' table '  )  ; %NWL%for ( var i = 0 , ii = tableEls . length ; i < ii ; i +  +  )  {%NWL%var tableEl = tableEls [ i ]  ; %NWL%2
var npcs_scripts_dir = __dirname +  '  /  .  .  / scripts / npcs /  '  ; %NWL%var l10n_dir   = __dirname +  '  /  .  .  / l10n / scripts / npcs /  '  ; %NWL%var Npcs = function (  )  {%NWL%var self = this ; %NWL%self . npcs =  {  }  ; %NWL%self . load_count =  {  }  ; %NWL%self . load = function ( verbose , callback )%NWL%{%NWL%verbose = verbose || false ; %NWL%var log = function ( message )  { if ( verbose ) util . log ( message )  ;  }  ; %NWL%var debug = function ( message )  { if ( verbose ) util . debug ( message )  ;  }  ; %NWL%9
var l10n_dir  = __dirname +  '  /  .  .  / l10n / scripts / rooms /  '  ; %NWL%var rooms_scripts_dir = __dirname +  '  /  .  .  / scripts / rooms /  '  ; %NWL%var Rooms = function (  )  {%NWL%var self = this ; %NWL%self . areas =  {  }  ; %NWL%self . rooms =  {  }  ; %NWL%self . load = function ( verbose , callback )%NWL%{%NWL%verbose = verbose || false ; %NWL%var log = function ( message )  { if ( verbose ) util . log ( message )  ;  }  ; %NWL%var debug = function ( message )  { if ( verbose ) util . debug ( message )  ;  }  ; %NWL%9
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / c9search_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
]%NWL%}  ; %NWL%function initNode ( done )  {%NWL%discoverNode ( sh . appCtx . config )  ; %NWL%done (  )  ;%NWL%}%NWL%function discoverNode ( config )  {%NWL%var hostname = os . hostname (  )  . toLowerCase (  )  ; %NWL%var ips = config . node . ips ; %NWL%var ifaces = os . networkInterfaces (  )  ; %NWL%var addressTypes = config . node . addressTypes ; %NWL%8
}  ; %NWL%function initNode ( done )  {%NWL%discoverNode ( sh . appCtx . config )  ; %NWL%done (  )  ;%NWL%}%NWL%function discoverNode ( config )  {%NWL%var hostname = os . hostname (  )  . toLowerCase (  )  ; %NWL%var ips = config . node . ips ; %NWL%var ifaces = os . networkInterfaces (  )  ; %NWL%var addressTypes = config . node . addressTypes ; %NWL%var interfaces = config . node . interfaces ; %NWL%7
var selEnemy = this . _currentLevel . enemies [ i ]  ; %NWL%if ( selEnemy )  {%NWL%if ( selEnemy . ShowType =  =  " Once "  )  {%NWL%if ( selEnemy . ShowTime =  = deltaTime )  {%NWL%for ( var tIndex = 0 ; tIndex < selEnemy . Types . length ; tIndex +  +  )  {%NWL%this . addEnemyToGameLayer ( selEnemy . Types [ tIndex ]  )  ;%NWL%}%NWL%}%NWL%} else if ( selEnemy . ShowType =  =  " Repeate "  )  {%NWL%if ( deltaTime % selEnemy . ShowTime =  =  = 0 )  {%NWL%for ( var rIndex = 0 ; rIndex < selEnemy . Types . length ; rIndex +  +  )  {%NWL%4
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / less_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
if ( curIndent < expectedIndent )  {%NWL%return ;%NWL%}%NWL%session . outdentRows ( new Range ( row , 0 , row + 2 , 0 )  )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / lua_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / ocaml_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var indent = this . $getIndent ( doc . getLine ( row )  )  ; %NWL%var tab = doc . getTabString (  )  ; %NWL%if ( indent . slice (  - tab . length )  =  = tab )%NWL%doc . remove ( new Range ( row , indent . length - tab . length , row , indent . length )  )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / python_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
var indent = this . $getIndent ( doc . getLine ( row )  )  ; %NWL%var tab = doc . getTabString (  )  ; %NWL%if ( indent . slice (  - tab . length )  =  = tab )%NWL%doc . remove ( new Range ( row , indent . length - tab . length , row , indent . length )  )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / sh_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}%NWL%else {%NWL%doc . indentRows ( startRow , endRow ,  "  -  -  "  )  ;%NWL%}%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / sql_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / tcl_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return range ;%NWL%}%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%oop . inherits ( CstyleBehaviour , Behaviour )  ; %NWL%exports . CstyleBehaviour = CstyleBehaviour ;%NWL%}  )  ; %NWL%define (  ' ace / mode / folding / xml '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / range '  ,  ' ace / mode / folding / fold_mode '  ,  ' ace / token_iterator '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%9
worker . on (  " error "  , function ( e )  {%NWL%session . setAnnotations (  [ e . data ]  )  ;%NWL%}  )  ; %NWL%worker . on (  " ok "  , function ( e )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%worker . on (  " highlight "  , function ( tokens )  {%NWL%var firstRow = 0 ; %NWL%var lastRow = session . getLength (  )  - 1 ; %NWL%var lines = tokens . data . lines ; %NWL%var states = tokens . data . states ; %NWL%9
session . bgTokenizer . states = states ; %NWL%session . bgTokenizer . fireUpdateEvent ( firstRow , lastRow )  ;%NWL%}  )  ; %NWL%return worker ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / xquery_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}  ; %NWL%oop . inherits ( Mode , TextMode )  ;%NWL%( function (  )  {%NWL%this . lineCommentStart =  [  "  -  -  "  ,  " # "  ]  ;  /  / todo space%NWL%this . blockComment =  { start :  "  "  }  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / mysql_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
if ( presenters . length =  = 1 )  {%NWL%var p = presenters [ 0 ]  ; %NWL%html =  [ p . name , p . company ]  . join (  '  < br >  '  )  ; %NWL%var gplus = p . gplus ? '  < span > g +  <  / span >  < a href =  "  '  + p . gplus +%NWL%'  "  >  '  + p . gplus . replace (  / https? : \ / \ /  /  ,  '  '  )  +  '  <  / a >  '  :  '  '  ; %NWL%var twitter = p . twitter ? '  < span > twitter <  / span >  '  +%NWL%'  < a href =  " http :  /  / twitter . com /  '  + p . twitter +  '  "  >  '  +%NWL%p . twitter +  '  <  / a >  '  :  '  '  ; %NWL%var www = p . www ? '  < span > www <  / span >  < a href =  "  '  + p . www +%NWL%'  "  >  '  + p . www . replace (  / https? : \ / \ /  /  ,  '  '  )  +  '  <  / a >  '  :  '  '  ; %NWL%var github = p . github ? '  < span > github <  / span >  < a href =  "  '  + p . github +%NWL%8
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
this . stopLength =  - 1 ; %NWL%this . contents =  '  '  ; %NWL%this . cursorPos = 0 ; %NWL%var id_map_string = this . element . attr (  ' id_map '  )  ; %NWL%if ( id_map_string ) this . id_map = jQuery . parseJSON ( id_map_string )  ; %NWL%this . __create (  )  ; %NWL%this . menu . element . addClass (  ' inlined - autocomplete '  )  ; %NWL%this . updateHidden (  )  ; %NWL%this . options . select = function ( event , ui )  {%NWL%var contents = self . contents ; %NWL%var cursorPos = self . cursorPos ; %NWL%9
}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / ruby_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%6
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%2
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
}  ;%NWL%}%NWL%}%NWL%}  )  ;%NWL%}  ; %NWL%oop . inherits ( XmlBehaviour , Behaviour )  ; %NWL%exports . XmlBehaviour = XmlBehaviour ;%NWL%}  )  ; %NWL%define (  ' ace / mode / folding / xml '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / range '  ,  ' ace / mode / folding / fold_mode '  ,  ' ace / token_iterator '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%9
this . foldingRules = new FoldMode (  )  ;%NWL%}  ; %NWL%oop . inherits ( Mode , TextMode )  ;%NWL%( function (  )  {%NWL%this . lineCommentStart =  "  /  /  "  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / sass_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / scss_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}  , next :  " start "  }  ,%NWL%{ defaultToken :  " comment "  }%NWL%]%NWL%}%NWL%}  ; %NWL%oop . inherits ( SassHighlightRules , ScssHighlightRules )  ; %NWL%exports . SassHighlightRules = SassHighlightRules ;%NWL%}  )  ; %NWL%define (  ' ace / mode / scss_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%define (  ' ace / mode / scad_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
$ ( elem . td )  . toggleClass (  ' recordRow '  +  ( i % 2 )  , true )  . text ( records [ i ]  . toString (  )  )%NWL%)%NWL%)  ;%NWL%}%NWL%}%NWL%$ (  ' #recordstable '  )  . children ( 0 )  . children ( 0 )  . eq ( 1 )  . click (  )  ;%NWL%}%NWL%function displayObjectStoreInfo (  )  {%NWL%var keyPathColText ; %NWL%var keyPath = g_objectstore_info . keyPath ; %NWL%var records = g_objectstore_info . records ; %NWL%9
}  ,%NWL%success : function ( data , status )  {%NWL%data = this . onData ( data )  ; %NWL%this . args . series = this . _splice (  { data : data , series : this . args . series }  )  ; %NWL%this . graph = this . graph || new Rickshaw . Graph ( this . args )  ; %NWL%this . graph . render (  )  ; %NWL%this . onComplete ( this )  ;%NWL%}  ,%NWL%_splice : function ( args )  {%NWL%var data = args . data ; %NWL%var series = args . series ; %NWL%9
throw " series element is not an object :  "  + s ;%NWL%}%NWL%if ( ! ( s . data )  )  {%NWL%throw " series has no data :  "  + JSON . stringify ( s )  ;%NWL%}%NWL%if ( !Array . isArray ( s . data )  )  {%NWL%throw " series data is not an array :  "  + JSON . stringify ( s . data )  ;%NWL%}%NWL%if ( s . data . length > 0 )  {%NWL%var x = s . data [ 0 ]  . x ; %NWL%var y = s . data [ 0 ]  . y ; %NWL%9
y : d . lat ,%NWL%value : d . value%NWL%}  )  ;%NWL%}  )  ; %NWL%this . redraw (  )  ;%NWL%}  ,%NWL%_tilePoint : function ( ctx , coords )  {%NWL%var s = ctx . tilePoint . multiplyBy ( this . options . tileSize )  ; %NWL%var p = this . _map . project ( new L . LatLng ( coords [ 1 ]  , coords [ 0 ]  )  )  ; %NWL%var x = Math . round ( p . x - s . x )  ; %NWL%var y = Math . round ( p . y - s . y )  ; %NWL%9
}  )  ; %NWL%app . get (  '  / app . js '  , function ( req , res )  {%NWL%res . sendfile ( __dirname +  '  / app . js '  )  ;%NWL%}  )  ; %NWL%app . get (  '  / pagination . js '  , function ( req , res )  {%NWL%res . sendfile ( __dirname +  '  / pagination . js '  )  ;%NWL%}  )  ; %NWL%app . get (  '  / search '  , function ( req , res )  {%NWL%var query = req . query [  ' query '  ]  ; %NWL%var offset = req . query [  ' offset '  ]  * 1 ; %NWL%var limit = req . query [  ' limit '  ]  * 1 ; %NWL%9
if ( this . canvas . parentNode )  {%NWL%this . canvas . parentNode . removeChild ( this . canvas )  ;%NWL%}%NWL%}  ; %NWL%RenderContext . prototype . clear = function clear (  )  {%NWL%this . canvas . width = this . canvas . width ; %NWL%this . previousTransforms = null ;%NWL%}  ; %NWL%RenderContext . prototype . renderFrame = function renderFrame ( frameIndex )  {%NWL%var context = this . context ; %NWL%var sourceData = this . sourceData ; %NWL%9
RenderContext . prototype . clear = function clear (  )  {%NWL%this . canvas . width = this . canvas . width ; %NWL%this . previousTransforms = null ;%NWL%}  ; %NWL%RenderContext . prototype . renderFrame = function renderFrame ( frameIndex )  {%NWL%var context = this . context ; %NWL%var sourceData = this . sourceData ; %NWL%var transforms = this . frameData [ frameIndex ]  ; %NWL%var count = transforms . length ; %NWL%var i ; %NWL%var previousTransforms = this . previousTransforms ; %NWL%5
RenderContext . prototype . renderFrame = function renderFrame ( frameIndex )  {%NWL%var context = this . context ; %NWL%var sourceData = this . sourceData ; %NWL%var transforms = this . frameData [ frameIndex ]  ; %NWL%var count = transforms . length ; %NWL%var i ; %NWL%var previousTransforms = this . previousTransforms ; %NWL%if ( previousTransforms )  {%NWL%var frameInfo = sourceData . getFrameInfo ( this . previousFrameIndex )  ; %NWL%var width = frameInfo . width ; %NWL%var height = frameInfo . height ; %NWL%9
gl . clearColor ( 255 , 255 , 255 , 255 )  ; %NWL%gl . clear ( gl . COLOR_BUFFER_BIT )  ;%NWL%}  ; %NWL%RenderContext . prototype . renderFrame = function renderFrame ( frameIndex )  {%NWL%var gl = this . context ; %NWL%var sourceData = this . sourceData ; %NWL%var img = sourceData . img ; %NWL%var transforms = this . frameData [ frameIndex ]  ; %NWL%var count = transforms . length ; %NWL%var i ; %NWL%var program = this . program ; %NWL%5
if ( cluster . isMaster )  {%NWL%for ( var i = 0 ; i < numCPUs ; i +  +  )  {%NWL%cluster . fork (  )  ;%NWL%}%NWL%cluster . on (  ' exit '  , function ( worker , code , signal )  {%NWL%console . log (  ' worker '  + worker . pid +  ' died '  )  ;%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%9
}%NWL%cluster . on (  ' exit '  , function ( worker , code , signal )  {%NWL%console . log (  ' worker '  + worker . pid +  ' died '  )  ;%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var libmysql = require (  ' mysql - libmysqlclient '  )  . createConnectionSync (  )  ; %NWL%var mysql2  = require (  '  .  .  /  .  .  '  )  ; %NWL%var mysql  = require (  ' mysql '  )  ; %NWL%6
cluster . on (  ' exit '  , function ( worker , code , signal )  {%NWL%console . log (  ' worker '  + worker . pid +  ' died '  )  ;%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var libmysql = require (  ' mysql - libmysqlclient '  )  . createConnectionSync (  )  ; %NWL%var mysql2  = require (  '  .  .  /  .  .  '  )  ; %NWL%var mysql  = require (  ' mysql '  )  ; %NWL%var mariasql = require (  ' mariasql '  )  ; %NWL%5
console . log (  ' worker '  + worker . pid +  ' died '  )  ;%NWL%}  )  ; %NWL%return ;%NWL%}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var libmysql = require (  ' mysql - libmysqlclient '  )  . createConnectionSync (  )  ; %NWL%var mysql2  = require (  '  .  .  /  .  .  '  )  ; %NWL%var mysql  = require (  ' mysql '  )  ; %NWL%var mariasql = require (  ' mariasql '  )  ; %NWL%var async  = require (  ' async '  )  ; %NWL%4
return ;%NWL%}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var libmysql = require (  ' mysql - libmysqlclient '  )  . createConnectionSync (  )  ; %NWL%var mysql2  = require (  '  .  .  /  .  .  '  )  ; %NWL%var mysql  = require (  ' mysql '  )  ; %NWL%var mariasql = require (  ' mariasql '  )  ; %NWL%var async  = require (  ' async '  )  ; %NWL%var Mapper  = require (  ' mapper '  )  ; %NWL%var jade  = require (  ' jade '  )  ; %NWL%2
}%NWL%var http  = require (  ' http '  )  ; %NWL%var url   = require (  ' url '  )  ; %NWL%var libmysql = require (  ' mysql - libmysqlclient '  )  . createConnectionSync (  )  ; %NWL%var mysql2  = require (  '  .  .  /  .  .  '  )  ; %NWL%var mysql  = require (  ' mysql '  )  ; %NWL%var mariasql = require (  ' mariasql '  )  ; %NWL%var async  = require (  ' async '  )  ; %NWL%var Mapper  = require (  ' mapper '  )  ; %NWL%var jade  = require (  ' jade '  )  ; %NWL%var fs   = require (  ' fs '  )  ; %NWL%1
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
oop . inherits ( HamlHighlightRules , TextHighlightRules )  ; %NWL%exports . HamlHighlightRules = HamlHighlightRules ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / ruby_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%6
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%2
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
var original = this . sourceMap . originalPositionFor (  {%NWL%source :  '  '  ,%NWL%line : line ,%NWL%column : column%NWL%}  )  ; %NWL%return [ original . line , original . column ]  ;%NWL%}  ; %NWL%VimView . prototype . generatedPosition = function ( line , column )  {%NWL%if ( !this . sourceMap )%NWL%return [ line , column ]  ; %NWL%var generated = this . sourceMap . generatedPositionFor (  {%NWL%0
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / jsx_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%ace . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
exports . typeof =%NWL%exports [  ' type - of '  ]  = function type ( node )  {%NWL%utils . assertPresent ( node ,  ' expression '  )  ; %NWL%return node . nodeName ;%NWL%}  ; %NWL%exports . component = function component ( color , name )  {%NWL%utils . assertColor ( color ,  ' color '  )  ; %NWL%utils . assertString ( name ,  ' name '  )  ; %NWL%var name = name . string%NWL%, unit = unitMap [ name ]%NWL%, type = typeMap [ name ]%NWL%9
el . setAttribute (  ' class '  , clss )  ; %NWL%values . forEach ( function ( item )  {%NWL%el . appendChild ( module . exports . createOption ( item )  )  ;%NWL%}  )  ; %NWL%return el ;%NWL%}  ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / ext / menu_tools / add_editor_menu_options '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / ext / modelist '  ,  ' ace / ext / themelist '  ]  , function ( require , exports , module )  {%NWL%module . exports . addEditorMenuOptions = function addEditorMenuOptions ( editor )  {%NWL%var modelist = require (  '  .  .  / modelist '  )  ; %NWL%var themelist = require (  '  .  .  / themelist '  )  ; %NWL%9
var docHost =  ' 127 . 0 . 0 . 1 '  ; %NWL%var docPort = process . env . DOC_PORT || 8001 ; %NWL%var docUrl =  ' http :  /  /  '  + docHost +  '  :  '  + docPort ; %NWL%function handler ( req , res )  {%NWL%res . sf . reply ( 200 ,  { pet : req . sf . path . petId }  )  ;%NWL%}%NWL%var framework = swagger . Framework (  { basePath : apiUrl }  )  ; %NWL%var api = framework . api ( require (  '  .  .  / spec / resource / index '  )  )  ; %NWL%var resource = api . resource ( require (  '  .  .  / spec / resource / pet '  )  )  ; %NWL%var operation = resource . operation ( require (  '  .  .  / spec / resource / pet . getPetById '  )  , handler )  ; %NWL%var model = api . model ( require (  '  .  .  / spec / model / pet '  )  )  ; %NWL%8
} else {%NWL%req . flash (  ' error '  ,  ' Topic Name is required .  '  )%NWL%res . redirect (  "  / topics "  )  ;%NWL%}%NWL%}  ,%NWL%update : function ( req , res )  {%NWL%var topicName = req . body . name . toLowerCase (  )  ; %NWL%topicName = topicName . replace (  / \s / g ,  " _ "  )  ; %NWL%var keywords = req . body . keywords . split (  "  ,  "  )  ; %NWL%var system =  ( req . body . system =  =  " on "  ) ? true : false ; %NWL%var keep =  ( req . body . keep =  =  " on "  ) ? true : false ; %NWL%9
var express = require (  ' express '  )  ; %NWL%var routes = require (  '  .  / routes '  )  ; %NWL%var widgets = require (  '  .  / routes / widgets '  )  ; %NWL%var cloudExplorer = require (  '  .  / routes / cloudExplorer '  )  ; %NWL%var page = require (  '  .  / routes / page '  )  ; %NWL%var http = require (  ' http '  )  ; %NWL%var path = require (  ' path '  )  ; %NWL%var unifile = require (  ' unifile '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var app = express (  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%0
worker . on (  " terminate "  , function (  )  {%NWL%session . clearAnnotations (  )  ;%NWL%}  )  ; %NWL%return worker ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / css_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}%NWL%}  )  ;%NWL%}%NWL%oop . inherits ( CssBehaviour , CstyleBehaviour )  ; %NWL%exports . CssBehaviour = CssBehaviour ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
goog . dom . classlist . add ( element , element . getAttribute (  ' data - silex - type '  )  +  '  - element '  )  ;%NWL%}  )  ; %NWL%elements = document . querySelectorAll (  '  [ src ]  '  )  ; %NWL%goog . array . forEach ( elements , function ( element )  {%NWL%var src = element . getAttribute (  ' src '  )  ; %NWL%src = silex . utils . BackwardCompat . updateStaticUrl ( src )  ; %NWL%element . setAttribute (  ' src '  , src )  ;%NWL%}  )  ; %NWL%elements = document . querySelectorAll (  '  [ href ]  '  )  ; %NWL%goog . array . forEach ( elements , function ( element )  {%NWL%var href = element . getAttribute (  ' href '  )  ; %NWL%4
return this . $outdent . checkOutdent ( line , input )  ;%NWL%}  ; %NWL%this . autoOutdent = function ( state , doc , row )  {%NWL%this . $outdent . autoOutdent ( doc , row )  ;%NWL%}  ;%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / jsx_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
this . $getIndent = function ( line )  {%NWL%return line . match (  / ^\s *  /  )  [ 0 ]  ;%NWL%}  ;%NWL%}  )  . call ( MatchingBraceOutdent . prototype )  ; %NWL%exports . MatchingBraceOutdent = MatchingBraceOutdent ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / behaviour / cstyle '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / behaviour '  ,  ' ace / token_iterator '  ,  ' ace / lib / lang '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  /  .  .  / lib / oop "  )  ; %NWL%var Behaviour = require (  "  .  .  / behaviour "  )  . Behaviour ; %NWL%var TokenIterator = require (  "  .  .  /  .  .  / token_iterator "  )  . TokenIterator ; %NWL%var lang = require (  "  .  .  /  .  .  / lib / lang "  )  ; %NWL%7
var TextMode = require (  "  .  / text "  )  . Mode ; %NWL%var Tokenizer = require (  "  .  .  / tokenizer "  )  . Tokenizer ; %NWL%var LuceneHighlightRules = require (  "  .  / lucene_highlight_rules "  )  . LuceneHighlightRules ; %NWL%var Mode = function (  )  {%NWL%this . $tokenizer =  new Tokenizer ( new LuceneHighlightRules (  )  . getRules (  )  )  ;%NWL%}  ; %NWL%oop . inherits ( Mode , TextMode )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; __ace_shadowed__ . define (  ' ace / mode / lucene_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
return ;%NWL%}%NWL%if ( value < other . value )  {%NWL%value = other . value ;%NWL%}%NWL%this . _setSlider ( slider , value )  ;%NWL%}  ; %NWL%Exhibit . SliderFacet . slider . prototype . _setDisplays = function ( slider )  {%NWL%var other =  ( slider =  = this . _slider1 ) ? this . _slider2 : this . _slider1 ; %NWL%var min = Math . min ( slider . value , other . value )  ; %NWL%var max = Math . max ( slider . value , other . value )  ; %NWL%9
document . addEventListener (  ' mouseup '  , endDrag ( slider , onMove )  , false )  ;%NWL%}%NWL%e . preventDefault (  )  ; %NWL%return false ;%NWL%}  ;%NWL%}  ; %NWL%var onDragH = function ( e , slider )  {%NWL%var origX = e . screenX ; %NWL%var origLeft = parseInt ( slider . div . style . left )  ; %NWL%var min = slider . min ; %NWL%var max = slider . max ; %NWL%9
slider . div . style . left = newLeft +  ' px '  ; %NWL%setTimeout ( function (  )  { var position = parseInt ( slider . div . style . left )  + slider . offset ; %NWL%slider . value = parseFloat ( Exhibit . Util . round ( position * self . _scaleFactor + self . _maxRange . min , self . _prec )  )  ; %NWL%self . _setDisplays ( slider )  ;  }  , 0 )  ;%NWL%}  ;%NWL%}  ; %NWL%var onDragV = function ( e , slider )  {%NWL%var origY = e . screenY ; %NWL%var origTop = parseInt ( slider . div . style . top )  ; %NWL%var min = slider . min ; %NWL%var max = slider . max ; %NWL%9
return "  "  ;%NWL%} else {%NWL%return this . $getIndent ( line )  ;  /  / Keep whatever indent the previous line has%NWL%}%NWL%}%NWL%}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / pgsql_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / lib / lang '  ,  ' ace / mode / doc_comment_highlight_rules '  ,  ' ace / mode / text_highlight_rules '  ,  ' ace / mode / perl_highlight_rules '  ,  ' ace / mode / python_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var lang = require (  "  .  .  / lib / lang "  )  ; %NWL%9
}  )  . call ( Mode . prototype )  ; %NWL%exports . Mode = Mode ;%NWL%}  )  ; %NWL%__ace_shadowed__ . define (  ' ace / mode / ruby_highlight_rules '  ,  [  ' require '  ,  ' exports '  ,  ' module '  ,  ' ace / lib / oop '  ,  ' ace / mode / text_highlight_rules '  ]  , function ( require , exports , module )  {%NWL%var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%6
var oop = require (  "  .  .  / lib / oop "  )  ; %NWL%var TextHighlightRules = require (  "  .  / text_highlight_rules "  )  . TextHighlightRules ; %NWL%var constantOtherSymbol = exports . constantOtherSymbol =  {%NWL%token :  " constant . other . symbol . ruby "  ,  /  / symbol%NWL%regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%2
regex :  "  [  :  ]  ( ? :  [ A - Za - z_ ] | [ @$ ]  ( ? =  [ a - zA - Z0 - 9_ ]  )  )  [ a - zA - Z0 - 9_ ]  *  [ ! = ? ] ? "%NWL%}  ; %NWL%var qString = exports . qString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%2
regex :  "  [  '  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [  '  ]  "%NWL%}  ; %NWL%var qqString = exports . qqString =  {%NWL%token :  " string "  ,  /  / single line%NWL%regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%2
regex :  '  [  "  ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ " \\\\ ]  )  )  * ? [  "  ]  '%NWL%}  ; %NWL%var tString = exports . tString =  {%NWL%token :  " string "  ,  /  / backtick string%NWL%regex :  "  [ ` ]  ( ? :  ( ? : \\\\ .  ) | ( ? :  [ ^ ' \\\\ ]  )  )  * ? [ ` ]  "%NWL%}  ; %NWL%var constantNumericHex = exports . constantNumericHex =  {%NWL%token :  " constant . numeric "  ,  /  / hex%NWL%regex :  " 0 [ xX ]  [ 0 - 9a - fA - F ]  ( ? :  [ 0 - 9a - fA - F ] |_ ( ? =  [ 0 - 9a - fA - F ]  )  )  * \\b "%NWL%}  ; %NWL%var constantNumericFloat = exports . constantNumericFloat =  {%NWL%2
}  )  ;%NWL%}%NWL%var debuginfo =  {  }%NWL%exports . debuginfo = debuginfo ; %NWL%exports . makeApp = function ( urls , options )  {%NWL%var compiled = urls . map ( function ( pair )  {%NWL%return [ new RegExp ( pair [ 0 ]  )  , pair [ 1 ]  ]  ;%NWL%}  )  ; %NWL%options = options || {  }  ; %NWL%var show_404 =  ( options . show_404 || default_show_404 )  ; %NWL%var show_500 =  ( options . show_500 || default_show_500 )  ; %NWL%9
var easydate = require (  ' easydate '  )  ; %NWL%var eachAsync = require (  ' each - async '  )  ; %NWL%var fsWriteStreamAtomic = require (  ' fs - write - stream - atomic '  )  ; %NWL%var getRes = require (  ' get - res '  )  ; %NWL%var logSymbols = require (  ' log - symbols '  )  ; %NWL%var memoizeAsync = require (  ' memoize - async '  )  ; %NWL%var mkdirp = require (  ' mkdirp '  )  ; %NWL%var rimraf = require (  ' rimraf '  )  ; %NWL%var screenshotStream = require (  ' screenshot - stream '  )  ; %NWL%var viewportList = require (  ' viewport - list '  )  ; %NWL%var protocolify = require (  ' protocolify '  )  ; %NWL%0
var async  = require (  ' async '  )  ; %NWL%var fs = require (  ' fs '  )  ; %NWL%var lutil  = require (  ' lutil '  )  ; %NWL%var path  = require (  ' path '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var acl = require (  ' acl '  )  ; %NWL%var apiKeys = require (  ' apiKeys '  )  ; %NWL%var instruments = require (  ' instruments '  )  ; %NWL%var logger = require (  ' logger '  )  . logger (  ' posting '  )  ; %NWL%var profileManager = require (  ' profileManager '  )  ; %NWL%0
var fs = require (  ' fs '  )  ; %NWL%var lutil  = require (  ' lutil '  )  ; %NWL%var path  = require (  ' path '  )  ; %NWL%var request = require (  ' request '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var acl = require (  ' acl '  )  ; %NWL%var apiKeys = require (  ' apiKeys '  )  ; %NWL%var instruments = require (  ' instruments '  )  ; %NWL%var logger = require (  ' logger '  )  . logger (  ' posting '  )  ; %NWL%var profileManager = require (  ' profileManager '  )  ; %NWL%var servezas = require (  ' servezas '  )  ; %NWL%0
}  )  ; %NWL%if ( !validateFrom ( fromMap , res )  ) return ; %NWL%_ . forEach ( fromMap , function ( froms , service )  {%NWL%fromMap [ service ]  = froms [ 0 ]  ;  /  / Just eliminate the array%NWL%}  )  ; %NWL%if ( toList . length =  =  = 0 ) return res . json (%NWL%lutil . jsonErr (  ' Must include a " to " parameter .  '  )  , 400%NWL%)  ; %NWL%countPosts ( req , type , _ . pluck ( toList ,  ' service '  )  )  ; %NWL%var title = req . param (  ' title '  )  ; %NWL%var body = req . param (  ' body '  )  ; %NWL%9
if ( !validateFrom ( fromMap , res )  ) return ; %NWL%_ . forEach ( fromMap , function ( froms , service )  {%NWL%fromMap [ service ]  = froms [ 0 ]  ;  /  / Just eliminate the array%NWL%}  )  ; %NWL%if ( toList . length =  =  = 0 ) return res . json (%NWL%lutil . jsonErr (  ' Must include a " to " parameter .  '  )  , 400%NWL%)  ; %NWL%countPosts ( req , type , _ . pluck ( toList ,  ' service '  )  )  ; %NWL%var title = req . param (  ' title '  )  ; %NWL%var body = req . param (  ' body '  )  ; %NWL%var url = req . param (  ' url '  )  ; %NWL%8
if ( data . title ) ret . title = data . title ; %NWL%if ( data . caption ) ret . description = strip ( data . caption )  ; %NWL%ret . provider_name =  ' tumblr '  ; %NWL%if ( data . post_url ) ret . provider_url = data . post_url ; %NWL%if ( data . blog_name ) ret . author_name = data . blog_name ; %NWL%return ret ;%NWL%}%NWL%if ( data . type =  =  =  ' link '  )  {%NWL%ret =  { type :  ' link '  }  ; %NWL%ret . title = data . title ; %NWL%if ( data . description ) ret . description = strip ( data . description )  ; %NWL%1
if ( data . description ) ret . description = strip ( data . description )  ; %NWL%ret . url = data . url ; %NWL%ret . provider_name =  ' tumblr '  ; %NWL%if ( data . post_url ) ret . provider_url = data . post_url ; %NWL%if ( data . blog_name ) ret . author_name = data . blog_name ; %NWL%return ret ;%NWL%}%NWL%if ( data . type =  =  =  ' video '  )  {%NWL%ret =  { type :  ' video '  }  ; %NWL%if ( data . title ) ret . title = data . title ; %NWL%if ( data . caption ) ret . description = strip ( data . caption )  ; %NWL%0
. alias (  ' s '  ,  ' service '  )%NWL%. alias (  ' p '  ,  ' sample '  )%NWL%. alias (  ' l '  ,  ' limit '  )%NWL%. alias (  ' a '  ,  ' app '  )%NWL%. describe (  ' s '  ,  ' The service to process '  )%NWL%. describe (  ' p '  ,  ' Set the sample rate , by default not sampled '  )%NWL%. describe (  ' m '  ,  ' The maximum number of profiles to process per service '  )%NWL%. describe (  ' a '  ,  ' Only consider synclets matching the app ID '  )%NWL%. argv ; %NWL%var async = require (  ' async '  )  ; %NWL%var riak = require (  ' riak '  )  ; %NWL%9
. alias (  ' p '  ,  ' sample '  )%NWL%. alias (  ' l '  ,  ' limit '  )%NWL%. alias (  ' a '  ,  ' app '  )%NWL%. describe (  ' s '  ,  ' The service to process '  )%NWL%. describe (  ' p '  ,  ' Set the sample rate , by default not sampled '  )%NWL%. describe (  ' m '  ,  ' The maximum number of profiles to process per service '  )%NWL%. describe (  ' a '  ,  ' Only consider synclets matching the app ID '  )%NWL%. argv ; %NWL%var async = require (  ' async '  )  ; %NWL%var riak = require (  ' riak '  )  ; %NWL%var redis = require (  ' redis '  )  ; %NWL%8
. alias (  ' a '  ,  ' app '  )%NWL%. describe (  ' s '  ,  ' The service to process '  )%NWL%. describe (  ' p '  ,  ' Set the sample rate , by default not sampled '  )%NWL%. describe (  ' m '  ,  ' The maximum number of profiles to process per service '  )%NWL%. describe (  ' a '  ,  ' Only consider synclets matching the app ID '  )%NWL%. argv ; %NWL%var async = require (  ' async '  )  ; %NWL%var riak = require (  ' riak '  )  ; %NWL%var redis = require (  ' redis '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var lconfig = require (  ' lconfig '  )  ; %NWL%6
. describe (  ' p '  ,  ' Set the sample rate , by default not sampled '  )%NWL%. describe (  ' m '  ,  ' The maximum number of profiles to process per service '  )%NWL%. describe (  ' a '  ,  ' Only consider synclets matching the app ID '  )%NWL%. argv ; %NWL%var async = require (  ' async '  )  ; %NWL%var riak = require (  ' riak '  )  ; %NWL%var redis = require (  ' redis '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var lconfig = require (  ' lconfig '  )  ; %NWL%var logger = require (  ' logger '  )  . logger (  ' backlog - breakdown '  )  ; %NWL%var pcron = require (  ' pcron '  )  ; %NWL%4
. describe (  ' m '  ,  ' The maximum number of profiles to process per service '  )%NWL%. describe (  ' a '  ,  ' Only consider synclets matching the app ID '  )%NWL%. argv ; %NWL%var async = require (  ' async '  )  ; %NWL%var riak = require (  ' riak '  )  ; %NWL%var redis = require (  ' redis '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var lconfig = require (  ' lconfig '  )  ; %NWL%var logger = require (  ' logger '  )  . logger (  ' backlog - breakdown '  )  ; %NWL%var pcron = require (  ' pcron '  )  ; %NWL%var profileManager = require (  ' profileManager '  )  ; %NWL%3
. describe (  ' a '  ,  ' Only consider synclets matching the app ID '  )%NWL%. argv ; %NWL%var async = require (  ' async '  )  ; %NWL%var riak = require (  ' riak '  )  ; %NWL%var redis = require (  ' redis '  )  ; %NWL%var _ = require (  ' underscore '  )  ; %NWL%var lconfig = require (  ' lconfig '  )  ; %NWL%var logger = require (  ' logger '  )  . logger (  ' backlog - breakdown '  )  ; %NWL%var pcron = require (  ' pcron '  )  ; %NWL%var profileManager = require (  ' profileManager '  )  ; %NWL%var servezas = require (  ' servezas '  )  ; %NWL%2
var async = require (  ' async '  )  ; %NWL%var program = require (  ' commander '  )  ; %NWL%program%NWL%. usage (  '  [  -  - fix ]  '  )%NWL%. option (  '  -  - fix '  ,  ' write missing config data to the KV - store '  )%NWL%. option (  '  -  - exit - on - error '  ,  ' exit the script as soon as an error is detected '  )%NWL%. option (  '  -  - workers < num >  '  ,  ' select how many workers run at once '  )%NWL%. parse ( process . argv )  ; %NWL%var DEFAULT_WORKERS = 5 ; %NWL%var logger = require (  ' logger '  )  . logger (  ' verify - profile - store '  )  ; %NWL%var profileManager = require (  ' profileManager '  )  ; %NWL%0
var program = require (  ' commander '  )  ; %NWL%program%NWL%. usage (  '  [  -  - fix ]  '  )%NWL%. option (  '  -  - fix '  ,  ' write missing config data to the KV - store '  )%NWL%. option (  '  -  - exit - on - error '  ,  ' exit the script as soon as an error is detected '  )%NWL%. option (  '  -  - workers < num >  '  ,  ' select how many workers run at once '  )%NWL%. parse ( process . argv )  ; %NWL%var DEFAULT_WORKERS = 5 ; %NWL%var logger = require (  ' logger '  )  . logger (  ' verify - profile - store '  )  ; %NWL%var profileManager = require (  ' profileManager '  )  ; %NWL%var dal = require (  ' dal '  )  ; %NWL%9
request . get (  {%NWL%url : host +  '  / proxy /  '  + act +  '  / profile '  ,%NWL%headers : auth ,%NWL%json : true }  ,%NWL%function ( err , resp , profile )  {%NWL%return callback ( err , profile )  ;%NWL%}  )  ;%NWL%}%NWL%exports . run = function ( options , callback )  {%NWL%var appID = options . appID ; %NWL%var hours = options . hours ; %NWL%9
vec3 . add ( t1 , this . halfSize , t2 )  ; %NWL%vec3 . add ( p1 , bhs , p2 )  ; %NWL%return ( Math . max ( p1 [ 0 ]  - bhs [ 0 ]  , t1 [ 0 ]  - this . halfSize [ 0 ]  )  <  = Math . min ( p2 [ 0 ]  , t2 [ 0 ]  ) &&%NWL%Math . max ( p1 [ 1 ]  - bhs [ 1 ]  , t1 [ 1 ]  - this . halfSize [ 1 ]  )  <  = Math . min ( p2 [ 1 ]  , t2 [ 1 ]  ) &&%NWL%Math . max ( p1 [ 2 ]  - bhs [ 2 ]  , t1 [ 2 ]  - this . halfSize [ 2 ]  )  <  = Math . min ( p2 [ 2 ]  , t2 [ 2 ]  )  )  ;%NWL%}  ,%NWL%intersectOBB : function ( b , matrix )  {%NWL%var Pa = bufs . Pa = bufs . Pa || vec3 . create (  )  ,%NWL%Ax = vec3 . UNIT_X , Ay = vec3 . UNIT_Y , Az = vec3 . UNIT_Z ,%NWL%Wa = this . halfSize [ 0 ]  , Ha = this . halfSize [ 1 ]  , Da = this . halfSize [ 2 ]  ; %NWL%var Pb = bufs . Pb = bufs . Pb || vec3 . create (  )  ,%NWL%7
else%NWL%{%NWL%mouse_x = IN . mouse_x ; %NWL%mouse_y = IN . mouse_y ;%NWL%}%NWL%IN . old_mouse_x = IN . mouse_x ; %NWL%IN . old_mouse_y = IN . mouse_y ; %NWL%mouse_x *  = CL . sensitivity . value ; %NWL%mouse_y *  = CL . sensitivity . value ; %NWL%var strafe = CL . kbuttons [ CL . kbutton . strafe ]  . state & 1 ; %NWL%var mlook = CL . kbuttons [ CL . kbutton . mlook ]  . state & 1 ; %NWL%9
return this%NWL%}%NWL%$ ( document )  . on (  ' click . bs . collapse . data - api '  ,  '  [ data - toggle =  " collapse "  ]  '  , function ( e )  {%NWL%var $this  = $ ( this )  , href%NWL%var target  = $this . attr (  ' data - target '  )%NWL%|| e . preventDefault (  )%NWL%|| ( href = $this . attr (  ' href '  )  ) && href . replace (  /  .  *  ( ? = # [ ^\s ]  + $ )  /  ,  '  '  )  /  / strip for ie7%NWL%var $target = $ ( target )%NWL%var data  = $target . data (  ' bs . collapse '  )%NWL%var option  = data ? ' toggle '  : $this . data (  )%NWL%var parent  = $this . attr (  ' data - parent '  )%NWL%4
SUPER . constructor . call ( this , channel , args )  ; %NWL%this . mNearby =  {  }  ; %NWL%var thus = this ; %NWL%Kata . log (  " Connecting to "  + args . space +  " with "  + args . visual +  " from "  + args . creator +  " at "  + args . loc . pos )  ; %NWL%this . connect ( args ,%NWL%args . auth?args . auth : null ,%NWL%function ( presence )  {%NWL%thus . mPresence = presence ; %NWL%if ( args . creator )  {%NWL%var space = args . space ; %NWL%var creator = args . creator ; %NWL%9
var namedReferences = this . _namedReferences ; %NWL%names . forEach ( function ( name )  {%NWL%namedReferences [ name ]  = namedReferences [ name ] || [  ]  ; %NWL%namedReferences [ name ]  . push ( reference )  ;%NWL%}  )  ; %NWL%var deferredService = new DeferredService ( service , this . _internalRegistry . isRegistered . bind ( null , serviceId )  )  ; %NWL%this . _entries . push (  {%NWL%reference : reference ,%NWL%service : deferredService%NWL%}  )  ; %NWL%var internalRegistry = this . _internalRegistry ; %NWL%0
var serviceRegistry = core . serviceRegistry ; %NWL%var preferences = core . preferences ; %NWL%var operationsClient = new mOperationsClient . OperationsClient ( serviceRegistry )  ; %NWL%var statusService = new mStatus . StatusReportingService ( serviceRegistry , operationsClient ,  ' statusPane '  ,  ' notifications '  ,  ' notificationArea '  )  ;  /  / $NON - NLS - 2$ /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%var commandRegistry = new mCommandRegistry . CommandRegistry (  {  }  )  ; %NWL%var progressService = new mProgress . ProgressService ( serviceRegistry , operationsClient , commandRegistry )  ; %NWL%var fileClient = new mFileClient . FileClient ( serviceRegistry )  ; %NWL%var searcher = new mSearchClient . Searcher (  { serviceRegistry : serviceRegistry , commandService : commandRegistry , fileService : fileClient }  )  ; %NWL%mGlobalCommands . generateBanner (  " godoc - searchResults "  , serviceRegistry , commandRegistry , preferences , searcher )  ;  /  / $NON - NLS - 0$%NWL%var primaryNav = document . getElementById (  " primaryNav "  )  ; %NWL%var location = document . getElementById (  " location "  )  ; %NWL%9
var operationsClient = new mOperationsClient . OperationsClient ( serviceRegistry )  ; %NWL%var statusService = new mStatus . StatusReportingService ( serviceRegistry , operationsClient ,  ' statusPane '  ,  ' notifications '  ,  ' notificationArea '  )  ;  /  / $NON - NLS - 2$ /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%var commandRegistry = new mCommandRegistry . CommandRegistry (  {  }  )  ; %NWL%var progressService = new mProgress . ProgressService ( serviceRegistry , operationsClient , commandRegistry )  ; %NWL%var fileClient = new mFileClient . FileClient ( serviceRegistry )  ; %NWL%var searcher = new mSearchClient . Searcher (  { serviceRegistry : serviceRegistry , commandService : commandRegistry , fileService : fileClient }  )  ; %NWL%mGlobalCommands . generateBanner (  " godoc - searchResults "  , serviceRegistry , commandRegistry , preferences , searcher )  ;  /  / $NON - NLS - 0$%NWL%var primaryNav = document . getElementById (  " primaryNav "  )  ; %NWL%var location = document . getElementById (  " location "  )  ; %NWL%location . parentNode . setAttribute (  " style "  ,  " display : inline - block ; text - align : center ;  "  )  ; %NWL%var userMenu = document . getElementById (  " userMenu "  )  ; %NWL%7
var object = _objectReferences [ message . objectId ]  ; %NWL%if ( !object )  {%NWL%_throwError ( message . id ,  " object not found "  )  ;%NWL%}%NWL%if ( !method in object )  {%NWL%_callMethod ( message . id , object , object [ method ]  , params )  ;%NWL%} else {%NWL%_throwError ( message . id ,  " method not found "  )  ;%NWL%}%NWL%} else if (  " requestId " in message )  {%NWL%var request = _requestReferences [ message . requestId ]  ; %NWL%0
_callMethod ( message . id , object , object [ method ]  , params )  ;%NWL%} else {%NWL%_throwError ( message . id ,  " method not found "  )  ;%NWL%}%NWL%} else if (  " requestId " in message )  {%NWL%var request = _requestReferences [ message . requestId ]  ; %NWL%if ( request && method =  =  =  " cancel " && request . cancel )  {%NWL%request . cancel . apply ( request , params )  ;%NWL%}%NWL%} else if (  " responseId " in message )  {%NWL%var response = _responseReferences [ message . responseId ]  ; %NWL%5
' orion / commandRegistry '  ,%NWL%' orion / git / gitPreferenceStorage '  ,%NWL%' orion / git / logic / gitCommon '  ,%NWL%' orion / Deferred '  ,%NWL%' orion / objects '%NWL%]  , function ( messages , mCommandRegistry , GitPreferenceStorage , mGitCommon , Deferred , objects )  {%NWL%var handleGitServiceResponse = mGitCommon . handleGitServiceResponse ; %NWL%var gatherSshCredentials = mGitCommon . gatherSshCredentials ; %NWL%return function ( dependencies )  {%NWL%var serviceRegistry = dependencies . serviceRegistry ; %NWL%var commandService = dependencies . commandService ; %NWL%9
' orion / git / gitPreferenceStorage '  ,%NWL%' orion / git / logic / gitCommon '  ,%NWL%' orion / Deferred '  ,%NWL%' orion / objects '%NWL%]  , function ( messages , mCommandRegistry , GitPreferenceStorage , mGitCommon , Deferred , objects )  {%NWL%var handleGitServiceResponse = mGitCommon . handleGitServiceResponse ; %NWL%var gatherSshCredentials = mGitCommon . gatherSshCredentials ; %NWL%return function ( dependencies )  {%NWL%var serviceRegistry = dependencies . serviceRegistry ; %NWL%var commandService = dependencies . commandService ; %NWL%var tags = dependencies . tags ; %NWL%8
' orion / git / logic / gitCommon '  ,%NWL%' orion / Deferred '  ,%NWL%' orion / objects '%NWL%]  , function ( messages , mCommandRegistry , GitPreferenceStorage , mGitCommon , Deferred , objects )  {%NWL%var handleGitServiceResponse = mGitCommon . handleGitServiceResponse ; %NWL%var gatherSshCredentials = mGitCommon . gatherSshCredentials ; %NWL%return function ( dependencies )  {%NWL%var serviceRegistry = dependencies . serviceRegistry ; %NWL%var commandService = dependencies . commandService ; %NWL%var tags = dependencies . tags ; %NWL%var force = dependencies . force ; %NWL%7
this . updateCommands (  )  ; %NWL%return deferred ;%NWL%}  ,%NWL%isRowSelectable : function (  )  {%NWL%return !!this . selection ;%NWL%}  ,%NWL%refreshSelection : function (  )  {%NWL%}  ,%NWL%updateCommands : function (  )  {%NWL%var root = this . root ; %NWL%var section = this . section ; %NWL%9
var commit = this . commit ; %NWL%var section ; %NWL%function createInfo ( parent , keys , values )  {%NWL%keys = Array . isArray ( keys ) ? keys :  [ keys ]  ; %NWL%values = Array . isArray ( values ) ? values :  [ values ]  ; %NWL%var div = document . createElement (  " div "  )  ;  /  / $NON - NLS - 0$%NWL%for ( var i = 0 ; i < keys . length ; i +  +  )  {%NWL%if ( keys [ i ]  )  {%NWL%div . appendChild ( document . createTextNode ( messages [ keys [ i ]  ]  )  )  ;%NWL%}%NWL%var span = document . createElement (  " span "  )  ;  /  / $NON - NLS - 0$%NWL%5
objects . mixin ( HelpRenderer . prototype ,  {%NWL%getCellElement : function ( col_no , item , tableRow )  {%NWL%if ( col_no ! =  = 0 )  {%NWL%return null ;%NWL%}%NWL%var td = document . createElement (  " td "  )  ;  /  / $NON - NLS - 0$%NWL%td . classList . add (  " navbar - item "  )  ;  /  / $NON - NLS - 0$%NWL%if ( item . selected )  {%NWL%td . classList . add (  " navbar - item - selected "  )  ;  /  / $NON - NLS - 0$%NWL%}%NWL%var span = document . createElement (  " span "  )  ;  /  / $NON - NLS - 0$%NWL%5
var readArgs = Array . prototype . slice . call ( arguments , 1 )  ; %NWL%return this . _maybeLoadWorkspace ( location )  . then ( function ( newLocation )  {%NWL%return fileClient . read . apply ( fileClient ,  [ newLocation ]  . concat ( readArgs )  )  ;%NWL%}  )  ;%NWL%}  ,%NWL%load : function (  )  {%NWL%var fileURI = this . getInput (  )  ; %NWL%if ( !fileURI )  { return ;  }%NWL%var fileClient = this . fileClient ; %NWL%var resource = this . _parsedLocation . resource ; %NWL%var progressService = this . progressService ; %NWL%8
return ;%NWL%}%NWL%if ( this . _autoLoadEnabled )  {%NWL%this . load (  )  ;%NWL%}%NWL%}  ,%NWL%onChanging : function ( e )  {%NWL%if ( !this . _getSaveDiffsEnabled (  )  )  { return ;  }%NWL%var length = this . _unsavedChanges . length ; %NWL%var addedCharCount = e . addedCharCount ; %NWL%var removedCharCount = e . removedCharCount ; %NWL%9
}%NWL%if ( this . _autoLoadEnabled )  {%NWL%this . load (  )  ;%NWL%}%NWL%}  ,%NWL%onChanging : function ( e )  {%NWL%if ( !this . _getSaveDiffsEnabled (  )  )  { return ;  }%NWL%var length = this . _unsavedChanges . length ; %NWL%var addedCharCount = e . addedCharCount ; %NWL%var removedCharCount = e . removedCharCount ; %NWL%var start = e . start ; %NWL%8
this . switcherNode = null ;%NWL%}%NWL%objects . mixin ( Sidebar . prototype ,  {%NWL%defaultViewMode :  " nav "  ,  /  / $NON - NLS - 0$%NWL%show : function (  )  {%NWL%if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%9
}%NWL%objects . mixin ( Sidebar . prototype ,  {%NWL%defaultViewMode :  " nav "  ,  /  / $NON - NLS - 0$%NWL%show : function (  )  {%NWL%if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%8
objects . mixin ( Sidebar . prototype ,  {%NWL%defaultViewMode :  " nav "  ,  /  / $NON - NLS - 0$%NWL%show : function (  )  {%NWL%if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%7
defaultViewMode :  " nav "  ,  /  / $NON - NLS - 0$%NWL%show : function (  )  {%NWL%if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%6
show : function (  )  {%NWL%if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%var parentNode = this . parentNode ; %NWL%5
if ( this . created )  {%NWL%return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%var parentNode = this . parentNode ; %NWL%var progressService = this . progressService ; %NWL%4
return ;%NWL%}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%var parentNode = this . parentNode ; %NWL%var progressService = this . progressService ; %NWL%var selection = this . selection ; %NWL%3
}%NWL%this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%var parentNode = this . parentNode ; %NWL%var progressService = this . progressService ; %NWL%var selection = this . selection ; %NWL%var serviceRegistry = this . serviceRegistry ; %NWL%2
this . created = true ; %NWL%var commandRegistry = this . commandRegistry ; %NWL%var contentTypeRegistry = this . contentTypeRegistry ; %NWL%var fileClient = this . fileClient ; %NWL%var editorInputManager = this . editorInputManager ; %NWL%var outlineService = this . outlineService ; %NWL%var parentNode = this . parentNode ; %NWL%var progressService = this . progressService ; %NWL%var selection = this . selection ; %NWL%var serviceRegistry = this . serviceRegistry ; %NWL%var toolbarNode = this . toolbarNode ; %NWL%1
}  ;%NWL%}%NWL%else%NWL%{%NWL%var VALUE_UNIT =  / ^ - ? ( \d * \ .  ) ?\d +  (  [ a - z ]  + |% ) ?$ / i ; %NWL%var IS_PIXEL =  / \dpx$ / i ; %NWL%var getPixelValue = function ( element , value )  {%NWL%if ( IS_PIXEL . test ( value )  )%NWL%return parseInt ( value , 10 )  +  ' px '  ; %NWL%var style = element . style ; %NWL%var runtimeStyle = element . runtimeStyle ; %NWL%9
var objXml = new XMLHttpRequest (  )  ; %NWL%objXml . open (  " GET "  , file , false )  ;  /  / $NON - NLS - 0$%NWL%objXml . send ( null )  ; %NWL%return objXml . responseText ;%NWL%} catch ( e )  {%NWL%return null ;%NWL%}%NWL%}%NWL%function onLoadSample (  )  {%NWL%var sampleLeft = getFile (  "  .  / standalone / sampleLeft . js "  )  ;  /  / $NON - NLS - 0$%NWL%var sampleRight = getFile (  "  .  / standalone / sampleRight . js "  )  ;  /  / $NON - NLS - 0$%NWL%9
this . categoryTitle = categoryTitle ;%NWL%}%NWL%SettingsListExplorer . prototype = new Explorer (  )  ; %NWL%SettingsListExplorer . prototype . destroy = function (  )  {%NWL%if ( this . renderer )  {%NWL%this . renderer . destroy (  )  ;%NWL%}%NWL%}  ; %NWL%function SettingsList ( options )  {%NWL%var parent = options . parent ; %NWL%var serviceRegistry = options . serviceRegistry ; %NWL%9
}%NWL%SettingsListExplorer . prototype = new Explorer (  )  ; %NWL%SettingsListExplorer . prototype . destroy = function (  )  {%NWL%if ( this . renderer )  {%NWL%this . renderer . destroy (  )  ;%NWL%}%NWL%}  ; %NWL%function SettingsList ( options )  {%NWL%var parent = options . parent ; %NWL%var serviceRegistry = options . serviceRegistry ; %NWL%var settings = options . settings ; %NWL%8
' orion / objects '  ,  /  / $NON - NLS - 0$%NWL%' orion / webui / littlelib '  /  / $NON - NLS - 0$%NWL%]  , function ( messages , LabeledTextfield , LabeledCheckbox , LabeledSelect , mSection , Subsection , commands , objects , lib )  {%NWL%var KEY_MODES =  [%NWL%{ value :  "  "  , label : messages . Default }  ,%NWL%{ value :  " Emacs "  , label :  " Emacs "  }  ,  /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%{ value :  " vi "  , label :  " vi "  }  /  / $NON - NLS - 1$ /  / $NON - NLS - 0$%NWL%]  ; %NWL%var localIndicatorClass =  " setting - local - indicator "  ;  /  / $NON - NLS - 0$%NWL%var on =  " on "  ;  /  / $NON - NLS - 0$%NWL%var off =  " off "  ;  /  / $NON - NLS - 0$%NWL%9
function getCoordinates ( e )  {%NWL%var rect = canvas . getBoundingClientRect (  )  ; %NWL%return {%NWL%x : e . clientX - rect . left ,%NWL%y : e . clientY - rect . top%NWL%}  ;%NWL%}%NWL%function mouseMove ( e )  {%NWL%var coordinates = getCoordinates ( e )  ; %NWL%var x = coordinates . x ; %NWL%var y = coordinates . y ; %NWL%9
var colorButton = document . getElementById (  ' colorButton '  )  ; %NWL%colorButton . themebuilder = this ; %NWL%colorButton . onclick = this . applyColor . bind ( this )  ;%NWL%}%NWL%ThemeBuilder . prototype . drawPicker = drawPicker ; %NWL%var colfld ; %NWL%ThemeBuilder . prototype . colfld = colfld ; %NWL%function mouseDown ( e )  {%NWL%var coordinates = getCoordinates ( e )  ; %NWL%var x = coordinates . x ; %NWL%var y = coordinates . y ; %NWL%9
options . push ( set )  ;%NWL%}%NWL%this . select ( name , styles )  ; %NWL%var picker = document . getElementById (  ' themepicker '  )  ; %NWL%if ( !this . themeSelect )  {%NWL%this . themeSelect = new Select (  {%NWL%options : options ,%NWL%postChange : this . selectTheme . bind ( this )%NWL%}  , picker )  ; %NWL%this . themeSelect . show (  )  ; %NWL%var saver = document . getElementById (  ' themesaver '  )  ; %NWL%3
var namespace = this . path ; %NWL%var consts = require (  ' basis . template . const '  )  ; %NWL%var TYPE_ELEMENT = consts . TYPE_ELEMENT ; %NWL%var TYPE_ATTRIBUTE = consts . TYPE_ATTRIBUTE ; %NWL%var TYPE_ATTRIBUTE_CLASS = consts . TYPE_ATTRIBUTE_CLASS ; %NWL%var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%2
var consts = require (  ' basis . template . const '  )  ; %NWL%var TYPE_ELEMENT = consts . TYPE_ELEMENT ; %NWL%var TYPE_ATTRIBUTE = consts . TYPE_ATTRIBUTE ; %NWL%var TYPE_ATTRIBUTE_CLASS = consts . TYPE_ATTRIBUTE_CLASS ; %NWL%var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%1
var TYPE_ELEMENT = consts . TYPE_ELEMENT ; %NWL%var TYPE_ATTRIBUTE = consts . TYPE_ATTRIBUTE ; %NWL%var TYPE_ATTRIBUTE_CLASS = consts . TYPE_ATTRIBUTE_CLASS ; %NWL%var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%0
var TYPE_ATTRIBUTE = consts . TYPE_ATTRIBUTE ; %NWL%var TYPE_ATTRIBUTE_CLASS = consts . TYPE_ATTRIBUTE_CLASS ; %NWL%var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%0
var TYPE_ATTRIBUTE_CLASS = consts . TYPE_ATTRIBUTE_CLASS ; %NWL%var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%0
var TYPE_ATTRIBUTE_STYLE = consts . TYPE_ATTRIBUTE_STYLE ; %NWL%var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = consts . ELEMENT_ATTRS ; %NWL%0
var TYPE_ATTRIBUTE_EVENT = consts . TYPE_ATTRIBUTE_EVENT ; %NWL%var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = consts . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = consts . ELEMENT_CHILDS ; %NWL%0
var TYPE_TEXT = consts . TYPE_TEXT ; %NWL%var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = consts . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = consts . ELEMENT_CHILDS ; %NWL%var TEXT_VALUE = consts . TEXT_VALUE ; %NWL%0
var TYPE_COMMENT = consts . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = consts . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = consts . ELEMENT_CHILDS ; %NWL%var TEXT_VALUE = consts . TEXT_VALUE ; %NWL%var COMMENT_VALUE = consts . COMMENT_VALUE ; %NWL%0
var TOKEN_TYPE = consts . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = consts . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = consts . ELEMENT_CHILDS ; %NWL%var TEXT_VALUE = consts . TEXT_VALUE ; %NWL%var COMMENT_VALUE = consts . COMMENT_VALUE ; %NWL%var CLASS_BINDING_ENUM = consts . CLASS_BINDING_ENUM ; %NWL%0
var TOKEN_BINDINGS = consts . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = consts . TOKEN_REFS ; %NWL%var ATTR_NAME = consts . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = consts . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = consts . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = consts . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = consts . ELEMENT_CHILDS ; %NWL%var TEXT_VALUE = consts . TEXT_VALUE ; %NWL%var COMMENT_VALUE = consts . COMMENT_VALUE ; %NWL%var CLASS_BINDING_ENUM = consts . CLASS_BINDING_ENUM ; %NWL%var CLASS_BINDING_BOOL = consts . CLASS_BINDING_BOOL ; %NWL%0
var domRef = binding [ 1 ]  ; %NWL%var bindName = binding [ 2 ]  ; %NWL%var nodeBindingProhibited = binding [ 3 ]  ; %NWL%if (  [  ' get '  ,  ' set '  ,  ' templateId_ '  ]  . indexOf ( bindName ) ! =  - 1 )%NWL%{%NWL%basis . dev . warn (  ' binding name ` '  + bindName +  ' ` is prohibited , binding ignored '  )  ; %NWL%continue ;%NWL%}%NWL%var namePart = bindName . split (  '  :  '  )  ; %NWL%var anim = namePart [ 0 ]  =  =  ' anim '  ; %NWL%var l10n = namePart [ 0 ]  =  =  ' l10n '  ; %NWL%9
var namespace = this . path ; %NWL%var window = global ; %NWL%var document = global . document ; %NWL%var arrayFrom = basis . array . from ; %NWL%var domUtils = require (  ' basis . dom '  )  ; %NWL%var eventUtils = require (  ' basis . dom . event '  )  ; %NWL%var cssom = require (  ' basis . cssom '  )  ; %NWL%var createEvent = require (  ' basis . event '  )  . create ; %NWL%var getOffsetParent = require (  ' basis . layout '  )  . getOffsetParent ; %NWL%var getBoundingRect = require (  ' basis . layout '  )  . getBoundingRect ; %NWL%var getViewportRect = require (  ' basis . layout '  )  . getViewportRect ; %NWL%8
var getOffsetParent = require (  ' basis . layout '  )  . getOffsetParent ; %NWL%var getBoundingRect = require (  ' basis . layout '  )  . getBoundingRect ; %NWL%var getViewportRect = require (  ' basis . layout '  )  . getViewportRect ; %NWL%var Node = require (  ' basis . ui '  )  . Node ; %NWL%var templates = require (  ' basis . template '  )  . define ( namespace ,  {%NWL%Popup : resource (  '  .  / templates / popup / Popup . tmpl '  )  ,%NWL%Balloon : resource (  '  .  / templates / popup / Balloon . tmpl '  )  ,%NWL%popupManager : resource (  '  .  / templates / popup / popupManager . tmpl '  )%NWL%}  )  ; %NWL%var LEFT =  ' LEFT '  ; %NWL%var RIGHT =  ' RIGHT '  ; %NWL%9
var getBoundingRect = require (  ' basis . layout '  )  . getBoundingRect ; %NWL%var getViewportRect = require (  ' basis . layout '  )  . getViewportRect ; %NWL%var Node = require (  ' basis . ui '  )  . Node ; %NWL%var templates = require (  ' basis . template '  )  . define ( namespace ,  {%NWL%Popup : resource (  '  .  / templates / popup / Popup . tmpl '  )  ,%NWL%Balloon : resource (  '  .  / templates / popup / Balloon . tmpl '  )  ,%NWL%popupManager : resource (  '  .  / templates / popup / popupManager . tmpl '  )%NWL%}  )  ; %NWL%var LEFT =  ' LEFT '  ; %NWL%var RIGHT =  ' RIGHT '  ; %NWL%var TOP =  ' TOP '  ; %NWL%8
var getViewportRect = require (  ' basis . layout '  )  . getViewportRect ; %NWL%var Node = require (  ' basis . ui '  )  . Node ; %NWL%var templates = require (  ' basis . template '  )  . define ( namespace ,  {%NWL%Popup : resource (  '  .  / templates / popup / Popup . tmpl '  )  ,%NWL%Balloon : resource (  '  .  / templates / popup / Balloon . tmpl '  )  ,%NWL%popupManager : resource (  '  .  / templates / popup / popupManager . tmpl '  )%NWL%}  )  ; %NWL%var LEFT =  ' LEFT '  ; %NWL%var RIGHT =  ' RIGHT '  ; %NWL%var TOP =  ' TOP '  ; %NWL%var BOTTOM =  ' BOTTOM '  ; %NWL%7
var Node = require (  ' basis . ui '  )  . Node ; %NWL%var templates = require (  ' basis . template '  )  . define ( namespace ,  {%NWL%Popup : resource (  '  .  / templates / popup / Popup . tmpl '  )  ,%NWL%Balloon : resource (  '  .  / templates / popup / Balloon . tmpl '  )  ,%NWL%popupManager : resource (  '  .  / templates / popup / popupManager . tmpl '  )%NWL%}  )  ; %NWL%var LEFT =  ' LEFT '  ; %NWL%var RIGHT =  ' RIGHT '  ; %NWL%var TOP =  ' TOP '  ; %NWL%var BOTTOM =  ' BOTTOM '  ; %NWL%var CENTER =  ' CENTER '  ; %NWL%6
calcDimensions : function (  )  {%NWL%if ( this . scrollX )%NWL%{%NWL%var containerWidth = this . element . offsetWidth ; %NWL%var scrollWidth = this . tmpl . scrollElement . scrollWidth ; %NWL%this . maxPositionX = Math . max ( 0 , scrollWidth - containerWidth )  ;%NWL%}%NWL%if ( this . scrollY )%NWL%{%NWL%var containerHeight = this . element . offsetHeight ; %NWL%var scrollHeight = this . tmpl . scrollElement . scrollHeight ; %NWL%4
var backgroundSize = this . $el . css (  ' background - size '  )  ; %NWL%var backgroundAttachment = this . $el . css (  ' background - attachment '  )  ; %NWL%var backgroundPosition = this . $el . css (  ' background - position '  )  . split (  '  '  )  ; %NWL%var parElement = backgroundAttachment =  =  ' fixed ' ? $window : this . $el ; %NWL%var winOffset = parElement . offset (  ) || { left : pageXOffset , top : pageYOffset }  ; %NWL%var winWidth = parElement . innerWidth (  )  ; %NWL%var winHeight = parElement . innerHeight (  )  ; %NWL%if ( backgroundSize =  =  ' cover '  )  {%NWL%var scale = Math . max ( winWidth / this . backgroundWidth , winHeight / this . backgroundHeight )  ; %NWL%var backgroundWidth = this . backgroundWidth * scale ; %NWL%var backgroundHeight = this . backgroundHeight * scale ; %NWL%9
var winOffset = parElement . offset (  ) || { left : pageXOffset , top : pageYOffset }  ; %NWL%var winWidth = parElement . innerWidth (  )  ; %NWL%var winHeight = parElement . innerHeight (  )  ; %NWL%if ( backgroundSize =  =  ' cover '  )  {%NWL%var scale = Math . max ( winWidth / this . backgroundWidth , winHeight / this . backgroundHeight )  ; %NWL%var backgroundWidth = this . backgroundWidth * scale ; %NWL%var backgroundHeight = this . backgroundHeight * scale ;%NWL%}%NWL%else if ( backgroundSize =  =  ' contain '  )  {%NWL%var scale = Math . min ( winWidth / this . backgroundWidth , winHeight / this . backgroundHeight )  ; %NWL%var backgroundWidth = this . backgroundWidth * scale ; %NWL%6
var winWidth = parElement . innerWidth (  )  ; %NWL%var winHeight = parElement . innerHeight (  )  ; %NWL%if ( backgroundSize =  =  ' cover '  )  {%NWL%var scale = Math . max ( winWidth / this . backgroundWidth , winHeight / this . backgroundHeight )  ; %NWL%var backgroundWidth = this . backgroundWidth * scale ; %NWL%var backgroundHeight = this . backgroundHeight * scale ;%NWL%}%NWL%else if ( backgroundSize =  =  ' contain '  )  {%NWL%var scale = Math . min ( winWidth / this . backgroundWidth , winHeight / this . backgroundHeight )  ; %NWL%var backgroundWidth = this . backgroundWidth * scale ; %NWL%var backgroundHeight = this . backgroundHeight * scale ; %NWL%4
next = this . down ( this . _focusedNode , steps , true )  ; %NWL%if ( cellNavigation )  {%NWL%next = this . cell ( next , columnId )  ;%NWL%}%NWL%this . _focusOnNode ( next , false , event )  ; %NWL%event . preventDefault (  )  ;%NWL%}  ; %NWL%var moveFocusUp = Keyboard . moveFocusUp = function ( event )  {%NWL%moveFocusVertical . call ( this , event ,  - 1 )  ;%NWL%}  ; %NWL%var moveFocusDown = Keyboard . moveFocusDown = function ( event )  {%NWL%7
}%NWL%this . _focusOnNode ( next , false , event )  ; %NWL%event . preventDefault (  )  ;%NWL%}  ; %NWL%var moveFocusUp = Keyboard . moveFocusUp = function ( event )  {%NWL%moveFocusVertical . call ( this , event ,  - 1 )  ;%NWL%}  ; %NWL%var moveFocusDown = Keyboard . moveFocusDown = function ( event )  {%NWL%moveFocusVertical . call ( this , event , 1 )  ;%NWL%}  ; %NWL%var moveFocusPageUp = Keyboard . moveFocusPageUp = function ( event )  {%NWL%4
}  ; %NWL%var moveFocusUp = Keyboard . moveFocusUp = function ( event )  {%NWL%moveFocusVertical . call ( this , event ,  - 1 )  ;%NWL%}  ; %NWL%var moveFocusDown = Keyboard . moveFocusDown = function ( event )  {%NWL%moveFocusVertical . call ( this , event , 1 )  ;%NWL%}  ; %NWL%var moveFocusPageUp = Keyboard . moveFocusPageUp = function ( event )  {%NWL%moveFocusVertical . call ( this , event ,  - this . pageSkip )  ;%NWL%}  ; %NWL%var moveFocusPageDown = Keyboard . moveFocusPageDown = function ( event )  {%NWL%1
return ;%NWL%}%NWL%var isHeader = !this . row ( event )  ,  /  / header reports row as undefined%NWL%currentNode = this [  ' _focused '  +  ( isHeader ? ' Header '  :  '  '  )  +  ' Node '  ]  ; %NWL%this . _focusOnNode ( this . right ( currentNode , steps )  , isHeader , event )  ; %NWL%event . preventDefault (  )  ;%NWL%}  ; %NWL%var moveFocusLeft = Keyboard . moveFocusLeft = function ( event )  {%NWL%moveFocusHorizontal . call ( this , event ,  - 1 )  ;%NWL%}  ; %NWL%var moveFocusRight = Keyboard . moveFocusRight = function ( event )  {%NWL%7
( function ( factory )  {%NWL%if ( typeof define =  =  =  " function " && define . amd )  {%NWL%define (  [  " exports "  ,  " module "  ,  "  .  / constants "  ,  "  .  / document - observer "  ,  "  .  / lifecycle "  ,  "  .  / registry "  ,  "  .  / utils "  ,  "  .  / version "  ]  , factory )  ;%NWL%} else if ( typeof exports ! =  =  " undefined " && typeof module ! =  =  " undefined "  )  {%NWL%factory ( exports , module , require (  "  .  / constants "  )  , require (  "  .  / document - observer "  )  , require (  "  .  / lifecycle "  )  , require (  "  .  / registry "  )  , require (  "  .  / utils "  )  , require (  "  .  / version "  )  )  ;%NWL%}%NWL%}  )  ( function ( exports , module , _constants , _documentObserver , _lifecycle , _registry , _utils , _version )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%9
if ( typeof define =  =  =  " function " && define . amd )  {%NWL%define (  [  " exports "  ,  " module "  ,  "  .  / constants "  ,  "  .  / document - observer "  ,  "  .  / lifecycle "  ,  "  .  / registry "  ,  "  .  / utils "  ,  "  .  / version "  ]  , factory )  ;%NWL%} else if ( typeof exports ! =  =  " undefined " && typeof module ! =  =  " undefined "  )  {%NWL%factory ( exports , module , require (  "  .  / constants "  )  , require (  "  .  / document - observer "  )  , require (  "  .  / lifecycle "  )  , require (  "  .  / registry "  )  , require (  "  .  / utils "  )  , require (  "  .  / version "  )  )  ;%NWL%}%NWL%}  )  ( function ( exports , module , _constants , _documentObserver , _lifecycle , _registry , _utils , _version )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%8
factory ( exports , module , require (  "  .  / constants "  )  , require (  "  .  / document - observer "  )  , require (  "  .  / lifecycle "  )  , require (  "  .  / registry "  )  , require (  "  .  / utils "  )  , require (  "  .  / version "  )  )  ;%NWL%}%NWL%}  )  ( function ( exports , module , _constants , _documentObserver , _lifecycle , _registry , _utils , _version )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%var documentObserver = _interopRequire ( _documentObserver )  ; %NWL%var triggerCreated = _lifecycle . triggerCreated ; %NWL%var triggerAttached = _lifecycle . triggerAttached ; %NWL%9
}%NWL%}  )  ( function ( exports , module , _constants , _documentObserver , _lifecycle , _registry , _utils , _version )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%var documentObserver = _interopRequire ( _documentObserver )  ; %NWL%var triggerCreated = _lifecycle . triggerCreated ; %NWL%var triggerAttached = _lifecycle . triggerAttached ; %NWL%var triggerDetached = _lifecycle . triggerDetached ; %NWL%8
}  )  ( function ( exports , module , _constants , _documentObserver , _lifecycle , _registry , _utils , _version )  {%NWL%" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%var documentObserver = _interopRequire ( _documentObserver )  ; %NWL%var triggerCreated = _lifecycle . triggerCreated ; %NWL%var triggerAttached = _lifecycle . triggerAttached ; %NWL%var triggerDetached = _lifecycle . triggerDetached ; %NWL%var triggerAttributeChanged = _lifecycle . triggerAttributeChanged ; %NWL%7
" use strict "  ; %NWL%var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%var documentObserver = _interopRequire ( _documentObserver )  ; %NWL%var triggerCreated = _lifecycle . triggerCreated ; %NWL%var triggerAttached = _lifecycle . triggerAttached ; %NWL%var triggerDetached = _lifecycle . triggerDetached ; %NWL%var triggerAttributeChanged = _lifecycle . triggerAttributeChanged ; %NWL%var initElements = _lifecycle . initElements ; %NWL%6
var _interopRequire = function ( obj )  { return obj && obj . __esModule ? obj [  " default "  ]  : obj ;  }  ; %NWL%var TYPE_ATTRIBUTE = _constants . TYPE_ATTRIBUTE ; %NWL%var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%var documentObserver = _interopRequire ( _documentObserver )  ; %NWL%var triggerCreated = _lifecycle . triggerCreated ; %NWL%var triggerAttached = _lifecycle . triggerAttached ; %NWL%var triggerDetached = _lifecycle . triggerDetached ; %NWL%var triggerAttributeChanged = _lifecycle . triggerAttributeChanged ; %NWL%var initElements = _lifecycle . initElements ; %NWL%var registry = _interopRequire ( _registry )  ; %NWL%4
var TYPE_CLASSNAME = _constants . TYPE_CLASSNAME ; %NWL%var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%var documentObserver = _interopRequire ( _documentObserver )  ; %NWL%var triggerCreated = _lifecycle . triggerCreated ; %NWL%var triggerAttached = _lifecycle . triggerAttached ; %NWL%var triggerDetached = _lifecycle . triggerDetached ; %NWL%var triggerAttributeChanged = _lifecycle . triggerAttributeChanged ; %NWL%var initElements = _lifecycle . initElements ; %NWL%var registry = _interopRequire ( _registry )  ; %NWL%var debounce = _utils . debounce ; %NWL%var inherit = _utils . inherit ; %NWL%9
var TYPE_ELEMENT = _constants . TYPE_ELEMENT ; %NWL%var documentObserver = _interopRequire ( _documentObserver )  ; %NWL%var triggerCreated = _lifecycle . triggerCreated ; %NWL%var triggerAttached = _lifecycle . triggerAttached ; %NWL%var triggerDetached = _lifecycle . triggerDetached ; %NWL%var triggerAttributeChanged = _lifecycle . triggerAttributeChanged ; %NWL%var initElements = _lifecycle . initElements ; %NWL%var registry = _interopRequire ( _registry )  ; %NWL%var debounce = _utils . debounce ; %NWL%var inherit = _utils . inherit ; %NWL%var version = _interopRequire ( _version )  ; %NWL%1
}%NWL%}%NWL%calculateScrollBarSize (  )  ; %NWL%var flow ; %NWL%var ensureReflow = function (  )  {%NWL%flow = reflow (  )  ; %NWL%flow (  )  ;%NWL%}  ; %NWL%ensureReflow (  )  ; %NWL%var calculateFloatContainerPos = calculateFloatContainerPosFn (  )  ; %NWL%var repositionFloatContainer = repositionFloatContainerFn (  )  ; %NWL%9
var at = require (  '  .  .  /  .  .  / ast '  )  . js ; %NWL%var path = require (  ' path '  )  ; %NWL%var l10nContext = require (  '  .  .  / l10n / context . js '  )  ; %NWL%function reldir ( flow , dir )  {%NWL%return path . relative ( flow . options . base , dir )  . replace (  / \\ / g ,  '  /  '  )  +  '  /  '  ;  /  /  [ base ]%NWL%}%NWL%module . exports = function ( file , flow , defineHandler , globalScope )  {%NWL%var fconsole = flow . console ; %NWL%var defList = flow . l10n . defList ; %NWL%var getTokenList = flow . l10n . getTokenList ; %NWL%var paths = flow . l10n . paths ; %NWL%8
var path = require (  ' path '  )  ; %NWL%var l10nContext = require (  '  .  .  / l10n / context . js '  )  ; %NWL%function reldir ( flow , dir )  {%NWL%return path . relative ( flow . options . base , dir )  . replace (  / \\ / g ,  '  /  '  )  +  '  /  '  ;  /  /  [ base ]%NWL%}%NWL%module . exports = function ( file , flow , defineHandler , globalScope )  {%NWL%var fconsole = flow . console ; %NWL%var defList = flow . l10n . defList ; %NWL%var getTokenList = flow . l10n . getTokenList ; %NWL%var paths = flow . l10n . paths ; %NWL%var cultureList = flow . l10n . cultureList ; %NWL%7
temp [ key ]  = clone ( obj [ key ]  )  ;%NWL%}%NWL%}%NWL%return temp ;%NWL%}  ; %NWL%var layer = this . layer =  {%NWL%0 : document . createElement (  " canvas "  )  ,  /  / Background bitmap layer .%NWL%1 : document . createElement (  " canvas "  )  ,  /  / Overlay drawing layer .%NWL%2 : document . createElement (  " canvas "  )  /  / Active drawing layer .%NWL%}  ; %NWL%var layer2d = this . layer2d =  {%NWL%5
0 : document . createElement (  " canvas "  )  ,  /  / Background bitmap layer .%NWL%1 : document . createElement (  " canvas "  )  ,  /  / Overlay drawing layer .%NWL%2 : document . createElement (  " canvas "  )  /  / Active drawing layer .%NWL%}  ; %NWL%var layer2d = this . layer2d =  {%NWL%0 : this . layer [ 0 ]  . getContext (  " 2d "  )  ,  /  / Background ctx .%NWL%1 : this . layer [ 1 ]  . getContext (  " 2d "  )  ,  /  / Overlay drawing ctx .%NWL%2 : this . layer [ 2 ]  . getContext (  " 2d "  )  /  / Active drawing ctx .%NWL%}  ; %NWL%var innerWidth = window . innerWidth ; %NWL%var innerHeight = window . innerHeight ; %NWL%9
, next : function ( event )  {%NWL%var active = this . $menu . find (  '  . active '  )  . removeClass (  ' active '  )%NWL%, next = active . next (  )%NWL%if ( !next . length )  {%NWL%next = $ ( this . $menu . find (  ' li '  )  [ 0 ]  )%NWL%}%NWL%next . addClass (  ' active '  )%NWL%}%NWL%, prev : function ( event )  {%NWL%var active = this . $menu . find (  '  . active '  )  . removeClass (  ' active '  )%NWL%, prev = active . prev (  )%NWL%2
basis . require (  ' basis . template '  )  ; %NWL%var TYPE_ELEMENT = basis . template . TYPE_ELEMENT ; %NWL%var TYPE_ATTRIBUTE = basis . template . TYPE_ATTRIBUTE ; %NWL%var TYPE_TEXT = basis . template . TYPE_TEXT ; %NWL%var TYPE_COMMENT = basis . template . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = basis . template . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = basis . template . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = basis . template . TOKEN_REFS ; %NWL%var ATTR_NAME = basis . template . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = basis . template . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = basis . template . ELEMENT_NAME ; %NWL%1
var TYPE_ELEMENT = basis . template . TYPE_ELEMENT ; %NWL%var TYPE_ATTRIBUTE = basis . template . TYPE_ATTRIBUTE ; %NWL%var TYPE_TEXT = basis . template . TYPE_TEXT ; %NWL%var TYPE_COMMENT = basis . template . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = basis . template . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = basis . template . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = basis . template . TOKEN_REFS ; %NWL%var ATTR_NAME = basis . template . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = basis . template . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = basis . template . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = basis . template . ELEMENT_ATTRS ; %NWL%0
var TYPE_ATTRIBUTE = basis . template . TYPE_ATTRIBUTE ; %NWL%var TYPE_TEXT = basis . template . TYPE_TEXT ; %NWL%var TYPE_COMMENT = basis . template . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = basis . template . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = basis . template . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = basis . template . TOKEN_REFS ; %NWL%var ATTR_NAME = basis . template . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = basis . template . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = basis . template . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = basis . template . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = basis . template . ELEMENT_CHILDS ; %NWL%0
var TYPE_TEXT = basis . template . TYPE_TEXT ; %NWL%var TYPE_COMMENT = basis . template . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = basis . template . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = basis . template . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = basis . template . TOKEN_REFS ; %NWL%var ATTR_NAME = basis . template . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = basis . template . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = basis . template . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = basis . template . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = basis . template . ELEMENT_CHILDS ; %NWL%var TEXT_VALUE = basis . template . TEXT_VALUE ; %NWL%0
var TYPE_COMMENT = basis . template . TYPE_COMMENT ; %NWL%var TOKEN_TYPE = basis . template . TOKEN_TYPE ; %NWL%var TOKEN_BINDINGS = basis . template . TOKEN_BINDINGS ; %NWL%var TOKEN_REFS = basis . template . TOKEN_REFS ; %NWL%var ATTR_NAME = basis . template . ATTR_NAME ; %NWL%var ATTR_NAME_BY_TYPE = basis . template . ATTR_NAME_BY_TYPE ; %NWL%var ELEMENT_NAME = basis . template . ELEMENT_NAME ; %NWL%var ELEMENT_ATTRS = basis . template . ELEMENT_ATTRS ; %NWL%var ELEMENT_CHILDS = basis . template . ELEMENT_CHILDS ; %NWL%var TEXT_VALUE = basis . template . TEXT_VALUE ; %NWL%var COMMENT_VALUE = basis . template . COMMENT_VALUE ; %NWL%0
this . m02_ +  = dx * this . m00_ + dy * this . m01_ ; %NWL%this . m12_ +  = dx * this . m10_ + dy * this . m11_ ; %NWL%return this ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . rotate = function ( theta , x , y )  {%NWL%return this . concatenate (%NWL%goog . graphics . AffineTransform . getRotateInstance ( theta , x , y )  )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . shear = function ( shx , shy )  {%NWL%var m00 = this . m00_ ; %NWL%var m10 = this . m10_ ; %NWL%9
this . m02_ +  = tx . m02_ * m0 + tx . m12_ * m1 ; %NWL%m0 = this . m10_ ; %NWL%m1 = this . m11_ ; %NWL%this . m10_ = tx . m00_ * m0 + tx . m10_ * m1 ; %NWL%this . m11_ = tx . m01_ * m0 + tx . m11_ * m1 ; %NWL%this . m12_ +  = tx . m02_ * m0 + tx . m12_ * m1 ; %NWL%return this ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . preConcatenate = function ( tx )  {%NWL%var m0 = this . m00_ ; %NWL%var m1 = this . m10_ ; %NWL%9
return this . setTransform ( sx , 0 , 0 , sy , 0 , 0 )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . setToTranslation = function ( dx , dy )  {%NWL%return this . setTransform ( 1 , 0 , 0 , 1 , dx , dy )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . setToShear = function ( shx , shy )  {%NWL%return this . setTransform ( 1 , shy , shx , 1 , 0 , 0 )  ;%NWL%}  ; %NWL%goog . graphics . AffineTransform . prototype . setToRotation = function ( theta , x , y )  {%NWL%var cos = Math . cos ( theta )  ; %NWL%var sin = Math . sin ( theta )  ; %NWL%9
if ( this . element_ )  {%NWL%this . element_ . style . color = fill . getColor (  ) || fill . getColor1 (  )  ;%NWL%}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%9
this . element_ . style . color = fill . getColor (  ) || fill . getColor1 (  )  ;%NWL%}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%8
}%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%7
}  ; %NWL%goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%var align = this . align_ ; %NWL%6
goog . graphics . CanvasTextElement . prototype . setStroke = function ( stroke )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . draw = function ( ctx )  {%NWL%}  ; %NWL%goog . graphics . CanvasTextElement . prototype . updateStyle_ = function (  )  {%NWL%var x1 = this . x1_ ; %NWL%var x2 = this . x2_ ; %NWL%var y1 = this . y1_ ; %NWL%var y2 = this . y2_ ; %NWL%var align = this . align_ ; %NWL%var font = this . font_ ; %NWL%5
return goog . locale . resourceRegistry_ [ resourceName ]  [ locale_parts [ 0 ]  ]  ;%NWL%}%NWL%return goog . locale . resourceRegistry_ [ resourceName ]  [  ' en '  ]  ;%NWL%}  ; %NWL%var registerLocalNameConstants = goog . locale . registerLocaleNameConstants ; %NWL%var registerTimeZoneSelectedIds = goog . locale . registerTimeZoneSelectedIds ; %NWL%var registerTimeZoneSelectedShortNames =%NWL%goog . locale . registerTimeZoneSelectedShortNames ; %NWL%var registerTimeZoneSelectedLongNames =%NWL%goog . locale . registerTimeZoneSelectedLongNames ; %NWL%var registerTimeZoneAllLongNames = goog . locale . registerTimeZoneAllLongNames ; %NWL%5
if ( opt_urlFunction )  {%NWL%this . getModuleUrl_ = opt_urlFunction ;%NWL%}%NWL%goog . array . forEach ( this . pendingBeforeInit_ , function ( module )  {%NWL%this . load_ ( module )  ;%NWL%}  , this )  ; %NWL%goog . array . clear ( this . pendingBeforeInit_ )  ;%NWL%}  ; %NWL%goog . module . Loader . prototype . require = function ( module , symbol , callback )  {%NWL%var pending = this . pending_ ; %NWL%var modules = this . modules_ ; %NWL%9
if ( this . urlBase_ )  {%NWL%this . load_ ( module )  ;%NWL%} else {%NWL%this . pendingBeforeInit_ . push ( module )  ;%NWL%}%NWL%}%NWL%}  ; %NWL%goog . module . Loader . prototype . provide = function (%NWL%module , opt_symbol , opt_object )  {%NWL%var modules = this . modules_ ; %NWL%var pending = this . pending_ ; %NWL%9
return item ;%NWL%}  ; %NWL%goog . ui . CharPicker . prototype . setSelectedCategory_ = function ( category ,%NWL%opt_subcategory )  {%NWL%this . category = category ; %NWL%this . menubutton_ . setCaption ( this . data_ . categories [ category ]  )  ; %NWL%while ( this . submenu_ . hasChildren (  )  )  {%NWL%this . submenu_ . removeChildAt ( 0 , true )  . dispose (  )  ;%NWL%}%NWL%var subcategories = this . data_ . subcategories [ category ]  ; %NWL%var charList = this . data_ . charList [ category ]  ; %NWL%9
goog . ui . RoundedTabRenderer . prototype . createCaption = function ( dom , caption )  {%NWL%var baseClass = this . getStructuralCssClass (  )  ; %NWL%return dom . createDom (  ' tr '  , null ,%NWL%dom . createDom (  ' td '  ,  {  ' noWrap '  : true }  ,%NWL%dom . createDom (  ' div '  , goog . getCssName ( baseClass ,  ' caption '  )  ,%NWL%caption )  )  )  ;%NWL%}  ; %NWL%goog . ui . RoundedTabRenderer . prototype . createEdge = function ( dom , isTopEdge )  {%NWL%var baseClass = this . getStructuralCssClass (  )  ; %NWL%var inner = dom . createDom (  ' div '  , goog . getCssName ( baseClass ,  ' inner - edge '  )  )  ; %NWL%var outer = dom . createDom (  ' div '  , goog . getCssName ( baseClass ,  ' outer - edge '  )  )  ; %NWL%9