#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Given our extreme end-to-end settings, our model inevitably suffers from
 a number of limitations.
 First, our model assumes that each and every line contains data assignment
 of some sort, and calculates attention to find the most relevant code line.
 This is difficult to apply to source codes that include conditional statements
 such as if- and for- statements, as the attention cannot consider such
 conditions.
 Also, it cannot cover cases where a buffer overrun is dependent on external
 functions or programs which may be defined in another file and thus not
 taken into input data.
 Although end-to-end settings are convenient and straightforward, this alone
 cannot consider the numerous conditions and syntax rules which form compilable
 source codes.
\end_layout

\begin_layout Standard
Current research on code generation and other program analysis methods using
 deep learning methods mostly incorporate syntax knowledge to the applied
 models.
 Source codes can be reconfigured as abstract syntax trees (AST) which contain
 structural and syntax information of the specific programming language.
 Applying such information to neural network models has proven to be effective
 in solving program-related tasks such as semantic parsing
\begin_inset space \space{}
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "dong16lang"

\end_inset

, API sequence generation
\begin_inset space \space{}
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "gu2016deep"

\end_inset

, and code summarization
\begin_inset space \space{}
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "allamanis2016convolutional"

\end_inset

.
 While adding such syntax information to our solver model may lead to solving
 more complex conditions, this restricts the data to source codes that can
 be successfully parsed with a specific parser, and also opposes to the
 end-to-end settings proposed in our work.
 We leave such settings for future work.
\end_layout

\end_body
\end_document
