#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Code auto-completion, often dubbed as autocomplete, refers to the process
 of predicting a single or a sequence of words when a developer is typing
 computer application's source code.
 The core concept is in fact widely applied to various fields as in search
 engine's query suggestion.
 Typing a single character 'a' for example would produce an array of strings
 like 'air'.
 Software developers these days are generally dependent on this feature
 when they write programs that they do not have to type every single character
 of words.
 The convenience of this auto-competion or intelligent-suggestion functionality
 makes it the most frequetly used feature of integrated development environments
 (IDEs) as shown in the survey conducted on Python developers in 2016 by
 
\begin_inset CommandInset citation
LatexCommand cite
key "jetbrains"

\end_inset

.
 In the study, programmers tend to choose one code editor over another by
 the degree of availability of auto-completion.
 It has become such an integral feature in programming settings these days.
\end_layout

\begin_layout Standard
The technology, meanwhile, relies on predefined rules for determining which
 token to suggest or generate for users.
 This process allows to predict frequently showed tokens based on the record
 of word appearance.
 It, however, often fails reproduce codes that have similar patterns to
 those of previous lines.
 A word or two that starts to have a similar pattern with preceding entire
 sentences can be completed by humans even with the first few words given.
 The traditional approach simply is not equipped with a proper device to
 do this.
 It cannot refer to a developer's programming style, such as how he indents
 or aligns the words, or the arrangement of words, thus is limited in performanc
e.
 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
and thus is an important criterion for users to consider when deciding which
 editor or IDE to use.
 which implemented in most integrated development environments
\begin_inset space \thinspace{}
\end_inset

(IDEs), which are the working platforms of many developers.
 For instance, Visual Studio provides its own IntelliSense features which
 suggests possible function methods and variable names for a given piece
 of source code in programming languages such as Python, C
\begin_inset space \thinspace{}
\end_inset

/
\begin_inset space \thinspace{}
\end_inset

C++, HTML etc.
\begin_inset space \thinspace{}
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "intellisense"

\end_inset

.
 being most exemplary.
 However, while code completion models using ASTs succeed at preserving
 structural information of source codes, they cannot be directly applied
 to real-world code autocompletion tasks where the next token has to be
 predicted from an incomplete piece of code.
 ASTs can be constructed only from structurally complete code, and cannot
 be created when a line is incomplete.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Therefore, we set next-line code autocompletion as a task where a model
 attends to a number of previous lines, extracts relevant information and
 identifiers, and reconfigures them in a similar manner to the previously
 introduced codes.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this work, we introduce a sequence-to-sequence based code auto-completion
 model that predicts an array of subsequent tokens on the fly.
 Comprised of two major steps, the SelectCopy network first selects the
 preceding lines that share the closest sentence structure.
 It then copies the sentence and adjust to make it fit as the rest of the
 sentence to predict.
 Thanks to the copying mechanism, it is not restricted to predicting a single
 token, but all the way up to a single line.
 The model is also able to predict tokens which are not part of the known
 vocabulary which leads to the performance gain even with the relatively
 small size of vocabulary.
 This is effective in end-to-end code-completion task knowing that in reality,
 the words are infinitely many in number and having all those vocabularies
 in advance is impractical.
\end_layout

\begin_layout Standard
In order to make the network learn the codes, we analyzed JavaScript dataset
 [QUOTE NEEDED] to find out that in many cases, an identifier appears again
 in the following ten lines.
 The tendency was shown to be stronger when the application uses libraries
 such as D3.js where a developer is made to create multiple instances of
 object of a similar type.
 We therefore make the model look preceding ten lines of code to selectively
 choose the most relevant line, if any, then generate the next possible
 sentence by reproducing the pattern.
\end_layout

\begin_layout Standard
We then compare our results with other sequence completion models to show
 that SelectCopy network outperforms others in certain aspects.
 The description of how the network copies tokens selectively from both
 previous lines of code and the current incomplete line with adjusted attention
 values does also follow.
\end_layout

\end_body
\end_document
