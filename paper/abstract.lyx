#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Abstract
Source code auto-completion has become an indispensable feature of modern
 code editors along with a multitude of functionalities that are devised
 to help programming.
 In a majority of cases, however, word predictions are done in rather a
 simple look-and-get manner by internally building a dictionary of words
 that previously appeared, often dismissing the similarities of sentences
 which can give a prominent clue to predict subsequent lines.
 In this paper, we exploit such characteristics of source code that nearby
 sentences are prone to share patterns in designing an artificial neural
 network.
 Our proposed model looks at the word-arrangement in previous lines of code
 and selects a particular line to copy in order to generate the source code.
 We show that this novel approach is applicable to various patterns of codebase
 and can suggest a series of words that should most probabilistically appear
 at a given position.
 We also assess the quality of the generated sentences and the model's capabilit
y to handle out-of-vocabulary tokens.
\end_layout

\end_body
\end_document
