#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this work, we proposed a memory network-based model for predicting buffer
 overruns in programming language analysis.
 Our work is the first to apply a deep learning-based approach to a problem
 in the field of program analysis that requires both syntactic and semantic
 knowledge.
 Performance results show that memory networks are superior to other models
 in solving buffer overrun tasks across all difficulty levels.
 We also presented that our model successfully learns the notion of numbers
 and their quantitative comparisons from merely textual data in an end-to-end
 setting.
\end_layout

\begin_layout Standard
Our work has room to improve in many interesting aspects from a software
 engineering perspective.
 As mentioned earlier, source codes preserve much syntactic information
 which can be processed to better understand the structure of programs.
 The use of sophisticated models that take in additional syntactic information
 can lead to better performances.
 Meanwhile, we can expand our model to cover different program analysis
 tasks such as pointer analysis, interval analysis, and flow-sensitivity
 analysis, which share similar semantic natures.
 Applying more sophisticate memory network models that preserve state changes
 can provide solutions to such problems.
 Our knowledge of models learning numerical representations can further
 aid deep learning models compatible with arithmetic and logical reasoning.
 All of these combined, our work marks a stepping stone to a fully data-driven
 program analyzer.
\end_layout

\end_body
\end_document
